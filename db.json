{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":0},{"_id":"source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":0},{"_id":"source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/about-bg-walle.jpg","path":"img/about-bg-walle.jpg","modified":0,"renderable":0},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/blog-desktop.jpg","path":"img/blog-desktop.jpg","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/home-bg-art.jpg","path":"img/home-bg-art.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-geek.jpg","path":"img/home-bg-geek.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/index-bg.jpg","path":"img/index-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/java.jpg","path":"img/java.jpg","modified":0,"renderable":0},{"_id":"source/img/misaka.jpg","path":"img/misaka.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-2015.jpg","path":"img/post-bg-2015.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-alibaba.jpg","path":"img/post-bg-alibaba.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-alitrip.jpg","path":"img/post-bg-alitrip.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-android.jpg","path":"img/post-bg-android.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-apple-event-2015.jpg","path":"img/post-bg-apple-event-2015.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-book.jpg","path":"img/post-bg-book.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-css.jpg","path":"img/post-bg-css.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-dart.jpg","path":"img/post-bg-dart.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-design.jpg","path":"img/post-bg-design.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-digital-native.jpg","path":"img/post-bg-digital-native.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-dreamer.jpg","path":"img/post-bg-dreamer.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-e2e-ux.jpg","path":"img/post-bg-e2e-ux.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-farewell-flash.jpg","path":"img/post-bg-farewell-flash.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-flutter.jpg","path":"img/post-bg-flutter.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-halting.jpg","path":"img/post-bg-halting.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-infinity.jpg","path":"img/post-bg-infinity.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-ios9-web.jpg","path":"img/post-bg-ios9-web.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-js-module.jpg","path":"img/post-bg-js-module.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-js-version.jpg","path":"img/post-bg-js-version.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-kuaidi.jpg","path":"img/post-bg-kuaidi.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-miui-ux.jpg","path":"img/post-bg-miui-ux.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-miui6.jpg","path":"img/post-bg-miui6.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-nextgen-web-pwa.jpg","path":"img/post-bg-nextgen-web-pwa.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-os-metro.jpg","path":"img/post-bg-os-metro.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-re-vs-ng2.jpg","path":"img/post-bg-re-vs-ng2.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-rwd.jpg","path":"img/post-bg-rwd.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-universe.jpg","path":"img/post-bg-universe.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-unix-linux.jpg","path":"img/post-bg-unix-linux.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-web.jpg","path":"img/post-bg-web.jpg","modified":0,"renderable":0},{"_id":"source/img/post-icon-xiulian-01.png","path":"img/post-icon-xiulian-01.png","modified":0,"renderable":0},{"_id":"source/img/post-sample-image.jpg","path":"img/post-sample-image.jpg","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/in-post/image-20150115155321445.png","path":"img/in-post/image-20150115155321445.png","modified":0,"renderable":0},{"_id":"source/img/in-post/image-20200508171835793.png","path":"img/in-post/image-20200508171835793.png","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/about.png","path":"static-page/assets/img/about.png","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/bilibili.png","path":"static-page/assets/img/bilibili.png","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/blob.svg","path":"static-page/assets/img/blob.svg","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/cat.png","path":"static-page/assets/img/cat.png","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/gitee.png","path":"static-page/assets/img/gitee.png","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/portfolio1.jpg","path":"static-page/assets/img/portfolio1.jpg","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/portfolio2.jpg","path":"static-page/assets/img/portfolio2.jpg","modified":0,"renderable":0},{"_id":"source/static-page/assets/img/portfolio3.jpg","path":"static-page/assets/img/portfolio3.jpg","modified":0,"renderable":0},{"_id":"source/static-page/assets/pdf/简历.pdf","path":"static-page/assets/pdf/简历.pdf","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/beian.png","path":"assets/beian.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/dark.css.map","path":"css/dark.css.map","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css.map","path":"css/mobile.css.map","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css.map","path":"css/style.css.map","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/about-bg-walle.jpg","path":"img/about-bg-walle.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/blog-desktop.jpg","path":"img/blog-desktop.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/img/home-bg-art.jpg","path":"img/home-bg-art.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/home-bg-geek.jpg","path":"img/home-bg-geek.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":1},{"_id":"themes/archer/source/img/index-bg.jpg","path":"img/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/java.jpg","path":"img/java.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/misaka.jpg","path":"img/misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-2015.jpg","path":"img/post-bg-2015.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-alibaba.jpg","path":"img/post-bg-alibaba.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-alitrip.jpg","path":"img/post-bg-alitrip.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-android.jpg","path":"img/post-bg-android.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-apple-event-2015.jpg","path":"img/post-bg-apple-event-2015.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-book.jpg","path":"img/post-bg-book.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-css.jpg","path":"img/post-bg-css.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-dart.jpg","path":"img/post-bg-dart.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-design.jpg","path":"img/post-bg-design.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-digital-native.jpg","path":"img/post-bg-digital-native.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-dreamer.jpg","path":"img/post-bg-dreamer.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-e2e-ux.jpg","path":"img/post-bg-e2e-ux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-farewell-flash.jpg","path":"img/post-bg-farewell-flash.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-flutter.jpg","path":"img/post-bg-flutter.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-halting.jpg","path":"img/post-bg-halting.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-infinity.jpg","path":"img/post-bg-infinity.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-ios9-web.jpg","path":"img/post-bg-ios9-web.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-js-module.jpg","path":"img/post-bg-js-module.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-js-version.jpg","path":"img/post-bg-js-version.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-kuaidi.jpg","path":"img/post-bg-kuaidi.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-miui-ux.jpg","path":"img/post-bg-miui-ux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-miui6.jpg","path":"img/post-bg-miui6.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-nextgen-web-pwa.jpg","path":"img/post-bg-nextgen-web-pwa.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-os-metro.jpg","path":"img/post-bg-os-metro.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-re-vs-ng2.jpg","path":"img/post-bg-re-vs-ng2.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-rwd.jpg","path":"img/post-bg-rwd.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-universe.jpg","path":"img/post-bg-universe.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-unix-linux.jpg","path":"img/post-bg-unix-linux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-bg-web.jpg","path":"img/post-bg-web.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/post-sample-image.jpg","path":"img/post-sample-image.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/customFontLoader.js","path":"scripts/customFontLoader.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/customFontLoader.js.map","path":"scripts/customFontLoader.js.map","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js","path":"scripts/dark.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js.map","path":"scripts/dark.js.map","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","path":"scripts/main.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.map","path":"scripts/main.js.map","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","path":"scripts/search.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.map","path":"scripts/search.js.map","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js.map","path":"scripts/share.js.map","modified":0,"renderable":1},{"_id":"themes/archer/source/img/in-post/image-20150115155321445.png","path":"img/in-post/image-20150115155321445.png","modified":0,"renderable":1},{"_id":"themes/archer/source/img/in-post/image-20200508171835793.png","path":"img/in-post/image-20200508171835793.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/donate-alipay.png","path":"assets/donate-alipay.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/donate-wechat.png","path":"assets/donate-wechat.png","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"source/about/index.md","path":"about/index.md","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b808b920fd0b71b3fff54f4e4628eb0e7f901581","modified":1761211217785},{"_id":"source/_posts/2017-01-23-new_start.markdown","hash":"574439b14472194c76c8aec36f7fef594ae97882","modified":1761211217786},{"_id":"source/_posts/2017-02-04-Strategy.markdown","hash":"a3bcd7bf8d55b0f0517b72b0db513a194872c40c","modified":1761211217787},{"_id":"source/_posts/2017-01-24-rxjava_learning_notes.markdown","hash":"aa1fb34b6d439592919895ff8b43cfb663e4d1ff","modified":1761211217786},{"_id":"source/_posts/2017-02-06-annotation.markdown","hash":"2de17e7482434212a28c553d4de591bdc39e2f7b","modified":1761211217787},{"_id":"source/_posts/2017-02-07-observer.markdown","hash":"f2951afa9d891d4c91b00e6b0ecc676d40d77f09","modified":1761211217787},{"_id":"source/_posts/2017-02-08-decorator.markdown","hash":"d54cd448145dc3aa990ef9486760d9145f646e41","modified":1761211217789},{"_id":"source/_posts/2017-02-20-factory.markdown","hash":"0f6ed3d535064e2fe32cd69656c55a9aa603e793","modified":1761211217789},{"_id":"source/_posts/2017-03-08-adapter.markdown","hash":"df3c81fb0d6f102d4a4f2f90daf56af1fe2c60d9","modified":1761211217790},{"_id":"source/_posts/2017-05-19-android_databinding.md","hash":"09bf1600112092e68b770388a05f88a96dfd8fa4","modified":1761211217790},{"_id":"source/_posts/2018-03-15-andorid_exploration_book_read_01.md","hash":"195ae160f53b5db8306b38c189baa2c0f49a412b","modified":1761211217791},{"_id":"source/_posts/2018-03-18-andorid_ipc.md","hash":"92b554c1b95c1349d733e0b9f6977295987bd424","modified":1761211217791},{"_id":"source/_posts/2018-03-19-andorid_view_event.md","hash":"d4d777876e081001dff2cde48431c773b154e859","modified":1761211217791},{"_id":"source/_posts/2018-03-25-andorid_view_working_principle.md","hash":"6a7a9d632d11d50e21e616807950060285df7cd5","modified":1761211217792},{"_id":"source/_posts/2018-04-04-andorid_thread.md","hash":"e4612c5429a7a4cc7eb73cde611043aecdcc32d9","modified":1761211217792},{"_id":"source/_posts/2018-04-19-memory_management.markdown","hash":"3e084785d5ef366d0cdf115a290e97143c9f20a7","modified":1761211217793},{"_id":"source/_posts/2018-05-06-gradle_learning_notes_2.md","hash":"18c4c1c702fca75ba721042b58e25e20a72e1298","modified":1761211217793},{"_id":"source/_posts/2018-05-26-gradle_learning_notes_1.md","hash":"7b301a1a53bf3f9feb838b7589051366b780b06f","modified":1761211217793},{"_id":"source/_posts/2020-04-27-flutter_application.markdown","hash":"cf9a2724c99c7353af8caec57399a9804d9cacc4","modified":1761211217794},{"_id":"source/_posts/2019-10-15-retrofit-and-okHttp.markdown","hash":"c7c919349b0e55d0fca22feba330828a4732c7f4","modified":1761211217794},{"_id":"source/_posts/2020-04-29-book_read_01.markdown","hash":"cf021de91b67859282fb183ba737f56b6d2a8211","modified":1761211217795},{"_id":"source/_posts/2019-10-11-HTTP_The_Definitive_Guide.markdown","hash":"c9bba934b82bd0e5cb28000bfd7c5ed206f9ed97","modified":1761211217794},{"_id":"source/_posts/2020-04-30-dart_basic.md","hash":"26ef77d1a0261ba995cbfd9aea31aa10cf84cd0b","modified":1761211217795},{"_id":"source/_posts/2020-05-22-note_wiki_widget.markdown","hash":"0e8ca6c59202624c42a4501d3b7bffb198f98d91","modified":1761211217796},{"_id":"source/_posts/2020-05-11-flutter_depth.markdown","hash":"de725aebcbd8c5e7c476b664dd046a85bf8bd594","modified":1761211217795},{"_id":"source/_posts/2021-03-25-thinking.markdown","hash":"244dfe2721d872ed163b1de6393b2794cea972ef","modified":1761211217796},{"_id":"source/_posts/2023-02-20-android_preload_review.md","hash":"81f244d9c4a724411d2c0c30527a6e785c83571b","modified":1761211217797},{"_id":"source/about/index.md","hash":"7425134fe749aa6207cc1bc0d603cd82e2acbf17","modified":1761212823315},{"_id":"source/_posts/2024-09-13-program_developer_experience.md","hash":"90485d14b18496dade64e9f95340716662421b2c","modified":1761211217797},{"_id":"source/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1726198693733},{"_id":"source/img/favicon.ico","hash":"b2ea530dc15534069c581e7293a90e76d977d3ff","modified":1726198693734},{"_id":"source/img/blog-desktop.jpg","hash":"060a74380b9e889207186d35e0ee106003459fd9","modified":1726198693734},{"_id":"source/img/home-bg-geek.jpg","hash":"79760dd9fcf9598f32eafa921d6d64b2e25fb03a","modified":1726198693735},{"_id":"source/img/home-bg-o.jpg","hash":"1913754f35f457f09671268baf63a8921318ae32","modified":1726198693735},{"_id":"source/img/home-bg-art.jpg","hash":"ab3c20d91c5924635b6ff51893d88636dfba9709","modified":1726198693735},{"_id":"source/img/post-bg-alibaba.jpg","hash":"415fdb209979e27e168b2801216658477c82df76","modified":1726198693740},{"_id":"source/img/java.jpg","hash":"a8b3b8beb2329fa17070ab049f1aa2ab381b31a4","modified":1726198693738},{"_id":"source/img/post-bg-apple-event-2015.jpg","hash":"28888e02952d9a4711d9762a66a76f5e9b90b52c","modified":1726198693741},{"_id":"source/img/post-bg-android.jpg","hash":"118c59a132aa1ea0c4d2da52111d802291f9c1c2","modified":1726198693741},{"_id":"source/img/post-bg-design.jpg","hash":"11d02ab162d89b4286c77da7c72f2dead9748a0c","modified":1726198693743},{"_id":"source/img/post-bg-dreamer.jpg","hash":"694c43325a64278263f7f3fa80f06cce76100d2c","modified":1726198693744},{"_id":"source/img/post-bg-digital-native.jpg","hash":"3252f472aa32b85d77b9b122cc050b0af074136f","modified":1726198693743},{"_id":"source/img/post-bg-farewell-flash.jpg","hash":"b166a24717ba55ada0bfe998417e3d94ce53b5f9","modified":1726198693744},{"_id":"source/img/post-bg-flutter.jpg","hash":"bb83c7366544067907ef66597a07f558d3b24668","modified":1726198693744},{"_id":"source/img/post-bg-ios9-web.jpg","hash":"c7dfbf9c6cc54522cce8a411a583dd051f9e2001","modified":1726198693745},{"_id":"source/img/post-bg-infinity.jpg","hash":"b6e6a4bfdce06dee659144b2f937946cdb59dea5","modified":1726198693745},{"_id":"source/img/post-bg-js-module.jpg","hash":"ffb9671f899ff5637e57b3450cbbc5a623d65ff0","modified":1726198693745},{"_id":"source/img/post-bg-js-version.jpg","hash":"d47c74c973773a8f9bf93a4bb1d08ee8c3cec92d","modified":1726198693745},{"_id":"source/img/post-bg-miui-ux.jpg","hash":"fad81037a695a7ec0668ee00feac019f05b0d22b","modified":1726198693746},{"_id":"source/img/post-bg-miui6.jpg","hash":"9c2231b88efbc52a9f578007c558ae1c8a114917","modified":1726198693746},{"_id":"source/img/post-bg-kuaidi.jpg","hash":"ce64b8985ddcacd95e503cdde250db1fadbc2002","modified":1726198693746},{"_id":"source/img/post-bg-nextgen-web-pwa.jpg","hash":"951356e5a687126b2b6a8bd9de5e632b89b6e44f","modified":1726198693746},{"_id":"source/img/post-bg-rwd.jpg","hash":"44b54178a961d6e0c3f28453b06f8760400ed93f","modified":1726198693747},{"_id":"source/img/post-icon-xiulian-01.png","hash":"a74f5b9a377c3db985f567e357c3ae0758c1be24","modified":1726210923585},{"_id":"source/img/post-sample-image.jpg","hash":"4c7357bb32bee28c269ff19cae4e88a184dfd7b9","modified":1726198693749},{"_id":"source/img/tag-bg.jpg","hash":"005b999f293d71ce570ad32eb281e6aa6a28482f","modified":1726198693749},{"_id":"source/static-page/index.html","hash":"17e9fa5ea2124cd66ac4e199899f781cb5a2398b","modified":1761211217863},{"_id":"source/static-page/assets/css/swiper-bundle.min.css","hash":"7c0f44c824c001f9bb4de48cb15f6df4b479a54d","modified":1761211217853},{"_id":"source/static-page/assets/img/bilibili.png","hash":"7e4499060b9e27a06a13ff275eaeadda35ef8833","modified":1726198693754},{"_id":"source/static-page/assets/css/styles.css","hash":"9e98b040dd74bcdeed8b2d348f6d0a3a1d26dda3","modified":1761211217852},{"_id":"source/static-page/assets/img/blob.svg","hash":"03ff113c1e5e61e754678b4c11137098eab3a3c9","modified":1761211217858},{"_id":"source/static-page/assets/img/gitee.png","hash":"7f1b5fbe7df07e0a4e57dc060b37838d892504d2","modified":1726198693755},{"_id":"source/static-page/assets/img/portfolio2.jpg","hash":"39b9edc99e069374213c60b81c046341fea0ac7d","modified":1726198693755},{"_id":"source/static-page/assets/img/portfolio1.jpg","hash":"23f4b7a7686579658f4baa7ee15d2e1dc92c625a","modified":1726198693755},{"_id":"source/static-page/assets/pdf/简历.pdf","hash":"5f3a84eaa5825a115354d9bde8603d5a77885931","modified":1726198693756},{"_id":"source/static-page/assets/img/portfolio3.jpg","hash":"601717ee6d9e44ab0f10b43253c6e7d1c105ab9f","modified":1726198693755},{"_id":"source/static-page/assets/js/iconfont.js","hash":"63266f886d5a691da9540bcafc6aaef453660016","modified":1761211217862},{"_id":"source/static-page/assets/js/main.js","hash":"1ed523ef42910715cb5d16f4212a299b69c22f55","modified":1761211217862},{"_id":"source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1726198693749},{"_id":"source/intro/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1726198693750},{"_id":"source/img/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1726198693733},{"_id":"source/img/404-bg.jpg","hash":"d0b39d9359528ab82c62ca148966f054ccdcefe6","modified":1726198693733},{"_id":"source/img/post-bg-alitrip.jpg","hash":"85ed57fcc37b72e63b222bb660dd64a13797d069","modified":1726198693741},{"_id":"source/img/post-bg-dart.jpg","hash":"3fd3b1d5699c6f09540bfead1336d51305b85842","modified":1726198693743},{"_id":"source/img/post-bg-e2e-ux.jpg","hash":"582b0858909926b686da00c87e8dfe1dd34d16c8","modified":1726198693744},{"_id":"source/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1726198693740},{"_id":"source/img/post-bg-halting.jpg","hash":"7c7b48aae338baa6ed8feacd2e4a6101085ac98c","modified":1726198693745},{"_id":"source/img/post-bg-os-metro.jpg","hash":"99ac866d9b175dc291f1a5424615f1115b5fa212","modified":1726198693747},{"_id":"source/img/post-bg-re-vs-ng2.jpg","hash":"37b2997d6c867612ef4f69397dcc61f8ac50b0a0","modified":1726198693747},{"_id":"source/img/post-bg-universe.jpg","hash":"c4211a26db1de13ad0f79279597d1a49f544382a","modified":1726198693748},{"_id":"source/img/post-bg-unix-linux.jpg","hash":"2e7229df40b47937c5a16a6f1230ce173a044ad4","modified":1726198693748},{"_id":"source/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1726198693749},{"_id":"source/img/in-post/image-20150115155321445.png","hash":"b793fa4f666c444c31b2cbe928da9b035c8d4c6a","modified":1726198693737},{"_id":"source/img/in-post/image-20200508171835793.png","hash":"4323e77527988f50fc35f1fbbad6a405c30bd362","modified":1726198693738},{"_id":"source/static-page/assets/img/cat.png","hash":"8a812053fb6247125cfb29e94efe49dff54147d2","modified":1726198693754},{"_id":"source/img/contact-bg.jpg","hash":"2c925277b1d405774a8351d1896b6011049136ae","modified":1726198693734},{"_id":"source/img/post-bg-book.jpg","hash":"5cd7098815eff29e373f485bd8a45092911cee7e","modified":1726198693741},{"_id":"source/static-page/assets/js/swiper-bundle.min.js","hash":"dfd2f1bbec236d2fba682ddf58c2ee056c737e8d","modified":1761211217862},{"_id":"source/intro/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1726198693750},{"_id":"source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1726198693751},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726199143889},{"_id":"source/img/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1726198693738},{"_id":"themes/archer/.babelrc","hash":"afa50eba6e461a2fffa7f7df19ffcc2ffe160c2e","modified":1761211217865},{"_id":"themes/archer/.editorconfig","hash":"5bccaaa5c39bfb2c7f8174853942bcf150023b41","modified":1761211217865},{"_id":"themes/archer/.eslintrc.json","hash":"3f53b2d1eb42d1d221b408159a6d65e34d2c115a","modified":1761211217865},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1726199143877},{"_id":"themes/archer/.gitignore","hash":"703a5c7132f1604d25ccc32233a1d81eb9255ec7","modified":1761211217866},{"_id":"themes/archer/.prettierrc.js","hash":"3a31e8e081b4e1bdd1174f70d89489114095a578","modified":1761211217866},{"_id":"themes/archer/.prettierignore","hash":"f1489a0426112ccd5a243b8ffb84ba8c9311d70f","modified":1761211217866},{"_id":"themes/archer/CHANGELOG.md","hash":"ee786e1fc1a45e4dcb8e523583e0228d6ecaf47a","modified":1761211217867},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1761211217867},{"_id":"themes/archer/_config.yml","hash":"500ce63f8840d2bef5aeafd6d92377a248f3876d","modified":1761212831824},{"_id":"themes/archer/webpack.config.js","hash":"6a614f51527b28f819b09e75a01ef86125c20d56","modified":1761211217993},{"_id":"themes/archer/webpack.dev.js","hash":"9508d5fef1acb87dcc71bf6a228f3f86eb9c6408","modified":1761211217993},{"_id":"themes/archer/webpack.prod.js","hash":"9b036689235595d86394e01bb9e93c77f9d35f36","modified":1761211217993},{"_id":"themes/archer/dev/archer.sh","hash":"9474c501c1c55f47f02cccdd9e2039498ebc5e43","modified":1761211217868},{"_id":"themes/archer/docs/README-en.md","hash":"c00925cd577f6516ec6cef6f7e821a71b1b24932","modified":1761211217869},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"da4015cc672940e4e3891a29a646e334fbdfdeb0","modified":1761211217869},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"57d5cc1b5d1c8754cd2dd2479e0397e248f33189","modified":1761211217869},{"_id":"themes/archer/languages/cn.yml","hash":"77a3a6f64410611ac732d5a3f537d810fcaa60d9","modified":1761211217873},{"_id":"themes/archer/languages/default.yml","hash":"b77f737c29a5ee0e6d93a7f60c15beb725f3215e","modified":1761211217873},{"_id":"themes/archer/languages/en.yml","hash":"8b13dee97086a5458cac2253034297f622691fe5","modified":1761211217874},{"_id":"themes/archer/layout/404.ejs","hash":"a35e0e478ff84592c4a9d129fb24260e3ddc28ee","modified":1761211217874},{"_id":"themes/archer/layout/about.ejs","hash":"79eb9f77fcf72c07f8399bdf571e912c5588c647","modified":1761211217886},{"_id":"themes/archer/layout/index.ejs","hash":"a1a7c1a1ff72e0da39398c6f721239ebcae87e95","modified":1761211217886},{"_id":"themes/archer/layout/layout.ejs","hash":"d074ce5558e3767fcd808d18364e09ea459eac58","modified":1761211217887},{"_id":"themes/archer/layout/post.ejs","hash":"da0905aec25ec3b51d102bb6317278a63bb6fe42","modified":1761211217887},{"_id":"themes/archer/layout/site-meta.ejs","hash":"7a5a65c84cb0573b510f87eff2b812ee05a17041","modified":1761211217887},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"f119abb7e9f594a1516df45520bc45d0c620bdb6","modified":1761211217876},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"d6dca7b2cfb4c7845791390b3b4b84fb22b8ea28","modified":1761213220850},{"_id":"themes/archer/layout/_partial/base-footer-fixed.ejs","hash":"7b0dcbbc1279edc5791d3e62d35c68d60957c55c","modified":1761211217876},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"00ba5800132bc1ea1310ec58969fbe435b829cb6","modified":1761211217877},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"04cb8c1af7c3545671903407015f6addb86bdafa","modified":1761212926898},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"bc33b139a920ed11b72dd7ed348cd30ae06384b9","modified":1761211217877},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"52445702f566f2d75407455fb4724e7469dc4b85","modified":1761211217877},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"f71c0b63297c920bea270a50cc440a06b96e173e","modified":1761211217878},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"f5664d23dda631f3fc8e55619e3fa3786a2f03af","modified":1761211217878},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"01041ec986355b3ca1ed99549cc4571c36579d51","modified":1761211217878},{"_id":"themes/archer/layout/_partial/custom-font.ejs","hash":"50989377be6a0c33d41f430239d758d0ea40d504","modified":1761211217883},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"6ab46ec1bceb58a4bbce50aa0727be36ab81752f","modified":1761211217884},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1761211217891},{"_id":"themes/archer/source/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1726199143896},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1726199143896},{"_id":"themes/archer/source/assets/favicon.ico","hash":"b2ea530dc15534069c581e7293a90e76d977d3ff","modified":1726214205552},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1761211217893},{"_id":"themes/archer/source/css/dark.css","hash":"37d76015b39fb7254fcd45994f3864726b9c9398","modified":1761211217897},{"_id":"themes/archer/source/css/mobile.css","hash":"a3c5cc972292c62f8d2d19b025948ab1b3298b97","modified":1761211217898},{"_id":"themes/archer/source/css/dark.css.map","hash":"dfd65789b96215bed7d9826381c9ef01ab4fa85d","modified":1721460201000},{"_id":"themes/archer/source/css/mobile.css.map","hash":"e14d9b27b189276f6bdc5af8de84ee1b98e9f281","modified":1721460201000},{"_id":"themes/archer/source/css/style.css","hash":"a6f193d8db36ddc60209e9612184d603acd00c7c","modified":1761211217899},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1726199143899},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1726199143899},{"_id":"themes/archer/source/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1726199143901},{"_id":"themes/archer/source/img/blog-desktop.jpg","hash":"060a74380b9e889207186d35e0ee106003459fd9","modified":1726199143902},{"_id":"themes/archer/source/img/favicon.ico","hash":"b2ea530dc15534069c581e7293a90e76d977d3ff","modified":1726199143903},{"_id":"themes/archer/source/img/home-bg-art.jpg","hash":"ab3c20d91c5924635b6ff51893d88636dfba9709","modified":1726199143903},{"_id":"themes/archer/source/img/home-bg-geek.jpg","hash":"79760dd9fcf9598f32eafa921d6d64b2e25fb03a","modified":1726199143903},{"_id":"themes/archer/source/img/home-bg-o.jpg","hash":"1913754f35f457f09671268baf63a8921318ae32","modified":1726199143903},{"_id":"themes/archer/source/img/java.jpg","hash":"a8b3b8beb2329fa17070ab049f1aa2ab381b31a4","modified":1726199143912},{"_id":"themes/archer/source/img/post-bg-alibaba.jpg","hash":"415fdb209979e27e168b2801216658477c82df76","modified":1726199143914},{"_id":"themes/archer/source/img/post-bg-android.jpg","hash":"118c59a132aa1ea0c4d2da52111d802291f9c1c2","modified":1726199143914},{"_id":"themes/archer/source/img/post-bg-apple-event-2015.jpg","hash":"28888e02952d9a4711d9762a66a76f5e9b90b52c","modified":1726199143914},{"_id":"themes/archer/source/img/post-bg-design.jpg","hash":"11d02ab162d89b4286c77da7c72f2dead9748a0c","modified":1726199143917},{"_id":"themes/archer/source/img/post-bg-digital-native.jpg","hash":"3252f472aa32b85d77b9b122cc050b0af074136f","modified":1726199143917},{"_id":"themes/archer/source/img/post-bg-dreamer.jpg","hash":"694c43325a64278263f7f3fa80f06cce76100d2c","modified":1726199143918},{"_id":"themes/archer/source/img/post-bg-farewell-flash.jpg","hash":"b166a24717ba55ada0bfe998417e3d94ce53b5f9","modified":1726199143918},{"_id":"themes/archer/source/img/post-bg-flutter.jpg","hash":"bb83c7366544067907ef66597a07f558d3b24668","modified":1726199143918},{"_id":"themes/archer/source/img/post-bg-infinity.jpg","hash":"b6e6a4bfdce06dee659144b2f937946cdb59dea5","modified":1726199143919},{"_id":"themes/archer/source/img/post-bg-ios9-web.jpg","hash":"c7dfbf9c6cc54522cce8a411a583dd051f9e2001","modified":1726199143919},{"_id":"themes/archer/source/img/post-bg-js-module.jpg","hash":"ffb9671f899ff5637e57b3450cbbc5a623d65ff0","modified":1726199143919},{"_id":"themes/archer/source/img/post-bg-js-version.jpg","hash":"d47c74c973773a8f9bf93a4bb1d08ee8c3cec92d","modified":1726199143919},{"_id":"themes/archer/source/img/post-bg-kuaidi.jpg","hash":"ce64b8985ddcacd95e503cdde250db1fadbc2002","modified":1726199143920},{"_id":"themes/archer/source/img/post-bg-miui-ux.jpg","hash":"fad81037a695a7ec0668ee00feac019f05b0d22b","modified":1726199143920},{"_id":"themes/archer/source/img/post-bg-miui6.jpg","hash":"9c2231b88efbc52a9f578007c558ae1c8a114917","modified":1726199143920},{"_id":"themes/archer/source/img/post-bg-nextgen-web-pwa.jpg","hash":"951356e5a687126b2b6a8bd9de5e632b89b6e44f","modified":1726199143920},{"_id":"themes/archer/source/img/post-bg-rwd.jpg","hash":"44b54178a961d6e0c3f28453b06f8760400ed93f","modified":1726199143921},{"_id":"themes/archer/source/img/post-sample-image.jpg","hash":"4c7357bb32bee28c269ff19cae4e88a184dfd7b9","modified":1726199143922},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"03f379e646bdedbbbcc53c634d7e0039519cb0ad","modified":1761211217950},{"_id":"themes/archer/source/scripts/dark.js","hash":"58341fb9556c42bec4f1dde2172e29ba4fecc1f4","modified":1761211217951},{"_id":"themes/archer/source/scripts/customFontLoader.js","hash":"748039f47dfa1a417e3b400694532844177cb115","modified":1761211217951},{"_id":"themes/archer/source/img/tag-bg.jpg","hash":"005b999f293d71ce570ad32eb281e6aa6a28482f","modified":1726199143923},{"_id":"themes/archer/source/scripts/dark.js.map","hash":"0b97f8316d71c449b160df1f04e089b4f33d8d88","modified":1726199143926},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","hash":"821bf670591761f55c867aa192e12a7d841dde18","modified":1761211217956},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","hash":"d95a4b6c0d1783298f33b19291f9798cdeeca801","modified":1761211217961},{"_id":"themes/archer/src/js/browser.js","hash":"1c2672917d07adc8e74c065264a520e081154191","modified":1761211217967},{"_id":"themes/archer/src/js/dark.js","hash":"84067bee320105a993f565b9e1bd56226b6c56a0","modified":1761211217968},{"_id":"themes/archer/src/js/customFontLoader.js","hash":"3375f23f3468a1d8a1728e466206a72f5b99129f","modified":1761211217967},{"_id":"themes/archer/src/js/fancybox.js","hash":"2907a27a3ba897cfc7c3ab3dd7bc6a3e8a7c504c","modified":1761211217969},{"_id":"themes/archer/src/js/fontawsome.js","hash":"5694c5c42a3990c034dcb2ed9baf73264805b039","modified":1761211217969},{"_id":"themes/archer/src/js/init.js","hash":"f220890558c9348ec49f4db302e71e8b30f8d228","modified":1761211217970},{"_id":"themes/archer/src/js/initSidebar.js","hash":"309221f3badeb9eedaf108b91b3d7061e207b656","modified":1761211217970},{"_id":"themes/archer/src/js/main.js","hash":"5a7cb8f16b1562fec14bb65bb5f95ec686fd59d6","modified":1761211217971},{"_id":"themes/archer/src/js/mobile.js","hash":"0cd19875cc0aa651558e9c2783bb93f850810247","modified":1761211217971},{"_id":"themes/archer/src/js/scroll.js","hash":"204f273c4623daaf3f74d743c2228f8032f07b65","modified":1761211217971},{"_id":"themes/archer/src/js/share.js","hash":"eddf494051e1989636b384eca24008fa206e3fff","modified":1761211217973},{"_id":"themes/archer/src/js/search.js","hash":"dd82aa564f4a3322081f8532e377b33df000ba26","modified":1761211217973},{"_id":"themes/archer/src/js/sidebar.js","hash":"fcd110c73662ee4cccd2b0873e095309a365d2ec","modified":1761211217973},{"_id":"themes/archer/src/js/tag.js","hash":"32eecd7cd9e6ff3c60b71abcd58874953b5861fd","modified":1761211217973},{"_id":"themes/archer/src/js/toc.js","hash":"cd0da0b02f6acfb26810d14dea941f2cf8699b29","modified":1761211217974},{"_id":"themes/archer/src/scss/_common.scss","hash":"d5ac6df18ba0bed9fae2a7c0858c2dcc5f497904","modified":1761211217976},{"_id":"themes/archer/src/js/util.js","hash":"acfd95a681811035788c43d500bdde8fda291950","modified":1761211217974},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"ede5b572a3a29fd01902b1947057508441bc1a7e","modified":1761211217981},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"fb6a1349bab25b65cf89b47e136d958d10947533","modified":1761211217984},{"_id":"themes/archer/src/scss/_variables.scss","hash":"a17af63bc3a8c2bfc874e089b3e7ae394fce0c8a","modified":1761211217992},{"_id":"themes/archer/src/scss/dark.scss","hash":"6a0d9d0471aaac89e3065b9ae07046cda5dbc951","modified":1761211217992},{"_id":"themes/archer/src/scss/mobile.scss","hash":"46b9d2f0d95deef66e29f6f717fbd8bc25e7676f","modified":1761211217993},{"_id":"themes/archer/src/scss/style.scss","hash":"5ceb1d01318f448f5cccd9095ca4e2ffb3905c4c","modified":1761211217993},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"bc8c84aff78f44b22742f39456329349b08de095","modified":1761211217878},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"f1a2f9b8d70364fa1e763a4dd3ff4849e74c466e","modified":1761211217880},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"b72cfdc27aee4d9d6ea2b1c1d78bab53c2896cdb","modified":1761211217880},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"2cbbef8a3c116a0ac3aaf75b2461da5a8b6f2115","modified":1761211217881},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"a9d7e30c8608384f6153867640ddf0aa98dd0d9d","modified":1761211217881},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"549234f57d0325097e31b3901a3d3048cd416f04","modified":1761211217881},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"20833f3e512dbb71a865300b9eeda857807c8130","modified":1761211217882},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"024497e508a8520413861aa6aed63e1bc14c423b","modified":1761211217882},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"a58002188ba83c8b1762dda67cb6446444797450","modified":1761211217883},{"_id":"themes/archer/layout/_partial/math/mathjax.ejs","hash":"ffc6fd8b3bab595a469f65c0e7b20af90a64a0d8","modified":1761211217884},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"245943b4153047c9efb874c4c27e88fd9ed3c341","modified":1761211217884},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"84c9747859051f5df7843ad704f8fac6c3021847","modified":1761211217885},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"99c5085d444e424a5b6d0c60daf08f9dce34936b","modified":1761211217885},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4f7435a628ca24d479f39d6dfebe566bbdbbf15b","modified":1761211217886},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"70777bd8b377056679dde72718aadd4663bfde1a","modified":1761211217886},{"_id":"themes/archer/src/scss/_dark/_common-dark.scss","hash":"d768ff4ded26f321a73e425748400779659f51b6","modified":1761211217976},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"b5eaa29de016b5c7838a5791198bcc6003385b65","modified":1761211217984},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"a8bb2d960f50f753c67ee796b9c0ee8f9d86d646","modified":1761211217984},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"e6a7d069ca4430e701b919588c976b76ca0a88b1","modified":1761211217985},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"dc4c0713b06fd27a7b16dcdb62bd48aef52adfbc","modified":1761211217988},{"_id":"themes/archer/src/scss/_dark/_partial/_algolia-dark.scss","hash":"5db76b33d59fe94faa6909057842be3d15a66967","modified":1761211217977},{"_id":"themes/archer/src/scss/_dark/_partial/_post-page-dark.scss","hash":"8f30799613a40a55edfea2c90e525fb356099813","modified":1761211217979},{"_id":"themes/archer/src/scss/_dark/_partial/_index-page-dark.scss","hash":"fe31715d8ab240e9207bb907786854badfdd1e72","modified":1761211217977},{"_id":"themes/archer/src/scss/_mobile/_partial/_index-page-mobile.scss","hash":"b8af32962b11463b5f94891aa1d7de9ae95a68cf","modified":1761211217982},{"_id":"themes/archer/src/scss/_partial/_comment/_gitalk.scss","hash":"846893051295b8b66301b31274f0c787cc32cc0a","modified":1761211217985},{"_id":"themes/archer/src/scss/_partial/_partial/_footer-fixed.scss","hash":"f19b396b9583da2f6f440c06ed91989e0802243f","modified":1761211217986},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"0e27384366412a4da56ece046cc9e7530abf679d","modified":1761211217987},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"807e053de2d37306704da698e8ba362338d43a1b","modified":1761211217987},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"1e4510959f51b5d4d3c5781468c77d25546ce905","modified":1761211217988},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"04f57efb3c9a586dfba742fe63606ebac98d936a","modified":1761211217988},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"7817c832bd02257f2aef81fd848e23a70eb885e0","modified":1761211217988},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"5b172a7cfcac41af82643caeb26e16d767c5acf4","modified":1761211217989},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"32ef36e1b2fc298323ea09f2b7ffce3be175d58d","modified":1761211217987},{"_id":"themes/archer/src/scss/_partial/_post/_writing-enhance.scss","hash":"12f52673d487c720a8ea49a31db5a37630e5b33f","modified":1761211217989},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"f97ea429dcb4d371cecf34c9c8f7d3a40fc11e11","modified":1761211217991},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"f440f0f233e4669a8c06712827f369e3e5330bd0","modified":1761211217991},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"3ecc4abc4de9a3f134e8c032d46e7562afab6916","modified":1761211217992},{"_id":"themes/archer/src/scss/_dark/_partial/_comment/_gitalk-dark.scss","hash":"979ed66ccce5e1b02b7c5b73d80f211c0abde0f1","modified":1761211217977},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-dark.scss","hash":"b169fbdf0e85497021ea521db247939a723aa9b3","modified":1761211217978},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-fixed-dark.scss","hash":"45b9172428ed5fc8473b3317bfbcda35fc1c6dcb","modified":1761211217979},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_header-dark.scss","hash":"ba5b291ebff832a006ea0f094455df6165782a36","modified":1761211217979},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_profile-dark.scss","hash":"f6f21504c2212fadc80fc0157b03c14acad29b4a","modified":1761211217979},{"_id":"themes/archer/src/scss/_dark/_partial/_post/_code-dark.scss","hash":"310ac0c38accd652b16eafbb068fdb7d27fce729","modified":1761211217980},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-dark.scss","hash":"8ad0191162833248ba821d4f2f4453c344254649","modified":1761211217981},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-archive-dark.scss","hash":"71f50003fe109ed40d6fdad835b7cdc8ab19bf97","modified":1761211217980},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-tags-dark.scss","hash":"2e2f208e25dd2d86a8ecff1bc2d20f604084fa05","modified":1761211217981},{"_id":"themes/archer/src/scss/_mobile/_partial/_sidebar/_sidebar-tags-mobile.scss","hash":"68acfc8b7c5df5cd945365ba9c0620df2cd5e515","modified":1761211217983},{"_id":"themes/archer/src/scss/_mobile/_partial/_post/_writing-enhance-mobile.scss","hash":"27f6775c5fbb04f53440050fca312b94f48088f1","modified":1761211217983},{"_id":"themes/archer/gulpfile.js","hash":"faa2653bcccac91076c85c63e167c2cc5439fdae","modified":1761211217872},{"_id":"themes/archer/package.json","hash":"8e394f41a2d3cbcd481740903ec5250e9bcf5ccf","modified":1761211217890},{"_id":"themes/archer/source/css/style.css.map","hash":"434c4b5e84feb7d8e84fa701663cbce5e322186e","modified":1721460201000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1726199143899},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1726199143899},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1726199143901},{"_id":"themes/archer/source/img/404-bg.jpg","hash":"d0b39d9359528ab82c62ca148966f054ccdcefe6","modified":1726199143901},{"_id":"themes/archer/source/img/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1726199143902},{"_id":"themes/archer/source/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1726199143913},{"_id":"themes/archer/source/img/post-bg-alitrip.jpg","hash":"85ed57fcc37b72e63b222bb660dd64a13797d069","modified":1726199143914},{"_id":"themes/archer/source/img/post-bg-dart.jpg","hash":"3fd3b1d5699c6f09540bfead1336d51305b85842","modified":1726199143917},{"_id":"themes/archer/source/img/post-bg-e2e-ux.jpg","hash":"582b0858909926b686da00c87e8dfe1dd34d16c8","modified":1726199143918},{"_id":"themes/archer/source/img/post-bg-halting.jpg","hash":"7c7b48aae338baa6ed8feacd2e4a6101085ac98c","modified":1726199143919},{"_id":"themes/archer/source/img/post-bg-os-metro.jpg","hash":"99ac866d9b175dc291f1a5424615f1115b5fa212","modified":1726199143920},{"_id":"themes/archer/source/img/post-bg-re-vs-ng2.jpg","hash":"37b2997d6c867612ef4f69397dcc61f8ac50b0a0","modified":1726199143921},{"_id":"themes/archer/source/img/post-bg-universe.jpg","hash":"c4211a26db1de13ad0f79279597d1a49f544382a","modified":1726199143921},{"_id":"themes/archer/source/img/post-bg-unix-linux.jpg","hash":"2e7229df40b47937c5a16a6f1230ce173a044ad4","modified":1726199143922},{"_id":"themes/archer/source/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1726199143922},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1726213744994},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"156837f75f6600ccb602b4efcbd393636c33f35e","modified":1761211217949},{"_id":"themes/archer/source/scripts/customFontLoader.js.map","hash":"ed300b949ca27d88de04046ba951cf789e66f903","modified":1721460201000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1726199143923},{"_id":"themes/archer/source/img/in-post/image-20150115155321445.png","hash":"b793fa4f666c444c31b2cbe928da9b035c8d4c6a","modified":1726199143911},{"_id":"themes/archer/source/img/in-post/image-20200508171835793.png","hash":"4323e77527988f50fc35f1fbbad6a405c30bd362","modified":1726199143911},{"_id":"source/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1726198693743},{"_id":"themes/archer/source/img/contact-bg.jpg","hash":"2c925277b1d405774a8351d1896b6011049136ae","modified":1726199143903},{"_id":"themes/archer/source/img/post-bg-book.jpg","hash":"5cd7098815eff29e373f485bd8a45092911cee7e","modified":1726199143915},{"_id":"themes/archer/source/scripts/share.js.map","hash":"6c175624719dd1e462c704b80b15021e1ff3c750","modified":1721460201000},{"_id":"themes/archer/source/scripts/search.js","hash":"fa09d8b5a8fab005ce8c2b1d8b9a729e9453e327","modified":1761211217961},{"_id":"source/static-page/assets/img/about.png","hash":"dec4dc943aaffb7a05c6afb2dfe0a25a40b54711","modified":1726198693754},{"_id":"themes/archer/source/img/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1726199143912},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1726199143925},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1726213752285},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1726199143879},{"_id":"themes/archer/source/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1726199143916},{"_id":"source/img/misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726198693740},{"_id":"source/avatar/Misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726198693732},{"_id":"source/img/icon_wechat.png","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726198693737},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726213659116},{"_id":"themes/archer/source/scripts/search.js.map","hash":"8da4d5744597cc737bd15f69825b1130dbe168ef","modified":1721460201000},{"_id":"themes/archer/source/img/icon_wechat.png","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726199143905},{"_id":"themes/archer/source/img/misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1726199143913},{"_id":"themes/archer/source/scripts/main.js","hash":"f527ae6933ac1e7d97ed4599e4b3a7768d1bb848","modified":1761211217956},{"_id":"themes/archer/source/scripts/main.js.map","hash":"438af2ac079ddfb229a9f0863541e485ba7bbd7a","modified":1721460201000},{"_id":"source/_posts/2024-09-13-program_developer_experience_1.md","hash":"8dd4905c082f8430dd0f35e65e23ee16f9c8b4d7","modified":1726212171212},{"_id":"public/static-page/assets/css/swiper-bundle.min.css","hash":"8c592fa79bbc3c4983eeabb60f8d80b2da2c5409","modified":1761212085594},{"_id":"public/static-page/assets/js/iconfont.js","hash":"c30c98b71ded0a2fde730f471270915bf319d802","modified":1761212085594},{"_id":"public/static-page/assets/js/main.js","hash":"0a2430e9e4f708cad328657efc5660660a7b78ad","modified":1761212085594},{"_id":"public/static-page/assets/css/styles.css","hash":"c714f178976cce6015b7e60e0fd87631b4bc87df","modified":1761212085594},{"_id":"public/static-page/assets/js/swiper-bundle.min.js","hash":"26a988a0022910cbaab61a7276b19e06659ca24c","modified":1761212085594},{"_id":"public/content.json","hash":"06cd2035813b31aa98453c41eff8f353b8932556","modified":1726214240466},{"_id":"public/static-page/index.html","hash":"40261e642fd52b729887c11a95199616499f9eee","modified":1761218162047},{"_id":"public/about/index.html","hash":"3a2dfcfa838e74ad5ea16ba1c3a2bd2adc6ce2ee","modified":1761218162047},{"_id":"public/2023/02/22/2024-09-13-program_developer_experience/index.html","hash":"f8b5fccf535acea1f146f5ace233b62f74553c2d","modified":1726212287750},{"_id":"public/2023/02/22/2023-02-20-android_preload_review/index.html","hash":"5a9c0e980dd489508385a37421e26952ecf816b1","modified":1761218162047},{"_id":"public/2021/03/24/2021-03-25-thinking/index.html","hash":"697cde2e2ee5513c1279dabeb994788e3b9aa53e","modified":1761218162047},{"_id":"public/2020/05/22/2020-05-22-note_wiki_widget/index.html","hash":"61e51fee4f82f101461dc89d45d6e0f01d756bb1","modified":1761218162047},{"_id":"public/2020/05/11/2020-05-11-flutter_depth/index.html","hash":"a3c2a440c7277d5b754a90a9b0bb8a9870d4fb77","modified":1761218162047},{"_id":"public/2020/04/30/2020-04-30-dart_basic/index.html","hash":"f0bc46e75d626578b8fe405f9fade5f685882944","modified":1761218162047},{"_id":"public/2020/04/29/2020-04-29-book_read_01/index.html","hash":"fd5d0320e2fde62090a61dd08133baf0f4c78fd6","modified":1761218162047},{"_id":"public/2020/04/27/2020-04-27-flutter_application/index.html","hash":"158ea287bc09af278270bc013bf50f7b19f9cd18","modified":1761218162047},{"_id":"public/2019/10/15/2019-10-15-retrofit-and-okHttp/index.html","hash":"7362c58d51b50fb13caef0282dfe1418163a96b3","modified":1761218162047},{"_id":"public/2019/10/11/2019-10-11-HTTP_The_Definitive_Guide/index.html","hash":"2daadd8125b37e0841d7a44b2265968599b397bb","modified":1761218162047},{"_id":"public/2018/05/26/2018-05-06-gradle_learning_notes_2/index.html","hash":"cce35cbe617b965261ac222ecc6bc8b3e34bc05a","modified":1761218162047},{"_id":"public/2018/04/28/2018-05-26-gradle_learning_notes_1/index.html","hash":"9460479a61d6a77f0fc81279d3252d04df617bbe","modified":1761218162047},{"_id":"public/2018/04/19/2018-04-19-memory_management/index.html","hash":"fdceee42dbde7b5cab26e46bdb9a5cea4de9eb65","modified":1761218162047},{"_id":"public/2018/04/01/2018-04-04-andorid_thread/index.html","hash":"67a681916cf6da65f2140aabee7b81313ee0dd2e","modified":1761218162047},{"_id":"public/2018/03/19/2018-03-19-andorid_view_event/index.html","hash":"77735637eb8613d78d72680c508f855292ae00e4","modified":1761218162047},{"_id":"public/2018/03/25/2018-03-25-andorid_view_working_principle/index.html","hash":"cfdb40334021419ea1e29a46b376575bbf2b96bc","modified":1761218162047},{"_id":"public/2018/03/18/2018-03-18-andorid_ipc/index.html","hash":"bef081ea3fe256c7770d25c03f62aa059b3a10ca","modified":1761218162047},{"_id":"public/2018/03/15/2018-03-15-andorid_exploration_book_read_01/index.html","hash":"59fc0bdc45998c8622b0693d493733726469a0d3","modified":1761218162047},{"_id":"public/2017/05/19/2017-05-19-android_databinding/index.html","hash":"c5963a48ba5f16611a7cfd1dd606660ab4deaca5","modified":1761218162047},{"_id":"public/2017/03/08/2017-03-08-adapter/index.html","hash":"1b1eaca6b3f0af1d52673787964bdbae98614ff0","modified":1761218162047},{"_id":"public/2017/02/20/2017-02-20-factory/index.html","hash":"ab85c754fae3ff675b746474291283579695d413","modified":1761218162047},{"_id":"public/2017/02/08/2017-02-08-decorator/index.html","hash":"616531111cada87f724b79e4588cecb0a0d3c000","modified":1761218162047},{"_id":"public/2017/02/04/2017-02-04-Strategy/index.html","hash":"0893e0ecee982befd1cb1589d1f930d1f960528a","modified":1761218162047},{"_id":"public/2017/02/06/2017-02-06-annotation/index.html","hash":"6d6e8056ac5d5ed8363a313431f17057a2d28773","modified":1761218162047},{"_id":"public/2017/02/07/2017-02-07-observer/index.html","hash":"711738d68e1536902509615d7aad6bece735422c","modified":1761218162047},{"_id":"public/2017/01/24/2017-01-24-rxjava_learning_notes/index.html","hash":"de1f016d11adf543f6bc79646bfe63f191c01869","modified":1761218162047},{"_id":"public/archives/index.html","hash":"a0424b5aab6317e28920447b4c3196e649896fd7","modified":1761218162047},{"_id":"public/2017/01/23/2017-01-23-new_start/index.html","hash":"88efd02721cedeb9c3e35455e45c8509d905c9cc","modified":1761218162047},{"_id":"public/archives/2017/index.html","hash":"ba72c8cf821735e96796515d477e1f321579fbaf","modified":1761218162047},{"_id":"public/archives/page/2/index.html","hash":"d0926d6c414448a6489606c181bfd58073c65416","modified":1761218162047},{"_id":"public/archives/page/3/index.html","hash":"245436c4311024656fed4b7e6e07aaa7cd850666","modified":1761218162047},{"_id":"public/archives/2017/01/index.html","hash":"ae74ec4f9e56ba1c2db780b9fd6be0c006b9bb80","modified":1761218162047},{"_id":"public/archives/2017/02/index.html","hash":"c021b17f64813b5cd267505bc23b57b7ef612cd1","modified":1761218162047},{"_id":"public/archives/2017/03/index.html","hash":"00dd922d93b59dfb7ebe581e16fcf4e19de25741","modified":1761218162047},{"_id":"public/archives/2017/05/index.html","hash":"2c1d4551c3d322929092c60bdfc2194f8c188786","modified":1761218162047},{"_id":"public/archives/2018/index.html","hash":"0c62f3bdbba4fe27f0b77e15b681e4c18eba4578","modified":1761218162047},{"_id":"public/archives/2018/04/index.html","hash":"af26b998ec967e0db7cf00030cc3d51ac4f87ccd","modified":1761218162047},{"_id":"public/archives/2018/03/index.html","hash":"a490f610bea291e6bc94fc3061abb85aed41ec58","modified":1761218162047},{"_id":"public/archives/2018/05/index.html","hash":"baf45fe2818c9c35e045c38b0f17635fef4aab00","modified":1761218162047},{"_id":"public/archives/2019/index.html","hash":"1fc9e7503e4db28802d5ca1faa84b474bb1f16ba","modified":1761218162047},{"_id":"public/archives/2019/10/index.html","hash":"f132ae826585fad1eaa0bea975d8f01771434bb1","modified":1761218162047},{"_id":"public/archives/2020/index.html","hash":"d9af3bbb19351830f351feddd2241b06e8672423","modified":1761218162047},{"_id":"public/archives/2020/04/index.html","hash":"ba730a4695fc20411c31a8bef3fa7e19b1fe10c5","modified":1761218162047},{"_id":"public/archives/2020/05/index.html","hash":"90f663977906ed591022569568edce11fbd0fd75","modified":1761218162047},{"_id":"public/archives/2021/index.html","hash":"358d46ceaff705d0e36eaaa6d0439d745d7fd5b1","modified":1761218162047},{"_id":"public/archives/2021/03/index.html","hash":"7f748fe38f0d0466f76eade83e31fc9c2d3327be","modified":1761218162047},{"_id":"public/archives/2023/index.html","hash":"327d5c6c666e64194bc8f4420a5ff207a9547d56","modified":1761218162047},{"_id":"public/index.html","hash":"d4ae59dd547597e3e49d721269fb78c14eeaedcc","modified":1761218162047},{"_id":"public/archives/2023/02/index.html","hash":"69383d3532796e88a82324ae3499caffae6bd832","modified":1761218162047},{"_id":"public/page/2/index.html","hash":"edf897c5de3842290f44262b0389231e718206d1","modified":1761218162047},{"_id":"public/page/3/index.html","hash":"a56619e8d5038334b351af7b3f563d5a8c3b905e","modified":1761218162047},{"_id":"public/tags/生活/index.html","hash":"49fca0be67829d9ffb79094255b8dafeb8bbd572","modified":1761218162047},{"_id":"public/tags/Android/index.html","hash":"4eb68d7d1a25a6c23660deb3790f3355563951f7","modified":1761218162047},{"_id":"public/tags/基础/index.html","hash":"19bf850d26dfda3b6c3a80742bd6641bef2f0062","modified":1761218162047},{"_id":"public/tags/Android/page/2/index.html","hash":"01839aac0f680818fa4f75cf6b11e31d5346bc49","modified":1761218162047},{"_id":"public/tags/Booklet/index.html","hash":"dab8e859bfd8fba981662478a9c99a005ce1d9c8","modified":1761218162047},{"_id":"public/tags/Note/index.html","hash":"98ef8a2099329e8db1d01c0fa5a2e3101f273473","modified":1761218162047},{"_id":"public/tags/Gradle/index.html","hash":"f15afe9ef17f9a8e5dd0bb13cc323a5982482ebf","modified":1761218162047},{"_id":"public/tags/Flutter/index.html","hash":"f07da526b65ce81bc4bc8db88f4e3e9e49e3d66f","modified":1761218162047},{"_id":"public/tags/Dart/index.html","hash":"30841bd19a142be0f007fe96f4c874992eaa6636","modified":1761218162047},{"_id":"public/tags/Book/index.html","hash":"04f24610bb2dc789ea21aedaf34c048dc78eb2c3","modified":1761218162047},{"_id":"public/tags/RecyclerView/index.html","hash":"a28f2b406da012b69c77eac017f8e1dde270e170","modified":1761218162047},{"_id":"public/tags/HTTP/index.html","hash":"cb5db440f24d70e6610e97cf78c4d76be5ff5591","modified":1761218162047},{"_id":"public/img/post-icon-xiulian-01.png","hash":"a74f5b9a377c3db985f567e357c3ae0758c1be24","modified":1761212085594},{"_id":"themes/archer/lints/replace-ejs-tag.js","hash":"a373b444c9ec4876255fcbe6ecc5c512c60f5cc3","modified":1761211217888},{"_id":"themes/archer/README.md","hash":"175c1c1c513788ccc60a8574c14931f9cb135b43","modified":1761211217867},{"_id":"themes/archer/layout/_partial/donate-popup.ejs","hash":"17630dea9a3957d7361a09563878e5752a6a6963","modified":1761211217883},{"_id":"themes/archer/source/assets/donate-wechat.png","hash":"720e54787088c998e3e93f6e4e7d40eaacea920d","modified":1721460201000},{"_id":"themes/archer/source/assets/donate-alipay.png","hash":"09770d89ed19df02c8060476e54f7d8e7a5fa221","modified":1721460201000},{"_id":"themes/archer/src/js/donate.js","hash":"06f87bc27402cb491f01876667aabfa61cea98e9","modified":1761211217968},{"_id":"themes/archer/src/js/image.js","hash":"8b4da805c72168792a45f742172d38c4187b0d98","modified":1761211217970},{"_id":"themes/archer/source/scripts/share.js","hash":"ea982d7f0327bc606528c6717c46e43f1a2e0fb2","modified":1761211217965},{"_id":"themes/archer/src/js/theme.js","hash":"9dae2a60b6a77d21fb36698b8d58eaed9d4bbcbb","modified":1761211217974},{"_id":"themes/archer/layout/_partial/comment/waline.ejs","hash":"17b9353690f6dd1cd85ff53f8e607a15114abd91","modified":1761211217882},{"_id":"themes/archer/src/scss/_mobile/_partial/_post-page-mobile.scss","hash":"e8ab471ab34899fdac6dfd520f54fe36c7ede31a","modified":1761211217982},{"_id":"themes/archer/src/scss/_partial/_partial/_donate.scss","hash":"1d1881fd3eed0e46ca1adf50dd806cc03d6ef132","modified":1761211217986},{"_id":"themes/archer/src/scss/_partial/_partial/_fancybox.scss","hash":"c2ba10eb90a6807527f70139e44752bbef2fd4e4","modified":1761211217986},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_donate.scss","hash":"dd4ff164545a9401ec8fceda5612db8047ce5767","modified":1761211217978},{"_id":"themes/archer/package-lock.json","hash":"e4b69120159c4d0c6e5e075e268798cf0a5be079","modified":1761211217889},{"_id":"public/2024/09/13/2024-09-13-program_developer_experience/index.html","hash":"235deaeac92888dec57ae89d1c254c42849f27d5","modified":1761218162047},{"_id":"public/archives/2024/index.html","hash":"d676f09ea8a968c7136165815e1a78ca8d02f19a","modified":1761218162047},{"_id":"public/archives/2024/09/index.html","hash":"021e64c42bfc509ef3d09a07cb9094eb0f853d92","modified":1761218162047},{"_id":"public/tags/方法论/index.html","hash":"86c7f44a97531a1961faa3a530e5c1e4c1686421","modified":1761218162047},{"_id":"public/tags/读书笔记/index.html","hash":"d5f83b99c3327d3cc365e5c7bec6c68a6e4e5086","modified":1761218162047},{"_id":"public/assets/favicon.ico","hash":"b2ea530dc15534069c581e7293a90e76d977d3ff","modified":1761212085594},{"_id":"public/css/dark.css.map","hash":"dfd65789b96215bed7d9826381c9ef01ab4fa85d","modified":1761212085594},{"_id":"public/css/mobile.css.map","hash":"e14d9b27b189276f6bdc5af8de84ee1b98e9f281","modified":1761212085594},{"_id":"public/scripts/main.js.LICENSE.txt","hash":"821bf670591761f55c867aa192e12a7d841dde18","modified":1761212085594},{"_id":"public/scripts/customFontLoader.js.map","hash":"ed300b949ca27d88de04046ba951cf789e66f903","modified":1761212085594},{"_id":"public/scripts/search.js.LICENSE.txt","hash":"d95a4b6c0d1783298f33b19291f9798cdeeca801","modified":1761212085594},{"_id":"public/assets/donate-alipay.png","hash":"09770d89ed19df02c8060476e54f7d8e7a5fa221","modified":1761212085594},{"_id":"public/assets/donate-wechat.png","hash":"720e54787088c998e3e93f6e4e7d40eaacea920d","modified":1761212085594},{"_id":"public/avatar/Misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1761212085594},{"_id":"public/scripts/share.js.map","hash":"6c175624719dd1e462c704b80b15021e1ff3c750","modified":1761212085594},{"_id":"public/css/style.css.map","hash":"434c4b5e84feb7d8e84fa701663cbce5e322186e","modified":1761212085594},{"_id":"public/css/dark.css","hash":"0fa497715eeabd31154dd094349c3304afc556bd","modified":1761212085594},{"_id":"public/css/mobile.css","hash":"f29d13cb74f4027d225f4112428fb982f17d3032","modified":1761212085594},{"_id":"public/scripts/customFontLoader.js","hash":"0e9d4acb4e9a062783696eae952548763ed26740","modified":1761212085594},{"_id":"public/scripts/share.js","hash":"cccc7d3f4fed8e1937977990dea8d3a7ae06bea5","modified":1761212085594},{"_id":"public/intro/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1761212085594},{"_id":"public/css/style.css","hash":"a781a1a5b673570de3f5aa4623ea16ef6bb125f4","modified":1761212085594},{"_id":"public/intro/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1761212085594},{"_id":"public/scripts/search.js","hash":"bdb2d89365752501f0c0ffbf641045d271e4f0fe","modified":1761212085594},{"_id":"public/scripts/search.js.map","hash":"8da4d5744597cc737bd15f69825b1130dbe168ef","modified":1761212085594},{"_id":"public/scripts/main.js.map","hash":"438af2ac079ddfb229a9f0863541e485ba7bbd7a","modified":1761212085594},{"_id":"public/scripts/main.js","hash":"fe78fa0cd23ecb348317966cbbc97f6011f7ecd6","modified":1761212085594},{"_id":"public/CNAME","hash":"b808b920fd0b71b3fff54f4e4628eb0e7f901581","modified":1761212085594},{"_id":"public/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1761212085594},{"_id":"public/img/home-bg-art.jpg","hash":"ab3c20d91c5924635b6ff51893d88636dfba9709","modified":1761212085594},{"_id":"public/img/favicon.ico","hash":"b2ea530dc15534069c581e7293a90e76d977d3ff","modified":1761212085594},{"_id":"public/img/home-bg-geek.jpg","hash":"79760dd9fcf9598f32eafa921d6d64b2e25fb03a","modified":1761212085594},{"_id":"public/img/blog-desktop.jpg","hash":"060a74380b9e889207186d35e0ee106003459fd9","modified":1761212085594},{"_id":"public/img/java.jpg","hash":"a8b3b8beb2329fa17070ab049f1aa2ab381b31a4","modified":1761212085594},{"_id":"public/img/home-bg-o.jpg","hash":"1913754f35f457f09671268baf63a8921318ae32","modified":1761212085594},{"_id":"public/img/post-bg-alibaba.jpg","hash":"415fdb209979e27e168b2801216658477c82df76","modified":1761212085594},{"_id":"public/img/post-bg-android.jpg","hash":"118c59a132aa1ea0c4d2da52111d802291f9c1c2","modified":1761212085594},{"_id":"public/img/post-bg-apple-event-2015.jpg","hash":"28888e02952d9a4711d9762a66a76f5e9b90b52c","modified":1761212085594},{"_id":"public/img/post-bg-design.jpg","hash":"11d02ab162d89b4286c77da7c72f2dead9748a0c","modified":1761212085594},{"_id":"public/img/post-bg-digital-native.jpg","hash":"3252f472aa32b85d77b9b122cc050b0af074136f","modified":1761212085594},{"_id":"public/img/post-bg-dreamer.jpg","hash":"694c43325a64278263f7f3fa80f06cce76100d2c","modified":1761212085594},{"_id":"public/img/post-bg-farewell-flash.jpg","hash":"b166a24717ba55ada0bfe998417e3d94ce53b5f9","modified":1761212085594},{"_id":"public/img/post-bg-flutter.jpg","hash":"bb83c7366544067907ef66597a07f558d3b24668","modified":1761212085594},{"_id":"public/img/post-bg-infinity.jpg","hash":"b6e6a4bfdce06dee659144b2f937946cdb59dea5","modified":1761212085594},{"_id":"public/img/post-bg-js-module.jpg","hash":"ffb9671f899ff5637e57b3450cbbc5a623d65ff0","modified":1761212085594},{"_id":"public/img/post-bg-ios9-web.jpg","hash":"c7dfbf9c6cc54522cce8a411a583dd051f9e2001","modified":1761212085594},{"_id":"public/img/post-bg-js-version.jpg","hash":"d47c74c973773a8f9bf93a4bb1d08ee8c3cec92d","modified":1761212085594},{"_id":"public/img/post-bg-miui-ux.jpg","hash":"fad81037a695a7ec0668ee00feac019f05b0d22b","modified":1761212085594},{"_id":"public/img/post-bg-kuaidi.jpg","hash":"ce64b8985ddcacd95e503cdde250db1fadbc2002","modified":1761212085594},{"_id":"public/img/post-bg-miui6.jpg","hash":"9c2231b88efbc52a9f578007c558ae1c8a114917","modified":1761212085594},{"_id":"public/img/post-bg-nextgen-web-pwa.jpg","hash":"951356e5a687126b2b6a8bd9de5e632b89b6e44f","modified":1761212085594},{"_id":"public/img/post-bg-rwd.jpg","hash":"44b54178a961d6e0c3f28453b06f8760400ed93f","modified":1761212085594},{"_id":"public/img/tag-bg.jpg","hash":"005b999f293d71ce570ad32eb281e6aa6a28482f","modified":1761212085594},{"_id":"public/img/post-sample-image.jpg","hash":"4c7357bb32bee28c269ff19cae4e88a184dfd7b9","modified":1761212085594},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1761212085594},{"_id":"public/img/404-bg.jpg","hash":"d0b39d9359528ab82c62ca148966f054ccdcefe6","modified":1761212085594},{"_id":"public/img/about-bg.jpg","hash":"869457c57ec131f20a231b5fd1c2c0de21787e4f","modified":1761212085594},{"_id":"public/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1761212085594},{"_id":"public/static-page/assets/img/bilibili.png","hash":"7e4499060b9e27a06a13ff275eaeadda35ef8833","modified":1761212085594},{"_id":"public/static-page/assets/img/blob.svg","hash":"03ff113c1e5e61e754678b4c11137098eab3a3c9","modified":1761212085594},{"_id":"public/static-page/assets/img/gitee.png","hash":"7f1b5fbe7df07e0a4e57dc060b37838d892504d2","modified":1761212085594},{"_id":"public/static-page/assets/img/portfolio3.jpg","hash":"601717ee6d9e44ab0f10b43253c6e7d1c105ab9f","modified":1761212085594},{"_id":"public/static-page/assets/pdf/简历.pdf","hash":"5f3a84eaa5825a115354d9bde8603d5a77885931","modified":1761212085594},{"_id":"public/static-page/assets/img/portfolio2.jpg","hash":"39b9edc99e069374213c60b81c046341fea0ac7d","modified":1761212085594},{"_id":"public/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1761212085594},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1761212085594},{"_id":"public/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1761212085594},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1761212085594},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1761212085594},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1761212085594},{"_id":"public/static-page/assets/img/portfolio1.jpg","hash":"23f4b7a7686579658f4baa7ee15d2e1dc92c625a","modified":1761212085594},{"_id":"public/scripts/dark.js.map","hash":"0b97f8316d71c449b160df1f04e089b4f33d8d88","modified":1761212085594},{"_id":"public/about/index.md","hash":"7425134fe749aa6207cc1bc0d603cd82e2acbf17","modified":1761218162047},{"_id":"public/img/post-bg-alitrip.jpg","hash":"85ed57fcc37b72e63b222bb660dd64a13797d069","modified":1761212085594},{"_id":"public/img/post-bg-dart.jpg","hash":"3fd3b1d5699c6f09540bfead1336d51305b85842","modified":1761212085594},{"_id":"public/img/post-bg-e2e-ux.jpg","hash":"582b0858909926b686da00c87e8dfe1dd34d16c8","modified":1761212085594},{"_id":"public/img/post-bg-halting.jpg","hash":"7c7b48aae338baa6ed8feacd2e4a6101085ac98c","modified":1761212085594},{"_id":"public/img/post-bg-re-vs-ng2.jpg","hash":"37b2997d6c867612ef4f69397dcc61f8ac50b0a0","modified":1761212085594},{"_id":"public/img/post-bg-os-metro.jpg","hash":"99ac866d9b175dc291f1a5424615f1115b5fa212","modified":1761212085594},{"_id":"public/img/post-bg-universe.jpg","hash":"c4211a26db1de13ad0f79279597d1a49f544382a","modified":1761212085594},{"_id":"public/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1761212085594},{"_id":"public/img/post-bg-unix-linux.jpg","hash":"2e7229df40b47937c5a16a6f1230ce173a044ad4","modified":1761212085594},{"_id":"public/img/in-post/image-20150115155321445.png","hash":"b793fa4f666c444c31b2cbe928da9b035c8d4c6a","modified":1761212085594},{"_id":"public/img/contact-bg.jpg","hash":"2c925277b1d405774a8351d1896b6011049136ae","modified":1761212085594},{"_id":"public/img/in-post/image-20200508171835793.png","hash":"4323e77527988f50fc35f1fbbad6a405c30bd362","modified":1761212085594},{"_id":"public/static-page/assets/img/cat.png","hash":"8a812053fb6247125cfb29e94efe49dff54147d2","modified":1761212085594},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1761212085594},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1761212085594},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1761212085594},{"_id":"public/scripts/dark.js","hash":"71bf7d9b723c6136ee40f462e8df52c47fa1edfd","modified":1761212085594},{"_id":"public/lib/webfontloader.min.js","hash":"4c69aeb4e4f355912503d1c460e8e7aa6ea6963e","modified":1761212085594},{"_id":"public/lib/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1761212085594},{"_id":"public/img/post-bg-book.jpg","hash":"5cd7098815eff29e373f485bd8a45092911cee7e","modified":1761212085594},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1761212085594},{"_id":"public/img/index-bg.jpg","hash":"e8402786049925fb08e8635a0954360fad43f0ce","modified":1761212085594},{"_id":"public/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1761212085594},{"_id":"public/static-page/assets/img/about.png","hash":"dec4dc943aaffb7a05c6afb2dfe0a25a40b54711","modified":1761212085594},{"_id":"public/img/icon_wechat.png","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1761212085594},{"_id":"public/img/misaka.jpg","hash":"1ddf4619c58e1b82d0efc9a39f4c4b9d9e1a19e8","modified":1761212085594},{"_id":"source/css/custom.css","hash":"928cfe9ea293d7476e5b01a654c479bdf18df173","modified":1761212896497},{"_id":"public/css/custom.css","hash":"e6c04ad462b9171b6daad95bffa022e422e92322","modified":1761218162047}],"Category":[],"Data":[],"Page":[{"_content":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n@font-face{font-family:swiper-icons;src:url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA') format('woff');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-container-pointer-events{touch-action:pan-y}.swiper-container-pointer-events.swiper-container-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:50%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-container-cube .swiper-cube-shadow:before{content:'';background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}","source":"static-page/assets/css/swiper-bundle.min.css","raw":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n@font-face{font-family:swiper-icons;src:url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA') format('woff');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-container-pointer-events{touch-action:pan-y}.swiper-container-pointer-events.swiper-container-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:50%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-container-cube .swiper-cube-shadow:before{content:'';background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}","date":"2025-10-23T09:20:17.853Z","updated":"2025-10-23T09:20:17.853Z","path":"static-page/assets/css/swiper-bundle.min.css","layout":"false","_id":"cm10dl6oo0000s2y45phvb619","title":"","comments":1,"content":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n@font-face{font-family:swiper-icons;src:url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA') format('woff');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-container-pointer-events{touch-action:pan-y}.swiper-container-pointer-events.swiper-container-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:50%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-container-cube .swiper-cube-shadow:before{content:'';background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}"},{"_content":"(window._iconfont_svg_string_3900458 =\n  '<svg><symbol id=\"icon-fanyi\" viewBox=\"0 0 1024 1024\"><path d=\"M608 416h288c35.36 0 64 28.48 64 64v416c0 35.36-28.48 64-64 64H480c-35.36 0-64-28.48-64-64v-288H128c-35.36 0-64-28.48-64-64V128c0-35.36 28.48-64 64-64h416c35.36 0 64 28.48 64 64v288z m0 64v64c0 35.36-28.48 64-64 64h-64v256.032c0 17.664 14.304 31.968 31.968 31.968H864a31.968 31.968 0 0 0 31.968-31.968V512a31.968 31.968 0 0 0-31.968-31.968H608zM128 159.968V512c0 17.664 14.304 31.968 31.968 31.968H512a31.968 31.968 0 0 0 31.968-31.968V160A31.968 31.968 0 0 0 512.032 128H160A31.968 31.968 0 0 0 128 159.968z m64 244.288V243.36h112.736V176h46.752c6.4 0.928 9.632 1.824 9.632 2.752a10.56 10.56 0 0 1-1.376 4.128c-2.752 7.328-4.128 16.032-4.128 26.112v34.368h119.648v156.768h-50.88v-20.64h-68.768v118.272H306.112v-118.272H238.752v24.768H192z m46.72-122.368v60.48h67.392V281.92H238.752z m185.664 60.48V281.92h-68.768v60.48h68.768z m203.84 488H576L668.128 576h64.64l89.344 254.4h-54.976l-19.264-53.664h-100.384l-19.232 53.632z m33.024-96.256h72.864l-34.368-108.608h-1.376l-37.12 108.608zM896 320h-64a128 128 0 0 0-128-128V128a192 192 0 0 1 192 192zM128 704h64a128 128 0 0 0 128 128v64a192 192 0 0 1-192-192z\"></path></symbol>'\n  +'<symbol id=\"icon-bilibili-line\" viewBox=\"0 0 1024 1024\"><path d=\"M306.005333 117.632L444.330667 256h135.296l138.368-138.325333a42.666667 42.666667 0 0 1 60.373333 60.373333L700.330667 256H789.333333A149.333333 149.333333 0 0 1 938.666667 405.333333v341.333334a149.333333 149.333333 0 0 1-149.333334 149.333333h-554.666666A149.333333 149.333333 0 0 1 85.333333 746.666667v-341.333334A149.333333 149.333333 0 0 1 234.666667 256h88.96L245.632 177.962667a42.666667 42.666667 0 0 1 60.373333-60.373334zM789.333333 341.333333h-554.666666a64 64 0 0 0-63.701334 57.856L170.666667 405.333333v341.333334a64 64 0 0 0 57.856 63.701333L234.666667 810.666667h554.666666a64 64 0 0 0 63.701334-57.856L853.333333 746.666667v-341.333334A64 64 0 0 0 789.333333 341.333333zM341.333333 469.333333a42.666667 42.666667 0 0 1 42.666667 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666666-42.666667z m341.333334 0a42.666667 42.666667 0 0 1 42.666666 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666667-42.666667z\"  ></path>'\n  +'</symbol><symbol id=\"icon-gitee\" viewBox=\"0 0 1024 1024\"><path d=\"M512 1024C229.222 1024 0 794.778 0 512S229.222 0 512 0s512 229.222 512 512-229.222 512-512 512z m259.149-568.883h-290.74a25.293 25.293 0 0 0-25.292 25.293l-0.026 63.206c0 13.952 11.315 25.293 25.267 25.293h177.024c13.978 0 25.293 11.315 25.293 25.267v12.646a75.853 75.853 0 0 1-75.853 75.853h-240.23a25.293 25.293 0 0 1-25.267-25.293V417.203a75.853 75.853 0 0 1 75.827-75.853h353.946a25.293 25.293 0 0 0 25.267-25.292l0.077-63.207a25.293 25.293 0 0 0-25.268-25.293H417.152a189.62 189.62 0 0 0-189.62 189.645V771.15c0 13.977 11.316 25.293 25.294 25.293h372.94a170.65 170.65 0 0 0 170.65-170.65V480.384a25.293 25.293 0 0 0-25.293-25.267z\" ></path><symbol id=\"icon-github\" viewBox=\"0 0 1024 1024\"><path d=\"M512 42.666667A464.64 464.64 0 0 0 42.666667 502.186667 460.373333 460.373333 0 0 0 363.52 938.666667c23.466667 4.266667 32-9.813333 32-22.186667v-78.08c-130.56 27.733333-158.293333-61.44-158.293333-61.44a122.026667 122.026667 0 0 0-52.053334-67.413333c-42.666667-28.16 3.413333-27.733333 3.413334-27.733334a98.56 98.56 0 0 1 71.68 47.36 101.12 101.12 0 0 0 136.533333 37.973334 99.413333 99.413333 0 0 1 29.866667-61.44c-104.106667-11.52-213.333333-50.773333-213.333334-226.986667a177.066667 177.066667 0 0 1 47.36-124.16 161.28 161.28 0 0 1 4.693334-121.173333s39.68-12.373333 128 46.933333a455.68 455.68 0 0 1 234.666666 0c89.6-59.306667 128-46.933333 128-46.933333a161.28 161.28 0 0 1 4.693334 121.173333A177.066667 177.066667 0 0 1 810.666667 477.866667c0 176.64-110.08 215.466667-213.333334 226.986666a106.666667 106.666667 0 0 1 32 85.333334v125.866666c0 14.933333 8.533333 26.88 32 22.186667A460.8 460.8 0 0 0 981.333333 502.186667 464.64 464.64 0 0 0 512 42.666667\"></path></symbol></svg>'),\n  (function (n) {\n    var t = (t = document.getElementsByTagName(\"script\"))[t.length - 1],\n      e = t.getAttribute(\"data-injectcss\"),\n      t = t.getAttribute(\"data-disable-injectsvg\");\n    if (!t) {\n      var i,\n        o,\n        a,\n        c,\n        d,\n        s = function (t, e) {\n          e.parentNode.insertBefore(t, e);\n        };\n      if (e && !n.__iconfont__svg__cssinject__) {\n        n.__iconfont__svg__cssinject__ = !0;\n        try {\n          document.write(\n            \"<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>\"\n          );\n        } catch (t) {\n          console && console.log(t);\n        }\n      }\n      (i = function () {\n        var t,\n          e = document.createElement(\"div\");\n        (e.innerHTML = n._iconfont_svg_string_3900458),\n          (e = e.getElementsByTagName(\"svg\")[0]) &&\n            (e.setAttribute(\"aria-hidden\", \"true\"),\n            (e.style.position = \"absolute\"),\n            (e.style.width = 0),\n            (e.style.height = 0),\n            (e.style.overflow = \"hidden\"),\n            (e = e),\n            (t = document.body).firstChild\n              ? s(e, t.firstChild)\n              : t.appendChild(e));\n      }),\n        document.addEventListener\n          ? ~[\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState)\n            ? setTimeout(i, 0)\n            : ((o = function () {\n                document.removeEventListener(\"DOMContentLoaded\", o, !1), i();\n              }),\n              document.addEventListener(\"DOMContentLoaded\", o, !1))\n          : document.attachEvent &&\n            ((a = i),\n            (c = n.document),\n            (d = !1),\n            r(),\n            (c.onreadystatechange = function () {\n              \"complete\" == c.readyState &&\n                ((c.onreadystatechange = null), l());\n            }));\n    }\n    function l() {\n      d || ((d = !0), a());\n    }\n    function r() {\n      try {\n        c.documentElement.doScroll(\"left\");\n      } catch (t) {\n        return void setTimeout(r, 50);\n      }\n      l();\n    }\n  })(window);\n","source":"static-page/assets/js/iconfont.js","raw":"(window._iconfont_svg_string_3900458 =\n  '<svg><symbol id=\"icon-fanyi\" viewBox=\"0 0 1024 1024\"><path d=\"M608 416h288c35.36 0 64 28.48 64 64v416c0 35.36-28.48 64-64 64H480c-35.36 0-64-28.48-64-64v-288H128c-35.36 0-64-28.48-64-64V128c0-35.36 28.48-64 64-64h416c35.36 0 64 28.48 64 64v288z m0 64v64c0 35.36-28.48 64-64 64h-64v256.032c0 17.664 14.304 31.968 31.968 31.968H864a31.968 31.968 0 0 0 31.968-31.968V512a31.968 31.968 0 0 0-31.968-31.968H608zM128 159.968V512c0 17.664 14.304 31.968 31.968 31.968H512a31.968 31.968 0 0 0 31.968-31.968V160A31.968 31.968 0 0 0 512.032 128H160A31.968 31.968 0 0 0 128 159.968z m64 244.288V243.36h112.736V176h46.752c6.4 0.928 9.632 1.824 9.632 2.752a10.56 10.56 0 0 1-1.376 4.128c-2.752 7.328-4.128 16.032-4.128 26.112v34.368h119.648v156.768h-50.88v-20.64h-68.768v118.272H306.112v-118.272H238.752v24.768H192z m46.72-122.368v60.48h67.392V281.92H238.752z m185.664 60.48V281.92h-68.768v60.48h68.768z m203.84 488H576L668.128 576h64.64l89.344 254.4h-54.976l-19.264-53.664h-100.384l-19.232 53.632z m33.024-96.256h72.864l-34.368-108.608h-1.376l-37.12 108.608zM896 320h-64a128 128 0 0 0-128-128V128a192 192 0 0 1 192 192zM128 704h64a128 128 0 0 0 128 128v64a192 192 0 0 1-192-192z\"></path></symbol>'\n  +'<symbol id=\"icon-bilibili-line\" viewBox=\"0 0 1024 1024\"><path d=\"M306.005333 117.632L444.330667 256h135.296l138.368-138.325333a42.666667 42.666667 0 0 1 60.373333 60.373333L700.330667 256H789.333333A149.333333 149.333333 0 0 1 938.666667 405.333333v341.333334a149.333333 149.333333 0 0 1-149.333334 149.333333h-554.666666A149.333333 149.333333 0 0 1 85.333333 746.666667v-341.333334A149.333333 149.333333 0 0 1 234.666667 256h88.96L245.632 177.962667a42.666667 42.666667 0 0 1 60.373333-60.373334zM789.333333 341.333333h-554.666666a64 64 0 0 0-63.701334 57.856L170.666667 405.333333v341.333334a64 64 0 0 0 57.856 63.701333L234.666667 810.666667h554.666666a64 64 0 0 0 63.701334-57.856L853.333333 746.666667v-341.333334A64 64 0 0 0 789.333333 341.333333zM341.333333 469.333333a42.666667 42.666667 0 0 1 42.666667 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666666-42.666667z m341.333334 0a42.666667 42.666667 0 0 1 42.666666 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666667-42.666667z\"  ></path>'\n  +'</symbol><symbol id=\"icon-gitee\" viewBox=\"0 0 1024 1024\"><path d=\"M512 1024C229.222 1024 0 794.778 0 512S229.222 0 512 0s512 229.222 512 512-229.222 512-512 512z m259.149-568.883h-290.74a25.293 25.293 0 0 0-25.292 25.293l-0.026 63.206c0 13.952 11.315 25.293 25.267 25.293h177.024c13.978 0 25.293 11.315 25.293 25.267v12.646a75.853 75.853 0 0 1-75.853 75.853h-240.23a25.293 25.293 0 0 1-25.267-25.293V417.203a75.853 75.853 0 0 1 75.827-75.853h353.946a25.293 25.293 0 0 0 25.267-25.292l0.077-63.207a25.293 25.293 0 0 0-25.268-25.293H417.152a189.62 189.62 0 0 0-189.62 189.645V771.15c0 13.977 11.316 25.293 25.294 25.293h372.94a170.65 170.65 0 0 0 170.65-170.65V480.384a25.293 25.293 0 0 0-25.293-25.267z\" ></path><symbol id=\"icon-github\" viewBox=\"0 0 1024 1024\"><path d=\"M512 42.666667A464.64 464.64 0 0 0 42.666667 502.186667 460.373333 460.373333 0 0 0 363.52 938.666667c23.466667 4.266667 32-9.813333 32-22.186667v-78.08c-130.56 27.733333-158.293333-61.44-158.293333-61.44a122.026667 122.026667 0 0 0-52.053334-67.413333c-42.666667-28.16 3.413333-27.733333 3.413334-27.733334a98.56 98.56 0 0 1 71.68 47.36 101.12 101.12 0 0 0 136.533333 37.973334 99.413333 99.413333 0 0 1 29.866667-61.44c-104.106667-11.52-213.333333-50.773333-213.333334-226.986667a177.066667 177.066667 0 0 1 47.36-124.16 161.28 161.28 0 0 1 4.693334-121.173333s39.68-12.373333 128 46.933333a455.68 455.68 0 0 1 234.666666 0c89.6-59.306667 128-46.933333 128-46.933333a161.28 161.28 0 0 1 4.693334 121.173333A177.066667 177.066667 0 0 1 810.666667 477.866667c0 176.64-110.08 215.466667-213.333334 226.986666a106.666667 106.666667 0 0 1 32 85.333334v125.866666c0 14.933333 8.533333 26.88 32 22.186667A460.8 460.8 0 0 0 981.333333 502.186667 464.64 464.64 0 0 0 512 42.666667\"></path></symbol></svg>'),\n  (function (n) {\n    var t = (t = document.getElementsByTagName(\"script\"))[t.length - 1],\n      e = t.getAttribute(\"data-injectcss\"),\n      t = t.getAttribute(\"data-disable-injectsvg\");\n    if (!t) {\n      var i,\n        o,\n        a,\n        c,\n        d,\n        s = function (t, e) {\n          e.parentNode.insertBefore(t, e);\n        };\n      if (e && !n.__iconfont__svg__cssinject__) {\n        n.__iconfont__svg__cssinject__ = !0;\n        try {\n          document.write(\n            \"<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>\"\n          );\n        } catch (t) {\n          console && console.log(t);\n        }\n      }\n      (i = function () {\n        var t,\n          e = document.createElement(\"div\");\n        (e.innerHTML = n._iconfont_svg_string_3900458),\n          (e = e.getElementsByTagName(\"svg\")[0]) &&\n            (e.setAttribute(\"aria-hidden\", \"true\"),\n            (e.style.position = \"absolute\"),\n            (e.style.width = 0),\n            (e.style.height = 0),\n            (e.style.overflow = \"hidden\"),\n            (e = e),\n            (t = document.body).firstChild\n              ? s(e, t.firstChild)\n              : t.appendChild(e));\n      }),\n        document.addEventListener\n          ? ~[\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState)\n            ? setTimeout(i, 0)\n            : ((o = function () {\n                document.removeEventListener(\"DOMContentLoaded\", o, !1), i();\n              }),\n              document.addEventListener(\"DOMContentLoaded\", o, !1))\n          : document.attachEvent &&\n            ((a = i),\n            (c = n.document),\n            (d = !1),\n            r(),\n            (c.onreadystatechange = function () {\n              \"complete\" == c.readyState &&\n                ((c.onreadystatechange = null), l());\n            }));\n    }\n    function l() {\n      d || ((d = !0), a());\n    }\n    function r() {\n      try {\n        c.documentElement.doScroll(\"left\");\n      } catch (t) {\n        return void setTimeout(r, 50);\n      }\n      l();\n    }\n  })(window);\n","date":"2025-10-23T09:20:17.862Z","updated":"2025-10-23T09:20:17.862Z","path":"static-page/assets/js/iconfont.js","layout":"false","_id":"cm10dl6ou0002s2y4ba6r3prq","title":"","comments":1,"content":"(window._iconfont_svg_string_3900458 =\n  '<svg><symbol id=\"icon-fanyi\" viewBox=\"0 0 1024 1024\"><path d=\"M608 416h288c35.36 0 64 28.48 64 64v416c0 35.36-28.48 64-64 64H480c-35.36 0-64-28.48-64-64v-288H128c-35.36 0-64-28.48-64-64V128c0-35.36 28.48-64 64-64h416c35.36 0 64 28.48 64 64v288z m0 64v64c0 35.36-28.48 64-64 64h-64v256.032c0 17.664 14.304 31.968 31.968 31.968H864a31.968 31.968 0 0 0 31.968-31.968V512a31.968 31.968 0 0 0-31.968-31.968H608zM128 159.968V512c0 17.664 14.304 31.968 31.968 31.968H512a31.968 31.968 0 0 0 31.968-31.968V160A31.968 31.968 0 0 0 512.032 128H160A31.968 31.968 0 0 0 128 159.968z m64 244.288V243.36h112.736V176h46.752c6.4 0.928 9.632 1.824 9.632 2.752a10.56 10.56 0 0 1-1.376 4.128c-2.752 7.328-4.128 16.032-4.128 26.112v34.368h119.648v156.768h-50.88v-20.64h-68.768v118.272H306.112v-118.272H238.752v24.768H192z m46.72-122.368v60.48h67.392V281.92H238.752z m185.664 60.48V281.92h-68.768v60.48h68.768z m203.84 488H576L668.128 576h64.64l89.344 254.4h-54.976l-19.264-53.664h-100.384l-19.232 53.632z m33.024-96.256h72.864l-34.368-108.608h-1.376l-37.12 108.608zM896 320h-64a128 128 0 0 0-128-128V128a192 192 0 0 1 192 192zM128 704h64a128 128 0 0 0 128 128v64a192 192 0 0 1-192-192z\"></path></symbol>'\n  +'<symbol id=\"icon-bilibili-line\" viewBox=\"0 0 1024 1024\"><path d=\"M306.005333 117.632L444.330667 256h135.296l138.368-138.325333a42.666667 42.666667 0 0 1 60.373333 60.373333L700.330667 256H789.333333A149.333333 149.333333 0 0 1 938.666667 405.333333v341.333334a149.333333 149.333333 0 0 1-149.333334 149.333333h-554.666666A149.333333 149.333333 0 0 1 85.333333 746.666667v-341.333334A149.333333 149.333333 0 0 1 234.666667 256h88.96L245.632 177.962667a42.666667 42.666667 0 0 1 60.373333-60.373334zM789.333333 341.333333h-554.666666a64 64 0 0 0-63.701334 57.856L170.666667 405.333333v341.333334a64 64 0 0 0 57.856 63.701333L234.666667 810.666667h554.666666a64 64 0 0 0 63.701334-57.856L853.333333 746.666667v-341.333334A64 64 0 0 0 789.333333 341.333333zM341.333333 469.333333a42.666667 42.666667 0 0 1 42.666667 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666666-42.666667z m341.333334 0a42.666667 42.666667 0 0 1 42.666666 42.666667v85.333333a42.666667 42.666667 0 0 1-85.333333 0v-85.333333a42.666667 42.666667 0 0 1 42.666667-42.666667z\"  ></path>'\n  +'</symbol><symbol id=\"icon-gitee\" viewBox=\"0 0 1024 1024\"><path d=\"M512 1024C229.222 1024 0 794.778 0 512S229.222 0 512 0s512 229.222 512 512-229.222 512-512 512z m259.149-568.883h-290.74a25.293 25.293 0 0 0-25.292 25.293l-0.026 63.206c0 13.952 11.315 25.293 25.267 25.293h177.024c13.978 0 25.293 11.315 25.293 25.267v12.646a75.853 75.853 0 0 1-75.853 75.853h-240.23a25.293 25.293 0 0 1-25.267-25.293V417.203a75.853 75.853 0 0 1 75.827-75.853h353.946a25.293 25.293 0 0 0 25.267-25.292l0.077-63.207a25.293 25.293 0 0 0-25.268-25.293H417.152a189.62 189.62 0 0 0-189.62 189.645V771.15c0 13.977 11.316 25.293 25.294 25.293h372.94a170.65 170.65 0 0 0 170.65-170.65V480.384a25.293 25.293 0 0 0-25.293-25.267z\" ></path><symbol id=\"icon-github\" viewBox=\"0 0 1024 1024\"><path d=\"M512 42.666667A464.64 464.64 0 0 0 42.666667 502.186667 460.373333 460.373333 0 0 0 363.52 938.666667c23.466667 4.266667 32-9.813333 32-22.186667v-78.08c-130.56 27.733333-158.293333-61.44-158.293333-61.44a122.026667 122.026667 0 0 0-52.053334-67.413333c-42.666667-28.16 3.413333-27.733333 3.413334-27.733334a98.56 98.56 0 0 1 71.68 47.36 101.12 101.12 0 0 0 136.533333 37.973334 99.413333 99.413333 0 0 1 29.866667-61.44c-104.106667-11.52-213.333333-50.773333-213.333334-226.986667a177.066667 177.066667 0 0 1 47.36-124.16 161.28 161.28 0 0 1 4.693334-121.173333s39.68-12.373333 128 46.933333a455.68 455.68 0 0 1 234.666666 0c89.6-59.306667 128-46.933333 128-46.933333a161.28 161.28 0 0 1 4.693334 121.173333A177.066667 177.066667 0 0 1 810.666667 477.866667c0 176.64-110.08 215.466667-213.333334 226.986666a106.666667 106.666667 0 0 1 32 85.333334v125.866666c0 14.933333 8.533333 26.88 32 22.186667A460.8 460.8 0 0 0 981.333333 502.186667 464.64 464.64 0 0 0 512 42.666667\"></path></symbol></svg>'),\n  (function (n) {\n    var t = (t = document.getElementsByTagName(\"script\"))[t.length - 1],\n      e = t.getAttribute(\"data-injectcss\"),\n      t = t.getAttribute(\"data-disable-injectsvg\");\n    if (!t) {\n      var i,\n        o,\n        a,\n        c,\n        d,\n        s = function (t, e) {\n          e.parentNode.insertBefore(t, e);\n        };\n      if (e && !n.__iconfont__svg__cssinject__) {\n        n.__iconfont__svg__cssinject__ = !0;\n        try {\n          document.write(\n            \"<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>\"\n          );\n        } catch (t) {\n          console && console.log(t);\n        }\n      }\n      (i = function () {\n        var t,\n          e = document.createElement(\"div\");\n        (e.innerHTML = n._iconfont_svg_string_3900458),\n          (e = e.getElementsByTagName(\"svg\")[0]) &&\n            (e.setAttribute(\"aria-hidden\", \"true\"),\n            (e.style.position = \"absolute\"),\n            (e.style.width = 0),\n            (e.style.height = 0),\n            (e.style.overflow = \"hidden\"),\n            (e = e),\n            (t = document.body).firstChild\n              ? s(e, t.firstChild)\n              : t.appendChild(e));\n      }),\n        document.addEventListener\n          ? ~[\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState)\n            ? setTimeout(i, 0)\n            : ((o = function () {\n                document.removeEventListener(\"DOMContentLoaded\", o, !1), i();\n              }),\n              document.addEventListener(\"DOMContentLoaded\", o, !1))\n          : document.attachEvent &&\n            ((a = i),\n            (c = n.document),\n            (d = !1),\n            r(),\n            (c.onreadystatechange = function () {\n              \"complete\" == c.readyState &&\n                ((c.onreadystatechange = null), l());\n            }));\n    }\n    function l() {\n      d || ((d = !0), a());\n    }\n    function r() {\n      try {\n        c.documentElement.doScroll(\"left\");\n      } catch (t) {\n        return void setTimeout(r, 50);\n      }\n      l();\n    }\n  })(window);\n"},{"_content":"/*==================== MENU SHOW Y HIDDEN ====================*/\nconst navMenu = document.getElementById('nav-menu'),\n    navToggle = document.getElementById('nav-toggle'),\n    navClose = document.getElementById('nav-close');\n\n/*===== MENU SHOW =====*/\n/* Validate if constant exists */\nif(navToggle){\n    navToggle.addEventListener('click',()=>{\n        navMenu.classList.add('show-menu')\n    })\n}\n\n/*===== MENU HIDDEN =====*/\n/* Validate if constant exists */\nif(navClose){\n    navClose.addEventListener('click',()=>{\n        navMenu.classList.remove('show-menu')\n    })\n}\n\n/*==================== REMOVE MENU MOBILE ====================*/\nconst navLink = document.querySelectorAll('.nav__link')\n\nfunction linkAction(){\n    const navMenu = document.getElementById('nav-menu')\n    // 点击每个菜单链接后收起菜单栏\n    navMenu.classList.remove('show-menu')\n}\nnavLink.forEach(n => n.addEventListener('click', linkAction))\n\n/*==================== ACCORDION SKILLS ====================*/\nconst skillsContent = document.getElementsByClassName('skills__content'),\n      skillsHeader = document.querySelectorAll('.skills__header')\n\n      function toggleSkills() {\n        let itemClass = this.parentNode.className\n\n        for(i = 0; i < skillsContent.length; i++) {\n          skillsContent[i].className = 'skills__content skills__close'\n        }\n        if(itemClass === 'skills__content skills__close'){\n          this.parentNode.className = 'skills__content skills__open'\n        }\n      }\n      \n      skillsHeader.forEach((el) => {\n        el.addEventListener('click', toggleSkills)\n      })\n\n/*==================== QUALIFICATION TABS ====================*/\nconst tabs = document.querySelectorAll('[data-target]'),\n      tabContents = document.querySelectorAll('[data-content]')\n\ntabs.forEach(tab => {\n  tab.addEventListener('click', () => {\n    console.log('click disparado')\n    const target = document.querySelector(tab.dataset.target)\n\n    tabContents.forEach(tabContent => {\n      tabContent.classList.remove('qualification__active')\n    })\n    target.classList.add('qualification__active')\n\n    tabs.forEach(tab => {\n      tab.classList.remove('qualification__active')\n    })\n    tab.classList.add('qualification__active')\n  })\n})\n\n\n/*==================== PORTFOLIO SWIPER  ====================*/\nlet swiperPortfolio = new Swiper('.portfolio__container', {\n    cssMode: true,\n    loop: true,\n  \n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev',\n    },\n  \n    pagination: {\n      el: '.swiper-pagination',\n      clickable: true,\n    },\n  \n    /* mousewheel: true,\n    keyboard: true, */\n  });\n\n\n/*==================== SCROLL SECTIONS ACTIVE LINK ====================*/\nconst sections = document.querySelectorAll('section[id]')\n\nfunction scrollActive(){\n    const scrollY = window.pageYOffset\n\n    sections.forEach(current =>{\n        const sectionHeight = current.offsetHeight\n        const sectionTop = current.offsetTop - 50;\n        sectionId = current.getAttribute('id')\n\n        if(scrollY > sectionTop && scrollY <= sectionTop + sectionHeight){\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.add('active-link')\n        }else{\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.remove('active-link')\n        }\n    })\n}\nwindow.addEventListener('scroll', scrollActive)\n\n/*==================== CHANGE BACKGROUND HEADER ====================*/ \nfunction scrollHeader(){\n    const nav = document.getElementById('header')\n    if(this.scrollY >= 80) nav.classList.add('scroll-header'); else nav.classList.remove('scroll-header')\n  }\n  window.addEventListener('scroll', scrollHeader)\n\n/*==================== SHOW SCROLL UP ====================*/ \nfunction scrollUp(){\n    const scrollUp = document.getElementById('scroll-up');\n    if(this.scrollY >= 560) scrollUp.classList.add('show-scroll'); else scrollUp.classList.remove('show-scroll')\n  }\n  window.addEventListener('scroll', scrollUp)\n\n/*==================== DARK LIGHT THEME & LANGUAGE====================*/ \n\nconst themeButton = document.getElementById('theme-button')\nconst darkTheme = 'dark-theme'\nconst iconTheme = 'uil-sun'\nconst language = 'cn'\n\n// Previously selected topic (if user selected)\nconst selectedTheme = localStorage.getItem('selected-theme')\nconst selectedIcon = localStorage.getItem('selected-icon')\n\n// We obtain the current theme that the interface has by validating the dark-theme class\nconst getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'\nconst getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun'\n\n// We validate if the user previously chose a topic\nif (selectedTheme) {\n  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\n  document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)\n  themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](iconTheme)\n}\n\n// Activate / deactivate the theme manually with the button\nthemeButton.addEventListener('click', () => {\n    // Add or remove the dark / icon theme\n    document.body.classList.toggle(darkTheme)\n    themeButton.classList.toggle(iconTheme)\n    // We save the theme and the current icon that the user chose\n    localStorage.setItem('selected-theme', getCurrentTheme())\n    localStorage.setItem('selected-icon', getCurrentIcon())\n})","source":"static-page/assets/js/main.js","raw":"/*==================== MENU SHOW Y HIDDEN ====================*/\nconst navMenu = document.getElementById('nav-menu'),\n    navToggle = document.getElementById('nav-toggle'),\n    navClose = document.getElementById('nav-close');\n\n/*===== MENU SHOW =====*/\n/* Validate if constant exists */\nif(navToggle){\n    navToggle.addEventListener('click',()=>{\n        navMenu.classList.add('show-menu')\n    })\n}\n\n/*===== MENU HIDDEN =====*/\n/* Validate if constant exists */\nif(navClose){\n    navClose.addEventListener('click',()=>{\n        navMenu.classList.remove('show-menu')\n    })\n}\n\n/*==================== REMOVE MENU MOBILE ====================*/\nconst navLink = document.querySelectorAll('.nav__link')\n\nfunction linkAction(){\n    const navMenu = document.getElementById('nav-menu')\n    // 点击每个菜单链接后收起菜单栏\n    navMenu.classList.remove('show-menu')\n}\nnavLink.forEach(n => n.addEventListener('click', linkAction))\n\n/*==================== ACCORDION SKILLS ====================*/\nconst skillsContent = document.getElementsByClassName('skills__content'),\n      skillsHeader = document.querySelectorAll('.skills__header')\n\n      function toggleSkills() {\n        let itemClass = this.parentNode.className\n\n        for(i = 0; i < skillsContent.length; i++) {\n          skillsContent[i].className = 'skills__content skills__close'\n        }\n        if(itemClass === 'skills__content skills__close'){\n          this.parentNode.className = 'skills__content skills__open'\n        }\n      }\n      \n      skillsHeader.forEach((el) => {\n        el.addEventListener('click', toggleSkills)\n      })\n\n/*==================== QUALIFICATION TABS ====================*/\nconst tabs = document.querySelectorAll('[data-target]'),\n      tabContents = document.querySelectorAll('[data-content]')\n\ntabs.forEach(tab => {\n  tab.addEventListener('click', () => {\n    console.log('click disparado')\n    const target = document.querySelector(tab.dataset.target)\n\n    tabContents.forEach(tabContent => {\n      tabContent.classList.remove('qualification__active')\n    })\n    target.classList.add('qualification__active')\n\n    tabs.forEach(tab => {\n      tab.classList.remove('qualification__active')\n    })\n    tab.classList.add('qualification__active')\n  })\n})\n\n\n/*==================== PORTFOLIO SWIPER  ====================*/\nlet swiperPortfolio = new Swiper('.portfolio__container', {\n    cssMode: true,\n    loop: true,\n  \n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev',\n    },\n  \n    pagination: {\n      el: '.swiper-pagination',\n      clickable: true,\n    },\n  \n    /* mousewheel: true,\n    keyboard: true, */\n  });\n\n\n/*==================== SCROLL SECTIONS ACTIVE LINK ====================*/\nconst sections = document.querySelectorAll('section[id]')\n\nfunction scrollActive(){\n    const scrollY = window.pageYOffset\n\n    sections.forEach(current =>{\n        const sectionHeight = current.offsetHeight\n        const sectionTop = current.offsetTop - 50;\n        sectionId = current.getAttribute('id')\n\n        if(scrollY > sectionTop && scrollY <= sectionTop + sectionHeight){\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.add('active-link')\n        }else{\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.remove('active-link')\n        }\n    })\n}\nwindow.addEventListener('scroll', scrollActive)\n\n/*==================== CHANGE BACKGROUND HEADER ====================*/ \nfunction scrollHeader(){\n    const nav = document.getElementById('header')\n    if(this.scrollY >= 80) nav.classList.add('scroll-header'); else nav.classList.remove('scroll-header')\n  }\n  window.addEventListener('scroll', scrollHeader)\n\n/*==================== SHOW SCROLL UP ====================*/ \nfunction scrollUp(){\n    const scrollUp = document.getElementById('scroll-up');\n    if(this.scrollY >= 560) scrollUp.classList.add('show-scroll'); else scrollUp.classList.remove('show-scroll')\n  }\n  window.addEventListener('scroll', scrollUp)\n\n/*==================== DARK LIGHT THEME & LANGUAGE====================*/ \n\nconst themeButton = document.getElementById('theme-button')\nconst darkTheme = 'dark-theme'\nconst iconTheme = 'uil-sun'\nconst language = 'cn'\n\n// Previously selected topic (if user selected)\nconst selectedTheme = localStorage.getItem('selected-theme')\nconst selectedIcon = localStorage.getItem('selected-icon')\n\n// We obtain the current theme that the interface has by validating the dark-theme class\nconst getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'\nconst getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun'\n\n// We validate if the user previously chose a topic\nif (selectedTheme) {\n  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\n  document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)\n  themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](iconTheme)\n}\n\n// Activate / deactivate the theme manually with the button\nthemeButton.addEventListener('click', () => {\n    // Add or remove the dark / icon theme\n    document.body.classList.toggle(darkTheme)\n    themeButton.classList.toggle(iconTheme)\n    // We save the theme and the current icon that the user chose\n    localStorage.setItem('selected-theme', getCurrentTheme())\n    localStorage.setItem('selected-icon', getCurrentIcon())\n})","date":"2025-10-23T09:20:17.862Z","updated":"2025-10-23T09:20:17.862Z","path":"static-page/assets/js/main.js","layout":"false","_id":"cm10dl6oy0005s2y45ksrcbcr","title":"","comments":1,"content":"/*==================== MENU SHOW Y HIDDEN ====================*/\nconst navMenu = document.getElementById('nav-menu'),\n    navToggle = document.getElementById('nav-toggle'),\n    navClose = document.getElementById('nav-close');\n\n/*===== MENU SHOW =====*/\n/* Validate if constant exists */\nif(navToggle){\n    navToggle.addEventListener('click',()=>{\n        navMenu.classList.add('show-menu')\n    })\n}\n\n/*===== MENU HIDDEN =====*/\n/* Validate if constant exists */\nif(navClose){\n    navClose.addEventListener('click',()=>{\n        navMenu.classList.remove('show-menu')\n    })\n}\n\n/*==================== REMOVE MENU MOBILE ====================*/\nconst navLink = document.querySelectorAll('.nav__link')\n\nfunction linkAction(){\n    const navMenu = document.getElementById('nav-menu')\n    // 点击每个菜单链接后收起菜单栏\n    navMenu.classList.remove('show-menu')\n}\nnavLink.forEach(n => n.addEventListener('click', linkAction))\n\n/*==================== ACCORDION SKILLS ====================*/\nconst skillsContent = document.getElementsByClassName('skills__content'),\n      skillsHeader = document.querySelectorAll('.skills__header')\n\n      function toggleSkills() {\n        let itemClass = this.parentNode.className\n\n        for(i = 0; i < skillsContent.length; i++) {\n          skillsContent[i].className = 'skills__content skills__close'\n        }\n        if(itemClass === 'skills__content skills__close'){\n          this.parentNode.className = 'skills__content skills__open'\n        }\n      }\n      \n      skillsHeader.forEach((el) => {\n        el.addEventListener('click', toggleSkills)\n      })\n\n/*==================== QUALIFICATION TABS ====================*/\nconst tabs = document.querySelectorAll('[data-target]'),\n      tabContents = document.querySelectorAll('[data-content]')\n\ntabs.forEach(tab => {\n  tab.addEventListener('click', () => {\n    console.log('click disparado')\n    const target = document.querySelector(tab.dataset.target)\n\n    tabContents.forEach(tabContent => {\n      tabContent.classList.remove('qualification__active')\n    })\n    target.classList.add('qualification__active')\n\n    tabs.forEach(tab => {\n      tab.classList.remove('qualification__active')\n    })\n    tab.classList.add('qualification__active')\n  })\n})\n\n\n/*==================== PORTFOLIO SWIPER  ====================*/\nlet swiperPortfolio = new Swiper('.portfolio__container', {\n    cssMode: true,\n    loop: true,\n  \n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev',\n    },\n  \n    pagination: {\n      el: '.swiper-pagination',\n      clickable: true,\n    },\n  \n    /* mousewheel: true,\n    keyboard: true, */\n  });\n\n\n/*==================== SCROLL SECTIONS ACTIVE LINK ====================*/\nconst sections = document.querySelectorAll('section[id]')\n\nfunction scrollActive(){\n    const scrollY = window.pageYOffset\n\n    sections.forEach(current =>{\n        const sectionHeight = current.offsetHeight\n        const sectionTop = current.offsetTop - 50;\n        sectionId = current.getAttribute('id')\n\n        if(scrollY > sectionTop && scrollY <= sectionTop + sectionHeight){\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.add('active-link')\n        }else{\n            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.remove('active-link')\n        }\n    })\n}\nwindow.addEventListener('scroll', scrollActive)\n\n/*==================== CHANGE BACKGROUND HEADER ====================*/ \nfunction scrollHeader(){\n    const nav = document.getElementById('header')\n    if(this.scrollY >= 80) nav.classList.add('scroll-header'); else nav.classList.remove('scroll-header')\n  }\n  window.addEventListener('scroll', scrollHeader)\n\n/*==================== SHOW SCROLL UP ====================*/ \nfunction scrollUp(){\n    const scrollUp = document.getElementById('scroll-up');\n    if(this.scrollY >= 560) scrollUp.classList.add('show-scroll'); else scrollUp.classList.remove('show-scroll')\n  }\n  window.addEventListener('scroll', scrollUp)\n\n/*==================== DARK LIGHT THEME & LANGUAGE====================*/ \n\nconst themeButton = document.getElementById('theme-button')\nconst darkTheme = 'dark-theme'\nconst iconTheme = 'uil-sun'\nconst language = 'cn'\n\n// Previously selected topic (if user selected)\nconst selectedTheme = localStorage.getItem('selected-theme')\nconst selectedIcon = localStorage.getItem('selected-icon')\n\n// We obtain the current theme that the interface has by validating the dark-theme class\nconst getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'\nconst getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun'\n\n// We validate if the user previously chose a topic\nif (selectedTheme) {\n  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\n  document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)\n  themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](iconTheme)\n}\n\n// Activate / deactivate the theme manually with the button\nthemeButton.addEventListener('click', () => {\n    // Add or remove the dark / icon theme\n    document.body.classList.toggle(darkTheme)\n    themeButton.classList.toggle(iconTheme)\n    // We save the theme and the current icon that the user chose\n    localStorage.setItem('selected-theme', getCurrentTheme())\n    localStorage.setItem('selected-icon', getCurrentIcon())\n})"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <!--==================== UNICONS 图标====================-->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unicons.iconscout.com/release/v3.0.6/css/line.css\"\n    />\n    <!--==================== SWIPER CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/swiper-bundle.min.css\" />\n\n    <!--==================== CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/styles.css\" />\n    <!-- iconfont font class 方式引用图标 -->\n    <!-- <link\n      rel=\"stylesheet\"\n      href=\"https://at.alicdn.com/t/c/font_3900458_82z46p85im.css\"\n    /> -->\n\n    <title>Personal Page</title>\n  </head>\n  <body>\n    <!--==================== MAIN ====================-->\n    <main class=\"main\">\n      <div class=\"nav__menu\" id=\"nav-menu\">\n        <ul class=\"nav__list grid\">\n          <li class=\"nav__item\">\n            <a href=\"#home\" class=\"nav__link\">\n              <i class=\"uil uil-estate nav__icon\"></i>\n              <p i18n=\"home\">Home</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#about\" class=\"nav__link\">\n              <i class=\"uil uil-user nav__icon\"></i>\n              <p i18n=\"about\">About</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#skills\" class=\"nav__link\">\n              <i class=\"uil uil-file-alt nav__icon\"></i>\n              <p i18n=\"skills\">Skills</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#portfolio\" class=\"nav__link\">\n              <i class=\"uil uil-scenery nav__icon\"></i>\n              <p i18n=\"portfolio\">Portfolio</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#contact\" class=\"nav__link\">\n              <i class=\"uil uil-message nav__icon\"></i>\n              <p i18n=\"contact\">Contactme</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <div class=\"nav__link\" id=\"translate\" value=\"en\">\n              <svg class=\"icon nav__icon-svg\" aria-hidden=\"true\">\n                <use xlink:href=\"#icon-fanyi\"></use>\n              </svg>\n              <a class=\"=nav__link\" id=\"nav__translate\">Translate</a>\n            </div>\n          </li>\n        </ul>\n        <i class=\"uil uil-times nav__close\" id=\"nav-close\"></i>\n        <div class=\"nav__btns\">\n          <i class=\"uil uil-moon change-theme\" id=\"theme-button\"></i>\n          <div class=\"nav__toggle\" id=\"nav-toggle\">\n            <i class=\"uil uil-apps\"></i>\n          </div>\n        </div>\n      </div>\n\n      <!--==================== HOME ====================-->\n      <section class=\"home section\" id=\"home\">\n        <div class=\"home__container container grid\">\n          <div class=\"home__content\">\n            <div class=\"home__img\">\n              <svg\n                class=\"home__blob\"\n                viewBox=\"0 0 200 187\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              >\n                <mask id=\"mask0\" mask-type=\"alpha\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 165.547 \n                                130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 129.362C2.45775 \n                                97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 -0.149132 97.9666 \n                                0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                </mask>\n                <g mask=\"url(#mask0)\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 \n                                165.547 130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 \n                                129.362C2.45775 97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 \n                                -0.149132 97.9666 0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                  <image\n                    class=\"home__blob-img\"\n                    x=\"0\"\n                    y=\"-30\"\n                    xlink:href=\"assets/img/cat.png\"\n                  />\n                </g>\n              </svg>\n            </div>\n\n            <div class=\"home__data\">\n              <h1 class=\"home__title\" i18n=\"home__title\">Hi, I'm Nutcracker</h1>\n              <h3 class=\"home__subtitle\" i18n=\"home__subtitle\">\n                Android developer\n              </h3>\n              <p class=\"home__description\" i18n=\"home__description\">\n                High level experience in Android development knowledge,\n                producing quality work.\n              </p>\n              \n            </div class='grid'>\n              <a href=\"#contact\" class=\"button button-flex\">\n                <span i18n=\"home__contact\">Contact Me</span>\n                <i class=\"uil uil-message button__icon\"></i>\n              </a>\n          </div>\n          <div class=\"home__scroll\">\n            <a href=\"#about\" class=\"home__scroll-button button--flex\">\n              <i class=\"uil uil-mouse-alt-2 home__scroll-mouse\"></i>\n              <span class=\"home__scroll-name\" i18n=\"home__scroll-name\"\n                >Scroll down</span\n              >\n              <i class=\"uil uil-arrow-down home__scroll-arrow\"></i>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== ABOUT ====================-->\n      <section class=\"about section\" id=\"about\">\n        <h2 class=\"section__title\" i18n=\"about__title\">About Me</h2>\n        <span class=\"section__subtitle\" i18n=\"about__subtitle\"\n          >My introduction</span\n        >\n        <div class=\"about__container container grid\">\n          <img src=\"assets/img/about.png\" alt=\"\" class=\"about__img\" />\n\n          <div class=\"about__data\">\n            <p class=\"about__description\" i18n=\"about__description\">\n              Web developer, with extensive knowledge and years of experience,\n              working in web technologies and Ui / Ux design, delivering quality\n              work.\n            </p>\n\n            <div class=\"about__info\">\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name1\"\n                  >Years of <br />\n                  experience</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name2\"\n                  >Completed <br />\n                  projects</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name3\"\n                  >Companies <br />\n                  worked</span\n                >\n              </div>\n            </div>\n\n            <div class=\"about__buttons\">\n              <a\n                download=\"\"\n                href=\"assets/pdf/简历.pdf\"\n                class=\"button button--flex\"\n              >\n                <span i18n=\"download\">Download CV</span\n                ><i class=\"uil uil-download-alt button__icon\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== SKILLS ====================-->\n      <section class=\"skills section\" id=\"skills\">\n        <h2 class=\"section__title\" i18n=\"skills__title\">Skills</h2>\n        <span class=\"section__subtitle\" i18n=\"skills__subtitle\"\n          >My technical level</span\n        >\n\n        <div class=\"skills__container container grid\">\n          <div>\n            <!--==================== SKILLS 1 ====================-->\n            <div class=\"skills__content skills__open\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-brackets-curly skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"home__subtitle\">\n                    Frontend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">HTML</h3>\n                    <span class=\"skills__number\">60%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__html\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">CSS</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__css\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">JavaScript</h3>\n                    <span class=\"skills__number\">30%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__js\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">VUE</h3>\n                    <span class=\"skills__number\">10%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__vue\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <!--==================== SKILLS 2 ====================-->\n            <div class=\"skills__content skills__close\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-server-network skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"skills__title2\">\n                    Backend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years2\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Java</h3>\n                    <span class=\"skills__number\">70%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__java\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Python</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__python\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== QUALIFICATION ====================-->\n      <section class=\"qualification section\">\n        <h2 class=\"section__title\" i18n=\"qualification__title\">\n          Qualification\n        </h2>\n        <span class=\"section__subtitle\" i18n=\"qualification__subtitle\"\n          >My personal journey</span\n        >\n        <div class=\"qualification__container container\">\n          <div class=\"qualification__tabs\">\n            <div\n              class=\"qualification__button button--flex qualification__active\"\n              data-target=\"#education\"\n            >\n              <i class=\"uil uil-graduation-cap qualification__icon\"></i>\n              <span i18n=\"education\">Education</span>\n            </div>\n\n            <div class=\"qualification__button button--flex\" data-target=\"#work\">\n              <i class=\"uil uil-briefcase-alt qualification__icon\"></i>\n              <span i18n=\"work\">Work</span>\n            </div>\n          </div>\n          <div class=\"qualification__sections\">\n            <!--==================== QUALIFICATION CONTENT 1 ====================-->\n            <div\n              class=\"qualification__content qualification__active\"\n              data-content\n              id=\"education\"\n            >\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification1__title\">\n                    Computer Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification1__subtitle\"\n                    >**** - University</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2019 - 2023\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 2 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification2__title\">\n                    Web Design\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification2__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022.12-2023\n                  </div>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 3 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification3__title\">\n                    Web Development\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification3__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2023 - ...\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n              </div>\n            </div>\n            <!--==================== QUALIFICATION CONTENT 2 ====================-->\n            <div class=\"qualification__content\" data-content id=\"work\">\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification4__title\">\n                    Software Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification4__subtitle\"\n                    >ShenZhen</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== PORTFOLIO ====================-->\n      <section class=\"portfolio section\" id=\"portfolio\">\n        <h2 class=\"section__title\" i18n=\"portfolio__title\">Portfolio</h2>\n        <span class=\"section__subtitle\" i18n=\"portfolio__subtitle\"\n          >Most recent works</span\n        >\n\n        <div class=\"portfolio__container container swiper-container\">\n          <div class=\"swiper-wrapper\">\n            <!--==================== PORTFOLIO 1 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio1.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio1__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio1__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 2 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio2.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio2__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio2__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 3 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio3.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio3__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio3__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n          <!-- add arrows-->\n          <div class=\"swiper-button-next\">\n            <i class=\"uil uil-angle-right-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <div class=\"swiper-button-prev\">\n            <i class=\"uil uil-angle-left-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <!-- Add Pagination -->\n          <div class=\"swiper-pagination\"></div>\n        </div>\n      </section>\n\n      <!--==================== CONTACT ME ====================-->\n      <section class=\"contact section\" id=\"contact\">\n        <h2 class=\"section__title\" i18n=\"contact__title\">联系我</h2>\n        <span class=\"section__subtitle\" i18n=\"contact__subtitle\"\n          >Get in touch</span\n        >\n\n        <div class=\"contact__container container grid\">\n          <div>\n            <div class=\"contact__information\">\n              <i class=\"uil uil-phone-alt contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"tel\">联系电话</h3>\n                <span class=\"contact__subtitle\" i18n=\"tel__number\"\n                  >17190300964</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-envelope contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"email\">邮箱</h3>\n                <span class=\"contatc__subtitle\" i18n=\"email__address\"\n                  >mrchenzhaojun@gmail.com</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-map-marker contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"location\">地址</h3>\n                <span class=\"contatc__subtitle\" i18n=\"location__detail\"\n                  >广东省深圳市</span\n                >\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n\n    <!--==================== SCROLL TOP ====================-->\n    <a href=\"#\" class=\"scrollup\" id=\"scroll-up\">\n      <i class=\"uil uil-arrow-up scrollup__icon\"></i>\n    </a>\n    <!--==================== SWIPER JS ====================-->\n    <script src=\"assets/js/swiper-bundle.min.js\"></script>\n\n    <!-- iconfont JS -->\n    <script src=\"assets/js/iconfont.js\"></script>\n    <!-- jquery -->\n    <script src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <!--==================== MAIN JS ====================-->\n    <script src=\"assets/js/main.js\"></script>\n  </body>\n</html>\n","source":"static-page/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <!--==================== UNICONS 图标====================-->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unicons.iconscout.com/release/v3.0.6/css/line.css\"\n    />\n    <!--==================== SWIPER CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/swiper-bundle.min.css\" />\n\n    <!--==================== CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/styles.css\" />\n    <!-- iconfont font class 方式引用图标 -->\n    <!-- <link\n      rel=\"stylesheet\"\n      href=\"https://at.alicdn.com/t/c/font_3900458_82z46p85im.css\"\n    /> -->\n\n    <title>Personal Page</title>\n  </head>\n  <body>\n    <!--==================== MAIN ====================-->\n    <main class=\"main\">\n      <div class=\"nav__menu\" id=\"nav-menu\">\n        <ul class=\"nav__list grid\">\n          <li class=\"nav__item\">\n            <a href=\"#home\" class=\"nav__link\">\n              <i class=\"uil uil-estate nav__icon\"></i>\n              <p i18n=\"home\">Home</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#about\" class=\"nav__link\">\n              <i class=\"uil uil-user nav__icon\"></i>\n              <p i18n=\"about\">About</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#skills\" class=\"nav__link\">\n              <i class=\"uil uil-file-alt nav__icon\"></i>\n              <p i18n=\"skills\">Skills</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#portfolio\" class=\"nav__link\">\n              <i class=\"uil uil-scenery nav__icon\"></i>\n              <p i18n=\"portfolio\">Portfolio</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#contact\" class=\"nav__link\">\n              <i class=\"uil uil-message nav__icon\"></i>\n              <p i18n=\"contact\">Contactme</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <div class=\"nav__link\" id=\"translate\" value=\"en\">\n              <svg class=\"icon nav__icon-svg\" aria-hidden=\"true\">\n                <use xlink:href=\"#icon-fanyi\"></use>\n              </svg>\n              <a class=\"=nav__link\" id=\"nav__translate\">Translate</a>\n            </div>\n          </li>\n        </ul>\n        <i class=\"uil uil-times nav__close\" id=\"nav-close\"></i>\n        <div class=\"nav__btns\">\n          <i class=\"uil uil-moon change-theme\" id=\"theme-button\"></i>\n          <div class=\"nav__toggle\" id=\"nav-toggle\">\n            <i class=\"uil uil-apps\"></i>\n          </div>\n        </div>\n      </div>\n\n      <!--==================== HOME ====================-->\n      <section class=\"home section\" id=\"home\">\n        <div class=\"home__container container grid\">\n          <div class=\"home__content\">\n            <div class=\"home__img\">\n              <svg\n                class=\"home__blob\"\n                viewBox=\"0 0 200 187\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              >\n                <mask id=\"mask0\" mask-type=\"alpha\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 165.547 \n                                130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 129.362C2.45775 \n                                97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 -0.149132 97.9666 \n                                0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                </mask>\n                <g mask=\"url(#mask0)\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 \n                                165.547 130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 \n                                129.362C2.45775 97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 \n                                -0.149132 97.9666 0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                  <image\n                    class=\"home__blob-img\"\n                    x=\"0\"\n                    y=\"-30\"\n                    xlink:href=\"assets/img/cat.png\"\n                  />\n                </g>\n              </svg>\n            </div>\n\n            <div class=\"home__data\">\n              <h1 class=\"home__title\" i18n=\"home__title\">Hi, I'm Nutcracker</h1>\n              <h3 class=\"home__subtitle\" i18n=\"home__subtitle\">\n                Android developer\n              </h3>\n              <p class=\"home__description\" i18n=\"home__description\">\n                High level experience in Android development knowledge,\n                producing quality work.\n              </p>\n              \n            </div class='grid'>\n              <a href=\"#contact\" class=\"button button-flex\">\n                <span i18n=\"home__contact\">Contact Me</span>\n                <i class=\"uil uil-message button__icon\"></i>\n              </a>\n          </div>\n          <div class=\"home__scroll\">\n            <a href=\"#about\" class=\"home__scroll-button button--flex\">\n              <i class=\"uil uil-mouse-alt-2 home__scroll-mouse\"></i>\n              <span class=\"home__scroll-name\" i18n=\"home__scroll-name\"\n                >Scroll down</span\n              >\n              <i class=\"uil uil-arrow-down home__scroll-arrow\"></i>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== ABOUT ====================-->\n      <section class=\"about section\" id=\"about\">\n        <h2 class=\"section__title\" i18n=\"about__title\">About Me</h2>\n        <span class=\"section__subtitle\" i18n=\"about__subtitle\"\n          >My introduction</span\n        >\n        <div class=\"about__container container grid\">\n          <img src=\"assets/img/about.png\" alt=\"\" class=\"about__img\" />\n\n          <div class=\"about__data\">\n            <p class=\"about__description\" i18n=\"about__description\">\n              Web developer, with extensive knowledge and years of experience,\n              working in web technologies and Ui / Ux design, delivering quality\n              work.\n            </p>\n\n            <div class=\"about__info\">\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name1\"\n                  >Years of <br />\n                  experience</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name2\"\n                  >Completed <br />\n                  projects</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name3\"\n                  >Companies <br />\n                  worked</span\n                >\n              </div>\n            </div>\n\n            <div class=\"about__buttons\">\n              <a\n                download=\"\"\n                href=\"assets/pdf/简历.pdf\"\n                class=\"button button--flex\"\n              >\n                <span i18n=\"download\">Download CV</span\n                ><i class=\"uil uil-download-alt button__icon\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== SKILLS ====================-->\n      <section class=\"skills section\" id=\"skills\">\n        <h2 class=\"section__title\" i18n=\"skills__title\">Skills</h2>\n        <span class=\"section__subtitle\" i18n=\"skills__subtitle\"\n          >My technical level</span\n        >\n\n        <div class=\"skills__container container grid\">\n          <div>\n            <!--==================== SKILLS 1 ====================-->\n            <div class=\"skills__content skills__open\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-brackets-curly skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"home__subtitle\">\n                    Frontend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">HTML</h3>\n                    <span class=\"skills__number\">60%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__html\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">CSS</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__css\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">JavaScript</h3>\n                    <span class=\"skills__number\">30%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__js\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">VUE</h3>\n                    <span class=\"skills__number\">10%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__vue\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <!--==================== SKILLS 2 ====================-->\n            <div class=\"skills__content skills__close\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-server-network skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"skills__title2\">\n                    Backend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years2\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Java</h3>\n                    <span class=\"skills__number\">70%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__java\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Python</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__python\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== QUALIFICATION ====================-->\n      <section class=\"qualification section\">\n        <h2 class=\"section__title\" i18n=\"qualification__title\">\n          Qualification\n        </h2>\n        <span class=\"section__subtitle\" i18n=\"qualification__subtitle\"\n          >My personal journey</span\n        >\n        <div class=\"qualification__container container\">\n          <div class=\"qualification__tabs\">\n            <div\n              class=\"qualification__button button--flex qualification__active\"\n              data-target=\"#education\"\n            >\n              <i class=\"uil uil-graduation-cap qualification__icon\"></i>\n              <span i18n=\"education\">Education</span>\n            </div>\n\n            <div class=\"qualification__button button--flex\" data-target=\"#work\">\n              <i class=\"uil uil-briefcase-alt qualification__icon\"></i>\n              <span i18n=\"work\">Work</span>\n            </div>\n          </div>\n          <div class=\"qualification__sections\">\n            <!--==================== QUALIFICATION CONTENT 1 ====================-->\n            <div\n              class=\"qualification__content qualification__active\"\n              data-content\n              id=\"education\"\n            >\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification1__title\">\n                    Computer Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification1__subtitle\"\n                    >**** - University</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2019 - 2023\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 2 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification2__title\">\n                    Web Design\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification2__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022.12-2023\n                  </div>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 3 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification3__title\">\n                    Web Development\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification3__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2023 - ...\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n              </div>\n            </div>\n            <!--==================== QUALIFICATION CONTENT 2 ====================-->\n            <div class=\"qualification__content\" data-content id=\"work\">\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification4__title\">\n                    Software Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification4__subtitle\"\n                    >ShenZhen</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== PORTFOLIO ====================-->\n      <section class=\"portfolio section\" id=\"portfolio\">\n        <h2 class=\"section__title\" i18n=\"portfolio__title\">Portfolio</h2>\n        <span class=\"section__subtitle\" i18n=\"portfolio__subtitle\"\n          >Most recent works</span\n        >\n\n        <div class=\"portfolio__container container swiper-container\">\n          <div class=\"swiper-wrapper\">\n            <!--==================== PORTFOLIO 1 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio1.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio1__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio1__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 2 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio2.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio2__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio2__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 3 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio3.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio3__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio3__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n          <!-- add arrows-->\n          <div class=\"swiper-button-next\">\n            <i class=\"uil uil-angle-right-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <div class=\"swiper-button-prev\">\n            <i class=\"uil uil-angle-left-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <!-- Add Pagination -->\n          <div class=\"swiper-pagination\"></div>\n        </div>\n      </section>\n\n      <!--==================== CONTACT ME ====================-->\n      <section class=\"contact section\" id=\"contact\">\n        <h2 class=\"section__title\" i18n=\"contact__title\">联系我</h2>\n        <span class=\"section__subtitle\" i18n=\"contact__subtitle\"\n          >Get in touch</span\n        >\n\n        <div class=\"contact__container container grid\">\n          <div>\n            <div class=\"contact__information\">\n              <i class=\"uil uil-phone-alt contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"tel\">联系电话</h3>\n                <span class=\"contact__subtitle\" i18n=\"tel__number\"\n                  >17190300964</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-envelope contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"email\">邮箱</h3>\n                <span class=\"contatc__subtitle\" i18n=\"email__address\"\n                  >mrchenzhaojun@gmail.com</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-map-marker contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"location\">地址</h3>\n                <span class=\"contatc__subtitle\" i18n=\"location__detail\"\n                  >广东省深圳市</span\n                >\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n\n    <!--==================== SCROLL TOP ====================-->\n    <a href=\"#\" class=\"scrollup\" id=\"scroll-up\">\n      <i class=\"uil uil-arrow-up scrollup__icon\"></i>\n    </a>\n    <!--==================== SWIPER JS ====================-->\n    <script src=\"assets/js/swiper-bundle.min.js\"></script>\n\n    <!-- iconfont JS -->\n    <script src=\"assets/js/iconfont.js\"></script>\n    <!-- jquery -->\n    <script src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <!--==================== MAIN JS ====================-->\n    <script src=\"assets/js/main.js\"></script>\n  </body>\n</html>\n","date":"2025-10-23T09:20:17.863Z","updated":"2025-10-23T09:20:17.863Z","path":"static-page/index.html","_id":"cm10dl6pn001ws2y49hh8c91q","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <!--==================== UNICONS 图标====================-->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unicons.iconscout.com/release/v3.0.6/css/line.css\"\n    />\n    <!--==================== SWIPER CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/swiper-bundle.min.css\" />\n\n    <!--==================== CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/styles.css\" />\n    <!-- iconfont font class 方式引用图标 -->\n    <!-- <link\n      rel=\"stylesheet\"\n      href=\"https://at.alicdn.com/t/c/font_3900458_82z46p85im.css\"\n    /> -->\n\n    <title>Personal Page</title>\n  </head>\n  <body>\n    <!--==================== MAIN ====================-->\n    <main class=\"main\">\n      <div class=\"nav__menu\" id=\"nav-menu\">\n        <ul class=\"nav__list grid\">\n          <li class=\"nav__item\">\n            <a href=\"#home\" class=\"nav__link\">\n              <i class=\"uil uil-estate nav__icon\"></i>\n              <p i18n=\"home\">Home</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#about\" class=\"nav__link\">\n              <i class=\"uil uil-user nav__icon\"></i>\n              <p i18n=\"about\">About</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#skills\" class=\"nav__link\">\n              <i class=\"uil uil-file-alt nav__icon\"></i>\n              <p i18n=\"skills\">Skills</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#portfolio\" class=\"nav__link\">\n              <i class=\"uil uil-scenery nav__icon\"></i>\n              <p i18n=\"portfolio\">Portfolio</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#contact\" class=\"nav__link\">\n              <i class=\"uil uil-message nav__icon\"></i>\n              <p i18n=\"contact\">Contactme</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <div class=\"nav__link\" id=\"translate\" value=\"en\">\n              <svg class=\"icon nav__icon-svg\" aria-hidden=\"true\">\n                <use xlink:href=\"#icon-fanyi\"></use>\n              </svg>\n              <a class=\"=nav__link\" id=\"nav__translate\">Translate</a>\n            </div>\n          </li>\n        </ul>\n        <i class=\"uil uil-times nav__close\" id=\"nav-close\"></i>\n        <div class=\"nav__btns\">\n          <i class=\"uil uil-moon change-theme\" id=\"theme-button\"></i>\n          <div class=\"nav__toggle\" id=\"nav-toggle\">\n            <i class=\"uil uil-apps\"></i>\n          </div>\n        </div>\n      </div>\n\n      <!--==================== HOME ====================-->\n      <section class=\"home section\" id=\"home\">\n        <div class=\"home__container container grid\">\n          <div class=\"home__content\">\n            <div class=\"home__img\">\n              <svg\n                class=\"home__blob\"\n                viewBox=\"0 0 200 187\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              >\n                <mask id=\"mask0\" mask-type=\"alpha\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 165.547 \n                                130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 129.362C2.45775 \n                                97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 -0.149132 97.9666 \n                                0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                </mask>\n                <g mask=\"url(#mask0)\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 \n                                165.547 130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 \n                                129.362C2.45775 97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 \n                                -0.149132 97.9666 0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                  <image\n                    class=\"home__blob-img\"\n                    x=\"0\"\n                    y=\"-30\"\n                    xlink:href=\"assets/img/cat.png\"\n                  />\n                </g>\n              </svg>\n            </div>\n\n            <div class=\"home__data\">\n              <h1 class=\"home__title\" i18n=\"home__title\">Hi, I'm Nutcracker</h1>\n              <h3 class=\"home__subtitle\" i18n=\"home__subtitle\">\n                Android developer\n              </h3>\n              <p class=\"home__description\" i18n=\"home__description\">\n                High level experience in Android development knowledge,\n                producing quality work.\n              </p>\n              \n            </div class='grid'>\n              <a href=\"#contact\" class=\"button button-flex\">\n                <span i18n=\"home__contact\">Contact Me</span>\n                <i class=\"uil uil-message button__icon\"></i>\n              </a>\n          </div>\n          <div class=\"home__scroll\">\n            <a href=\"#about\" class=\"home__scroll-button button--flex\">\n              <i class=\"uil uil-mouse-alt-2 home__scroll-mouse\"></i>\n              <span class=\"home__scroll-name\" i18n=\"home__scroll-name\"\n                >Scroll down</span\n              >\n              <i class=\"uil uil-arrow-down home__scroll-arrow\"></i>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== ABOUT ====================-->\n      <section class=\"about section\" id=\"about\">\n        <h2 class=\"section__title\" i18n=\"about__title\">About Me</h2>\n        <span class=\"section__subtitle\" i18n=\"about__subtitle\"\n          >My introduction</span\n        >\n        <div class=\"about__container container grid\">\n          <img src=\"assets/img/about.png\" alt=\"\" class=\"about__img\" />\n\n          <div class=\"about__data\">\n            <p class=\"about__description\" i18n=\"about__description\">\n              Web developer, with extensive knowledge and years of experience,\n              working in web technologies and Ui / Ux design, delivering quality\n              work.\n            </p>\n\n            <div class=\"about__info\">\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name1\"\n                  >Years of <br />\n                  experience</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name2\"\n                  >Completed <br />\n                  projects</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name3\"\n                  >Companies <br />\n                  worked</span\n                >\n              </div>\n            </div>\n\n            <div class=\"about__buttons\">\n              <a\n                download=\"\"\n                href=\"assets/pdf/简历.pdf\"\n                class=\"button button--flex\"\n              >\n                <span i18n=\"download\">Download CV</span\n                ><i class=\"uil uil-download-alt button__icon\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== SKILLS ====================-->\n      <section class=\"skills section\" id=\"skills\">\n        <h2 class=\"section__title\" i18n=\"skills__title\">Skills</h2>\n        <span class=\"section__subtitle\" i18n=\"skills__subtitle\"\n          >My technical level</span\n        >\n\n        <div class=\"skills__container container grid\">\n          <div>\n            <!--==================== SKILLS 1 ====================-->\n            <div class=\"skills__content skills__open\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-brackets-curly skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"home__subtitle\">\n                    Frontend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">HTML</h3>\n                    <span class=\"skills__number\">60%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__html\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">CSS</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__css\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">JavaScript</h3>\n                    <span class=\"skills__number\">30%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__js\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">VUE</h3>\n                    <span class=\"skills__number\">10%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__vue\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <!--==================== SKILLS 2 ====================-->\n            <div class=\"skills__content skills__close\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-server-network skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"skills__title2\">\n                    Backend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years2\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Java</h3>\n                    <span class=\"skills__number\">70%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__java\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Python</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__python\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== QUALIFICATION ====================-->\n      <section class=\"qualification section\">\n        <h2 class=\"section__title\" i18n=\"qualification__title\">\n          Qualification\n        </h2>\n        <span class=\"section__subtitle\" i18n=\"qualification__subtitle\"\n          >My personal journey</span\n        >\n        <div class=\"qualification__container container\">\n          <div class=\"qualification__tabs\">\n            <div\n              class=\"qualification__button button--flex qualification__active\"\n              data-target=\"#education\"\n            >\n              <i class=\"uil uil-graduation-cap qualification__icon\"></i>\n              <span i18n=\"education\">Education</span>\n            </div>\n\n            <div class=\"qualification__button button--flex\" data-target=\"#work\">\n              <i class=\"uil uil-briefcase-alt qualification__icon\"></i>\n              <span i18n=\"work\">Work</span>\n            </div>\n          </div>\n          <div class=\"qualification__sections\">\n            <!--==================== QUALIFICATION CONTENT 1 ====================-->\n            <div\n              class=\"qualification__content qualification__active\"\n              data-content\n              id=\"education\"\n            >\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification1__title\">\n                    Computer Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification1__subtitle\"\n                    >**** - University</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2019 - 2023\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 2 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification2__title\">\n                    Web Design\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification2__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022.12-2023\n                  </div>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 3 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification3__title\">\n                    Web Development\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification3__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2023 - ...\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n              </div>\n            </div>\n            <!--==================== QUALIFICATION CONTENT 2 ====================-->\n            <div class=\"qualification__content\" data-content id=\"work\">\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification4__title\">\n                    Software Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification4__subtitle\"\n                    >ShenZhen</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== PORTFOLIO ====================-->\n      <section class=\"portfolio section\" id=\"portfolio\">\n        <h2 class=\"section__title\" i18n=\"portfolio__title\">Portfolio</h2>\n        <span class=\"section__subtitle\" i18n=\"portfolio__subtitle\"\n          >Most recent works</span\n        >\n\n        <div class=\"portfolio__container container swiper-container\">\n          <div class=\"swiper-wrapper\">\n            <!--==================== PORTFOLIO 1 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio1.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio1__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio1__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 2 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio2.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio2__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio2__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 3 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio3.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio3__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio3__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n          <!-- add arrows-->\n          <div class=\"swiper-button-next\">\n            <i class=\"uil uil-angle-right-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <div class=\"swiper-button-prev\">\n            <i class=\"uil uil-angle-left-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <!-- Add Pagination -->\n          <div class=\"swiper-pagination\"></div>\n        </div>\n      </section>\n\n      <!--==================== CONTACT ME ====================-->\n      <section class=\"contact section\" id=\"contact\">\n        <h2 class=\"section__title\" i18n=\"contact__title\">联系我</h2>\n        <span class=\"section__subtitle\" i18n=\"contact__subtitle\"\n          >Get in touch</span\n        >\n\n        <div class=\"contact__container container grid\">\n          <div>\n            <div class=\"contact__information\">\n              <i class=\"uil uil-phone-alt contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"tel\">联系电话</h3>\n                <span class=\"contact__subtitle\" i18n=\"tel__number\"\n                  >17190300964</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-envelope contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"email\">邮箱</h3>\n                <span class=\"contatc__subtitle\" i18n=\"email__address\"\n                  >mrchenzhaojun@gmail.com</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-map-marker contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"location\">地址</h3>\n                <span class=\"contatc__subtitle\" i18n=\"location__detail\"\n                  >广东省深圳市</span\n                >\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n\n    <!--==================== SCROLL TOP ====================-->\n    <a href=\"#\" class=\"scrollup\" id=\"scroll-up\">\n      <i class=\"uil uil-arrow-up scrollup__icon\"></i>\n    </a>\n    <!--==================== SWIPER JS ====================-->\n    <script src=\"assets/js/swiper-bundle.min.js\"></script>\n\n    <!-- iconfont JS -->\n    <script src=\"assets/js/iconfont.js\"></script>\n    <!-- jquery -->\n    <script src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <!--==================== MAIN JS ====================-->\n    <script src=\"assets/js/main.js\"></script>\n  </body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <!--==================== UNICONS 图标====================-->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unicons.iconscout.com/release/v3.0.6/css/line.css\"\n    />\n    <!--==================== SWIPER CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/swiper-bundle.min.css\" />\n\n    <!--==================== CSS ====================-->\n    <link rel=\"stylesheet\" href=\"assets/css/styles.css\" />\n    <!-- iconfont font class 方式引用图标 -->\n    <!-- <link\n      rel=\"stylesheet\"\n      href=\"https://at.alicdn.com/t/c/font_3900458_82z46p85im.css\"\n    /> -->\n\n    <title>Personal Page</title>\n  </head>\n  <body>\n    <!--==================== MAIN ====================-->\n    <main class=\"main\">\n      <div class=\"nav__menu\" id=\"nav-menu\">\n        <ul class=\"nav__list grid\">\n          <li class=\"nav__item\">\n            <a href=\"#home\" class=\"nav__link\">\n              <i class=\"uil uil-estate nav__icon\"></i>\n              <p i18n=\"home\">Home</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#about\" class=\"nav__link\">\n              <i class=\"uil uil-user nav__icon\"></i>\n              <p i18n=\"about\">About</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#skills\" class=\"nav__link\">\n              <i class=\"uil uil-file-alt nav__icon\"></i>\n              <p i18n=\"skills\">Skills</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#portfolio\" class=\"nav__link\">\n              <i class=\"uil uil-scenery nav__icon\"></i>\n              <p i18n=\"portfolio\">Portfolio</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <a href=\"#contact\" class=\"nav__link\">\n              <i class=\"uil uil-message nav__icon\"></i>\n              <p i18n=\"contact\">Contactme</p>\n            </a>\n          </li>\n          <li class=\"nav__item\">\n            <div class=\"nav__link\" id=\"translate\" value=\"en\">\n              <svg class=\"icon nav__icon-svg\" aria-hidden=\"true\">\n                <use xlink:href=\"#icon-fanyi\"></use>\n              </svg>\n              <a class=\"=nav__link\" id=\"nav__translate\">Translate</a>\n            </div>\n          </li>\n        </ul>\n        <i class=\"uil uil-times nav__close\" id=\"nav-close\"></i>\n        <div class=\"nav__btns\">\n          <i class=\"uil uil-moon change-theme\" id=\"theme-button\"></i>\n          <div class=\"nav__toggle\" id=\"nav-toggle\">\n            <i class=\"uil uil-apps\"></i>\n          </div>\n        </div>\n      </div>\n\n      <!--==================== HOME ====================-->\n      <section class=\"home section\" id=\"home\">\n        <div class=\"home__container container grid\">\n          <div class=\"home__content\">\n            <div class=\"home__img\">\n              <svg\n                class=\"home__blob\"\n                viewBox=\"0 0 200 187\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              >\n                <mask id=\"mask0\" mask-type=\"alpha\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 165.547 \n                                130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 129.362C2.45775 \n                                97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 -0.149132 97.9666 \n                                0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                </mask>\n                <g mask=\"url(#mask0)\">\n                  <path\n                    d=\"M190.312 36.4879C206.582 62.1187 201.309 102.826 182.328 134.186C163.346 \n                                165.547 130.807 187.559 100.226 186.353C69.6454 185.297 41.0228 161.023 21.7403 \n                                129.362C2.45775 97.8511 -7.48481 59.1033 6.67581 34.5279C20.9871 10.1032 59.7028 \n                                -0.149132 97.9666 0.00163737C136.23 0.303176 174.193 10.857 190.312 36.4879Z\"\n                  />\n                  <image\n                    class=\"home__blob-img\"\n                    x=\"0\"\n                    y=\"-30\"\n                    xlink:href=\"assets/img/cat.png\"\n                  />\n                </g>\n              </svg>\n            </div>\n\n            <div class=\"home__data\">\n              <h1 class=\"home__title\" i18n=\"home__title\">Hi, I'm Nutcracker</h1>\n              <h3 class=\"home__subtitle\" i18n=\"home__subtitle\">\n                Android developer\n              </h3>\n              <p class=\"home__description\" i18n=\"home__description\">\n                High level experience in Android development knowledge,\n                producing quality work.\n              </p>\n              \n            </div class='grid'>\n              <a href=\"#contact\" class=\"button button-flex\">\n                <span i18n=\"home__contact\">Contact Me</span>\n                <i class=\"uil uil-message button__icon\"></i>\n              </a>\n          </div>\n          <div class=\"home__scroll\">\n            <a href=\"#about\" class=\"home__scroll-button button--flex\">\n              <i class=\"uil uil-mouse-alt-2 home__scroll-mouse\"></i>\n              <span class=\"home__scroll-name\" i18n=\"home__scroll-name\"\n                >Scroll down</span\n              >\n              <i class=\"uil uil-arrow-down home__scroll-arrow\"></i>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== ABOUT ====================-->\n      <section class=\"about section\" id=\"about\">\n        <h2 class=\"section__title\" i18n=\"about__title\">About Me</h2>\n        <span class=\"section__subtitle\" i18n=\"about__subtitle\"\n          >My introduction</span\n        >\n        <div class=\"about__container container grid\">\n          <img src=\"assets/img/about.png\" alt=\"\" class=\"about__img\" />\n\n          <div class=\"about__data\">\n            <p class=\"about__description\" i18n=\"about__description\">\n              Web developer, with extensive knowledge and years of experience,\n              working in web technologies and Ui / Ux design, delivering quality\n              work.\n            </p>\n\n            <div class=\"about__info\">\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name1\"\n                  >Years of <br />\n                  experience</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name2\"\n                  >Completed <br />\n                  projects</span\n                >\n              </div>\n\n              <div>\n                <span class=\"about__info-title\">00+</span>\n                <span class=\"about__info-name\" i18n=\"about__info-name3\"\n                  >Companies <br />\n                  worked</span\n                >\n              </div>\n            </div>\n\n            <div class=\"about__buttons\">\n              <a\n                download=\"\"\n                href=\"assets/pdf/简历.pdf\"\n                class=\"button button--flex\"\n              >\n                <span i18n=\"download\">Download CV</span\n                ><i class=\"uil uil-download-alt button__icon\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== SKILLS ====================-->\n      <section class=\"skills section\" id=\"skills\">\n        <h2 class=\"section__title\" i18n=\"skills__title\">Skills</h2>\n        <span class=\"section__subtitle\" i18n=\"skills__subtitle\"\n          >My technical level</span\n        >\n\n        <div class=\"skills__container container grid\">\n          <div>\n            <!--==================== SKILLS 1 ====================-->\n            <div class=\"skills__content skills__open\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-brackets-curly skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"home__subtitle\">\n                    Frontend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">HTML</h3>\n                    <span class=\"skills__number\">60%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__html\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">CSS</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__css\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">JavaScript</h3>\n                    <span class=\"skills__number\">30%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__js\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">VUE</h3>\n                    <span class=\"skills__number\">10%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__vue\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <!--==================== SKILLS 2 ====================-->\n            <div class=\"skills__content skills__close\">\n              <div class=\"skills__header\">\n                <i class=\"uil uil-server-network skills__icon\"></i>\n\n                <div>\n                  <h1 class=\"skills__title\" i18n=\"skills__title2\">\n                    Backend developer\n                  </h1>\n                  <span class=\"skills__subtitle\" i18n=\"skills__years2\"\n                    >More than * years</span\n                  >\n                </div>\n\n                <i class=\"uil uil-angle-down skills__arrow\"></i>\n              </div>\n\n              <div class=\"skills__list grid\">\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Java</h3>\n                    <span class=\"skills__number\">70%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__java\"></div>\n                  </div>\n                </div>\n\n                <div class=\"skills__data\">\n                  <div class=\"skills__titles\">\n                    <h3 class=\"skills__name\">Python</h3>\n                    <span class=\"skills__number\">50%</span>\n                  </div>\n                  <div class=\"skills__bar\">\n                    <div class=\"skills__percentage skills__python\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== QUALIFICATION ====================-->\n      <section class=\"qualification section\">\n        <h2 class=\"section__title\" i18n=\"qualification__title\">\n          Qualification\n        </h2>\n        <span class=\"section__subtitle\" i18n=\"qualification__subtitle\"\n          >My personal journey</span\n        >\n        <div class=\"qualification__container container\">\n          <div class=\"qualification__tabs\">\n            <div\n              class=\"qualification__button button--flex qualification__active\"\n              data-target=\"#education\"\n            >\n              <i class=\"uil uil-graduation-cap qualification__icon\"></i>\n              <span i18n=\"education\">Education</span>\n            </div>\n\n            <div class=\"qualification__button button--flex\" data-target=\"#work\">\n              <i class=\"uil uil-briefcase-alt qualification__icon\"></i>\n              <span i18n=\"work\">Work</span>\n            </div>\n          </div>\n          <div class=\"qualification__sections\">\n            <!--==================== QUALIFICATION CONTENT 1 ====================-->\n            <div\n              class=\"qualification__content qualification__active\"\n              data-content\n              id=\"education\"\n            >\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification1__title\">\n                    Computer Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification1__subtitle\"\n                    >**** - University</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2019 - 2023\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 2 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <span class=\"qualification__line\"></span>\n                </div>\n\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification2__title\">\n                    Web Design\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification2__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022.12-2023\n                  </div>\n                </div>\n              </div>\n              <!--==================== QUALIFICATION 3 ====================-->\n              <div class=\"qualification__data\">\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification3__title\">\n                    Web Development\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification3__subtitle\"\n                    >Self-Study</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2023 - ...\n                  </div>\n                </div>\n\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n              </div>\n            </div>\n            <!--==================== QUALIFICATION CONTENT 2 ====================-->\n            <div class=\"qualification__content\" data-content id=\"work\">\n              <!--==================== QUALIFICATION 1 ====================-->\n              <div class=\"qualification__data\">\n                <div></div>\n                <div>\n                  <span class=\"qualification__rounder\"></span>\n                  <!-- <span class=\"qualification__line\"></span> -->\n                </div>\n                <div>\n                  <h3 class=\"qualification__title\" i18n=\"qualification4__title\">\n                    Software Enginner\n                  </h3>\n                  <span\n                    class=\"qualification__subtitle\"\n                    i18n=\"qualification4__subtitle\"\n                    >ShenZhen</span\n                  >\n                  <div class=\"qualification__calendar\">\n                    <i class=\"uil uil-calendar-alt\"></i>\n                    2022\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!--==================== PORTFOLIO ====================-->\n      <section class=\"portfolio section\" id=\"portfolio\">\n        <h2 class=\"section__title\" i18n=\"portfolio__title\">Portfolio</h2>\n        <span class=\"section__subtitle\" i18n=\"portfolio__subtitle\"\n          >Most recent works</span\n        >\n\n        <div class=\"portfolio__container container swiper-container\">\n          <div class=\"swiper-wrapper\">\n            <!--==================== PORTFOLIO 1 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio1.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio1__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio1__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 2 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio2.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio2__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio2__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n\n            <!--==================== PORTFOLIO 3 ====================-->\n\n            <div class=\"portfolio__content grid swiper-slide\">\n              <img\n                src=\"assets/img/portfolio3.jpg\"\n                alt=\"\"\n                class=\"portfolio__img\"\n              />\n\n              <div class=\"portfolio_\">\n                <h3 class=\"portfolio__title\" i18n=\"portfolio3__title\">\n                  Modern Website\n                </h3>\n                <p\n                  class=\"portfolio__description\"\n                  i18n=\"portfolio3__description\"\n                >\n                  Website adaptable to all devices, with ui components and\n                  animated interactions.\n                </p>\n                <a\n                  href=\"https://gitee.com/asoutherncat/\"\n                  target=\"_blank\"\n                  class=\"button button--flex button--small portfolio__button\"\n                >\n                  Demo\n                  <i class=\"uil uil-arrow-right button__icon\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n          <!-- add arrows-->\n          <div class=\"swiper-button-next\">\n            <i class=\"uil uil-angle-right-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <div class=\"swiper-button-prev\">\n            <i class=\"uil uil-angle-left-b swiper-portfolio-icon\"></i>\n          </div>\n\n          <!-- Add Pagination -->\n          <div class=\"swiper-pagination\"></div>\n        </div>\n      </section>\n\n      <!--==================== CONTACT ME ====================-->\n      <section class=\"contact section\" id=\"contact\">\n        <h2 class=\"section__title\" i18n=\"contact__title\">联系我</h2>\n        <span class=\"section__subtitle\" i18n=\"contact__subtitle\"\n          >Get in touch</span\n        >\n\n        <div class=\"contact__container container grid\">\n          <div>\n            <div class=\"contact__information\">\n              <i class=\"uil uil-phone-alt contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"tel\">联系电话</h3>\n                <span class=\"contact__subtitle\" i18n=\"tel__number\"\n                  >17190300964</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-envelope contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"email\">邮箱</h3>\n                <span class=\"contatc__subtitle\" i18n=\"email__address\"\n                  >mrchenzhaojun@gmail.com</span\n                >\n              </div>\n            </div>\n\n            <div class=\"contact__information\">\n              <i class=\"uil uil-map-marker contact__icon\"></i>\n\n              <div>\n                <h3 class=\"contact__title\" i18n=\"location\">地址</h3>\n                <span class=\"contatc__subtitle\" i18n=\"location__detail\"\n                  >广东省深圳市</span\n                >\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n\n    <!--==================== SCROLL TOP ====================-->\n    <a href=\"#\" class=\"scrollup\" id=\"scroll-up\">\n      <i class=\"uil uil-arrow-up scrollup__icon\"></i>\n    </a>\n    <!--==================== SWIPER JS ====================-->\n    <script src=\"assets/js/swiper-bundle.min.js\"></script>\n\n    <!-- iconfont JS -->\n    <script src=\"assets/js/iconfont.js\"></script>\n    <!-- jquery -->\n    <script src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <!--==================== MAIN JS ====================-->\n    <script src=\"assets/js/main.js\"></script>\n  </body>\n</html>\n"},{"_content":"/*==================== GOOGLE FONTS 字体====================*/\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap\");\n\n/*==================== VARIABLES CSS ====================*/\n:root {\n    --header-height: 3rem;\n\n    /*========== Colors 主题色彩==========*/\n    /* Change favorite color */\n    --hue-color: 250; /*Purple 250 - Green 142 - Blue 230 - Pink 340*/\n\n    /* HSL color mode */\n    --first-color: hsl(var(--hue-color), 69%, 61%);\n    --first-color-second: hsl(var(--hue-color), 69%, 61%);\n    --first-color-alt: hsl(var(--hue-color), 57%, 53%);\n    --first-color-lighter: hsl(var(--hue-color), 92%, 85%);\n    --title-color: hsl(var(--hue-color), 8%, 15%);\n    --text-color: hsl(var(--hue-color), 8%, 45%);\n    --text-color-light: hsl(var(--hue-color), 8%, 65%);\n    --input-color: hsl(var(--hue-color), 70%, 96%);\n    --body-color: hsl(var(--hue-color), 60%, 99%);\n    --container-color: hsl(var(--hue-color), 100%, 98%);\n    --scroll-bar-color: hsl(var(--hue-color), 12%, 90%);\n    --scroll-thumb-color: hsl(var(--hue-color), 12%, 80%);\n\n    /*========== Font and typography ==========*/\n    --body-font: 'Poppins', sans-serif;\n\n    /* .5rem = 8px, 1rem = 16px, 1.5rem = 24px ... */\n    --big-font-size: 2rem;\n    --h1-font-size: 1.5rem;\n    --h2-font-size: 1.25rem;\n    --h3-font-size: 1.125rem;\n    --normal-font-size: .938rem;\n    --small-font-size: .813rem;\n    --smaller-font-size: .75rem;\n\n    /*========== Font weight ==========*/\n    --font-medium: 500;\n    --font-semi-bold: 600;\n\n    /*========== Margenes Bottom ==========*/\n    /* .25rem = 4px, .5rem = 8px, .75rem = 12px ... */\n    --mb-0-25: .25rem;\n    --mb-0-5: .5rem;\n    --mb-0-75: .75rem;\n    --mb-1: 1rem;\n    --mb-1-5: 1.5rem;\n    --mb-2: 2rem;\n    --mb-2-5: 2.5rem;\n    --mb-3: 3rem;\n\n    /*========== z index ==========*/\n    --z-tooltip: 10;\n    --z-fixed: 100;\n    --z-modal: 1000;\n}\n\n/* Font size for large devices */\n@media screen and (min-width: 968px) {\n    :root {\n        --big-font-size: 3rem;\n        --h1-font-size: 2.25rem;\n        --h2-font-size: 1.5rem;\n        --h3-font-size: 1.25rem;\n        --normal-font-size: 1rem;\n        --small-font-size: .875rem;\n        --smaller-font-size: .813rem;\n    }\n}\n\n/*========== Variables Dark theme ==========*/\nbody.dark-theme {\n  /* HSL color mode */\n--first-color-second: hsl(var(--hue-color), 30%, 8%);\n--title-color: hsl(var(--hue-color), 8%, 95%);\n--text-color: hsl(var(--hue-color), 8%, 45%);\n--text-color-light: hsl(var(--hue-color), 8%, 75%);\n--input-color: hsl(var(--hue-color), 29%, 16%);\n--body-color: hsl(var(--hue-color), 28%, 12%);\n--container-color: hsl(var(--hue-color), 29%, 16%);\n--scroll-bar-color: hsl(var(--hue-color), 12%, 48%);\n--scroll-thumb-color: hsl(var(--hue-color), 12%, 36%);\n}\n\n/*========== Button Dark/Light ==========*/\n.nav__btns {\n  display: flex;\n  align-items: center;\n\n}\n\n.change-theme {\n  font-size: 1.25rem;\n  color: var(--title-color);\n  margin-right: var(--mb-1);\n  cursor: pointer;\n}\n\n.change-theme:hover {\n  color: var(--first-color);\n}\n\n/*==================== BASE ====================*/\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  margin: 0 0 var(--header-height) 0;\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  background-color: var(--body-color);\n  color: var(--text-color);\n}\n\nh1, h2, h3, h4 {\n  color: var(--title-color);\n  font-weight: var(--font-semi-bold);\n}\n\nul {\n  list-style: none;\n}\n\na {\n  text-decoration: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/*==================== REUSABLE CSS CLASSES ====================*/\n.section {\n  padding: 2rem 0 4rem;\n}\n\n.section__title {\n  font-size: var(--h1-font-size);\n  color: var(--title-color);\n}\n\n.section__subtitle {\n  display: block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-3);\n}\n\n.section__title, \n.section__subtitle {\n  text-align: center;\n}\n\n/*==================== LAYOUT ====================*/\n.container {\n  max-width: 768px;\n  margin-left: var(--mb-1-5);\n  margin-right: var(--mb-1-5);\n}\n\n.grid {\n  display: grid;\n  gap: 1.5rem;\n}\n\n.header {\n  width: 100%;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  z-index: var(--z-fixed);\n  background-color: var(--body-color);\n}\n\n/*==================== NAV ====================*/\n.nav{\n  max-width: 968px;\n  height: var(--header-height);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav__logo,\n.nav__toggle{\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n}\n.nav__logo:hover{\n  color: var(--first-color);\n}\n\n.nav__toggle{\n  font-size: 1.1rem;\n  cursor: pointer;\n}\n\n.nav__toggle:hover{\n  color: var(--first-color);\n}\n\n/*mobile devices*/\n@media screen and (max-width:767px){\n  .nav__menu{\n    position: fixed;\n    bottom: -100%;\n    left: 0;\n    width: 100%;\n    background-color: var(--body-color);\n    padding: 2rem 1.5rem 4rem;\n    box-shadow: 0 -1px 4px rgba(0,0,0,.15);\n    border-radius: 1.5rem 1.5rem 0 0;\n    transition: .3s;\n  }\n}\n\n.nav__list{\n  grid-template-columns: repeat(3,1fr);\n  gap: 2rem;\n}\n\n.nav__item{\n  align-items: center;\n}\n.nav__link{\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  cursor: pointer;\n  text-transform: capitalize;\n}\n\n.nav__link:hover{\n  color: var(--first-color);\n}\n.nav__link:hover svg{\n  fill: var(--first-color);\n}\n\n.nav__icon{\n  font-size: 1.2rem;\n}\n.nav__icon-svg{\n  fill:var(--title-color);\n  font-size: 1.4rem;\n  margin-top: 4px;\n  margin-bottom: 2px;\n}\n.nav__close{\n  position: absolute;\n  right: 1.3rem;\n  bottom: .5rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: var(--first-color);\n}\n\n.nav__close:hover{\n  color: var(--first-color-alt);\n}\n/* show menu */\n.show-menu{\n  bottom: 0;\n}\n\n/* Active link */\n.active-link {\n  color: var(--first-color);\n}\n\n/* Change background header */\n.scroll-header {\n  box-shadow: 0 -1px 4px rgba(0,0,0, .15);\n  \n}\n\n/*==================== HOME ====================*/\n.home__container {\n  gap: 1rem;\n}\n\n.home__content{\n  grid-template-columns: .5fr 3fr;\n  padding-top: 3.5rem;\n  align-items: center;\n}\n.home__blob {\n  width: 200px;\n  fill: var(--first-color);\n}\n\n.home__blob-img {\n  width: 220px;\n}\n\n.home__data {\n  grid-column: 1/3;\n}\n\n.home__title {\n  font-size: var(--big-font-size);\n}\n\n.home__subtitle {\n  font-size: var(--h3-font-size);\n  color: var(--text-color);\n  font-weight: var(--font-medium);\n  margin-bottom: var(--mb-0-75);\n}\n\n.home__description {\n  margin-bottom: var(--mb-2);\n}\n\n/* .home__scroll {\n  display: none;\n} */\n\n.home__scroll-button {\n  color: var(--first-color);\n  transition: .3s;\n\n}\n\n.home__scroll-button:hover {\n  transform: translateY(0.25rem);\n}\n\n.home__scroll-mouse {\n  font-size: 2rem;\n\n}\n\n.home__scroll-name {\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  margin-right: var(--mb-0-25);\n\n}\n\n.home__scroll-arrow {\n  font-size: 1.25rem;\n\n}\n\n/*==================== BUTTONS ====================*/\n.button {\n  display: inline-block;\n  background-color: var(--first-color);\n  color: #FFFF;\n  padding: 1rem;\n  border-radius: .5rem;\n  font-weight: var(--font-medium);\n\n}\n\n.button:hover {\n  background-color: var(--first-color-alt);\n}\n\n.button__icon {\n  font-size: 1.2rem;\n  margin-left: var(--mb-0-5);\n  transition: .3s;\n}\n\n.button--flex {\n  display: inline-flex;\n  align-items: center;\n  transition: .3s;\n\n}\n\n.button--small {\n  padding: .75rem 1rem;\n}\n\n.button--link {\n  padding: 0;\n  background-color: transparent;\n  color: var(--first-color);\n}\n\n.button--link:hover {\n  background-color: transparent;\n  color: var(--first-color-alt);\n}\n\n/*==================== ABOUT ====================*/\n.about__img {\n  width: 200px;\n  border-radius: .5rem;\n  justify-self: center;\n  align-self: center;\n\n}\n\n.about__description {\n  text-align: center;\n  margin-bottom: var(--mb-2-5);\n\n}\n\n.about__info {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2-5);\n}\n\n.about__info-title {\n  font-size: var(--h2-font-size);\n  font-weight: var(--font-semi-bold);\n  color: var(--title-color);\n}\n\n.about__info-name {\n  font-size: var(--smaller-font-size);\n\n}\n\n.about__info-title, .about__info-name {\n  display: block;\n  text-align: center;\n\n}\n\n.about__buttons {\n  display: flex;\n  justify-content: center;\n}\n\n/*==================== SKILLS ====================*/\n.skills__container {\n  row-gap: 0;\n}\n\n.skills__header {\n  display: flex;\n  align-items: center;\n  margin-bottom: var(--mb-2-5);\n  cursor: pointer;\n}\n\n.skills__icon, .skills__arrow {\n  font-size: 2rem;\n  color: var(--first-color);\n\n}\n\n.skills__icon {\n  margin-right: var(--mb-0-75);\n\n}\n\n.skills__title {\n  font-size: var(--h3-font-size);\n}\n\n.skills__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n\n}\n\n.skills__arrow {\n  margin-left: auto;\n  transition: .4s;\n\n}\n\n.skills__list {\n  row-gap: 1.5rem;\n  padding-left: 2.7rem;\n  transition: .4s;\n}\n\n.skills__titles {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--mb-0-5)\n}\n\n.skills__name {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.skills__bar, .skills__percentage {\n  height: 5px;\n  border-radius: .25rem;\n\n}\n\n.skills__bar {\n  background-color: var(--first-color-lighter);\n\n}\n\n.skills__percentage {\n  display: block;\n  background-color: var(--first-color);\n}\n\n.skills__html {\n  width: 60%;\n}\n\n.skills__css{\n  width: 50%;\n}\n\n.skills__js{\n  width: 30%;\n}\n\n.skills__vue{\n  width: 10%;\n}\n\n.skills__java{\n  width: 70%;\n}\n\n.skills__python{\n  width: 50%;\n}\n\n.skills__close .skills__list {\n  \n  height: 0;\n  overflow: hidden;\n\n}\n\n.skills__open .skills__list {\n  height: max-content;\n  margin-bottom: var(--mb-2-5);\n}\n\n.skills__open .skills__arrow {\n  transform: rotate(-180deg);\n}\n\n/*==================== QUALIFICATION ====================*/\n.qualification__tabs {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2)\n}\n\n.qualification__button {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n  cursor: pointer\n}\n\n.qualification__button:hover {\n  color: var(--first-color);\n}\n\n.qualification__icon {\n  font-size: 1.8rem;\n  margin-right: var(--mb-0-25);\n}\n\n.qualification__data {\n  display: grid;\n  grid-template-columns: 1fr max-content 1fr;\n  column-gap: 1.5rem;\n}\n\n.qualification__title {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.qualification__subtitle {\n  display: inline-block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-1);\n}\n\n.qualification__calendar {\n  font-size: var(--smaller-font-size);\n  color: var(--text-color-light);\n  /* margin-bottom: var(--mb-1) */\n\n}\n\n.qualification__rounder {\n  display: inline-block;\n  width: 13px;\n  height: 13px;\n  background-color: var(--first-color);\n  border-radius: 50%;\n}\n\n.qualification__line {\n  display: block;\n  width: 1px;\n  height: 100%;\n  background-color: var(--first-color);\n  transform: translate(6px, -7px)\n}\n\n.qualification__content[data-content] {\n  display: none;\n\n}\n\n.qualification__active[data-content] {\n  display: block;\n}\n\n.qualification__button.qualification__active {\n  color: var(--first-color)\n}\n\n/* Active Modal */\n.active-modal {\n  opacity: 1;\n  visibility: visible;\n}\n\n\n/*==================== PORTFOLIO ====================*/\n.portfolio__container {\n  overflow: initial;\n}\n\n.portfolio__content {\n  padding: 0 1.5rem;\n}\n\n.portfolio__img {\n  width: 265px;\n  border-radius: .5rem;\n  justify-self: center;\n}\n\n.portfolio__title {\n  font-size: var(--h3-font-size);\n  margin-bottom: var(--mb-0-5);\n}\n\n.portfolio__description {\n  margin-bottom: var(--mb-0-75);\n}\n\n.portfolio__button:hover .button__icon {\n  transform: translateX(.25rem);\n}\n\n.swiper-button-prev::after, .swiper-button-next::after {\n  content: '';\n}\n\n.swiper-portfolio-icon {\n  font-size: 2rem;\n  color: var(--first-color);\n}\n\n.swiper-button-prev {\n  left: -.5rem;\n}\n\n.swiper-button-next {\n  right: -.5rem;\n}\n\n.swiper-container-horizontal > .swiper-pagination-bullets {\n  bottom: -2.5rem;\n}\n\n.swiper-pagination-bullet-active {\n  background-color: var(--first-color);\n\n}\n\n.swiper-button-prev, \n.swiper-button-next,\n.swiper-pagination-bullet {\n  outline: none;\n}\n\n/*==================== CONTACT ME ====================*/\n.contact__container {\n  row-gap: 3rem;\n}\n\n.contact__information {\n  display: flex;\n  margin-bottom: var(--mb-2)\n}\n\n.contact__icon {\n  font-size: 1.5rem;\n  color: var(--first-color);\n  margin-right: var(--mb-0-75);\n}\n\n.content__title {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n}\n\n.contact__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n}\n\n.contact__content {\n  background-color: var(--input-color);\n  border-radius: .5rem;\n  padding: .75rem 1rem .25rem;\n}\n\n.contact__label {\n  font-size: var(--smaller-font-size);\n  color: var(--title-color);\n}\n\n.contact__input {\n  width: 100%;\n  background-color: var(--input-color);\n  color: var(--text-color);\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  border: none;\n  outline: none;\n  padding: .25rem .5rem .5rem 0;\n}\n\n/*==================== FOOTER ====================*/\n.footer {\n  padding-top: 2rem;\n}\n\n.footer__container {\n  row-gap: 3.5rem;\n}\n\n.footer__bg {\n  background-color: var(--first-color-second);\n  padding: 2rem 0 3rem;\n}\n\n.footer__title {\n  font-size: var(--h1-font-size);\n  margin-bottom: var(--mb-0-25);\n\n}\n\n.footer__subtitle {\n  font-size: var(--small-font-size);\n}\n\n.footer__links {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1.5rem;\n}\n\n.footer__link:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__social {\n  font-size: 1.35rem;\n  margin-right: var(--mb-1-5);\n}\n\n.footer__social:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__copy {\n  font-size: var(--smaller-font-size);\n  text-align: center;\n  color: var(--text-color-light);\n  margin-top: var(--mb-3)\n}\n\n.footer__title,\n.footer__subtitle,\n.footer__link,\n.footer__social {\n  color: #FFF;\n  fill: #FFF;\n}\n\n.icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  /* fill:white; */\n  overflow: hidden;\n}\n\n/*========== SCROLL UP ==========*/\n.scrollup {\n  position: fixed;\n  right: 1rem;\n  bottom: -20%;\n  background-color: var(--first-color);\n  opacity: .8;\n  padding: 0 .3rem;\n  border-radius: .4rem;\n  z-index: var(--z-tooltip);\n  transition: .4s;\n}\n\n.scrollup:hover {\n  background-color: var(--first-color-alt);\n}\n\n.scrollup__icon {\n  font-size: 1.5rem;\n  color: #FFF;\n}\n\n/* Show scroll */\n.show-scroll {\n  bottom: 5rem;\n}\n\n\n/*========== SCROLL BAR ==========*/\n::-webkit-scrollbar {\n  width: .60rem;\n  background-color: var(--scroll-bar-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--scroll-thumb-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--text-color-light);\n}\n\n\n/*==================== MEDIA QUERIES ====================*/\n/* For small devices */\n@media screen and (max-width: 350px) {\n  .container {\n      margin-left: var(--mb-1);\n      margin-right: var(--mb-1);\n  }\n  .nav__menu {\n      padding: 2rem .25rem 4rem;\n  }\n\n  .nav__list {\n      column-gap: 0;\n  }\n  .home__content {\n      grid-template-columns: .25fr 3fr;\n  }\n\n  .home__blob {\n      width: 180px;\n  }\n\n  .skills__title {\n      font-size: var(--normal-font-size);\n  }\n  .qualification__data {\n      gap: .5rem;\n  }\n\n  .services__container {\n      grid-template-columns: max-content;\n      justify-content: center;\n  }\n\n  .services__content {\n      padding-right: 3.5rem;\n  }\n  .services__modal {\n      padding: 0 .5rem;\n  }\n\n  .project__img {\n      width: 200px;\n  }\n\n  .testimonial__header,\n  .testimonial__data {\n      flex-direction: column;\n      align-items: center;\n  }\n\n  .testimonial__img {\n      margin-right: 0;\n      margin-bottom: var(--mb-0-25);\n  }\n\n  .testimonial__data,\n  .testimonial__description {\n      text-align: center;\n  }\n}\n\n/* For medium devices */\n@media screen and (min-width: 568px) {\n  .home__content {\n      grid-template-columns: max-content 1fr 1fr;\n  }\n  .home__data {\n      grid-column: initial;\n  }\n  .home__img {\n      order: 1;\n      justify-self: center;\n  }\n\n  .about__container,\n  .skills_container,\n  .portfolio__content,\n  .project__container,\n  .contact__container,\n  .footer__container {\n      grid-template-columns: repeat(2, 1fr);\n  }\n\n  .qualification__sections {\n      display: grid;\n      grid-template-columns: .6fr;\n      justify-content: center;\n  }\n\n  @media screen and (min-width: 768px) {\n      .container {\n          margin-left: auto;\n          margin-right: auto;\n      }\n\n      .body {\n          margin: 0;\n      }\n      .section {\n          padding: 6rem 0 2rem;\n      }\n      .section__subtitle {\n          margin-bottom: 4rem;\n      }\n      .header {\n          top: 0;\n          bottom: initial;\n      }\n\n      .header,\n      .main,\n      .footer__container {\n          padding: 0 1rem;\n      }\n\n      .nav {\n          height: calc(var(--header-height) + 1.5rem);\n          column-gap: 1rem;\n      }\n      .nav__icon,\n      .nav__close,\n      .nav__toggle {\n          display: none;\n      }\n\n      .nav__list {\n          display: flex;\n          column-gap: 2rem;\n      }\n\n      .nav__item {\n        align-content: center;\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      #translate{\n        font-size: 0;\n      }\n\n      .nav__menu {\n          margin-left: auto;\n      }\n      .change-theme {\n          margin: 0;\n      }\n\n      .home__container {\n          row-gap: 5rem;\n      }\n\n      .home__content {\n          padding-top: 5.5rem;\n          column-gap: 2rem;\n      }\n      .home__blob {\n          width: 270px;\n      }\n      .home__scroll {\n          display: block;\n      }\n      .home__scroll-button {\n          margin-left: 3rem;\n      }\n      .about__container {\n          column-gap: 5rem; \n      }\n      .about__img {\n          width: 350px;\n      }\n      .about__description {\n          text-align: initial;\n      }\n      .about__info {\n          justify-content: space-between;\n      }\n      .about__buttons {\n          justify-content: initial;\n      }\n      .qualification__tabs {\n          justify-content: center;\n\n      }\n      .qualification__button {\n          margin: 0 var(--mb-1)\n      }\n\n      .qualification__sections {\n          grid-template-columns: .5fr\n      }\n      .services__container {\n          grid-template-columns: repeat(3, 218px);\n          justify-content: center;\n      }\n      .services__icon {\n          font-size: 2rem;\n      }\n      .services__content {\n          padding: 6rem 0 2rem 2.5rem;\n      }\n\n      .services__modal-content {\n          width: 450px;\n      }\n      .portfolio__img {\n          width: 320px;\n      }\n      .portfolio__content {\n          align-items: center;\n      }\n      .project {\n          text-align: initial;\n      }\n      .project__bg {\n          background: none;\n      }\n      .project__container {\n          background-color: var(--first-color-second);\n          border-radius: 1rem;\n          padding: 3rem 2.5rem 0;\n          grid-template-columns: 1fr max-content;\n          column-gap: 3rem;\n      }\n      .project__data {\n          padding-top: .8rem;\n      }\n      .footer__container {\n          grid-template-columns: repeat(3, 1fr);\n      }\n      .footer__bg {\n          padding: 3rem 0 3.5rem; \n      }\n\n      .footer__links {\n          flex-direction: row;\n          column-gap: 2rem;\n      }\n      .footer__socials {\n          justify-self: flex-end;\n      }\n      .footer__copy {\n          margin-top: 4.5rem;\n      }\n\n  }\n}\n\n/* For large devices */\n@media screen and (min-width: 1024px) {\n  .header,\n  .main,\n  .footer__container {\n      padding: 0;\n  }\n  .home__blob {\n      width: 320px;\n  }\n  .home__social {\n      transform: translateX(-6rem);\n  }\n  .services__container {\n      grid-template-columns: repeat(3, 238px);\n  }\n  .portfolio__content {\n      column-gap: 5rem;\n  }\n  .swiper-portfolio-icon {\n      font-size: 3.5rem;\n  }\n  .swiper-button-prev {\n      left: 3.5rem;\n  }\n  .swiper-button-next {\n      right: 3.5rem;\n  }\n  .swiper-container-horizontal > .swiper-pagination-bullets {\n      bottom: -4.5rem\n  }\n\n  .contact__form {\n      width: 460px; \n  }\n  .contact__inputs {\n      grid-template-columns: repeat(2, 1fr);\n  }\n}","source":"static-page/assets/css/styles.css","raw":"/*==================== GOOGLE FONTS 字体====================*/\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap\");\n\n/*==================== VARIABLES CSS ====================*/\n:root {\n    --header-height: 3rem;\n\n    /*========== Colors 主题色彩==========*/\n    /* Change favorite color */\n    --hue-color: 250; /*Purple 250 - Green 142 - Blue 230 - Pink 340*/\n\n    /* HSL color mode */\n    --first-color: hsl(var(--hue-color), 69%, 61%);\n    --first-color-second: hsl(var(--hue-color), 69%, 61%);\n    --first-color-alt: hsl(var(--hue-color), 57%, 53%);\n    --first-color-lighter: hsl(var(--hue-color), 92%, 85%);\n    --title-color: hsl(var(--hue-color), 8%, 15%);\n    --text-color: hsl(var(--hue-color), 8%, 45%);\n    --text-color-light: hsl(var(--hue-color), 8%, 65%);\n    --input-color: hsl(var(--hue-color), 70%, 96%);\n    --body-color: hsl(var(--hue-color), 60%, 99%);\n    --container-color: hsl(var(--hue-color), 100%, 98%);\n    --scroll-bar-color: hsl(var(--hue-color), 12%, 90%);\n    --scroll-thumb-color: hsl(var(--hue-color), 12%, 80%);\n\n    /*========== Font and typography ==========*/\n    --body-font: 'Poppins', sans-serif;\n\n    /* .5rem = 8px, 1rem = 16px, 1.5rem = 24px ... */\n    --big-font-size: 2rem;\n    --h1-font-size: 1.5rem;\n    --h2-font-size: 1.25rem;\n    --h3-font-size: 1.125rem;\n    --normal-font-size: .938rem;\n    --small-font-size: .813rem;\n    --smaller-font-size: .75rem;\n\n    /*========== Font weight ==========*/\n    --font-medium: 500;\n    --font-semi-bold: 600;\n\n    /*========== Margenes Bottom ==========*/\n    /* .25rem = 4px, .5rem = 8px, .75rem = 12px ... */\n    --mb-0-25: .25rem;\n    --mb-0-5: .5rem;\n    --mb-0-75: .75rem;\n    --mb-1: 1rem;\n    --mb-1-5: 1.5rem;\n    --mb-2: 2rem;\n    --mb-2-5: 2.5rem;\n    --mb-3: 3rem;\n\n    /*========== z index ==========*/\n    --z-tooltip: 10;\n    --z-fixed: 100;\n    --z-modal: 1000;\n}\n\n/* Font size for large devices */\n@media screen and (min-width: 968px) {\n    :root {\n        --big-font-size: 3rem;\n        --h1-font-size: 2.25rem;\n        --h2-font-size: 1.5rem;\n        --h3-font-size: 1.25rem;\n        --normal-font-size: 1rem;\n        --small-font-size: .875rem;\n        --smaller-font-size: .813rem;\n    }\n}\n\n/*========== Variables Dark theme ==========*/\nbody.dark-theme {\n  /* HSL color mode */\n--first-color-second: hsl(var(--hue-color), 30%, 8%);\n--title-color: hsl(var(--hue-color), 8%, 95%);\n--text-color: hsl(var(--hue-color), 8%, 45%);\n--text-color-light: hsl(var(--hue-color), 8%, 75%);\n--input-color: hsl(var(--hue-color), 29%, 16%);\n--body-color: hsl(var(--hue-color), 28%, 12%);\n--container-color: hsl(var(--hue-color), 29%, 16%);\n--scroll-bar-color: hsl(var(--hue-color), 12%, 48%);\n--scroll-thumb-color: hsl(var(--hue-color), 12%, 36%);\n}\n\n/*========== Button Dark/Light ==========*/\n.nav__btns {\n  display: flex;\n  align-items: center;\n\n}\n\n.change-theme {\n  font-size: 1.25rem;\n  color: var(--title-color);\n  margin-right: var(--mb-1);\n  cursor: pointer;\n}\n\n.change-theme:hover {\n  color: var(--first-color);\n}\n\n/*==================== BASE ====================*/\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  margin: 0 0 var(--header-height) 0;\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  background-color: var(--body-color);\n  color: var(--text-color);\n}\n\nh1, h2, h3, h4 {\n  color: var(--title-color);\n  font-weight: var(--font-semi-bold);\n}\n\nul {\n  list-style: none;\n}\n\na {\n  text-decoration: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/*==================== REUSABLE CSS CLASSES ====================*/\n.section {\n  padding: 2rem 0 4rem;\n}\n\n.section__title {\n  font-size: var(--h1-font-size);\n  color: var(--title-color);\n}\n\n.section__subtitle {\n  display: block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-3);\n}\n\n.section__title, \n.section__subtitle {\n  text-align: center;\n}\n\n/*==================== LAYOUT ====================*/\n.container {\n  max-width: 768px;\n  margin-left: var(--mb-1-5);\n  margin-right: var(--mb-1-5);\n}\n\n.grid {\n  display: grid;\n  gap: 1.5rem;\n}\n\n.header {\n  width: 100%;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  z-index: var(--z-fixed);\n  background-color: var(--body-color);\n}\n\n/*==================== NAV ====================*/\n.nav{\n  max-width: 968px;\n  height: var(--header-height);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav__logo,\n.nav__toggle{\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n}\n.nav__logo:hover{\n  color: var(--first-color);\n}\n\n.nav__toggle{\n  font-size: 1.1rem;\n  cursor: pointer;\n}\n\n.nav__toggle:hover{\n  color: var(--first-color);\n}\n\n/*mobile devices*/\n@media screen and (max-width:767px){\n  .nav__menu{\n    position: fixed;\n    bottom: -100%;\n    left: 0;\n    width: 100%;\n    background-color: var(--body-color);\n    padding: 2rem 1.5rem 4rem;\n    box-shadow: 0 -1px 4px rgba(0,0,0,.15);\n    border-radius: 1.5rem 1.5rem 0 0;\n    transition: .3s;\n  }\n}\n\n.nav__list{\n  grid-template-columns: repeat(3,1fr);\n  gap: 2rem;\n}\n\n.nav__item{\n  align-items: center;\n}\n.nav__link{\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  cursor: pointer;\n  text-transform: capitalize;\n}\n\n.nav__link:hover{\n  color: var(--first-color);\n}\n.nav__link:hover svg{\n  fill: var(--first-color);\n}\n\n.nav__icon{\n  font-size: 1.2rem;\n}\n.nav__icon-svg{\n  fill:var(--title-color);\n  font-size: 1.4rem;\n  margin-top: 4px;\n  margin-bottom: 2px;\n}\n.nav__close{\n  position: absolute;\n  right: 1.3rem;\n  bottom: .5rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: var(--first-color);\n}\n\n.nav__close:hover{\n  color: var(--first-color-alt);\n}\n/* show menu */\n.show-menu{\n  bottom: 0;\n}\n\n/* Active link */\n.active-link {\n  color: var(--first-color);\n}\n\n/* Change background header */\n.scroll-header {\n  box-shadow: 0 -1px 4px rgba(0,0,0, .15);\n  \n}\n\n/*==================== HOME ====================*/\n.home__container {\n  gap: 1rem;\n}\n\n.home__content{\n  grid-template-columns: .5fr 3fr;\n  padding-top: 3.5rem;\n  align-items: center;\n}\n.home__blob {\n  width: 200px;\n  fill: var(--first-color);\n}\n\n.home__blob-img {\n  width: 220px;\n}\n\n.home__data {\n  grid-column: 1/3;\n}\n\n.home__title {\n  font-size: var(--big-font-size);\n}\n\n.home__subtitle {\n  font-size: var(--h3-font-size);\n  color: var(--text-color);\n  font-weight: var(--font-medium);\n  margin-bottom: var(--mb-0-75);\n}\n\n.home__description {\n  margin-bottom: var(--mb-2);\n}\n\n/* .home__scroll {\n  display: none;\n} */\n\n.home__scroll-button {\n  color: var(--first-color);\n  transition: .3s;\n\n}\n\n.home__scroll-button:hover {\n  transform: translateY(0.25rem);\n}\n\n.home__scroll-mouse {\n  font-size: 2rem;\n\n}\n\n.home__scroll-name {\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  margin-right: var(--mb-0-25);\n\n}\n\n.home__scroll-arrow {\n  font-size: 1.25rem;\n\n}\n\n/*==================== BUTTONS ====================*/\n.button {\n  display: inline-block;\n  background-color: var(--first-color);\n  color: #FFFF;\n  padding: 1rem;\n  border-radius: .5rem;\n  font-weight: var(--font-medium);\n\n}\n\n.button:hover {\n  background-color: var(--first-color-alt);\n}\n\n.button__icon {\n  font-size: 1.2rem;\n  margin-left: var(--mb-0-5);\n  transition: .3s;\n}\n\n.button--flex {\n  display: inline-flex;\n  align-items: center;\n  transition: .3s;\n\n}\n\n.button--small {\n  padding: .75rem 1rem;\n}\n\n.button--link {\n  padding: 0;\n  background-color: transparent;\n  color: var(--first-color);\n}\n\n.button--link:hover {\n  background-color: transparent;\n  color: var(--first-color-alt);\n}\n\n/*==================== ABOUT ====================*/\n.about__img {\n  width: 200px;\n  border-radius: .5rem;\n  justify-self: center;\n  align-self: center;\n\n}\n\n.about__description {\n  text-align: center;\n  margin-bottom: var(--mb-2-5);\n\n}\n\n.about__info {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2-5);\n}\n\n.about__info-title {\n  font-size: var(--h2-font-size);\n  font-weight: var(--font-semi-bold);\n  color: var(--title-color);\n}\n\n.about__info-name {\n  font-size: var(--smaller-font-size);\n\n}\n\n.about__info-title, .about__info-name {\n  display: block;\n  text-align: center;\n\n}\n\n.about__buttons {\n  display: flex;\n  justify-content: center;\n}\n\n/*==================== SKILLS ====================*/\n.skills__container {\n  row-gap: 0;\n}\n\n.skills__header {\n  display: flex;\n  align-items: center;\n  margin-bottom: var(--mb-2-5);\n  cursor: pointer;\n}\n\n.skills__icon, .skills__arrow {\n  font-size: 2rem;\n  color: var(--first-color);\n\n}\n\n.skills__icon {\n  margin-right: var(--mb-0-75);\n\n}\n\n.skills__title {\n  font-size: var(--h3-font-size);\n}\n\n.skills__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n\n}\n\n.skills__arrow {\n  margin-left: auto;\n  transition: .4s;\n\n}\n\n.skills__list {\n  row-gap: 1.5rem;\n  padding-left: 2.7rem;\n  transition: .4s;\n}\n\n.skills__titles {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--mb-0-5)\n}\n\n.skills__name {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.skills__bar, .skills__percentage {\n  height: 5px;\n  border-radius: .25rem;\n\n}\n\n.skills__bar {\n  background-color: var(--first-color-lighter);\n\n}\n\n.skills__percentage {\n  display: block;\n  background-color: var(--first-color);\n}\n\n.skills__html {\n  width: 60%;\n}\n\n.skills__css{\n  width: 50%;\n}\n\n.skills__js{\n  width: 30%;\n}\n\n.skills__vue{\n  width: 10%;\n}\n\n.skills__java{\n  width: 70%;\n}\n\n.skills__python{\n  width: 50%;\n}\n\n.skills__close .skills__list {\n  \n  height: 0;\n  overflow: hidden;\n\n}\n\n.skills__open .skills__list {\n  height: max-content;\n  margin-bottom: var(--mb-2-5);\n}\n\n.skills__open .skills__arrow {\n  transform: rotate(-180deg);\n}\n\n/*==================== QUALIFICATION ====================*/\n.qualification__tabs {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2)\n}\n\n.qualification__button {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n  cursor: pointer\n}\n\n.qualification__button:hover {\n  color: var(--first-color);\n}\n\n.qualification__icon {\n  font-size: 1.8rem;\n  margin-right: var(--mb-0-25);\n}\n\n.qualification__data {\n  display: grid;\n  grid-template-columns: 1fr max-content 1fr;\n  column-gap: 1.5rem;\n}\n\n.qualification__title {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.qualification__subtitle {\n  display: inline-block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-1);\n}\n\n.qualification__calendar {\n  font-size: var(--smaller-font-size);\n  color: var(--text-color-light);\n  /* margin-bottom: var(--mb-1) */\n\n}\n\n.qualification__rounder {\n  display: inline-block;\n  width: 13px;\n  height: 13px;\n  background-color: var(--first-color);\n  border-radius: 50%;\n}\n\n.qualification__line {\n  display: block;\n  width: 1px;\n  height: 100%;\n  background-color: var(--first-color);\n  transform: translate(6px, -7px)\n}\n\n.qualification__content[data-content] {\n  display: none;\n\n}\n\n.qualification__active[data-content] {\n  display: block;\n}\n\n.qualification__button.qualification__active {\n  color: var(--first-color)\n}\n\n/* Active Modal */\n.active-modal {\n  opacity: 1;\n  visibility: visible;\n}\n\n\n/*==================== PORTFOLIO ====================*/\n.portfolio__container {\n  overflow: initial;\n}\n\n.portfolio__content {\n  padding: 0 1.5rem;\n}\n\n.portfolio__img {\n  width: 265px;\n  border-radius: .5rem;\n  justify-self: center;\n}\n\n.portfolio__title {\n  font-size: var(--h3-font-size);\n  margin-bottom: var(--mb-0-5);\n}\n\n.portfolio__description {\n  margin-bottom: var(--mb-0-75);\n}\n\n.portfolio__button:hover .button__icon {\n  transform: translateX(.25rem);\n}\n\n.swiper-button-prev::after, .swiper-button-next::after {\n  content: '';\n}\n\n.swiper-portfolio-icon {\n  font-size: 2rem;\n  color: var(--first-color);\n}\n\n.swiper-button-prev {\n  left: -.5rem;\n}\n\n.swiper-button-next {\n  right: -.5rem;\n}\n\n.swiper-container-horizontal > .swiper-pagination-bullets {\n  bottom: -2.5rem;\n}\n\n.swiper-pagination-bullet-active {\n  background-color: var(--first-color);\n\n}\n\n.swiper-button-prev, \n.swiper-button-next,\n.swiper-pagination-bullet {\n  outline: none;\n}\n\n/*==================== CONTACT ME ====================*/\n.contact__container {\n  row-gap: 3rem;\n}\n\n.contact__information {\n  display: flex;\n  margin-bottom: var(--mb-2)\n}\n\n.contact__icon {\n  font-size: 1.5rem;\n  color: var(--first-color);\n  margin-right: var(--mb-0-75);\n}\n\n.content__title {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n}\n\n.contact__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n}\n\n.contact__content {\n  background-color: var(--input-color);\n  border-radius: .5rem;\n  padding: .75rem 1rem .25rem;\n}\n\n.contact__label {\n  font-size: var(--smaller-font-size);\n  color: var(--title-color);\n}\n\n.contact__input {\n  width: 100%;\n  background-color: var(--input-color);\n  color: var(--text-color);\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  border: none;\n  outline: none;\n  padding: .25rem .5rem .5rem 0;\n}\n\n/*==================== FOOTER ====================*/\n.footer {\n  padding-top: 2rem;\n}\n\n.footer__container {\n  row-gap: 3.5rem;\n}\n\n.footer__bg {\n  background-color: var(--first-color-second);\n  padding: 2rem 0 3rem;\n}\n\n.footer__title {\n  font-size: var(--h1-font-size);\n  margin-bottom: var(--mb-0-25);\n\n}\n\n.footer__subtitle {\n  font-size: var(--small-font-size);\n}\n\n.footer__links {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1.5rem;\n}\n\n.footer__link:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__social {\n  font-size: 1.35rem;\n  margin-right: var(--mb-1-5);\n}\n\n.footer__social:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__copy {\n  font-size: var(--smaller-font-size);\n  text-align: center;\n  color: var(--text-color-light);\n  margin-top: var(--mb-3)\n}\n\n.footer__title,\n.footer__subtitle,\n.footer__link,\n.footer__social {\n  color: #FFF;\n  fill: #FFF;\n}\n\n.icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  /* fill:white; */\n  overflow: hidden;\n}\n\n/*========== SCROLL UP ==========*/\n.scrollup {\n  position: fixed;\n  right: 1rem;\n  bottom: -20%;\n  background-color: var(--first-color);\n  opacity: .8;\n  padding: 0 .3rem;\n  border-radius: .4rem;\n  z-index: var(--z-tooltip);\n  transition: .4s;\n}\n\n.scrollup:hover {\n  background-color: var(--first-color-alt);\n}\n\n.scrollup__icon {\n  font-size: 1.5rem;\n  color: #FFF;\n}\n\n/* Show scroll */\n.show-scroll {\n  bottom: 5rem;\n}\n\n\n/*========== SCROLL BAR ==========*/\n::-webkit-scrollbar {\n  width: .60rem;\n  background-color: var(--scroll-bar-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--scroll-thumb-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--text-color-light);\n}\n\n\n/*==================== MEDIA QUERIES ====================*/\n/* For small devices */\n@media screen and (max-width: 350px) {\n  .container {\n      margin-left: var(--mb-1);\n      margin-right: var(--mb-1);\n  }\n  .nav__menu {\n      padding: 2rem .25rem 4rem;\n  }\n\n  .nav__list {\n      column-gap: 0;\n  }\n  .home__content {\n      grid-template-columns: .25fr 3fr;\n  }\n\n  .home__blob {\n      width: 180px;\n  }\n\n  .skills__title {\n      font-size: var(--normal-font-size);\n  }\n  .qualification__data {\n      gap: .5rem;\n  }\n\n  .services__container {\n      grid-template-columns: max-content;\n      justify-content: center;\n  }\n\n  .services__content {\n      padding-right: 3.5rem;\n  }\n  .services__modal {\n      padding: 0 .5rem;\n  }\n\n  .project__img {\n      width: 200px;\n  }\n\n  .testimonial__header,\n  .testimonial__data {\n      flex-direction: column;\n      align-items: center;\n  }\n\n  .testimonial__img {\n      margin-right: 0;\n      margin-bottom: var(--mb-0-25);\n  }\n\n  .testimonial__data,\n  .testimonial__description {\n      text-align: center;\n  }\n}\n\n/* For medium devices */\n@media screen and (min-width: 568px) {\n  .home__content {\n      grid-template-columns: max-content 1fr 1fr;\n  }\n  .home__data {\n      grid-column: initial;\n  }\n  .home__img {\n      order: 1;\n      justify-self: center;\n  }\n\n  .about__container,\n  .skills_container,\n  .portfolio__content,\n  .project__container,\n  .contact__container,\n  .footer__container {\n      grid-template-columns: repeat(2, 1fr);\n  }\n\n  .qualification__sections {\n      display: grid;\n      grid-template-columns: .6fr;\n      justify-content: center;\n  }\n\n  @media screen and (min-width: 768px) {\n      .container {\n          margin-left: auto;\n          margin-right: auto;\n      }\n\n      .body {\n          margin: 0;\n      }\n      .section {\n          padding: 6rem 0 2rem;\n      }\n      .section__subtitle {\n          margin-bottom: 4rem;\n      }\n      .header {\n          top: 0;\n          bottom: initial;\n      }\n\n      .header,\n      .main,\n      .footer__container {\n          padding: 0 1rem;\n      }\n\n      .nav {\n          height: calc(var(--header-height) + 1.5rem);\n          column-gap: 1rem;\n      }\n      .nav__icon,\n      .nav__close,\n      .nav__toggle {\n          display: none;\n      }\n\n      .nav__list {\n          display: flex;\n          column-gap: 2rem;\n      }\n\n      .nav__item {\n        align-content: center;\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      #translate{\n        font-size: 0;\n      }\n\n      .nav__menu {\n          margin-left: auto;\n      }\n      .change-theme {\n          margin: 0;\n      }\n\n      .home__container {\n          row-gap: 5rem;\n      }\n\n      .home__content {\n          padding-top: 5.5rem;\n          column-gap: 2rem;\n      }\n      .home__blob {\n          width: 270px;\n      }\n      .home__scroll {\n          display: block;\n      }\n      .home__scroll-button {\n          margin-left: 3rem;\n      }\n      .about__container {\n          column-gap: 5rem; \n      }\n      .about__img {\n          width: 350px;\n      }\n      .about__description {\n          text-align: initial;\n      }\n      .about__info {\n          justify-content: space-between;\n      }\n      .about__buttons {\n          justify-content: initial;\n      }\n      .qualification__tabs {\n          justify-content: center;\n\n      }\n      .qualification__button {\n          margin: 0 var(--mb-1)\n      }\n\n      .qualification__sections {\n          grid-template-columns: .5fr\n      }\n      .services__container {\n          grid-template-columns: repeat(3, 218px);\n          justify-content: center;\n      }\n      .services__icon {\n          font-size: 2rem;\n      }\n      .services__content {\n          padding: 6rem 0 2rem 2.5rem;\n      }\n\n      .services__modal-content {\n          width: 450px;\n      }\n      .portfolio__img {\n          width: 320px;\n      }\n      .portfolio__content {\n          align-items: center;\n      }\n      .project {\n          text-align: initial;\n      }\n      .project__bg {\n          background: none;\n      }\n      .project__container {\n          background-color: var(--first-color-second);\n          border-radius: 1rem;\n          padding: 3rem 2.5rem 0;\n          grid-template-columns: 1fr max-content;\n          column-gap: 3rem;\n      }\n      .project__data {\n          padding-top: .8rem;\n      }\n      .footer__container {\n          grid-template-columns: repeat(3, 1fr);\n      }\n      .footer__bg {\n          padding: 3rem 0 3.5rem; \n      }\n\n      .footer__links {\n          flex-direction: row;\n          column-gap: 2rem;\n      }\n      .footer__socials {\n          justify-self: flex-end;\n      }\n      .footer__copy {\n          margin-top: 4.5rem;\n      }\n\n  }\n}\n\n/* For large devices */\n@media screen and (min-width: 1024px) {\n  .header,\n  .main,\n  .footer__container {\n      padding: 0;\n  }\n  .home__blob {\n      width: 320px;\n  }\n  .home__social {\n      transform: translateX(-6rem);\n  }\n  .services__container {\n      grid-template-columns: repeat(3, 238px);\n  }\n  .portfolio__content {\n      column-gap: 5rem;\n  }\n  .swiper-portfolio-icon {\n      font-size: 3.5rem;\n  }\n  .swiper-button-prev {\n      left: 3.5rem;\n  }\n  .swiper-button-next {\n      right: 3.5rem;\n  }\n  .swiper-container-horizontal > .swiper-pagination-bullets {\n      bottom: -4.5rem\n  }\n\n  .contact__form {\n      width: 460px; \n  }\n  .contact__inputs {\n      grid-template-columns: repeat(2, 1fr);\n  }\n}","date":"2025-10-23T09:20:17.852Z","updated":"2025-10-23T09:20:17.852Z","path":"static-page/assets/css/styles.css","layout":"false","_id":"cm10dl6po001ys2y47ai869n0","title":"","comments":1,"content":"/*==================== GOOGLE FONTS 字体====================*/\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap\");\n\n/*==================== VARIABLES CSS ====================*/\n:root {\n    --header-height: 3rem;\n\n    /*========== Colors 主题色彩==========*/\n    /* Change favorite color */\n    --hue-color: 250; /*Purple 250 - Green 142 - Blue 230 - Pink 340*/\n\n    /* HSL color mode */\n    --first-color: hsl(var(--hue-color), 69%, 61%);\n    --first-color-second: hsl(var(--hue-color), 69%, 61%);\n    --first-color-alt: hsl(var(--hue-color), 57%, 53%);\n    --first-color-lighter: hsl(var(--hue-color), 92%, 85%);\n    --title-color: hsl(var(--hue-color), 8%, 15%);\n    --text-color: hsl(var(--hue-color), 8%, 45%);\n    --text-color-light: hsl(var(--hue-color), 8%, 65%);\n    --input-color: hsl(var(--hue-color), 70%, 96%);\n    --body-color: hsl(var(--hue-color), 60%, 99%);\n    --container-color: hsl(var(--hue-color), 100%, 98%);\n    --scroll-bar-color: hsl(var(--hue-color), 12%, 90%);\n    --scroll-thumb-color: hsl(var(--hue-color), 12%, 80%);\n\n    /*========== Font and typography ==========*/\n    --body-font: 'Poppins', sans-serif;\n\n    /* .5rem = 8px, 1rem = 16px, 1.5rem = 24px ... */\n    --big-font-size: 2rem;\n    --h1-font-size: 1.5rem;\n    --h2-font-size: 1.25rem;\n    --h3-font-size: 1.125rem;\n    --normal-font-size: .938rem;\n    --small-font-size: .813rem;\n    --smaller-font-size: .75rem;\n\n    /*========== Font weight ==========*/\n    --font-medium: 500;\n    --font-semi-bold: 600;\n\n    /*========== Margenes Bottom ==========*/\n    /* .25rem = 4px, .5rem = 8px, .75rem = 12px ... */\n    --mb-0-25: .25rem;\n    --mb-0-5: .5rem;\n    --mb-0-75: .75rem;\n    --mb-1: 1rem;\n    --mb-1-5: 1.5rem;\n    --mb-2: 2rem;\n    --mb-2-5: 2.5rem;\n    --mb-3: 3rem;\n\n    /*========== z index ==========*/\n    --z-tooltip: 10;\n    --z-fixed: 100;\n    --z-modal: 1000;\n}\n\n/* Font size for large devices */\n@media screen and (min-width: 968px) {\n    :root {\n        --big-font-size: 3rem;\n        --h1-font-size: 2.25rem;\n        --h2-font-size: 1.5rem;\n        --h3-font-size: 1.25rem;\n        --normal-font-size: 1rem;\n        --small-font-size: .875rem;\n        --smaller-font-size: .813rem;\n    }\n}\n\n/*========== Variables Dark theme ==========*/\nbody.dark-theme {\n  /* HSL color mode */\n--first-color-second: hsl(var(--hue-color), 30%, 8%);\n--title-color: hsl(var(--hue-color), 8%, 95%);\n--text-color: hsl(var(--hue-color), 8%, 45%);\n--text-color-light: hsl(var(--hue-color), 8%, 75%);\n--input-color: hsl(var(--hue-color), 29%, 16%);\n--body-color: hsl(var(--hue-color), 28%, 12%);\n--container-color: hsl(var(--hue-color), 29%, 16%);\n--scroll-bar-color: hsl(var(--hue-color), 12%, 48%);\n--scroll-thumb-color: hsl(var(--hue-color), 12%, 36%);\n}\n\n/*========== Button Dark/Light ==========*/\n.nav__btns {\n  display: flex;\n  align-items: center;\n\n}\n\n.change-theme {\n  font-size: 1.25rem;\n  color: var(--title-color);\n  margin-right: var(--mb-1);\n  cursor: pointer;\n}\n\n.change-theme:hover {\n  color: var(--first-color);\n}\n\n/*==================== BASE ====================*/\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  margin: 0 0 var(--header-height) 0;\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  background-color: var(--body-color);\n  color: var(--text-color);\n}\n\nh1, h2, h3, h4 {\n  color: var(--title-color);\n  font-weight: var(--font-semi-bold);\n}\n\nul {\n  list-style: none;\n}\n\na {\n  text-decoration: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/*==================== REUSABLE CSS CLASSES ====================*/\n.section {\n  padding: 2rem 0 4rem;\n}\n\n.section__title {\n  font-size: var(--h1-font-size);\n  color: var(--title-color);\n}\n\n.section__subtitle {\n  display: block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-3);\n}\n\n.section__title, \n.section__subtitle {\n  text-align: center;\n}\n\n/*==================== LAYOUT ====================*/\n.container {\n  max-width: 768px;\n  margin-left: var(--mb-1-5);\n  margin-right: var(--mb-1-5);\n}\n\n.grid {\n  display: grid;\n  gap: 1.5rem;\n}\n\n.header {\n  width: 100%;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  z-index: var(--z-fixed);\n  background-color: var(--body-color);\n}\n\n/*==================== NAV ====================*/\n.nav{\n  max-width: 968px;\n  height: var(--header-height);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav__logo,\n.nav__toggle{\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n}\n.nav__logo:hover{\n  color: var(--first-color);\n}\n\n.nav__toggle{\n  font-size: 1.1rem;\n  cursor: pointer;\n}\n\n.nav__toggle:hover{\n  color: var(--first-color);\n}\n\n/*mobile devices*/\n@media screen and (max-width:767px){\n  .nav__menu{\n    position: fixed;\n    bottom: -100%;\n    left: 0;\n    width: 100%;\n    background-color: var(--body-color);\n    padding: 2rem 1.5rem 4rem;\n    box-shadow: 0 -1px 4px rgba(0,0,0,.15);\n    border-radius: 1.5rem 1.5rem 0 0;\n    transition: .3s;\n  }\n}\n\n.nav__list{\n  grid-template-columns: repeat(3,1fr);\n  gap: 2rem;\n}\n\n.nav__item{\n  align-items: center;\n}\n.nav__link{\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  cursor: pointer;\n  text-transform: capitalize;\n}\n\n.nav__link:hover{\n  color: var(--first-color);\n}\n.nav__link:hover svg{\n  fill: var(--first-color);\n}\n\n.nav__icon{\n  font-size: 1.2rem;\n}\n.nav__icon-svg{\n  fill:var(--title-color);\n  font-size: 1.4rem;\n  margin-top: 4px;\n  margin-bottom: 2px;\n}\n.nav__close{\n  position: absolute;\n  right: 1.3rem;\n  bottom: .5rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: var(--first-color);\n}\n\n.nav__close:hover{\n  color: var(--first-color-alt);\n}\n/* show menu */\n.show-menu{\n  bottom: 0;\n}\n\n/* Active link */\n.active-link {\n  color: var(--first-color);\n}\n\n/* Change background header */\n.scroll-header {\n  box-shadow: 0 -1px 4px rgba(0,0,0, .15);\n  \n}\n\n/*==================== HOME ====================*/\n.home__container {\n  gap: 1rem;\n}\n\n.home__content{\n  grid-template-columns: .5fr 3fr;\n  padding-top: 3.5rem;\n  align-items: center;\n}\n.home__blob {\n  width: 200px;\n  fill: var(--first-color);\n}\n\n.home__blob-img {\n  width: 220px;\n}\n\n.home__data {\n  grid-column: 1/3;\n}\n\n.home__title {\n  font-size: var(--big-font-size);\n}\n\n.home__subtitle {\n  font-size: var(--h3-font-size);\n  color: var(--text-color);\n  font-weight: var(--font-medium);\n  margin-bottom: var(--mb-0-75);\n}\n\n.home__description {\n  margin-bottom: var(--mb-2);\n}\n\n/* .home__scroll {\n  display: none;\n} */\n\n.home__scroll-button {\n  color: var(--first-color);\n  transition: .3s;\n\n}\n\n.home__scroll-button:hover {\n  transform: translateY(0.25rem);\n}\n\n.home__scroll-mouse {\n  font-size: 2rem;\n\n}\n\n.home__scroll-name {\n  font-size: var(--small-font-size);\n  color: var(--title-color);\n  font-weight: var(--font-medium);\n  margin-right: var(--mb-0-25);\n\n}\n\n.home__scroll-arrow {\n  font-size: 1.25rem;\n\n}\n\n/*==================== BUTTONS ====================*/\n.button {\n  display: inline-block;\n  background-color: var(--first-color);\n  color: #FFFF;\n  padding: 1rem;\n  border-radius: .5rem;\n  font-weight: var(--font-medium);\n\n}\n\n.button:hover {\n  background-color: var(--first-color-alt);\n}\n\n.button__icon {\n  font-size: 1.2rem;\n  margin-left: var(--mb-0-5);\n  transition: .3s;\n}\n\n.button--flex {\n  display: inline-flex;\n  align-items: center;\n  transition: .3s;\n\n}\n\n.button--small {\n  padding: .75rem 1rem;\n}\n\n.button--link {\n  padding: 0;\n  background-color: transparent;\n  color: var(--first-color);\n}\n\n.button--link:hover {\n  background-color: transparent;\n  color: var(--first-color-alt);\n}\n\n/*==================== ABOUT ====================*/\n.about__img {\n  width: 200px;\n  border-radius: .5rem;\n  justify-self: center;\n  align-self: center;\n\n}\n\n.about__description {\n  text-align: center;\n  margin-bottom: var(--mb-2-5);\n\n}\n\n.about__info {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2-5);\n}\n\n.about__info-title {\n  font-size: var(--h2-font-size);\n  font-weight: var(--font-semi-bold);\n  color: var(--title-color);\n}\n\n.about__info-name {\n  font-size: var(--smaller-font-size);\n\n}\n\n.about__info-title, .about__info-name {\n  display: block;\n  text-align: center;\n\n}\n\n.about__buttons {\n  display: flex;\n  justify-content: center;\n}\n\n/*==================== SKILLS ====================*/\n.skills__container {\n  row-gap: 0;\n}\n\n.skills__header {\n  display: flex;\n  align-items: center;\n  margin-bottom: var(--mb-2-5);\n  cursor: pointer;\n}\n\n.skills__icon, .skills__arrow {\n  font-size: 2rem;\n  color: var(--first-color);\n\n}\n\n.skills__icon {\n  margin-right: var(--mb-0-75);\n\n}\n\n.skills__title {\n  font-size: var(--h3-font-size);\n}\n\n.skills__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n\n}\n\n.skills__arrow {\n  margin-left: auto;\n  transition: .4s;\n\n}\n\n.skills__list {\n  row-gap: 1.5rem;\n  padding-left: 2.7rem;\n  transition: .4s;\n}\n\n.skills__titles {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--mb-0-5)\n}\n\n.skills__name {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.skills__bar, .skills__percentage {\n  height: 5px;\n  border-radius: .25rem;\n\n}\n\n.skills__bar {\n  background-color: var(--first-color-lighter);\n\n}\n\n.skills__percentage {\n  display: block;\n  background-color: var(--first-color);\n}\n\n.skills__html {\n  width: 60%;\n}\n\n.skills__css{\n  width: 50%;\n}\n\n.skills__js{\n  width: 30%;\n}\n\n.skills__vue{\n  width: 10%;\n}\n\n.skills__java{\n  width: 70%;\n}\n\n.skills__python{\n  width: 50%;\n}\n\n.skills__close .skills__list {\n  \n  height: 0;\n  overflow: hidden;\n\n}\n\n.skills__open .skills__list {\n  height: max-content;\n  margin-bottom: var(--mb-2-5);\n}\n\n.skills__open .skills__arrow {\n  transform: rotate(-180deg);\n}\n\n/*==================== QUALIFICATION ====================*/\n.qualification__tabs {\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: var(--mb-2)\n}\n\n.qualification__button {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n  cursor: pointer\n}\n\n.qualification__button:hover {\n  color: var(--first-color);\n}\n\n.qualification__icon {\n  font-size: 1.8rem;\n  margin-right: var(--mb-0-25);\n}\n\n.qualification__data {\n  display: grid;\n  grid-template-columns: 1fr max-content 1fr;\n  column-gap: 1.5rem;\n}\n\n.qualification__title {\n  font-size: var(--normal-font-size);\n  font-weight: var(--font-medium);\n}\n\n.qualification__subtitle {\n  display: inline-block;\n  font-size: var(--small-font-size);\n  margin-bottom: var(--mb-1);\n}\n\n.qualification__calendar {\n  font-size: var(--smaller-font-size);\n  color: var(--text-color-light);\n  /* margin-bottom: var(--mb-1) */\n\n}\n\n.qualification__rounder {\n  display: inline-block;\n  width: 13px;\n  height: 13px;\n  background-color: var(--first-color);\n  border-radius: 50%;\n}\n\n.qualification__line {\n  display: block;\n  width: 1px;\n  height: 100%;\n  background-color: var(--first-color);\n  transform: translate(6px, -7px)\n}\n\n.qualification__content[data-content] {\n  display: none;\n\n}\n\n.qualification__active[data-content] {\n  display: block;\n}\n\n.qualification__button.qualification__active {\n  color: var(--first-color)\n}\n\n/* Active Modal */\n.active-modal {\n  opacity: 1;\n  visibility: visible;\n}\n\n\n/*==================== PORTFOLIO ====================*/\n.portfolio__container {\n  overflow: initial;\n}\n\n.portfolio__content {\n  padding: 0 1.5rem;\n}\n\n.portfolio__img {\n  width: 265px;\n  border-radius: .5rem;\n  justify-self: center;\n}\n\n.portfolio__title {\n  font-size: var(--h3-font-size);\n  margin-bottom: var(--mb-0-5);\n}\n\n.portfolio__description {\n  margin-bottom: var(--mb-0-75);\n}\n\n.portfolio__button:hover .button__icon {\n  transform: translateX(.25rem);\n}\n\n.swiper-button-prev::after, .swiper-button-next::after {\n  content: '';\n}\n\n.swiper-portfolio-icon {\n  font-size: 2rem;\n  color: var(--first-color);\n}\n\n.swiper-button-prev {\n  left: -.5rem;\n}\n\n.swiper-button-next {\n  right: -.5rem;\n}\n\n.swiper-container-horizontal > .swiper-pagination-bullets {\n  bottom: -2.5rem;\n}\n\n.swiper-pagination-bullet-active {\n  background-color: var(--first-color);\n\n}\n\n.swiper-button-prev, \n.swiper-button-next,\n.swiper-pagination-bullet {\n  outline: none;\n}\n\n/*==================== CONTACT ME ====================*/\n.contact__container {\n  row-gap: 3rem;\n}\n\n.contact__information {\n  display: flex;\n  margin-bottom: var(--mb-2)\n}\n\n.contact__icon {\n  font-size: 1.5rem;\n  color: var(--first-color);\n  margin-right: var(--mb-0-75);\n}\n\n.content__title {\n  font-size: var(--h3-font-size);\n  font-weight: var(--font-medium);\n}\n\n.contact__subtitle {\n  font-size: var(--small-font-size);\n  color: var(--text-color-light);\n}\n\n.contact__content {\n  background-color: var(--input-color);\n  border-radius: .5rem;\n  padding: .75rem 1rem .25rem;\n}\n\n.contact__label {\n  font-size: var(--smaller-font-size);\n  color: var(--title-color);\n}\n\n.contact__input {\n  width: 100%;\n  background-color: var(--input-color);\n  color: var(--text-color);\n  font-family: var(--body-font);\n  font-size: var(--normal-font-size);\n  border: none;\n  outline: none;\n  padding: .25rem .5rem .5rem 0;\n}\n\n/*==================== FOOTER ====================*/\n.footer {\n  padding-top: 2rem;\n}\n\n.footer__container {\n  row-gap: 3.5rem;\n}\n\n.footer__bg {\n  background-color: var(--first-color-second);\n  padding: 2rem 0 3rem;\n}\n\n.footer__title {\n  font-size: var(--h1-font-size);\n  margin-bottom: var(--mb-0-25);\n\n}\n\n.footer__subtitle {\n  font-size: var(--small-font-size);\n}\n\n.footer__links {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1.5rem;\n}\n\n.footer__link:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__social {\n  font-size: 1.35rem;\n  margin-right: var(--mb-1-5);\n}\n\n.footer__social:hover {\n  color: var(--first-color-lighter);\n}\n\n.footer__copy {\n  font-size: var(--smaller-font-size);\n  text-align: center;\n  color: var(--text-color-light);\n  margin-top: var(--mb-3)\n}\n\n.footer__title,\n.footer__subtitle,\n.footer__link,\n.footer__social {\n  color: #FFF;\n  fill: #FFF;\n}\n\n.icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  /* fill:white; */\n  overflow: hidden;\n}\n\n/*========== SCROLL UP ==========*/\n.scrollup {\n  position: fixed;\n  right: 1rem;\n  bottom: -20%;\n  background-color: var(--first-color);\n  opacity: .8;\n  padding: 0 .3rem;\n  border-radius: .4rem;\n  z-index: var(--z-tooltip);\n  transition: .4s;\n}\n\n.scrollup:hover {\n  background-color: var(--first-color-alt);\n}\n\n.scrollup__icon {\n  font-size: 1.5rem;\n  color: #FFF;\n}\n\n/* Show scroll */\n.show-scroll {\n  bottom: 5rem;\n}\n\n\n/*========== SCROLL BAR ==========*/\n::-webkit-scrollbar {\n  width: .60rem;\n  background-color: var(--scroll-bar-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--scroll-thumb-color);\n  border-radius: .5rem;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--text-color-light);\n}\n\n\n/*==================== MEDIA QUERIES ====================*/\n/* For small devices */\n@media screen and (max-width: 350px) {\n  .container {\n      margin-left: var(--mb-1);\n      margin-right: var(--mb-1);\n  }\n  .nav__menu {\n      padding: 2rem .25rem 4rem;\n  }\n\n  .nav__list {\n      column-gap: 0;\n  }\n  .home__content {\n      grid-template-columns: .25fr 3fr;\n  }\n\n  .home__blob {\n      width: 180px;\n  }\n\n  .skills__title {\n      font-size: var(--normal-font-size);\n  }\n  .qualification__data {\n      gap: .5rem;\n  }\n\n  .services__container {\n      grid-template-columns: max-content;\n      justify-content: center;\n  }\n\n  .services__content {\n      padding-right: 3.5rem;\n  }\n  .services__modal {\n      padding: 0 .5rem;\n  }\n\n  .project__img {\n      width: 200px;\n  }\n\n  .testimonial__header,\n  .testimonial__data {\n      flex-direction: column;\n      align-items: center;\n  }\n\n  .testimonial__img {\n      margin-right: 0;\n      margin-bottom: var(--mb-0-25);\n  }\n\n  .testimonial__data,\n  .testimonial__description {\n      text-align: center;\n  }\n}\n\n/* For medium devices */\n@media screen and (min-width: 568px) {\n  .home__content {\n      grid-template-columns: max-content 1fr 1fr;\n  }\n  .home__data {\n      grid-column: initial;\n  }\n  .home__img {\n      order: 1;\n      justify-self: center;\n  }\n\n  .about__container,\n  .skills_container,\n  .portfolio__content,\n  .project__container,\n  .contact__container,\n  .footer__container {\n      grid-template-columns: repeat(2, 1fr);\n  }\n\n  .qualification__sections {\n      display: grid;\n      grid-template-columns: .6fr;\n      justify-content: center;\n  }\n\n  @media screen and (min-width: 768px) {\n      .container {\n          margin-left: auto;\n          margin-right: auto;\n      }\n\n      .body {\n          margin: 0;\n      }\n      .section {\n          padding: 6rem 0 2rem;\n      }\n      .section__subtitle {\n          margin-bottom: 4rem;\n      }\n      .header {\n          top: 0;\n          bottom: initial;\n      }\n\n      .header,\n      .main,\n      .footer__container {\n          padding: 0 1rem;\n      }\n\n      .nav {\n          height: calc(var(--header-height) + 1.5rem);\n          column-gap: 1rem;\n      }\n      .nav__icon,\n      .nav__close,\n      .nav__toggle {\n          display: none;\n      }\n\n      .nav__list {\n          display: flex;\n          column-gap: 2rem;\n      }\n\n      .nav__item {\n        align-content: center;\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      #translate{\n        font-size: 0;\n      }\n\n      .nav__menu {\n          margin-left: auto;\n      }\n      .change-theme {\n          margin: 0;\n      }\n\n      .home__container {\n          row-gap: 5rem;\n      }\n\n      .home__content {\n          padding-top: 5.5rem;\n          column-gap: 2rem;\n      }\n      .home__blob {\n          width: 270px;\n      }\n      .home__scroll {\n          display: block;\n      }\n      .home__scroll-button {\n          margin-left: 3rem;\n      }\n      .about__container {\n          column-gap: 5rem; \n      }\n      .about__img {\n          width: 350px;\n      }\n      .about__description {\n          text-align: initial;\n      }\n      .about__info {\n          justify-content: space-between;\n      }\n      .about__buttons {\n          justify-content: initial;\n      }\n      .qualification__tabs {\n          justify-content: center;\n\n      }\n      .qualification__button {\n          margin: 0 var(--mb-1)\n      }\n\n      .qualification__sections {\n          grid-template-columns: .5fr\n      }\n      .services__container {\n          grid-template-columns: repeat(3, 218px);\n          justify-content: center;\n      }\n      .services__icon {\n          font-size: 2rem;\n      }\n      .services__content {\n          padding: 6rem 0 2rem 2.5rem;\n      }\n\n      .services__modal-content {\n          width: 450px;\n      }\n      .portfolio__img {\n          width: 320px;\n      }\n      .portfolio__content {\n          align-items: center;\n      }\n      .project {\n          text-align: initial;\n      }\n      .project__bg {\n          background: none;\n      }\n      .project__container {\n          background-color: var(--first-color-second);\n          border-radius: 1rem;\n          padding: 3rem 2.5rem 0;\n          grid-template-columns: 1fr max-content;\n          column-gap: 3rem;\n      }\n      .project__data {\n          padding-top: .8rem;\n      }\n      .footer__container {\n          grid-template-columns: repeat(3, 1fr);\n      }\n      .footer__bg {\n          padding: 3rem 0 3.5rem; \n      }\n\n      .footer__links {\n          flex-direction: row;\n          column-gap: 2rem;\n      }\n      .footer__socials {\n          justify-self: flex-end;\n      }\n      .footer__copy {\n          margin-top: 4.5rem;\n      }\n\n  }\n}\n\n/* For large devices */\n@media screen and (min-width: 1024px) {\n  .header,\n  .main,\n  .footer__container {\n      padding: 0;\n  }\n  .home__blob {\n      width: 320px;\n  }\n  .home__social {\n      transform: translateX(-6rem);\n  }\n  .services__container {\n      grid-template-columns: repeat(3, 238px);\n  }\n  .portfolio__content {\n      column-gap: 5rem;\n  }\n  .swiper-portfolio-icon {\n      font-size: 3.5rem;\n  }\n  .swiper-button-prev {\n      left: 3.5rem;\n  }\n  .swiper-button-next {\n      right: 3.5rem;\n  }\n  .swiper-container-horizontal > .swiper-pagination-bullets {\n      bottom: -4.5rem\n  }\n\n  .contact__form {\n      width: 460px; \n  }\n  .contact__inputs {\n      grid-template-columns: repeat(2, 1fr);\n  }\n}"},{"_content":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,(function(){\"use strict\";function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}function a(e){return null!==e&&\"object\"==typeof e&&\"constructor\"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(s){void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}var s={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:\"\"},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"}};function r(){var e=\"undefined\"!=typeof document?document:{};return i(e,s),e}var n={document:s,navigator:{userAgent:\"\"},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return\"\"}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return\"undefined\"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){\"undefined\"!=typeof setTimeout&&clearTimeout(e)}};function o(){var e=\"undefined\"!=typeof window?window:{};return i(e,n),e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,a){return(c=p()?Reflect.construct:function(e,t,a){var i=[null];i.push.apply(i,t);var s=new(Function.bind.apply(e,i));return a&&d(s,a.prototype),s}).apply(null,arguments)}function u(e){var t=\"function\"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(a=e,-1===Function.toString.call(a).indexOf(\"[native code]\")))return e;var a;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return c(e,arguments,l(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),d(i,e)})(e)}var h=function(e){var t,a;function i(t){var a,i,s;return a=e.call.apply(e,[this].concat(t))||this,i=function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(a),s=i.__proto__,Object.defineProperty(i,\"__proto__\",{get:function(){return s},set:function(e){s.__proto__=e}}),a}return a=e,(t=i).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,i}(u(Array));function v(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,v(e)):t.push(e)})),t}function f(e,t){return Array.prototype.filter.call(e,t)}function m(e,t){var a=o(),i=r(),s=[];if(!t&&e instanceof h)return e;if(!e)return new h(s);if(\"string\"==typeof e){var n=e.trim();if(n.indexOf(\"<\")>=0&&n.indexOf(\">\")>=0){var l=\"div\";0===n.indexOf(\"<li\")&&(l=\"ul\"),0===n.indexOf(\"<tr\")&&(l=\"tbody\"),0!==n.indexOf(\"<td\")&&0!==n.indexOf(\"<th\")||(l=\"tr\"),0===n.indexOf(\"<tbody\")&&(l=\"table\"),0===n.indexOf(\"<option\")&&(l=\"select\");var d=i.createElement(l);d.innerHTML=n;for(var p=0;p<d.childNodes.length;p+=1)s.push(d.childNodes[p])}else s=function(e,t){if(\"string\"!=typeof e)return[e];for(var a=[],i=t.querySelectorAll(e),s=0;s<i.length;s+=1)a.push(i[s]);return a}(e.trim(),t||i)}else if(e.nodeType||e===a||e===i)s.push(e);else if(Array.isArray(e)){if(e instanceof h)return e;s=e}return new h(function(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}(s))}m.fn=h.prototype;var g,b,w,y={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,i)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,i)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return f(this,(function(e){return i.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));this.forEach((function(e){i.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&\"string\"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===arguments.length)this[a].setAttribute(e,t);else for(var i in e)this[a][i]=e[i],this[a].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration=\"string\"!=typeof e?e+\"ms\":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];function o(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),m(t).is(s))r.apply(t,a);else for(var i=m(t).parents(),n=0;n<i.length;n+=1)m(i[n]).is(s)&&r.apply(i[n],a)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var d,p=i.split(\" \"),c=0;c<this.length;c+=1){var u=this[c];if(s)for(d=0;d<p.length;d+=1){var h=p[d];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[h]||(u.dom7LiveListeners[h]=[]),u.dom7LiveListeners[h].push({listener:r,proxyListener:o}),u.addEventListener(h,o,n)}else for(d=0;d<p.length;d+=1){var v=p[d];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[v]||(u.dom7Listeners[v]=[]),u.dom7Listeners[v].push({listener:r,proxyListener:l}),u.addEventListener(v,l,n)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var o=i.split(\" \"),l=0;l<o.length;l+=1)for(var d=o[l],p=0;p<this.length;p+=1){var c=this[p],u=void 0;if(!s&&c.dom7Listeners?u=c.dom7Listeners[d]:s&&c.dom7LiveListeners&&(u=c.dom7LiveListeners[d]),u&&u.length)for(var h=u.length-1;h>=0;h-=1){var v=u[h];r&&v.listener===r||r&&v.listener&&v.listener.dom7proxy&&v.listener.dom7proxy===r?(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1)):r||(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1))}}return this},trigger:function(){for(var e=o(),t=arguments.length,a=new Array(t),i=0;i<t;i++)a[i]=arguments[i];for(var s=a[0].split(\" \"),r=a[1],n=0;n<s.length;n+=1)for(var l=s[n],d=0;d<this.length;d+=1){var p=this[d];if(e.CustomEvent){var c=new e.CustomEvent(l,{detail:r,bubbles:!0,cancelable:!0});p.dom7EventData=a.filter((function(e,t){return t>0})),p.dispatchEvent(c),p.dom7EventData=[],delete p.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on(\"transitionend\",(function a(i){i.target===this&&(e.call(this,i),t.off(\"transitionend\",a))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue(\"margin-right\"))+parseFloat(t.getPropertyValue(\"margin-left\"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue(\"margin-top\"))+parseFloat(t.getPropertyValue(\"margin-bottom\"))}return this[0].offsetHeight}return null},styles:function(){var e=o();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=o(),t=r(),a=this[0],i=a.getBoundingClientRect(),s=t.body,n=a.clientTop||s.clientTop||0,l=a.clientLeft||s.clientLeft||0,d=a===e?e.scrollY:a.scrollTop,p=a===e?e.scrollX:a.scrollLeft;return{top:i.top+d-n,left:i.left+p-l}}return null},css:function(e,t){var a,i=o();if(1===arguments.length){if(\"string\"!=typeof e){for(a=0;a<this.length;a+=1)for(var s in e)this[a].style[s]=e[s];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&\"string\"==typeof e){for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,a){e.apply(t,[t,a])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=o(),s=r(),n=this[0];if(!n||void 0===e)return!1;if(\"string\"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=m(e),a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}if(e===s)return n===s;if(e===i)return n===i;if(e.nodeType||e instanceof h){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return m([]);if(e<0){var a=t+e;return m(a<0?[]:[this[a]])}return m([this[e]])},append:function(){for(var e,t=r(),a=0;a<arguments.length;a+=1){e=a<0||arguments.length<=a?void 0:arguments[a];for(var i=0;i<this.length;i+=1)if(\"string\"==typeof e){var s=t.createElement(\"div\");for(s.innerHTML=e;s.firstChild;)this[i].appendChild(s.firstChild)}else if(e instanceof h)for(var n=0;n<e.length;n+=1)this[i].appendChild(e[n]);else this[i].appendChild(e)}return this},prepend:function(e){var t,a,i=r();for(t=0;t<this.length;t+=1)if(\"string\"==typeof e){var s=i.createElement(\"div\");for(s.innerHTML=e,a=s.childNodes.length-1;a>=0;a-=1)this[t].insertBefore(s.childNodes[a],this[t].childNodes[0])}else if(e instanceof h)for(a=0;a<e.length;a+=1)this[t].insertBefore(e[a],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&m(this[0].nextElementSibling).is(e)?m([this[0].nextElementSibling]):m([]):this[0].nextElementSibling?m([this[0].nextElementSibling]):m([]):m([])},nextAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&m(t.previousElementSibling).is(e)?m([t.previousElementSibling]):m([]):t.previousElementSibling?m([t.previousElementSibling]):m([])}return m([])},prevAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null!==this[a].parentNode&&(e?m(this[a].parentNode).is(e)&&t.push(this[a].parentNode):t.push(this[a].parentNode));return m(t)},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e?m(i).is(e)&&t.push(i):t.push(i),i=i.parentNode;return m(t)},closest:function(e){var t=this;return void 0===e?m([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1){try{var i=this[a].querySelectorAll(e)}catch(t){console.log(e)}for(var s=0;s<i.length;s+=1)t.push(i[s])}return m(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].children,s=0;s<i.length;s+=1)e&&!m(i[s]).is(e)||t.push(i[s]);return m(t)},filter:function(e){return m(f(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function E(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function T(e,t){void 0===t&&(t=\"x\");var a,i,s,r=o(),n=function(e){var t,a=o();return a.getComputedStyle&&(t=a.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return r.WebKitCSSMatrix?((i=n.transform||n.webkitTransform).split(\",\").length>6&&(i=i.split(\", \").map((function(e){return e.replace(\",\",\".\")})).join(\", \")),s=new r.WebKitCSSMatrix(\"none\"===i?\"\":i)):a=(s=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue(\"transform\").replace(\"translate(\",\"matrix(1, 0, 0, 1,\")).toString().split(\",\"),\"x\"===t&&(i=r.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),\"y\"===t&&(i=r.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function S(e){return\"object\"==typeof e&&null!==e&&e.constructor&&\"Object\"===Object.prototype.toString.call(e).slice(8,-1)}function C(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=[\"__proto__\",\"constructor\",\"prototype\"],a=1;a<arguments.length;a+=1){var i=a<0||arguments.length<=a?void 0:arguments[a];if(null!=i)for(var s=Object.keys(Object(i)).filter((function(e){return t.indexOf(e)<0})),r=0,n=s.length;r<n;r+=1){var o=s[r],l=Object.getOwnPropertyDescriptor(i,o);void 0!==l&&l.enumerable&&(S(e[o])&&S(i[o])?i[o].__swiper__?e[o]=i[o]:C(e[o],i[o]):!S(e[o])&&S(i[o])?(e[o]={},i[o].__swiper__?e[o]=i[o]:C(e[o],i[o])):e[o]=i[o])}}return e}function M(e,t){Object.keys(t).forEach((function(a){S(t[a])&&Object.keys(t[a]).forEach((function(i){\"function\"==typeof t[a][i]&&(t[a][i]=t[a][i].bind(e))})),e[a]=t[a]}))}function z(e){return void 0===e&&(e=\"\"),\".\"+e.trim().replace(/([\\.:\\/])/g,\"\\\\$1\").replace(/ /g,\".\")}function P(){return g||(g=function(){var e=o(),t=r();return{touch:!!(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&\"maxTouchPoints\"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:\"MutationObserver\"in e||\"WebkitMutationObserver\"in e,passiveListener:function(){var t=!1;try{var a=Object.defineProperty({},\"passive\",{get:function(){t=!0}});e.addEventListener(\"testPassiveListener\",null,a)}catch(e){}return t}(),gestures:\"ongesturestart\"in e}}()),g}function k(e){return void 0===e&&(e={}),b||(b=function(e){var t=(void 0===e?{}:e).userAgent,a=P(),i=o(),s=i.navigator.platform,r=t||i.navigator.userAgent,n={ios:!1,android:!1},l=i.screen.width,d=i.screen.height,p=r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),c=r.match(/(iPad).*OS\\s([\\d_]+)/),u=r.match(/(iPod)(.*OS\\s([\\d_]+))?/),h=!c&&r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),v=\"Win32\"===s,f=\"MacIntel\"===s;return!c&&f&&a.touch&&[\"1024x1366\",\"1366x1024\",\"834x1194\",\"1194x834\",\"834x1112\",\"1112x834\",\"768x1024\",\"1024x768\",\"820x1180\",\"1180x820\",\"810x1080\",\"1080x810\"].indexOf(l+\"x\"+d)>=0&&((c=r.match(/(Version)\\/([\\d.]+)/))||(c=[0,1,\"13_0_0\"]),f=!1),p&&!v&&(n.os=\"android\",n.android=!0),(c||h||u)&&(n.os=\"ios\",n.ios=!0),n}(e)),b}function L(){return w||(w=function(){var e,t=o();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf(\"safari\")>=0&&e.indexOf(\"chrome\")<0&&e.indexOf(\"android\")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),w}Object.keys(y).forEach((function(e){Object.defineProperty(m.fn,e,{value:y[e],writable:!0})}));var $={name:\"resize\",create:function(){var e=this;C(e,{resize:{observer:null,createObserver:function(){e&&!e.destroyed&&e.initialized&&(e.resize.observer=new ResizeObserver((function(t){var a=e.width,i=e.height,s=a,r=i;t.forEach((function(t){var a=t.contentBoxSize,i=t.contentRect,n=t.target;n&&n!==e.el||(s=i?i.width:(a[0]||a).inlineSize,r=i?i.height:(a[0]||a).blockSize)})),s===a&&r===i||e.resize.resizeHandler()})),e.resize.observer.observe(e.el))},removeObserver:function(){e.resize.observer&&e.resize.observer.unobserve&&e.el&&(e.resize.observer.unobserve(e.el),e.resize.observer=null)},resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit(\"beforeResize\"),e.emit(\"resize\"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit(\"orientationchange\")}}})},on:{init:function(e){var t=o();e.params.resizeObserver&&void 0!==o().ResizeObserver?e.resize.createObserver():(t.addEventListener(\"resize\",e.resize.resizeHandler),t.addEventListener(\"orientationchange\",e.resize.orientationChangeHandler))},destroy:function(e){var t=o();e.resize.removeObserver(),t.removeEventListener(\"resize\",e.resize.resizeHandler),t.removeEventListener(\"orientationchange\",e.resize.orientationChangeHandler)}}},I={attach:function(e,t){void 0===t&&(t={});var a=o(),i=this,s=new(a.MutationObserver||a.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){i.emit(\"observerUpdate\",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}else i.emit(\"observerUpdate\",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},O={name:\"observer\",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){M(this,{observer:t({},I,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function A(e){var t=this,a=r(),i=o(),s=t.touchEventsData,n=t.params,l=t.touches;if(!t.animating||!n.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var p=m(d.target);if(\"wrapper\"!==n.touchEventsTarget||p.closest(t.wrapperEl).length)if(s.isTouchEvent=\"touchstart\"===d.type,s.isTouchEvent||!(\"which\"in d)||3!==d.which)if(!(!s.isTouchEvent&&\"button\"in d&&d.button>0))if(!s.isTouched||!s.isMoved)if(!!n.noSwipingClass&&\"\"!==n.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(p=m(e.path[0])),n.noSwiping&&p.closest(n.noSwipingSelector?n.noSwipingSelector:\".\"+n.noSwipingClass)[0])t.allowClick=!0;else if(!n.swipeHandler||p.closest(n.swipeHandler)[0]){l.currentX=\"touchstart\"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY=\"touchstart\"===d.type?d.targetTouches[0].pageY:d.pageY;var c=l.currentX,u=l.currentY,h=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,v=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(h&&(c<=v||c>=i.innerWidth-v)){if(\"prevent\"!==h)return;e.preventDefault()}if(C(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=c,l.startY=u,s.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(s.allowThresholdMove=!1),\"touchstart\"!==d.type){var f=!0;p.is(s.formElements)&&(f=!1),a.activeElement&&m(a.activeElement).is(s.formElements)&&a.activeElement!==p[0]&&a.activeElement.blur();var g=f&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!g||p[0].isContentEditable||d.preventDefault()}t.emit(\"touchStart\",d)}}}function D(e){var t=r(),a=this,i=a.touchEventsData,s=a.params,n=a.touches,o=a.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),i.isTouched){if(!i.isTouchEvent||\"touchmove\"===l.type){var d=\"touchmove\"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),p=\"touchmove\"===l.type?d.pageX:l.pageX,c=\"touchmove\"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return n.startX=p,void(n.startY=c);if(!a.allowTouchMove)return a.allowClick=!1,void(i.isTouched&&(C(n,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=x()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(a.isVertical()){if(c<n.startY&&a.translate<=a.maxTranslate()||c>n.startY&&a.translate>=a.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&a.translate<=a.maxTranslate()||p>n.startX&&a.translate>=a.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&m(l.target).is(i.formElements))return i.isMoved=!0,void(a.allowClick=!1);if(i.allowTouchCallbacks&&a.emit(\"touchMove\",l),!(l.targetTouches&&l.targetTouches.length>1)){n.currentX=p,n.currentY=c;var u=n.currentX-n.startX,h=n.currentY-n.startY;if(!(a.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(h,2))<a.params.threshold)){var v;if(void 0===i.isScrolling)a.isHorizontal()&&n.currentY===n.startY||a.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:u*u+h*h>=25&&(v=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,i.isScrolling=a.isHorizontal()?v>s.touchAngle:90-v>s.touchAngle);if(i.isScrolling&&a.emit(\"touchMoveOpposite\",l),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){a.allowClick=!1,!s.cssMode&&l.cancelable&&l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation(),i.isMoved||(s.loop&&a.loopFix(),i.startTranslate=a.getTranslate(),a.setTransition(0),a.animating&&a.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==a.allowSlideNext&&!0!==a.allowSlidePrev||a.setGrabCursor(!0),a.emit(\"sliderFirstMove\",l)),a.emit(\"sliderMove\",l),i.isMoved=!0;var f=a.isHorizontal()?u:h;n.diff=f,f*=s.touchRatio,o&&(f=-f),a.swipeDirection=f>0?\"prev\":\"next\",i.currentTranslate=f+i.startTranslate;var g=!0,b=s.resistanceRatio;if(s.touchReleaseOnEdges&&(b=0),f>0&&i.currentTranslate>a.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=a.minTranslate()-1+Math.pow(-a.minTranslate()+i.startTranslate+f,b))):f<0&&i.currentTranslate<a.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=a.maxTranslate()+1-Math.pow(a.maxTranslate()-i.startTranslate-f,b))),g&&(l.preventedByNestedSwiper=!0),!a.allowSlideNext&&\"next\"===a.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!a.allowSlidePrev&&\"prev\"===a.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),a.allowSlidePrev||a.allowSlideNext||(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=a.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(a.updateActiveIndex(),a.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:n[a.isHorizontal()?\"startX\":\"startY\"],time:i.touchStartTime}),i.velocities.push({position:n[a.isHorizontal()?\"currentX\":\"currentY\"],time:x()})),a.updateProgress(i.currentTranslate),a.setTranslate(i.currentTranslate))}}}}}else i.startMoving&&i.isScrolling&&a.emit(\"touchMoveOpposite\",l)}function N(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,r=t.rtlTranslate,n=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit(\"touchEnd\",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var p,c=x(),u=c-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit(\"tap click\",d),u<300&&c-a.lastClickTime<300&&t.emit(\"doubleTap doubleClick\",d)),a.lastClickTime=x(),E((function(){t.destroyed||(t.allowClick=!0)})),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,p=i.followFinger?r?t.translate:-t.translate:-a.currentTranslate,!i.cssMode)if(i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(a.velocities.length>1){var h=a.velocities.pop(),v=a.velocities.pop(),f=h.position-v.position,m=h.time-v.time;t.velocity=f/m,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(m>150||x()-h.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,b=t.velocity*g,w=t.translate+b;r&&(w=-w);var y,T,S=!1,C=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(w<t.maxTranslate())i.freeModeMomentumBounce?(w+t.maxTranslate()<-C&&(w=t.maxTranslate()-C),y=t.maxTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.maxTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(w>t.minTranslate())i.freeModeMomentumBounce?(w-t.minTranslate()>C&&(w=t.minTranslate()+C),y=t.minTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.minTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(i.freeModeSticky){for(var M,z=0;z<l.length;z+=1)if(l[z]>-w){M=z;break}w=-(w=Math.abs(l[M]-w)<Math.abs(l[M-1]-w)||\"next\"===t.swipeDirection?l[M]:l[M-1])}if(T&&t.once(\"transitionEnd\",(function(){t.loopFix()})),0!==t.velocity){if(g=r?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),i.freeModeSticky){var P=Math.abs((r?-w:w)-t.translate),k=t.slidesSizesGrid[t.activeIndex];g=P<k?i.speed:P<2*k?1.5*i.speed:2.5*i.speed}}else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&S?(t.updateProgress(y),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit(\"momentumBounce\"),t.setTransition(i.speed),setTimeout((function(){t.setTranslate(y),n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):(t.emit(\"_freeModeNoMomentumRelease\"),t.updateProgress(w)),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(i.freeModeSticky)return void t.slideToClosest();i.freeMode&&t.emit(\"_freeModeNoMomentumRelease\")}(!i.freeModeMomentum||u>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var L=0,$=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<i.slidesPerGroupSkip?1:i.slidesPerGroup){var O=I<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[I+O]?p>=o[I]&&p<o[I+O]&&(L=I,$=o[I+O]-o[I]):p>=o[I]&&(L=I,$=o[o.length-1]-o[o.length-2])}var A=(p-o[L])/$,D=L<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);\"next\"===t.swipeDirection&&(A>=i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L)),\"prev\"===t.swipeDirection&&(A>1-i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(L+D):t.slideTo(L):(\"next\"===t.swipeDirection&&t.slideTo(L+D),\"prev\"===t.swipeDirection&&t.slideTo(L))}}}function G(){var e=this,t=e.params,a=e.el;if(!a||0!==a.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,s=e.allowSlidePrev,r=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),(\"auto\"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}function B(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function H(){var e=this,t=e.wrapperEl,a=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=a?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0===i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit(\"setTranslate\",e.translate,!1)}var X=!1;function Y(){}var R={init:!0,direction:\"horizontal\",touchEventsTarget:\"container\",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!1,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:\"slide\",breakpoints:void 0,breakpointsBase:\"window\",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:\"column\",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:\"swiper-no-swiping\",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:\"swiper-container-\",slideClass:\"swiper-slide\",slideBlankClass:\"swiper-slide-invisible-blank\",slideActiveClass:\"swiper-slide-active\",slideDuplicateActiveClass:\"swiper-slide-duplicate-active\",slideVisibleClass:\"swiper-slide-visible\",slideDuplicateClass:\"swiper-slide-duplicate\",slideNextClass:\"swiper-slide-next\",slideDuplicateNextClass:\"swiper-slide-duplicate-next\",slidePrevClass:\"swiper-slide-prev\",slideDuplicatePrevClass:\"swiper-slide-duplicate-prev\",wrapperClass:\"swiper-wrapper\",runCallbacksOnInit:!0,_emitClasses:!1},V={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a];i.params&&C(e,i.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a],s=e[a]||{};i.on&&t.on&&Object.keys(i.on).forEach((function(e){t.on(e,i.on[e])})),i.create&&i.create.bind(t)(s)}))}},eventsEmitter:{on:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;var s=a?\"unshift\":\"push\";return e.split(\" \").forEach((function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)})),i},once:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;function s(){i.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];t.apply(i,r)}return s.__emitterProxy=t,i.on(e,s,a)},onAny:function(e,t){var a=this;if(\"function\"!=typeof e)return a;var i=t?\"unshift\":\"push\";return a.eventsAnyListeners.indexOf(e)<0&&a.eventsAnyListeners[i](e),a},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var a=t.eventsAnyListeners.indexOf(e);return a>=0&&t.eventsAnyListeners.splice(a,1),t},off:function(e,t){var a=this;return a.eventsListeners?(e.split(\" \").forEach((function(e){void 0===t?a.eventsListeners[e]=[]:a.eventsListeners[e]&&a.eventsListeners[e].forEach((function(i,s){(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&a.eventsListeners[e].splice(s,1)}))})),a):a},emit:function(){var e,t,a,i=this;if(!i.eventsListeners)return i;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];\"string\"==typeof r[0]||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),a=i):(e=r[0].events,t=r[0].data,a=r[0].context||i),t.unshift(a);var o=Array.isArray(e)?e:e.split(\" \");return o.forEach((function(e){i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach((function(i){i.apply(a,[e].concat(t))})),i.eventsListeners&&i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(e){e.apply(a,t)}))})),i}},update:{updateSize:function(){var e,t,a=this,i=a.$el;e=void 0!==a.params.width&&null!==a.params.width?a.params.width:i[0].clientWidth,t=void 0!==a.params.height&&null!==a.params.height?a.params.height:i[0].clientHeight,0===e&&a.isHorizontal()||0===t&&a.isVertical()||(e=e-parseInt(i.css(\"padding-left\")||0,10)-parseInt(i.css(\"padding-right\")||0,10),t=t-parseInt(i.css(\"padding-top\")||0,10)-parseInt(i.css(\"padding-bottom\")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),C(a,{width:e,height:t,size:a.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=function(t){return e.isHorizontal()?t:{width:\"height\",\"margin-top\":\"margin-left\",\"margin-bottom \":\"margin-right\",\"margin-left\":\"margin-top\",\"margin-right\":\"margin-bottom\",\"padding-left\":\"padding-top\",\"padding-right\":\"padding-bottom\",marginRight:\"marginBottom\"}[t]},a=function(e,a){return parseFloat(e.getPropertyValue(t(a))||0)},i=e.params,s=e.$wrapperEl,r=e.size,n=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,p=s.children(\".\"+e.params.slideClass),c=l?e.virtual.slides.length:p.length,u=[],h=[],v=[],f=i.slidesOffsetBefore;\"function\"==typeof f&&(f=i.slidesOffsetBefore.call(e));var m=i.slidesOffsetAfter;\"function\"==typeof m&&(m=i.slidesOffsetAfter.call(e));var g=e.snapGrid.length,b=e.slidesGrid.length,w=i.spaceBetween,y=-f,E=0,x=0;if(void 0!==r){var T,S;\"string\"==typeof w&&w.indexOf(\"%\")>=0&&(w=parseFloat(w.replace(\"%\",\"\"))/100*r),e.virtualSize=-w,n?p.css({marginLeft:\"\",marginTop:\"\"}):p.css({marginRight:\"\",marginBottom:\"\"}),i.slidesPerColumn>1&&(T=Math.floor(c/i.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/i.slidesPerColumn)*i.slidesPerColumn,\"auto\"!==i.slidesPerView&&\"row\"===i.slidesPerColumnFill&&(T=Math.max(T,i.slidesPerView*i.slidesPerColumn)));for(var M,z,P,k=i.slidesPerColumn,L=T/k,$=Math.floor(c/i.slidesPerColumn),I=0;I<c;I+=1){S=0;var O=p.eq(I);if(i.slidesPerColumn>1){var A=void 0,D=void 0,N=void 0;if(\"row\"===i.slidesPerColumnFill&&i.slidesPerGroup>1){var G=Math.floor(I/(i.slidesPerGroup*i.slidesPerColumn)),B=I-i.slidesPerColumn*i.slidesPerGroup*G,H=0===G?i.slidesPerGroup:Math.min(Math.ceil((c-G*k*i.slidesPerGroup)/k),i.slidesPerGroup);A=(D=B-(N=Math.floor(B/H))*H+G*i.slidesPerGroup)+N*T/k,O.css({\"-webkit-box-ordinal-group\":A,\"-moz-box-ordinal-group\":A,\"-ms-flex-order\":A,\"-webkit-order\":A,order:A})}else\"column\"===i.slidesPerColumnFill?(N=I-(D=Math.floor(I/k))*k,(D>$||D===$&&N===k-1)&&(N+=1)>=k&&(N=0,D+=1)):D=I-(N=Math.floor(I/L))*L;O.css(t(\"margin-top\"),0!==N&&i.spaceBetween&&i.spaceBetween+\"px\")}if(\"none\"!==O.css(\"display\")){if(\"auto\"===i.slidesPerView){var X=getComputedStyle(O[0]),Y=O[0].style.transform,R=O[0].style.webkitTransform;if(Y&&(O[0].style.transform=\"none\"),R&&(O[0].style.webkitTransform=\"none\"),i.roundLengths)S=e.isHorizontal()?O.outerWidth(!0):O.outerHeight(!0);else{var V=a(X,\"width\"),W=a(X,\"padding-left\"),F=a(X,\"padding-right\"),_=a(X,\"margin-left\"),q=a(X,\"margin-right\"),j=X.getPropertyValue(\"box-sizing\");if(j&&\"border-box\"===j)S=V+_+q;else{var U=O[0],K=U.clientWidth;S=V+W+F+_+q+(U.offsetWidth-K)}}Y&&(O[0].style.transform=Y),R&&(O[0].style.webkitTransform=R),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),p[I]&&(p[I].style[t(\"width\")]=S+\"px\");p[I]&&(p[I].swiperSlideSize=S),v.push(S),i.centeredSlides?(y=y+S/2+E/2+w,0===E&&0!==I&&(y=y-r/2-w),0===I&&(y=y-r/2-w),Math.abs(y)<.001&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup==0&&u.push(y),h.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&u.push(y),h.push(y),y=y+S+w),e.virtualSize+=S+w,E=S,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+m,n&&o&&(\"slide\"===i.effect||\"coverflow\"===i.effect)&&s.css({width:e.virtualSize+i.spaceBetween+\"px\"}),i.setWrapperSize)s.css(((z={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",z));if(i.slidesPerColumn>1)if(e.virtualSize=(S+i.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/i.slidesPerColumn)-i.spaceBetween,s.css(((P={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",P)),i.centeredSlides){M=[];for(var Z=0;Z<u.length;Z+=1){var J=u[Z];i.roundLengths&&(J=Math.floor(J)),u[Z]<e.virtualSize+u[0]&&M.push(J)}u=M}if(!i.centeredSlides){M=[];for(var Q=0;Q<u.length;Q+=1){var ee=u[Q];i.roundLengths&&(ee=Math.floor(ee)),u[Q]<=e.virtualSize-r&&M.push(ee)}u=M,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(0===u.length&&(u=[0]),0!==i.spaceBetween){var te,ae=e.isHorizontal()&&n?\"marginLeft\":t(\"marginRight\");p.filter((function(e,t){return!i.cssMode||t!==p.length-1})).css(((te={})[ae]=w+\"px\",te))}if(i.centeredSlides&&i.centeredSlidesBounds){var ie=0;v.forEach((function(e){ie+=e+(i.spaceBetween?i.spaceBetween:0)}));var se=(ie-=i.spaceBetween)-r;u=u.map((function(e){return e<0?-f:e>se?se+m:e}))}if(i.centerInsufficientSlides){var re=0;if(v.forEach((function(e){re+=e+(i.spaceBetween?i.spaceBetween:0)})),(re-=i.spaceBetween)<r){var ne=(r-re)/2;u.forEach((function(e,t){u[t]=e-ne})),h.forEach((function(e,t){h[t]=e+ne}))}}C(e,{slides:p,snapGrid:u,slidesGrid:h,slidesSizesGrid:v}),c!==d&&e.emit(\"slidesLengthChange\"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit(\"snapGridLengthChange\")),h.length!==b&&e.emit(\"slidesGridLengthChange\"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a=this,i=[],s=0;if(\"number\"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed),\"auto\"!==a.params.slidesPerView&&a.params.slidesPerView>1)if(a.params.centeredSlides)a.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(a.params.slidesPerView);t+=1){var r=a.activeIndex+t;if(r>a.slides.length)break;i.push(a.slides.eq(r)[0])}else i.push(a.slides.eq(a.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var n=i[t].offsetHeight;s=n>s?n:s}s&&a.$wrapperEl.css(\"height\",s+\"px\")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;s&&(r=e),i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(r+(a.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+a.spaceBetween);if(a.watchSlidesVisibility||a.centeredSlides&&a.autoHeight){var d=-(r-o.swiperSlideOffset),p=d+t.slidesSizesGrid[n];(d>=0&&d<t.size-1||p>1&&p<=t.size||d<=0&&p>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(n),i.eq(n).addClass(a.slideVisibleClass))}o.progress=s?-l:l}t.visibleSlides=m(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var a=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*a||0}var i=t.params,s=t.maxTranslate()-t.minTranslate(),r=t.progress,n=t.isBeginning,o=t.isEnd,l=n,d=o;0===s?(r=0,n=!0,o=!0):(n=(r=(e-t.minTranslate())/s)<=0,o=r>=1),C(t,{progress:r,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit(\"reachBeginning toEdge\"),o&&!d&&t.emit(\"reachEnd toEdge\"),(l&&!n||d&&!o)&&t.emit(\"fromEdge\"),t.emit(\"progress\",r)},updateSlidesClasses:function(){var e,t=this,a=t.slides,i=t.params,s=t.$wrapperEl,r=t.activeIndex,n=t.realIndex,o=t.virtual&&i.virtual.enabled;a.removeClass(i.slideActiveClass+\" \"+i.slideNextClass+\" \"+i.slidePrevClass+\" \"+i.slideDuplicateActiveClass+\" \"+i.slideDuplicateNextClass+\" \"+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find(\".\"+i.slideClass+'[data-swiper-slide-index=\"'+r+'\"]'):a.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll(\".\"+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=a.eq(0)).addClass(i.slideNextClass);var d=e.prevAll(\".\"+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=a.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,a=this,i=a.rtlTranslate?a.translate:-a.translate,s=a.slidesGrid,r=a.snapGrid,n=a.params,o=a.activeIndex,l=a.realIndex,d=a.snapIndex,p=e;if(void 0===p){for(var c=0;c<s.length;c+=1)void 0!==s[c+1]?i>=s[c]&&i<s[c+1]-(s[c+1]-s[c])/2?p=c:i>=s[c]&&i<s[c+1]&&(p=c+1):i>=s[c]&&(p=c);n.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(r.indexOf(i)>=0)t=r.indexOf(i);else{var u=Math.min(n.slidesPerGroupSkip,p);t=u+Math.floor((p-u)/n.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),p!==o){var h=parseInt(a.slides.eq(p).attr(\"data-swiper-slide-index\")||p,10);C(a,{snapIndex:t,realIndex:h,previousIndex:o,activeIndex:p}),a.emit(\"activeIndexChange\"),a.emit(\"snapIndexChange\"),l!==h&&a.emit(\"realIndexChange\"),(a.initialized||a.params.runCallbacksOnInit)&&a.emit(\"slideChange\")}else t!==d&&(a.snapIndex=t,a.emit(\"snapIndexChange\"))},updateClickedSlide:function(e){var t,a=this,i=a.params,s=m(e.target).closest(\".\"+i.slideClass)[0],r=!1;if(s)for(var n=0;n<a.slides.length;n+=1)if(a.slides[n]===s){r=!0,t=n;break}if(!s||!r)return a.clickedSlide=void 0,void(a.clickedIndex=void 0);a.clickedSlide=s,a.virtual&&a.params.virtual.enabled?a.clickedIndex=parseInt(m(s).attr(\"data-swiper-slide-index\"),10):a.clickedIndex=t,i.slideToClickedSlide&&void 0!==a.clickedIndex&&a.clickedIndex!==a.activeIndex&&a.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?\"x\":\"y\");var t=this,a=t.params,i=t.rtlTranslate,s=t.translate,r=t.$wrapperEl;if(a.virtualTranslate)return i?-s:s;if(a.cssMode)return s;var n=T(r[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,r=a.$wrapperEl,n=a.wrapperEl,o=a.progress,l=0,d=0;a.isHorizontal()?l=i?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),s.cssMode?n[a.isHorizontal()?\"scrollLeft\":\"scrollTop\"]=a.isHorizontal()?-l:-d:s.virtualTranslate||r.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px)\"),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:d;var p=a.maxTranslate()-a.minTranslate();(0===p?0:(e-a.minTranslate())/p)!==o&&a.updateProgress(e),a.emit(\"setTranslate\",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===i&&(i=!0);var r=this,n=r.params,o=r.wrapperEl;if(r.animating&&n.preventInteractionOnTransition)return!1;var l,d=r.minTranslate(),p=r.maxTranslate();if(l=i&&e>d?d:i&&e<p?p:e,r.updateProgress(l),n.cssMode){var c,u=r.isHorizontal();if(0===t)o[u?\"scrollLeft\":\"scrollTop\"]=-l;else if(o.scrollTo)o.scrollTo(((c={})[u?\"left\":\"top\"]=-l,c.behavior=\"smooth\",c));else o[u?\"scrollLeft\":\"scrollTop\"]=-l;return!0}return 0===t?(r.setTransition(0),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionEnd\"))):(r.setTransition(t),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionStart\")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit(\"transitionEnd\"))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var a=this;a.params.cssMode||a.$wrapperEl.transition(e),a.emit(\"setTransition\",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,r=a.previousIndex;if(!s.cssMode){s.autoHeight&&a.updateAutoHeight();var n=t;if(n||(n=i>r?\"next\":i<r?\"prev\":\"reset\"),a.emit(\"transitionStart\"),e&&i!==r){if(\"reset\"===n)return void a.emit(\"slideResetTransitionStart\");a.emit(\"slideChangeTransitionStart\"),\"next\"===n?a.emit(\"slideNextTransitionStart\"):a.emit(\"slidePrevTransitionStart\")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex,r=a.params;if(a.animating=!1,!r.cssMode){a.setTransition(0);var n=t;if(n||(n=i>s?\"next\":i<s?\"prev\":\"reset\"),a.emit(\"transitionEnd\"),e&&i!==s){if(\"reset\"===n)return void a.emit(\"slideResetTransitionEnd\");a.emit(\"slideChangeTransitionEnd\"),\"next\"===n?a.emit(\"slideNextTransitionEnd\"):a.emit(\"slidePrevTransitionEnd\")}}}},slide:{slideTo:function(e,t,a,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),\"number\"!=typeof e&&\"string\"!=typeof e)throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\"+typeof e+\"] given.\");if(\"string\"==typeof e){var s=parseInt(e,10);if(!isFinite(s))throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\"+e+\"] given.\");e=s}var r=this,n=e;n<0&&(n=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,p=r.previousIndex,c=r.activeIndex,u=r.rtlTranslate,h=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var v=Math.min(r.params.slidesPerGroupSkip,n),f=v+Math.floor((n-v)/r.params.slidesPerGroup);f>=l.length&&(f=l.length-1),(c||o.initialSlide||0)===(p||0)&&a&&r.emit(\"beforeSlideChangeStart\");var m,g=-l[f];if(r.updateProgress(g),o.normalizeSlideIndex)for(var b=0;b<d.length;b+=1){var w=-Math.floor(100*g),y=Math.floor(100*d[b]),E=Math.floor(100*d[b+1]);void 0!==d[b+1]?w>=y&&w<E-(E-y)/2?n=b:w>=y&&w<E&&(n=b+1):w>=y&&(n=b)}if(r.initialized&&n!==c){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(c||0)!==n)return!1}if(m=n>c?\"next\":n<c?\"prev\":\"reset\",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),\"slide\"!==o.effect&&r.setTranslate(g),\"reset\"!==m&&(r.transitionStart(a,m),r.transitionEnd(a,m)),!1;if(o.cssMode){var x,T=r.isHorizontal(),S=-g;if(u&&(S=h.scrollWidth-h.offsetWidth-S),0===t)h[T?\"scrollLeft\":\"scrollTop\"]=S;else if(h.scrollTo)h.scrollTo(((x={})[T?\"left\":\"top\"]=S,x.behavior=\"smooth\",x));else h[T?\"scrollLeft\":\"scrollTop\"]=S;return!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.transitionEnd(a,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,m))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,r=e;return s.params.loop&&(r+=s.loopedSlides),s.slideTo(r,t,a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}return i.slideTo(i.activeIndex+n,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var p=d(l?i.translate:-i.translate),c=n.map((function(e){return d(e)}));n[c.indexOf(p)];var u,h=n[c.indexOf(p)-1];return void 0===h&&s.cssMode&&n.forEach((function(e){!h&&p>=e&&(h=e)})),void 0!==h&&(u=o.indexOf(h))<0&&(u=i.activeIndex-1),i.slideTo(u,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var s=this,r=s.activeIndex,n=Math.min(s.params.slidesPerGroupSkip,r),o=n+Math.floor((r-n)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){var d=s.snapGrid[o];l-d>(s.snapGrid[o+1]-d)*i&&(r+=s.params.slidesPerGroup)}else{var p=s.snapGrid[o-1];l-p<=(s.snapGrid[o]-p)*i&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s=\"auto\"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,r=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10),a.centeredSlides?r<t.loopedSlides-s/2||r>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-s?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var e=this,t=r(),a=e.params,i=e.$wrapperEl;i.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass).remove();var s=i.children(\".\"+a.slideClass);if(a.loopFillGroupWithBlank){var n=a.slidesPerGroup-s.length%a.slidesPerGroup;if(n!==a.slidesPerGroup){for(var o=0;o<n;o+=1){var l=m(t.createElement(\"div\")).addClass(a.slideClass+\" \"+a.slideBlankClass);i.append(l)}s=i.children(\".\"+a.slideClass)}}\"auto\"!==a.slidesPerView||a.loopedSlides||(a.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(a.loopedSlides||a.slidesPerView,10)),e.loopedSlides+=a.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);var d=[],p=[];s.each((function(t,a){var i=m(t);a<e.loopedSlides&&p.push(t),a<s.length&&a>=s.length-e.loopedSlides&&d.push(t),i.attr(\"data-swiper-slide-index\",a)}));for(var c=0;c<p.length;c+=1)i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass));for(var u=d.length-1;u>=0;u-=1)i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass))},loopFix:function(){var e=this;e.emit(\"beforeLoopFix\");var t,a=e.activeIndex,i=e.slides,s=e.loopedSlides,r=e.allowSlidePrev,n=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[a]-e.getTranslate();if(a<s)t=i.length-3*s+a,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d);else if(a>=i.length-s){t=-i.length+a+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)}e.allowSlidePrev=r,e.allowSlideNext=n,e.emit(\"loopFix\")},loopDestroy:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides;t.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass+\",.\"+a.slideClass+\".\"+a.slideBlankClass).remove(),i.removeAttr(\"data-swiper-slide-index\")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var a=t.el;a.style.cursor=\"move\",a.style.cursor=e?\"-webkit-grabbing\":\"-webkit-grab\",a.style.cursor=e?\"-moz-grabbin\":\"-moz-grab\",a.style.cursor=e?\"grabbing\":\"grab\"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor=\"\")}},manipulation:{appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),\"object\"==typeof e&&\"length\"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var r=s+1;if(\"object\"==typeof e&&\"length\"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);r=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,r=a.activeIndex;s.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=i.children(\".\"+s.slideClass));var n=a.slides.length;if(e<=0)a.prependSlide(t);else if(e>=n)a.appendSlide(t);else{for(var o=r>e?r+1:r,l=[],d=n-1;d>=e;d-=1){var p=a.slides.eq(d);p.remove(),l.unshift(p)}if(\"object\"==typeof t&&\"length\"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);o=r>e?r+t.length:r}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&a.support.observer||a.update(),s.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children(\".\"+a.slideClass));var r,n=s;if(\"object\"==typeof e&&\"length\"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1),n=Math.max(n,0);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),a.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=A.bind(e),e.onTouchMove=D.bind(e),e.onTouchEnd=N.bind(e),a.cssMode&&(e.onScroll=H.bind(e)),e.onClick=B.bind(e);var d=!!a.nested;if(!l.touch&&l.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,d),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"touchstart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,p),s.addEventListener(i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),s.addEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,p),X||(t.addEventListener(\"touchstart\",Y),X=!0)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.addEventListener(\"mousedown\",e.onTouchStart,!1),t.addEventListener(\"mousemove\",e.onTouchMove,d),t.addEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.addEventListener(\"click\",e.onClick,!0),a.cssMode&&n.addEventListener(\"scroll\",e.onScroll),a.updateOnWindowResize?e.on(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G,!0):e.on(\"observerUpdate\",G,!0)},detachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support,d=!!a.nested;if(!l.touch&&l.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,d),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"onTouchStart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,p),s.removeEventListener(i.move,e.onTouchMove,d),s.removeEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,p)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.removeEventListener(\"mousedown\",e.onTouchStart,!1),t.removeEventListener(\"mousemove\",e.onTouchMove,d),t.removeEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.removeEventListener(\"click\",e.onClick,!0),a.cssMode&&n.removeEventListener(\"scroll\",e.onScroll),e.off(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides,s=void 0===i?0:i,r=e.params,n=e.$el,o=r.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&[\"slidesPerView\",\"spaceBetween\",\"slidesPerGroup\",\"slidesPerGroupSkip\",\"slidesPerColumn\"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]=\"slidesPerView\"!==e||\"AUTO\"!==t&&\"auto\"!==t?\"slidesPerView\"===e?parseFloat(t):parseInt(t,10):\"auto\")}));var p=d||e.originalParams,c=r.slidesPerColumn>1,u=p.slidesPerColumn>1;c&&!u?(n.removeClass(r.containerModifierClass+\"multirow \"+r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses()):!c&&u&&(n.addClass(r.containerModifierClass+\"multirow\"),\"column\"===p.slidesPerColumnFill&&n.addClass(r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses());var h=p.direction&&p.direction!==r.direction,v=r.loop&&(p.slidesPerView!==r.slidesPerView||h);h&&a&&e.changeDirection(),C(e.params,p),C(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit(\"_beforeBreakpoint\",p),v&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit(\"breakpoint\",p)}}},getBreakpoint:function(e,t,a){if(void 0===t&&(t=\"window\"),e&&(\"container\"!==t||a)){var i=!1,s=o(),r=\"window\"===t?s.innerWidth:a.clientWidth,n=\"window\"===t?s.innerHeight:a.clientHeight,l=Object.keys(e).map((function(e){if(\"string\"==typeof e&&0===e.indexOf(\"@\")){var t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var d=0;d<l.length;d+=1){var p=l[d],c=p.point;p.value<=r&&(i=c)}return i||\"max\"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,a=e.isLocked,i=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,a!==e.isLocked&&e.emit(e.isLocked?\"lock\":\"unlock\"),a&&a!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e,t,a,i=this,s=i.classNames,r=i.params,n=i.rtl,o=i.$el,l=i.device,d=i.support,p=(e=[\"initialized\",r.direction,{\"pointer-events\":d.pointerEvents&&!d.touch},{\"free-mode\":r.freeMode},{autoheight:r.autoHeight},{rtl:n},{multirow:r.slidesPerColumn>1},{\"multirow-column\":r.slidesPerColumn>1&&\"column\"===r.slidesPerColumnFill},{android:l.android},{ios:l.ios},{\"css-mode\":r.cssMode}],t=r.containerModifierClass,a=[],e.forEach((function(e){\"object\"==typeof e?Object.keys(e).forEach((function(i){e[i]&&a.push(t+i)})):\"string\"==typeof e&&a.push(t+e)})),a);s.push.apply(s,p),o.addClass([].concat(s).join(\" \")),i.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,a=e.classNames;t.removeClass(a.join(\" \")),e.emitContainerClasses()}},images:{loadImage:function(e,t,a,i,s,r){var n,l=o();function d(){r&&r()}m(e).parent(\"picture\")[0]||e.complete&&s?d():t?((n=new l.Image).onload=d,n.onerror=d,i&&(n.sizes=i),a&&(n.srcset=a),t&&(n.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit(\"imagesReady\")))}e.imagesToLoad=e.$el.find(\"img\");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute(\"src\"),i.srcset||i.getAttribute(\"srcset\"),i.sizes||i.getAttribute(\"sizes\"),!0,t)}}}},W={},F=function(){function t(){for(var e,a,i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];if(1===s.length&&s[0].constructor&&\"Object\"===Object.prototype.toString.call(s[0]).slice(8,-1)?a=s[0]:(e=s[0],a=s[1]),a||(a={}),a=C({},a),e&&!a.el&&(a.el=e),a.el&&m(a.el).length>1){var n=[];return m(a.el).each((function(e){var i=C({},a,{el:e});n.push(new t(i))})),n}var o=this;o.__swiper__=!0,o.support=P(),o.device=k({userAgent:a.userAgent}),o.browser=L(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(e){var t=o.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if(\"object\"!=typeof s||null===s)return;if(!(i in a)||!(\"enabled\"in s))return;!0===a[i]&&(a[i]={enabled:!0}),\"object\"!=typeof a[i]||\"enabled\"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}}));var l,d,p=C({},R);return o.useParams(p),o.params=C({},p,W,a),o.originalParams=C({},o.params),o.passedParams=C({},a),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=m,C(o,{el:e,classNames:[],slides:m(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return\"horizontal\"===o.params.direction},isVertical:function(){return\"vertical\"===o.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=[\"touchstart\",\"touchmove\",\"touchend\",\"touchcancel\"],d=[\"mousedown\",\"mousemove\",\"mouseup\"],o.support.pointerEvents&&(d=[\"pointerdown\",\"pointermove\",\"pointerup\"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},o.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:\"input, select, option, textarea, button, video, label\",lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit(\"_swiper\"),o.params.init&&o.init(),o}var a,i,s,r=t.prototype;return r.setProgress=function(e,t){var a=this;e=Math.min(Math.max(e,0),1);var i=a.minTranslate(),s=(a.maxTranslate()-i)*e+i;a.translateTo(s,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()},r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(\" \").filter((function(t){return 0===t.indexOf(\"swiper-container\")||0===t.indexOf(e.params.containerModifierClass)}));e.emit(\"_containerClasses\",t.join(\" \"))}},r.getSlideClasses=function(e){var t=this;return e.className.split(\" \").filter((function(e){return 0===e.indexOf(\"swiper-slide\")||0===e.indexOf(t.params.slideClass)})).join(\" \")},r.emitSlidesClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=[];e.slides.each((function(a){var i=e.getSlideClasses(a);t.push({slideEl:a,classNames:i}),e.emit(\"_slideClass\",a,i)})),e.emit(\"_slideClasses\",t)}},r.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,r=e.activeIndex,n=1;if(t.centeredSlides){for(var o,l=a[r].swiperSlideSize,d=r+1;d<a.length;d+=1)a[d]&&!o&&(n+=1,(l+=a[d].swiperSlideSize)>s&&(o=!0));for(var p=r-1;p>=0;p-=1)a[p]&&!o&&(n+=1,(l+=a[p].swiperSlideSize)>s&&(o=!0))}else for(var c=r+1;c<a.length;c+=1)i[c]-i[r]<s&&(n+=1);return n},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,a=e.params;a.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):((\"auto\"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),a.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit(\"update\")}function i(){var t=e.rtlTranslate?-1*e.translate:e.translate,a=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(a),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.direction;return e||(e=\"horizontal\"===i?\"vertical\":\"horizontal\"),e===i||\"horizontal\"!==e&&\"vertical\"!==e||(a.$el.removeClass(\"\"+a.params.containerModifierClass+i).addClass(\"\"+a.params.containerModifierClass+e),a.emitContainerClasses(),a.params.direction=e,a.slides.each((function(t){\"vertical\"===e?t.style.width=\"\":t.style.height=\"\"})),a.emit(\"changeDirection\"),t&&a.update()),a},r.mount=function(e){var t=this;if(t.mounted)return!0;var a,i=m(e||t.params.el);return!!(e=i[0])&&(e.swiper=t,e&&e.shadowRoot&&e.shadowRoot.querySelector?(a=m(e.shadowRoot.querySelector(\".\"+t.params.wrapperClass))).children=function(e){return i.children(e)}:a=i.children(\".\"+t.params.wrapperClass),C(t,{$el:i,el:e,$wrapperEl:a,wrapperEl:a[0],mounted:!0,rtl:\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\"),rtlTranslate:\"horizontal\"===t.params.direction&&(\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\")),wrongRTL:\"-webkit-box\"===a.css(\"display\")}),!0)},r.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit(\"beforeInit\"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit),t.attachEvents(),t.initialized=!0,t.emit(\"init\"),t.emit(\"afterInit\")),t},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a,i=this,s=i.params,r=i.$el,n=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit(\"beforeDestroy\"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr(\"style\"),n.removeAttr(\"style\"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")),i.emit(\"destroy\"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,a=i,Object.keys(a).forEach((function(e){try{a[e]=null}catch(e){}try{delete a[e]}catch(e){}}))),i.destroyed=!0),null},t.extendDefaults=function(e){C(W,e)},t.installModule=function(e){t.prototype.modules||(t.prototype.modules={});var a=e.name||Object.keys(t.prototype.modules).length+\"_\"+x();t.prototype.modules[a]=e},t.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return t.installModule(e)})),t):(t.installModule(e),t)},a=t,s=[{key:\"extendedDefaults\",get:function(){return W}},{key:\"defaults\",get:function(){return R}}],(i=null)&&e(a.prototype,i),s&&e(a,s),t}();Object.keys(V).forEach((function(e){Object.keys(V[e]).forEach((function(t){F.prototype[t]=V[e][t]}))})),F.use([$,O]);var _={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,r=a.centeredSlides,n=t.params.virtual,o=n.addSlidesBefore,l=n.addSlidesAfter,d=t.virtual,p=d.from,c=d.to,u=d.slides,h=d.slidesGrid,v=d.renderSlide,f=d.offset;t.updateActiveIndex();var m,g,b,w=t.activeIndex||0;m=t.rtlTranslate?\"right\":t.isHorizontal()?\"left\":\"top\",r?(g=Math.floor(i/2)+s+l,b=Math.floor(i/2)+s+o):(g=i+(s-1)+l,b=s+o);var y=Math.max((w||0)-b,0),E=Math.min((w||0)+g,u.length-1),x=(t.slidesGrid[y]||0)-(t.slidesGrid[0]||0);function T(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(C(t.virtual,{from:y,to:E,offset:x,slidesGrid:t.slidesGrid}),p===y&&c===E&&!e)return t.slidesGrid!==h&&x!==f&&t.slides.css(m,x+\"px\"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:y,to:E,slides:function(){for(var e=[],t=y;t<=E;t+=1)e.push(u[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&T());var S=[],M=[];if(e)t.$wrapperEl.find(\".\"+t.params.slideClass).remove();else for(var z=p;z<=c;z+=1)(z<y||z>E)&&t.$wrapperEl.find(\".\"+t.params.slideClass+'[data-swiper-slide-index=\"'+z+'\"]').remove();for(var P=0;P<u.length;P+=1)P>=y&&P<=E&&(void 0===c||e?M.push(P):(P>c&&M.push(P),P<p&&S.push(P)));M.forEach((function(e){t.$wrapperEl.append(v(u[e],e))})),S.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(v(u[e],e))})),t.$wrapperEl.children(\".swiper-slide\").css(m,x+\"px\"),T()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];var s=i.renderSlide?m(i.renderSlide.call(a,e,t)):m('<div class=\"'+a.params.slideClass+'\" data-swiper-slide-index=\"'+t+'\">'+e+\"</div>\");return s.attr(\"data-swiper-slide-index\")||s.attr(\"data-swiper-slide-index\",t),i.cache&&(a.virtual.cache[t]=s),s},appendSlide:function(e){var t=this;if(\"object\"==typeof e&&\"length\"in e)for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.push(e[a]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide:function(e){var t=this,a=t.activeIndex,i=a+1,s=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&t.virtual.slides.unshift(e[r]);i=a+e.length,s=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var n=t.virtual.cache,o={};Object.keys(n).forEach((function(e){var t=n[e],a=t.attr(\"data-swiper-slide-index\");a&&t.attr(\"data-swiper-slide-index\",parseInt(a,10)+1),o[parseInt(e,10)+s]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(i,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&(a-=1),a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&(a-=1),a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},q={name:\"virtual\",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){M(this,{virtual:t({},_,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+\"virtual\");var t={watchSlidesProgress:!0};C(e.params,t),C(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},j={handle:function(e){var t=this,a=o(),i=r(),s=t.rtlTranslate,n=e;n.originalEvent&&(n=n.originalEvent);var l=n.keyCode||n.charCode,d=t.params.keyboard.pageUpDown,p=d&&33===l,c=d&&34===l,u=37===l,h=39===l,v=38===l,f=40===l;if(!t.allowSlideNext&&(t.isHorizontal()&&h||t.isVertical()&&f||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&u||t.isVertical()&&v||p))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&(\"input\"===i.activeElement.nodeName.toLowerCase()||\"textarea\"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(p||c||u||h||v||f)){var m=!1;if(t.$el.parents(\".\"+t.params.slideClass).length>0&&0===t.$el.parents(\".\"+t.params.slideActiveClass).length)return;var g=t.$el,b=g[0].clientWidth,w=g[0].clientHeight,y=a.innerWidth,E=a.innerHeight,x=t.$el.offset();s&&(x.left-=t.$el[0].scrollLeft);for(var T=[[x.left,x.top],[x.left+b,x.top],[x.left,x.top+w],[x.left+b,x.top+w]],S=0;S<T.length;S+=1){var C=T[S];if(C[0]>=0&&C[0]<=y&&C[1]>=0&&C[1]<=E){if(0===C[0]&&0===C[1])continue;m=!0}}if(!m)return}t.isHorizontal()?((p||c||u||h)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||h)&&!s||(p||u)&&s)&&t.slideNext(),((p||u)&&!s||(c||h)&&s)&&t.slidePrev()):((p||c||v||f)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||f)&&t.slideNext(),(p||v)&&t.slidePrev()),t.emit(\"keyPress\",l)}},enable:function(){var e=this,t=r();e.keyboard.enabled||(m(t).on(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=r();e.keyboard.enabled&&(m(t).off(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!1)}},U={name:\"keyboard\",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){M(this,{keyboard:t({enabled:!1},j)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}};var K={lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return o().navigator.userAgent.indexOf(\"firefox\")>-1?\"DOMMouseScroll\":function(){var e=r(),t=\"onwheel\",a=t in e;if(!a){var i=e.createElement(\"div\");i.setAttribute(t,\"return;\"),a=\"function\"==typeof i.onwheel}return!a&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature(\"\",\"\")&&(a=e.implementation.hasFeature(\"Events.wheel\",\"3.0\")),a}()?\"wheel\":\"mousewheel\"},normalize:function(e){var t=0,a=0,i=0,s=0;return\"detail\"in e&&(a=e.detail),\"wheelDelta\"in e&&(a=-e.wheelDelta/120),\"wheelDeltaY\"in e&&(a=-e.wheelDeltaY/120),\"wheelDeltaX\"in e&&(t=-e.wheelDeltaX/120),\"axis\"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,\"deltaY\"in e&&(s=e.deltaY),\"deltaX\"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=s,s=0),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!a&&(a=s<1?-1:1),{spinX:t,spinY:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;a.params.cssMode&&t.preventDefault();var s=a.$el;if(\"container\"!==a.params.mousewheel.eventsTarget&&(s=m(a.params.mousewheel.eventsTarget)),!a.mouseEntered&&!s[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,n=a.rtlTranslate?-1:1,o=K.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*n}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*n:-o.pixelY;if(0===r)return!0;i.invert&&(r=-r);var l=a.getTranslate()+r*i.sensitivity;if(l>=a.minTranslate()&&(l=a.minTranslate()),l<=a.maxTranslate()&&(l=a.maxTranslate()),(!!a.params.loop||!(l===a.minTranslate()||l===a.maxTranslate()))&&a.params.nested&&t.stopPropagation(),a.params.freeMode){var d={time:x(),delta:Math.abs(r),direction:Math.sign(r)},p=a.mousewheel.lastEventBeforeSnap,c=p&&d.time<p.time+500&&d.delta<=p.delta&&d.direction===p.direction;if(!c){a.mousewheel.lastEventBeforeSnap=void 0,a.params.loop&&a.loopFix();var u=a.getTranslate()+r*i.sensitivity,h=a.isBeginning,v=a.isEnd;if(u>=a.minTranslate()&&(u=a.minTranslate()),u<=a.maxTranslate()&&(u=a.maxTranslate()),a.setTransition(0),a.setTranslate(u),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!h&&a.isBeginning||!v&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky){clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=void 0;var f=a.mousewheel.recentWheelEvents;f.length>=15&&f.shift();var g=f.length?f[f.length-1]:void 0,b=f[0];if(f.push(d),g&&(d.delta>g.delta||d.direction!==g.direction))f.splice(0);else if(f.length>=15&&d.time-b.time<500&&b.delta-d.delta>=1&&d.delta<=6){var w=r>0?.8:.2;a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.mousewheel.timeout=E((function(){a.slideToClosest(a.params.speed,!0,void 0,w)}),0)}a.mousewheel.timeout||(a.mousewheel.timeout=E((function(){a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.slideToClosest(a.params.speed,!0,void 0,.5)}),500))}if(c||a.emit(\"scroll\",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),u===a.minTranslate()||u===a.maxTranslate())return!0}}else{var y={time:x(),delta:Math.abs(r),direction:Math.sign(r),raw:e},T=a.mousewheel.recentWheelEvents;T.length>=2&&T.shift();var S=T.length?T[T.length-1]:void 0;if(T.push(y),S?(y.direction!==S.direction||y.delta>S.delta||y.time>S.time+150)&&a.mousewheel.animateSlider(y):a.mousewheel.animateSlider(y),a.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,a=o();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta)&&(!(this.params.mousewheel.thresholdTime&&x()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime)&&(e.delta>=6&&x()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit(\"scroll\",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit(\"scroll\",e.raw)),t.mousewheel.lastScrollTime=(new a.Date).getTime(),!1)))},releaseScroll:function(e){var t=this,a=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&a.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&a.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.on(\"mouseenter\",e.mousewheel.handleMouseEnter),a.on(\"mouseleave\",e.mousewheel.handleMouseLeave),a.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},Z={toggleEl:function(e,t){e[t?\"addClass\":\"removeClass\"](this.params.navigation.disabledClass),e[0]&&\"BUTTON\"===e[0].tagName&&(e[0].disabled=t)},update:function(){var e=this,t=e.params.navigation,a=e.navigation.toggleEl;if(!e.params.loop){var i=e.navigation,s=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?a(r,!0):a(r,!1),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass)),s&&s.length>0&&(e.isEnd?a(s,!0):a(s,!1),s[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=m(i.nextEl),a.params.uniqueNavElements&&\"string\"==typeof i.nextEl&&e.length>1&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=m(i.prevEl),a.params.uniqueNavElements&&\"string\"==typeof i.prevEl&&t.length>1&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&e.length>0&&e.on(\"click\",a.navigation.onNextClick),t&&t.length>0&&t.on(\"click\",a.navigation.onPrevClick),C(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,i=t.$prevEl;a&&a.length&&(a.off(\"click\",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off(\"click\",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},J={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i,s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,n=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((i=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>s-1-2*e.loopedSlides&&(i-=s-2*e.loopedSlides),i>n-1&&(i-=n),i<0&&\"bullets\"!==e.params.paginationType&&(i=n+i)):i=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,\"bullets\"===a.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,p=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=p.eq(0)[e.isHorizontal()?\"outerWidth\":\"outerHeight\"](!0),r.css(e.isHorizontal()?\"width\":\"height\",e.pagination.bulletSize*(a.dynamicMainBullets+4)+\"px\"),a.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=i-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=i-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(p.length,a.dynamicMainBullets)-1))+o)/2),p.removeClass(a.bulletActiveClass+\" \"+a.bulletActiveClass+\"-next \"+a.bulletActiveClass+\"-next-next \"+a.bulletActiveClass+\"-prev \"+a.bulletActiveClass+\"-prev-prev \"+a.bulletActiveClass+\"-main\"),r.length>1)p.each((function(e){var t=m(e),s=t.index();s===i&&t.addClass(a.bulletActiveClass),a.dynamicBullets&&(s>=o&&s<=l&&t.addClass(a.bulletActiveClass+\"-main\"),s===o&&t.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),s===l&&t.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\"))}));else{var c=p.eq(i),u=c.index();if(c.addClass(a.bulletActiveClass),a.dynamicBullets){for(var h=p.eq(o),v=p.eq(l),f=o;f<=l;f+=1)p.eq(f).addClass(a.bulletActiveClass+\"-main\");if(e.params.loop)if(u>=p.length-a.dynamicMainBullets){for(var g=a.dynamicMainBullets;g>=0;g-=1)p.eq(p.length-g).addClass(a.bulletActiveClass+\"-main\");p.eq(p.length-a.dynamicMainBullets-1).addClass(a.bulletActiveClass+\"-prev\")}else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\");else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\")}}if(a.dynamicBullets){var b=Math.min(p.length,a.dynamicMainBullets+4),w=(e.pagination.bulletSize*b-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,y=t?\"right\":\"left\";p.css(e.isHorizontal()?y:\"top\",w+\"px\")}}if(\"fraction\"===a.type&&(r.find(z(a.currentClass)).text(a.formatFractionCurrent(i+1)),r.find(z(a.totalClass)).text(a.formatFractionTotal(n))),\"progressbar\"===a.type){var E;E=a.progressbarOpposite?e.isHorizontal()?\"vertical\":\"horizontal\":e.isHorizontal()?\"horizontal\":\"vertical\";var x=(i+1)/n,T=1,S=1;\"horizontal\"===E?T=x:S=x,r.find(z(a.progressbarFillClass)).transform(\"translate3d(0,0,0) scaleX(\"+T+\") scaleY(\"+S+\")\").transition(e.params.speed)}\"custom\"===a.type&&a.renderCustom?(r.html(a.renderCustom(e,i+1,n)),e.emit(\"paginationRender\",r[0])):e.emit(\"paginationUpdate\",r[0]),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,s=\"\";if(\"bullets\"===t.type){var r=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&r>a&&(r=a);for(var n=0;n<r;n+=1)t.renderBullet?s+=t.renderBullet.call(e,n,t.bulletClass):s+=\"<\"+t.bulletElement+' class=\"'+t.bulletClass+'\"></'+t.bulletElement+\">\";i.html(s),e.pagination.bullets=i.find(z(t.bulletClass))}\"fraction\"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class=\"'+t.currentClass+'\"></span> / <span class=\"'+t.totalClass+'\"></span>',i.html(s)),\"progressbar\"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class=\"'+t.progressbarFillClass+'\"></span>',i.html(s)),\"custom\"!==t.type&&e.emit(\"paginationRender\",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var a=m(t.el);0!==a.length&&(e.params.uniqueNavElements&&\"string\"==typeof t.el&&a.length>1&&(a=e.$el.find(t.el)),\"bullets\"===t.type&&t.clickable&&a.addClass(t.clickableClass),a.addClass(t.modifierClass+t.type),\"bullets\"===t.type&&t.dynamicBullets&&(a.addClass(\"\"+t.modifierClass+t.type+\"-dynamic\"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),\"progressbar\"===t.type&&t.progressbarOpposite&&a.addClass(t.progressbarOppositeClass),t.clickable&&a.on(\"click\",z(t.bulletClass),(function(t){t.preventDefault();var a=m(this).index()*e.params.slidesPerGroup;e.params.loop&&(a+=e.loopedSlides),e.slideTo(a)})),C(e.pagination,{$el:a,el:a[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.pagination.$el;a.removeClass(t.hiddenClass),a.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&a.off(\"click\",z(t.bulletClass))}}},Q={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=e.rtlTranslate,i=e.progress,s=t.dragSize,r=t.trackSize,n=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=s,p=(r-s)*i;a?(p=-p)>0?(d=s-p,p=0):-p+s>r&&(d=r+p):p<0?(d=s+p,p=0):p+s>r&&(d=r-p),e.isHorizontal()?(n.transform(\"translate3d(\"+p+\"px, 0, 0)\"),n[0].style.width=d+\"px\"):(n.transform(\"translate3d(0px, \"+p+\"px, 0)\"),n[0].style.height=d+\"px\"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=t.$dragEl,i=t.$el;a[0].style.width=\"\",a[0].style.height=\"\";var s,r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,n=e.size/e.virtualSize,o=n*(r/e.size);s=\"auto\"===e.params.scrollbar.dragSize?r*n:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?a[0].style.width=s+\"px\":a[0].style.height=s+\"px\",i[0].style.display=n>=1?\"none\":\"\",e.params.scrollbar.hide&&(i[0].style.opacity=0),C(t,{trackSize:r,divider:n,moveDivider:o,dragSize:s}),t.$el[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientX:e.clientX:\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,a=this,i=a.scrollbar,s=a.rtlTranslate,r=i.$el,n=i.dragSize,o=i.trackSize,l=i.dragStartPos;t=(i.getPointerPosition(e)-r.offset()[a.isHorizontal()?\"left\":\"top\"]-(null!==l?l:n/2))/(o-n),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var d=a.minTranslate()+(a.maxTranslate()-a.minTranslate())*t;a.updateProgress(d),a.setTranslate(d),a.updateActiveIndex(),a.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el,n=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===n[0]||e.target===n?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?\"left\":\"top\"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),n.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),a.hide&&r.css(\"opacity\",1),t.params.cssMode&&t.$wrapperEl.css(\"scroll-snap-type\",\"none\"),t.emit(\"scrollbarDragStart\",e)},onDragMove:function(e){var t=this,a=t.scrollbar,i=t.$wrapperEl,s=a.$el,r=a.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,a.setDragPosition(e),i.transition(0),s.transition(0),r.transition(0),t.emit(\"scrollbarDragMove\",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css(\"scroll-snap-type\",\"\"),s.transition(\"\")),a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=E((function(){r.css(\"opacity\",0),r.transition(400)}),1e3)),t.emit(\"scrollbarDragEnd\",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.addEventListener(i.start,e.scrollbar.onDragStart,d),l.addEventListener(i.move,e.scrollbar.onDragMove,d),l.addEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.addEventListener(s.start,e.scrollbar.onDragStart,d),t.addEventListener(s.move,e.scrollbar.onDragMove,d),t.addEventListener(s.end,e.scrollbar.onDragEnd,p)))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.removeEventListener(i.start,e.scrollbar.onDragStart,d),l.removeEventListener(i.move,e.scrollbar.onDragMove,d),l.removeEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.removeEventListener(s.start,e.scrollbar.onDragStart,d),t.removeEventListener(s.move,e.scrollbar.onDragMove,d),t.removeEventListener(s.end,e.scrollbar.onDragEnd,p)))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,a=e.$el,i=e.params.scrollbar,s=m(i.el);e.params.uniqueNavElements&&\"string\"==typeof i.el&&s.length>1&&1===a.find(i.el).length&&(s=a.find(i.el));var r=s.find(\".\"+e.params.scrollbar.dragClass);0===r.length&&(r=m('<div class=\"'+e.params.scrollbar.dragClass+'\"></div>'),s.append(r)),C(t,{$el:s,el:s[0],$dragEl:r,dragEl:r[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ee={setTransform:function(e,t){var a=this.rtl,i=m(e),s=a?-1:1,r=i.attr(\"data-swiper-parallax\")||\"0\",n=i.attr(\"data-swiper-parallax-x\"),o=i.attr(\"data-swiper-parallax-y\"),l=i.attr(\"data-swiper-parallax-scale\"),d=i.attr(\"data-swiper-parallax-opacity\");if(n||o?(n=n||\"0\",o=o||\"0\"):this.isHorizontal()?(n=r,o=\"0\"):(o=r,n=\"0\"),n=n.indexOf(\"%\")>=0?parseInt(n,10)*t*s+\"%\":n*t*s+\"px\",o=o.indexOf(\"%\")>=0?parseInt(o,10)*t+\"%\":o*t+\"px\",null!=d){var p=d-(d-1)*(1-Math.abs(t));i[0].style.opacity=p}if(null==l)i.transform(\"translate3d(\"+n+\", \"+o+\", 0px)\");else{var c=l-(l-1)*(1-Math.abs(t));i.transform(\"translate3d(\"+n+\", \"+o+\", 0px) scale(\"+c+\")\")}},setTranslate:function(){var e=this,t=e.$el,a=e.slides,i=e.progress,s=e.snapGrid;t.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,i)})),a.each((function(t,a){var r=t.progress;e.params.slidesPerGroup>1&&\"auto\"!==e.params.slidesPerView&&(r+=Math.ceil(a/2)-i*(s.length-1)),r=Math.min(Math.max(r,-1),1),m(t).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,r)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){var a=m(t),i=parseInt(a.attr(\"data-swiper-parallax-duration\"),10)||e;0===e&&(i=0),a.transition(i)}))}},te={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(s-a,2))},onGestureStart:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!a.gestures){if(\"touchstart\"!==e.type||\"touchstart\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,r.scaleStart=te.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=m(e.target).closest(\".\"+t.params.slideClass),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),r.$imageWrapEl=r.$imageEl.parent(\".\"+i.containerClass),r.maxRatio=r.$imageWrapEl.attr(\"data-swiper-zoom\")||i.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl&&r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(!a.gestures){if(\"touchmove\"!==e.type||\"touchmove\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureMoved=!0,r.scaleMove=te.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length?(a.gestures?s.scale=e.scale*s.currentScale:s.scale=r.scaleMove/r.scaleStart*s.currentScale,s.scale>r.maxRatio&&(s.scale=r.maxRatio-1+Math.pow(s.scale-r.maxRatio+1,.5)),s.scale<i.minRatio&&(s.scale=i.minRatio+1-Math.pow(i.minRatio-s.scale+1,.5)),r.$imageEl.transform(\"translate3d(0,0,0) scale(\"+s.scale+\")\")):\"gesturechange\"===e.type&&s.onGestureStart(e)},onGestureEnd:function(e){var t=this,a=t.device,i=t.support,s=t.params.zoom,r=t.zoom,n=r.gesture;if(!i.gestures){if(!r.fakeGestureTouched||!r.fakeGestureMoved)return;if(\"touchend\"!==e.type||\"touchend\"===e.type&&e.changedTouches.length<2&&!a.android)return;r.fakeGestureTouched=!1,r.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(r.scale=Math.max(Math.min(r.scale,n.maxRatio),s.minRatio),n.$imageEl.transition(t.params.speed).transform(\"translate3d(0,0,0) scale(\"+r.scale+\")\"),r.currentScale=r.scale,r.isScaling=!1,1===r.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,a=this.zoom,i=a.gesture,s=a.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(t.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x=\"touchstart\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y=\"touchstart\"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,r=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=T(i.$imageWrapEl[0],\"x\")||0,s.startY=T(i.$imageWrapEl[0],\"y\")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*a.scale,o=s.height*a.scale;if(!(n<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x=\"touchmove\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y=\"touchmove\"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=s.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=s.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(s.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(s.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(s.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(s.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=s.touchesCurrent.x,r.prevPositionY=s.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform(\"translate3d(\"+s.currentX+\"px, \"+s.currentY+\"px,0)\")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,r=300,n=i.x*s,o=a.currentX+n,l=i.y*r,d=a.currentY+l;0!==i.x&&(s=Math.abs((o-a.currentX)/i.x)),0!==i.y&&(r=Math.abs((d-a.currentY)/i.y));var p=Math.max(s,r);a.currentX=o,a.currentY=d;var c=a.width*e.scale,u=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-c/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-u/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(p).transform(\"translate3d(\"+a.currentX+\"px, \"+a.currentY+\"px,0)\")}},onTransitionEnd:function(){var e=this,t=e.zoom,a=t.gesture;a.$slideEl&&e.previousIndex!==e.activeIndex&&(a.$imageEl&&a.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"),a.$imageWrapEl&&a.$imageWrapEl.transform(\"translate3d(0,0,0)\"),t.scale=1,t.currentScale=1,a.$slideEl=void 0,a.$imageEl=void 0,a.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s,r,n,l,d,p,c,u,h,v,f,m,g,b=this,w=o(),y=b.zoom,E=b.params.zoom,x=y.gesture,T=y.image;(x.$slideEl||(b.params.virtual&&b.params.virtual.enabled&&b.virtual?x.$slideEl=b.$wrapperEl.children(\".\"+b.params.slideActiveClass):x.$slideEl=b.slides.eq(b.activeIndex),x.$imageEl=x.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),x.$imageWrapEl=x.$imageEl.parent(\".\"+E.containerClass)),x.$imageEl&&0!==x.$imageEl.length)&&(x.$slideEl.addClass(\"\"+E.zoomedSlideClass),void 0===T.touchesStart.x&&e?(t=\"touchend\"===e.type?e.changedTouches[0].pageX:e.pageX,a=\"touchend\"===e.type?e.changedTouches[0].pageY:e.pageY):(t=T.touchesStart.x,a=T.touchesStart.y),y.scale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,y.currentScale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,e?(m=x.$slideEl[0].offsetWidth,g=x.$slideEl[0].offsetHeight,i=x.$slideEl.offset().left+w.scrollX+m/2-t,s=x.$slideEl.offset().top+w.scrollY+g/2-a,l=x.$imageEl[0].offsetWidth,d=x.$imageEl[0].offsetHeight,p=l*y.scale,c=d*y.scale,v=-(u=Math.min(m/2-p/2,0)),f=-(h=Math.min(g/2-c/2,0)),(r=i*y.scale)<u&&(r=u),r>v&&(r=v),(n=s*y.scale)<h&&(n=h),n>f&&(n=f)):(r=0,n=0),x.$imageWrapEl.transition(300).transform(\"translate3d(\"+r+\"px, \"+n+\"px,0)\"),x.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\"+y.scale+\")\"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?i.$slideEl=e.$wrapperEl.children(\".\"+e.params.slideActiveClass):i.$slideEl=e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),i.$imageWrapEl=i.$imageEl.parent(\".\"+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"),i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"),i.$slideEl.removeClass(\"\"+a.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(e){var t=this,a=t.zoom,i=a.slideSelector,s=a.passiveListener;t.$wrapperEl[e](\"gesturestart\",i,a.onGestureStart,s),t.$wrapperEl[e](\"gesturechange\",i,a.onGestureChange,s),t.$wrapperEl[e](\"gestureend\",i,a.onGestureEnd,s)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures(\"on\"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures(\"off\"))},enable:function(){var e=this,t=e.support,a=e.zoom;if(!a.enabled){a.enabled=!0;var i=!(\"touchstart\"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!t.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;e.zoom.passiveListener=i,e.zoom.slideSelector=r,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,r,a.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,r,a.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,r,a.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,r,a.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,\".\"+e.params.zoom.containerClass,a.onTouchMove,s)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var a=e.support;e.zoom.enabled=!1;var i=!(\"touchstart\"!==e.touchEvents.start||!a.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!a.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;a.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,r,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,r,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,r,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,r,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,\".\"+e.params.zoom.containerClass,t.onTouchMove,s)}}},ae={loadInSlide:function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.lazy;if(void 0!==e&&0!==a.slides.length){var s=a.virtual&&a.params.virtual.enabled?a.$wrapperEl.children(\".\"+a.params.slideClass+'[data-swiper-slide-index=\"'+e+'\"]'):a.slides.eq(e),r=s.find(\".\"+i.elementClass+\":not(.\"+i.loadedClass+\"):not(.\"+i.loadingClass+\")\");!s.hasClass(i.elementClass)||s.hasClass(i.loadedClass)||s.hasClass(i.loadingClass)||r.push(s[0]),0!==r.length&&r.each((function(e){var r=m(e);r.addClass(i.loadingClass);var n=r.attr(\"data-background\"),o=r.attr(\"data-src\"),l=r.attr(\"data-srcset\"),d=r.attr(\"data-sizes\"),p=r.parent(\"picture\");a.loadImage(r[0],o||n,l,d,!1,(function(){if(null!=a&&a&&(!a||a.params)&&!a.destroyed){if(n?(r.css(\"background-image\",'url(\"'+n+'\")'),r.removeAttr(\"data-background\")):(l&&(r.attr(\"srcset\",l),r.removeAttr(\"data-srcset\")),d&&(r.attr(\"sizes\",d),r.removeAttr(\"data-sizes\")),p.length&&p.children(\"source\").each((function(e){var t=m(e);t.attr(\"data-srcset\")&&(t.attr(\"srcset\",t.attr(\"data-srcset\")),t.removeAttr(\"data-srcset\"))})),o&&(r.attr(\"src\",o),r.removeAttr(\"data-src\"))),r.addClass(i.loadedClass).removeClass(i.loadingClass),s.find(\".\"+i.preloaderClass).remove(),a.params.loop&&t){var e=s.attr(\"data-swiper-slide-index\");if(s.hasClass(a.params.slideDuplicateClass)){var c=a.$wrapperEl.children('[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.params.slideDuplicateClass+\")\");a.lazy.loadInSlide(c.index(),!1)}else{var u=a.$wrapperEl.children(\".\"+a.params.slideDuplicateClass+'[data-swiper-slide-index=\"'+e+'\"]');a.lazy.loadInSlide(u.index(),!1)}}a.emit(\"lazyImageReady\",s[0],r[0]),a.params.autoHeight&&a.updateAutoHeight()}})),a.emit(\"lazyImageLoad\",s[0],r[0])}))}},load:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides,s=e.activeIndex,r=e.virtual&&a.virtual.enabled,n=a.lazy,o=a.slidesPerView;function l(e){if(r){if(t.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]').length)return!0}else if(i[e])return!0;return!1}function d(e){return r?m(e).attr(\"data-swiper-slide-index\"):m(e).index()}if(\"auto\"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children(\".\"+a.slideVisibleClass).each((function(t){var a=r?m(t).attr(\"data-swiper-slide-index\"):m(t).index();e.lazy.loadInSlide(a)}));else if(o>1)for(var p=s;p<s+o;p+=1)l(p)&&e.lazy.loadInSlide(p);else e.lazy.loadInSlide(s);if(n.loadPrevNext)if(o>1||n.loadPrevNextAmount&&n.loadPrevNextAmount>1){for(var c=n.loadPrevNextAmount,u=o,h=Math.min(s+u+Math.max(c,u),i.length),v=Math.max(s-Math.max(u,c),0),f=s+o;f<h;f+=1)l(f)&&e.lazy.loadInSlide(f);for(var g=v;g<s;g+=1)l(g)&&e.lazy.loadInSlide(g)}else{var b=t.children(\".\"+a.slideNextClass);b.length>0&&e.lazy.loadInSlide(d(b));var w=t.children(\".\"+a.slidePrevClass);w.length>0&&e.lazy.loadInSlide(d(w))}},checkInViewOnLoad:function(){var e=o(),t=this;if(t&&!t.destroyed){var a=t.params.lazy.scrollingElement?m(t.params.lazy.scrollingElement):m(e),i=a[0]===e,s=i?e.innerWidth:a[0].offsetWidth,r=i?e.innerHeight:a[0].offsetHeight,n=t.$el.offset(),l=!1;t.rtlTranslate&&(n.left-=t.$el[0].scrollLeft);for(var d=[[n.left,n.top],[n.left+t.width,n.top],[n.left,n.top+t.height],[n.left+t.width,n.top+t.height]],p=0;p<d.length;p+=1){var c=d[p];if(c[0]>=0&&c[0]<=s&&c[1]>=0&&c[1]<=r){if(0===c[0]&&0===c[1])continue;l=!0}}l?(t.lazy.load(),a.off(\"scroll\",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,a.on(\"scroll\",t.lazy.checkInViewOnLoad))}}},ie={LinearSpline:function(e,t){var a,i,s,r,n,o=function(e,t){for(i=-1,a=e.length;a-i>1;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ie.LinearSpline(t.slidesGrid,e.slidesGrid):new ie.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,r=s.controller.control,n=s.constructor;function o(e){var t=s.rtlTranslate?-s.translate:s.translate;\"slide\"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&\"container\"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof n&&o(r[l]);else r instanceof n&&t!==r&&o(r)},setTransition:function(e,t){var a,i=this,s=i.constructor,r=i.controller.control;function n(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&E((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){r&&(t.params.loop&&\"slide\"===i.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(r))for(a=0;a<r.length;a+=1)r[a]!==t&&r[a]instanceof s&&n(r[a]);else r instanceof s&&t!==r&&n(r)}},se={getRandomNumber:function(e){void 0===e&&(e=16);return\"x\".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr(\"tabIndex\",\"0\"),e},makeElNotFocusable:function(e){return e.attr(\"tabIndex\",\"-1\"),e},addElRole:function(e,t){return e.attr(\"role\",t),e},addElRoleDescription:function(e,t){return e.attr(\"aria-roledescription\",t),e},addElControls:function(e,t){return e.attr(\"aria-controls\",t),e},addElLabel:function(e,t){return e.attr(\"aria-label\",t),e},addElId:function(e,t){return e.attr(\"id\",t),e},addElLive:function(e,t){return e.attr(\"aria-live\",t),e},disableEl:function(e){return e.attr(\"aria-disabled\",!0),e},enableEl:function(e){return e.attr(\"aria-disabled\",!1),e},onEnterOrSpaceKey:function(e){if(13===e.keyCode||32===e.keyCode){var t=this,a=t.params.a11y,i=m(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(a.lastSlideMessage):t.a11y.notify(a.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(a.firstSlideMessage):t.a11y.notify(a.prevSlideMessage)),t.pagination&&i.is(z(t.params.pagination.bulletClass))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(\"\"),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,a=t.$nextEl,i=t.$prevEl;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),a&&a.length>0&&(e.isEnd?(e.a11y.disableEl(a),e.a11y.makeElNotFocusable(a)):(e.a11y.enableEl(a),e.a11y.makeElFocusable(a)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(a){var i=m(a);e.a11y.makeElFocusable(i),e.params.pagination.renderBullet||(e.a11y.addElRole(i,\"button\"),e.a11y.addElLabel(i,t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/,i.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var a=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(a,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(a,t.containerMessage);var i,s,r,n=e.$wrapperEl,o=n.attr(\"id\")||\"swiper-wrapper-\"+e.a11y.getRandomNumber(16);e.a11y.addElId(n,o),i=e.params.autoplay&&e.params.autoplay.enabled?\"off\":\"polite\",e.a11y.addElLive(n,i),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(m(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(m(e.slides),t.slideRole),e.slides.each((function(a){var i=m(a),s=t.slideLabelMessage.replace(/\\{\\{index\\}\\}/,i.index()+1).replace(/\\{\\{slidesLength\\}\\}/,e.slides.length);e.a11y.addElLabel(i,s)})),e.navigation&&e.navigation.$nextEl&&(s=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(r=e.navigation.$prevEl),s&&s.length&&(e.a11y.makeElFocusable(s),\"BUTTON\"!==s[0].tagName&&(e.a11y.addElRole(s,\"button\"),s.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(s,t.nextSlideMessage),e.a11y.addElControls(s,o)),r&&r.length&&(e.a11y.makeElFocusable(r),\"BUTTON\"!==r[0].tagName&&(e.a11y.addElRole(r,\"button\"),r.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(r,t.prevSlideMessage),e.a11y.addElControls(r,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on(\"keydown\",z(e.params.pagination.bulletClass),e.a11y.onEnterOrSpaceKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&a.a11y.liveRegion.length>0&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off(\"keydown\",a.a11y.onEnterOrSpaceKey),t&&t.off(\"keydown\",a.a11y.onEnterOrSpaceKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off(\"keydown\",z(a.params.pagination.bulletClass),a.a11y.onEnterOrSpaceKey)}},re={init:function(){var e=this,t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var a=e.history;a.initialized=!0,a.paths=re.getPathValues(e.params.url),(a.paths.key||a.paths.value)&&(a.scrollToSlide(0,a.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener(\"popstate\",e.history.setHistoryPopState))}},destroy:function(){var e=o();this.params.history.replaceState||e.removeEventListener(\"popstate\",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=re.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=o(),a=(e?new URL(e):t.location).pathname.slice(1).split(\"/\").filter((function(e){return\"\"!==e})),i=a.length;return{key:a[i-2],value:a[i-1]}},setHistory:function(e,t){var a=this,i=o();if(a.history.initialized&&a.params.history.enabled){var s;s=a.params.url?new URL(a.params.url):i.location;var r=a.slides.eq(t),n=re.slugify(r.attr(\"data-history\"));if(a.params.history.root.length>0){var l=a.params.history.root;\"/\"===l[l.length-1]&&(l=l.slice(0,l.length-1)),n=l+\"/\"+e+\"/\"+n}else s.pathname.includes(e)||(n=e+\"/\"+n);var d=i.history.state;d&&d.value===n||(a.params.history.replaceState?i.history.replaceState({value:n},null,n):i.history.pushState({value:n},null,n))}},slugify:function(e){return e.toString().replace(/\\s+/g,\"-\").replace(/[^\\w-]+/g,\"\").replace(/--+/g,\"-\").replace(/^-+/,\"\").replace(/-+$/,\"\")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,r=i.slides.length;s<r;s+=1){var n=i.slides.eq(s);if(re.slugify(n.attr(\"data-history\"))===t&&!n.hasClass(i.params.slideDuplicateClass)){var o=n.index();i.slideTo(o,e,a)}}else i.slideTo(0,e,a)}},ne={onHashCange:function(){var e=this,t=r();e.emit(\"hashChange\");var a=t.location.hash.replace(\"#\",\"\");if(a!==e.slides.eq(e.activeIndex).attr(\"data-hash\")){var i=e.$wrapperEl.children(\".\"+e.params.slideClass+'[data-hash=\"'+a+'\"]').index();if(void 0===i)return;e.slideTo(i)}},setHash:function(){var e=this,t=o(),a=r();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,\"#\"+e.slides.eq(e.activeIndex).attr(\"data-hash\")||\"\"),e.emit(\"hashSet\");else{var i=e.slides.eq(e.activeIndex),s=i.attr(\"data-hash\")||i.attr(\"data-history\");a.location.hash=s||\"\",e.emit(\"hashSet\")}},init:function(){var e=this,t=r(),a=o();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace(\"#\",\"\");if(i)for(var s=0,n=e.slides.length;s<n;s+=1){var l=e.slides.eq(s);if((l.attr(\"data-hash\")||l.attr(\"data-history\"))===i&&!l.hasClass(e.params.slideDuplicateClass)){var d=l.index();e.slideTo(d,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&m(a).on(\"hashchange\",e.hashNavigation.onHashCange)}},destroy:function(){var e=o();this.params.hashNavigation.watchState&&m(e).off(\"hashchange\",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr(\"data-swiper-autoplay\")&&(a=t.attr(\"data-swiper-autoplay\")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=E((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit(\"autoplayStart\"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit(\"autoplayStop\"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=r();\"hidden\"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),\"visible\"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},le={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var r=0;e.isHorizontal()||(r=s,s=0);var n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:n}).transform(\"translate3d(\"+s+\"px, \"+r+\"px, 0px)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.$wrapperEl;if(a.transition(e),t.params.virtualTranslate&&0!==e){var s=!1;a.transitionEnd((function(){if(!s&&t&&!t.destroyed){s=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)i.trigger(e[a])}}))}}},de={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,r=t.width,n=t.height,o=t.rtlTranslate,l=t.size,d=t.browser,p=t.params.cubeEffect,c=t.isHorizontal(),u=t.virtual&&t.params.virtual.enabled,h=0;p.shadow&&(c?(0===(e=i.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),i.append(e)),e.css({height:r+\"px\"})):0===(e=a.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),a.append(e)));for(var v=0;v<s.length;v+=1){var f=s.eq(v),g=v;u&&(g=parseInt(f.attr(\"data-swiper-slide-index\"),10));var b=90*g,w=Math.floor(b/360);o&&(b=-b,w=Math.floor(-b/360));var y=Math.max(Math.min(f[0].progress,1),-1),E=0,x=0,T=0;g%4==0?(E=4*-w*l,T=0):(g-1)%4==0?(E=0,T=4*-w*l):(g-2)%4==0?(E=l+4*w*l,T=l):(g-3)%4==0&&(E=-l,T=3*l+4*l*w),o&&(E=-E),c||(x=E,E=0);var S=\"rotateX(\"+(c?0:-b)+\"deg) rotateY(\"+(c?b:0)+\"deg) translate3d(\"+E+\"px, \"+x+\"px, \"+T+\"px)\";if(y<=1&&y>-1&&(h=90*g+90*y,o&&(h=90*-g-90*y)),f.transform(S),p.slideShadows){var C=c?f.find(\".swiper-slide-shadow-left\"):f.find(\".swiper-slide-shadow-top\"),M=c?f.find(\".swiper-slide-shadow-right\"):f.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(c?\"left\":\"top\")+'\"></div>'),f.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(c?\"right\":\"bottom\")+'\"></div>'),f.append(M)),C.length&&(C[0].style.opacity=Math.max(-y,0)),M.length&&(M[0].style.opacity=Math.max(y,0))}}if(i.css({\"-webkit-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-moz-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-ms-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"transform-origin\":\"50% 50% -\"+l/2+\"px\"}),p.shadow)if(c)e.transform(\"translate3d(0px, \"+(r/2+p.shadowOffset)+\"px, \"+-r/2+\"px) rotateX(90deg) rotateZ(0deg) scale(\"+p.shadowScale+\")\");else{var z=Math.abs(h)-90*Math.floor(Math.abs(h)/90),P=1.5-(Math.sin(2*z*Math.PI/360)/2+Math.cos(2*z*Math.PI/360)/2),k=p.shadowScale,L=p.shadowScale/P,$=p.shadowOffset;e.transform(\"scale3d(\"+k+\", 1, \"+L+\") translate3d(0px, \"+(n/2+$)+\"px, \"+-n/2/L+\"px) rotateX(-90deg)\")}var I=d.isSafari||d.isWebView?-l/2:0;i.transform(\"translate3d(0px,0,\"+I+\"px) rotateX(\"+(t.isHorizontal()?0:h)+\"deg) rotateY(\"+(t.isHorizontal()?-h:0)+\"deg)\")},setTransition:function(e){var t=this,a=t.$el;t.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&a.find(\".swiper-cube-shadow\").transition(e)}},pe={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s=t.eq(i),r=s[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(s[0].progress,1),-1));var n=-180*r,o=0,l=-s[0].swiperSlideOffset,d=0;if(e.isHorizontal()?a&&(n=-n):(d=l,l=0,o=-n,n=0),s[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var p=e.isHorizontal()?s.find(\".swiper-slide-shadow-left\"):s.find(\".swiper-slide-shadow-top\"),c=e.isHorizontal()?s.find(\".swiper-slide-shadow-right\"):s.find(\".swiper-slide-shadow-bottom\");0===p.length&&(p=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"left\":\"top\")+'\"></div>'),s.append(p)),0===c.length&&(c=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"right\":\"bottom\")+'\"></div>'),s.append(c)),p.length&&(p[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}s.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px) rotateX(\"+o+\"deg) rotateY(\"+n+\"deg)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.activeIndex,s=t.$wrapperEl;if(a.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;a.eq(i).transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)s.trigger(e[a])}}))}}},ce={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.slidesSizesGrid,r=e.params.coverflowEffect,n=e.isHorizontal(),o=e.translate,l=n?t/2-o:a/2-o,d=n?r.rotate:-r.rotate,p=r.depth,c=0,u=i.length;c<u;c+=1){var h=i.eq(c),v=s[c],f=(l-h[0].swiperSlideOffset-v/2)/v*r.modifier,g=n?d*f:0,b=n?0:d*f,w=-p*Math.abs(f),y=r.stretch;\"string\"==typeof y&&-1!==y.indexOf(\"%\")&&(y=parseFloat(r.stretch)/100*v);var E=n?0:y*f,x=n?y*f:0,T=1-(1-r.scale)*Math.abs(f);Math.abs(x)<.001&&(x=0),Math.abs(E)<.001&&(E=0),Math.abs(w)<.001&&(w=0),Math.abs(g)<.001&&(g=0),Math.abs(b)<.001&&(b=0),Math.abs(T)<.001&&(T=0);var S=\"translate3d(\"+x+\"px,\"+E+\"px,\"+w+\"px)  rotateX(\"+b+\"deg) rotateY(\"+g+\"deg) scale(\"+T+\")\";if(h.transform(S),h[0].style.zIndex=1-Math.abs(Math.round(f)),r.slideShadows){var C=n?h.find(\".swiper-slide-shadow-left\"):h.find(\".swiper-slide-shadow-top\"),M=n?h.find(\".swiper-slide-shadow-right\"):h.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(n?\"left\":\"top\")+'\"></div>'),h.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(n?\"right\":\"bottom\")+'\"></div>'),h.append(M)),C.length&&(C[0].style.opacity=f>0?f:0),M.length&&(M[0].style.opacity=-f>0?-f:0)}}},setTransition:function(e){this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var a=e.constructor;return t.swiper instanceof a?(e.thumbs.swiper=t.swiper,C(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),C(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):S(t.swiper)&&(e.thumbs.swiper=new a(C({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on(\"tap\",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var a=t.clickedIndex,i=t.clickedSlide;if(!(i&&m(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==a)){var s;if(s=t.params.loop?parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10):a,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var n=e.slides.eq(r).prevAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index();s=void 0===n?o:void 0===o?n:o-r<r-n?o:n}e.slideTo(s)}}},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i=\"auto\"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView,s=t.params.thumbs.autoScrollOffset,r=s&&!a.params.loop;if(t.realIndex!==a.realIndex||r){var n,o,l=a.activeIndex;if(a.params.loop){a.slides.eq(l).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,l=a.activeIndex);var d=a.slides.eq(l).prevAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index(),p=a.slides.eq(l).nextAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index();n=void 0===d?p:void 0===p?d:p-l==l-d?l:p-l<l-d?p:d,o=t.activeIndex>t.previousIndex?\"next\":\"prev\"}else o=(n=t.realIndex)>t.previousIndex?\"next\":\"prev\";r&&(n+=\"next\"===o?s:-1*s),a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(n)<0&&(a.params.centeredSlides?n=n>l?n-Math.floor(i/2)+1:n+Math.floor(i/2)-1:n>l&&(n=n-i+1),a.slideTo(n,e?0:void 0))}var c=1,u=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(c=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(c=1),c=Math.floor(c),a.slides.removeClass(u),a.params.loop||a.params.virtual&&a.params.virtual.enabled)for(var h=0;h<c;h+=1)a.$wrapperEl.children('[data-swiper-slide-index=\"'+(t.realIndex+h)+'\"]').addClass(u);else for(var v=0;v<c;v+=1)a.slides.eq(t.realIndex+v).addClass(u)}}},he=[q,U,{name:\"mousewheel\",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:\"container\",thresholdDelta:null,thresholdTime:null}},create:function(){M(this,{mousewheel:{enabled:!1,lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:K.enable,disable:K.disable,handle:K.handle,handleMouseEnter:K.handleMouseEnter,handleMouseLeave:K.handleMouseLeave,animateSlider:K.animateSlider,releaseScroll:K.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:\"navigation\",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:\"swiper-button-disabled\",hiddenClass:\"swiper-button-hidden\",lockClass:\"swiper-button-lock\"}},create:function(){M(this,{navigation:t({},Z)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var a=e.navigation,i=a.$nextEl,s=a.$prevEl,r=t.target;if(e.params.navigation.hideOnClick&&!m(r).is(s)&&!m(r).is(i)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===r||e.pagination.el.contains(r)))return;var n;i?n=i.hasClass(e.params.navigation.hiddenClass):s&&(n=s.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit(\"navigationShow\"):e.emit(\"navigationHide\"),i&&i.toggleClass(e.params.navigation.hiddenClass),s&&s.toggleClass(e.params.navigation.hiddenClass)}}}},{name:\"pagination\",params:{pagination:{el:null,bulletElement:\"span\",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:\"bullets\",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:\"swiper-pagination-bullet\",bulletActiveClass:\"swiper-pagination-bullet-active\",modifierClass:\"swiper-pagination-\",currentClass:\"swiper-pagination-current\",totalClass:\"swiper-pagination-total\",hiddenClass:\"swiper-pagination-hidden\",progressbarFillClass:\"swiper-pagination-progressbar-fill\",progressbarOppositeClass:\"swiper-pagination-progressbar-opposite\",clickableClass:\"swiper-pagination-clickable\",lockClass:\"swiper-pagination-lock\"}},create:function(){M(this,{pagination:t({dynamicBulletIndex:0},J)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){var a=t.target;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!m(a).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&a===e.navigation.nextEl||e.navigation.prevEl&&a===e.navigation.prevEl))return;!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit(\"paginationShow\"):e.emit(\"paginationHide\"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass)}}}},{name:\"scrollbar\",params:{scrollbar:{el:null,dragSize:\"auto\",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:\"swiper-scrollbar-lock\",dragClass:\"swiper-scrollbar-drag\"}},create:function(){M(this,{scrollbar:t({isTouched:!1,timeout:null,dragTimeout:null},Q)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:\"parallax\",params:{parallax:{enabled:!1}},create:function(){M(this,{parallax:t({},ee)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:\"zoom\",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:\"swiper-zoom-container\",zoomedSlideClass:\"swiper-slide-zoomed\"}},create:function(){var e=this;M(e,{zoom:t({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},te)});var a=1;Object.defineProperty(e.zoom,\"scale\",{get:function(){return a},set:function(t){if(a!==t){var i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit(\"zoomChange\",t,i,s)}a=t}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:\"lazy\",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:\"\",elementClass:\"swiper-lazy\",loadingClass:\"swiper-lazy-loading\",loadedClass:\"swiper-lazy-loaded\",preloaderClass:\"swiper-lazy-preloader\"}},create:function(){M(this,{lazy:t({initialImageLoaded:!1},ae)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},\"scrollbarDragMove resize _freeModeNoMomentumRelease\":function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:\"controller\",params:{controller:{control:void 0,inverse:!1,by:\"slide\"}},create:function(){M(this,{controller:t({control:this.params.controller.control},ie)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,a){e.controller.control&&e.controller.setTranslate(t,a)},setTransition:function(e,t,a){e.controller.control&&e.controller.setTransition(t,a)}}},{name:\"a11y\",params:{a11y:{enabled:!0,notificationClass:\"swiper-notification\",prevSlideMessage:\"Previous slide\",nextSlideMessage:\"Next slide\",firstSlideMessage:\"This is the first slide\",lastSlideMessage:\"This is the last slide\",paginationBulletMessage:\"Go to slide {{index}}\",slideLabelMessage:\"{{index}} / {{slidesLength}}\",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:\"group\"}},create:function(){M(this,{a11y:t({},se,{liveRegion:m('<span class=\"'+this.params.a11y.notificationClass+'\" aria-live=\"assertive\" aria-atomic=\"true\"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:\"history\",params:{history:{enabled:!1,root:\"\",replaceState:!1,key:\"slides\"}},create:function(){M(this,{history:t({},re)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:\"hash-navigation\",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){M(this,{hashNavigation:t({initialized:!1},ne)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:\"autoplay\",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){M(this,{autoplay:t({},oe,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),r().addEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,a){e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),r().removeEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange)}}},{name:\"effect-fade\",params:{fadeEffect:{crossFade:!1}},create:function(){M(this,{fadeEffect:t({},le)})},on:{beforeInit:function(e){if(\"fade\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"fade\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"fade\"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){\"fade\"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:\"effect-cube\",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){M(this,{cubeEffect:t({},de)})},on:{beforeInit:function(e){if(\"cube\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"cube\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"cube\"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){\"cube\"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:\"effect-flip\",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){M(this,{flipEffect:t({},pe)})},on:{beforeInit:function(e){if(\"flip\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"flip\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"flip\"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){\"flip\"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:\"effect-coverflow\",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){M(this,{coverflowEffect:t({},ce)})},on:{beforeInit:function(e){\"coverflow\"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+\"coverflow\"),e.classNames.push(e.params.containerModifierClass+\"3d\"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:\"thumbs\",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:\"swiper-slide-thumb-active\",thumbsContainerClass:\"swiper-container-thumbs\"}},create:function(){M(this,{thumbs:t({swiper:null,initialized:!1},ue)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var a=e.thumbs.swiper;a&&a.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return F.use(he),F}));\n//# sourceMappingURL=swiper-bundle.min.js.map","source":"static-page/assets/js/swiper-bundle.min.js","raw":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,(function(){\"use strict\";function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}function a(e){return null!==e&&\"object\"==typeof e&&\"constructor\"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(s){void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}var s={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:\"\"},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"}};function r(){var e=\"undefined\"!=typeof document?document:{};return i(e,s),e}var n={document:s,navigator:{userAgent:\"\"},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return\"\"}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return\"undefined\"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){\"undefined\"!=typeof setTimeout&&clearTimeout(e)}};function o(){var e=\"undefined\"!=typeof window?window:{};return i(e,n),e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,a){return(c=p()?Reflect.construct:function(e,t,a){var i=[null];i.push.apply(i,t);var s=new(Function.bind.apply(e,i));return a&&d(s,a.prototype),s}).apply(null,arguments)}function u(e){var t=\"function\"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(a=e,-1===Function.toString.call(a).indexOf(\"[native code]\")))return e;var a;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return c(e,arguments,l(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),d(i,e)})(e)}var h=function(e){var t,a;function i(t){var a,i,s;return a=e.call.apply(e,[this].concat(t))||this,i=function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(a),s=i.__proto__,Object.defineProperty(i,\"__proto__\",{get:function(){return s},set:function(e){s.__proto__=e}}),a}return a=e,(t=i).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,i}(u(Array));function v(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,v(e)):t.push(e)})),t}function f(e,t){return Array.prototype.filter.call(e,t)}function m(e,t){var a=o(),i=r(),s=[];if(!t&&e instanceof h)return e;if(!e)return new h(s);if(\"string\"==typeof e){var n=e.trim();if(n.indexOf(\"<\")>=0&&n.indexOf(\">\")>=0){var l=\"div\";0===n.indexOf(\"<li\")&&(l=\"ul\"),0===n.indexOf(\"<tr\")&&(l=\"tbody\"),0!==n.indexOf(\"<td\")&&0!==n.indexOf(\"<th\")||(l=\"tr\"),0===n.indexOf(\"<tbody\")&&(l=\"table\"),0===n.indexOf(\"<option\")&&(l=\"select\");var d=i.createElement(l);d.innerHTML=n;for(var p=0;p<d.childNodes.length;p+=1)s.push(d.childNodes[p])}else s=function(e,t){if(\"string\"!=typeof e)return[e];for(var a=[],i=t.querySelectorAll(e),s=0;s<i.length;s+=1)a.push(i[s]);return a}(e.trim(),t||i)}else if(e.nodeType||e===a||e===i)s.push(e);else if(Array.isArray(e)){if(e instanceof h)return e;s=e}return new h(function(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}(s))}m.fn=h.prototype;var g,b,w,y={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,i)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,i)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return f(this,(function(e){return i.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));this.forEach((function(e){i.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&\"string\"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===arguments.length)this[a].setAttribute(e,t);else for(var i in e)this[a][i]=e[i],this[a].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration=\"string\"!=typeof e?e+\"ms\":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];function o(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),m(t).is(s))r.apply(t,a);else for(var i=m(t).parents(),n=0;n<i.length;n+=1)m(i[n]).is(s)&&r.apply(i[n],a)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var d,p=i.split(\" \"),c=0;c<this.length;c+=1){var u=this[c];if(s)for(d=0;d<p.length;d+=1){var h=p[d];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[h]||(u.dom7LiveListeners[h]=[]),u.dom7LiveListeners[h].push({listener:r,proxyListener:o}),u.addEventListener(h,o,n)}else for(d=0;d<p.length;d+=1){var v=p[d];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[v]||(u.dom7Listeners[v]=[]),u.dom7Listeners[v].push({listener:r,proxyListener:l}),u.addEventListener(v,l,n)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var o=i.split(\" \"),l=0;l<o.length;l+=1)for(var d=o[l],p=0;p<this.length;p+=1){var c=this[p],u=void 0;if(!s&&c.dom7Listeners?u=c.dom7Listeners[d]:s&&c.dom7LiveListeners&&(u=c.dom7LiveListeners[d]),u&&u.length)for(var h=u.length-1;h>=0;h-=1){var v=u[h];r&&v.listener===r||r&&v.listener&&v.listener.dom7proxy&&v.listener.dom7proxy===r?(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1)):r||(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1))}}return this},trigger:function(){for(var e=o(),t=arguments.length,a=new Array(t),i=0;i<t;i++)a[i]=arguments[i];for(var s=a[0].split(\" \"),r=a[1],n=0;n<s.length;n+=1)for(var l=s[n],d=0;d<this.length;d+=1){var p=this[d];if(e.CustomEvent){var c=new e.CustomEvent(l,{detail:r,bubbles:!0,cancelable:!0});p.dom7EventData=a.filter((function(e,t){return t>0})),p.dispatchEvent(c),p.dom7EventData=[],delete p.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on(\"transitionend\",(function a(i){i.target===this&&(e.call(this,i),t.off(\"transitionend\",a))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue(\"margin-right\"))+parseFloat(t.getPropertyValue(\"margin-left\"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue(\"margin-top\"))+parseFloat(t.getPropertyValue(\"margin-bottom\"))}return this[0].offsetHeight}return null},styles:function(){var e=o();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=o(),t=r(),a=this[0],i=a.getBoundingClientRect(),s=t.body,n=a.clientTop||s.clientTop||0,l=a.clientLeft||s.clientLeft||0,d=a===e?e.scrollY:a.scrollTop,p=a===e?e.scrollX:a.scrollLeft;return{top:i.top+d-n,left:i.left+p-l}}return null},css:function(e,t){var a,i=o();if(1===arguments.length){if(\"string\"!=typeof e){for(a=0;a<this.length;a+=1)for(var s in e)this[a].style[s]=e[s];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&\"string\"==typeof e){for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,a){e.apply(t,[t,a])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=o(),s=r(),n=this[0];if(!n||void 0===e)return!1;if(\"string\"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=m(e),a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}if(e===s)return n===s;if(e===i)return n===i;if(e.nodeType||e instanceof h){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return m([]);if(e<0){var a=t+e;return m(a<0?[]:[this[a]])}return m([this[e]])},append:function(){for(var e,t=r(),a=0;a<arguments.length;a+=1){e=a<0||arguments.length<=a?void 0:arguments[a];for(var i=0;i<this.length;i+=1)if(\"string\"==typeof e){var s=t.createElement(\"div\");for(s.innerHTML=e;s.firstChild;)this[i].appendChild(s.firstChild)}else if(e instanceof h)for(var n=0;n<e.length;n+=1)this[i].appendChild(e[n]);else this[i].appendChild(e)}return this},prepend:function(e){var t,a,i=r();for(t=0;t<this.length;t+=1)if(\"string\"==typeof e){var s=i.createElement(\"div\");for(s.innerHTML=e,a=s.childNodes.length-1;a>=0;a-=1)this[t].insertBefore(s.childNodes[a],this[t].childNodes[0])}else if(e instanceof h)for(a=0;a<e.length;a+=1)this[t].insertBefore(e[a],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&m(this[0].nextElementSibling).is(e)?m([this[0].nextElementSibling]):m([]):this[0].nextElementSibling?m([this[0].nextElementSibling]):m([]):m([])},nextAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&m(t.previousElementSibling).is(e)?m([t.previousElementSibling]):m([]):t.previousElementSibling?m([t.previousElementSibling]):m([])}return m([])},prevAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null!==this[a].parentNode&&(e?m(this[a].parentNode).is(e)&&t.push(this[a].parentNode):t.push(this[a].parentNode));return m(t)},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e?m(i).is(e)&&t.push(i):t.push(i),i=i.parentNode;return m(t)},closest:function(e){var t=this;return void 0===e?m([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1){try{var i=this[a].querySelectorAll(e)}catch(t){console.log(e)}for(var s=0;s<i.length;s+=1)t.push(i[s])}return m(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].children,s=0;s<i.length;s+=1)e&&!m(i[s]).is(e)||t.push(i[s]);return m(t)},filter:function(e){return m(f(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function E(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function T(e,t){void 0===t&&(t=\"x\");var a,i,s,r=o(),n=function(e){var t,a=o();return a.getComputedStyle&&(t=a.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return r.WebKitCSSMatrix?((i=n.transform||n.webkitTransform).split(\",\").length>6&&(i=i.split(\", \").map((function(e){return e.replace(\",\",\".\")})).join(\", \")),s=new r.WebKitCSSMatrix(\"none\"===i?\"\":i)):a=(s=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue(\"transform\").replace(\"translate(\",\"matrix(1, 0, 0, 1,\")).toString().split(\",\"),\"x\"===t&&(i=r.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),\"y\"===t&&(i=r.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function S(e){return\"object\"==typeof e&&null!==e&&e.constructor&&\"Object\"===Object.prototype.toString.call(e).slice(8,-1)}function C(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=[\"__proto__\",\"constructor\",\"prototype\"],a=1;a<arguments.length;a+=1){var i=a<0||arguments.length<=a?void 0:arguments[a];if(null!=i)for(var s=Object.keys(Object(i)).filter((function(e){return t.indexOf(e)<0})),r=0,n=s.length;r<n;r+=1){var o=s[r],l=Object.getOwnPropertyDescriptor(i,o);void 0!==l&&l.enumerable&&(S(e[o])&&S(i[o])?i[o].__swiper__?e[o]=i[o]:C(e[o],i[o]):!S(e[o])&&S(i[o])?(e[o]={},i[o].__swiper__?e[o]=i[o]:C(e[o],i[o])):e[o]=i[o])}}return e}function M(e,t){Object.keys(t).forEach((function(a){S(t[a])&&Object.keys(t[a]).forEach((function(i){\"function\"==typeof t[a][i]&&(t[a][i]=t[a][i].bind(e))})),e[a]=t[a]}))}function z(e){return void 0===e&&(e=\"\"),\".\"+e.trim().replace(/([\\.:\\/])/g,\"\\\\$1\").replace(/ /g,\".\")}function P(){return g||(g=function(){var e=o(),t=r();return{touch:!!(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&\"maxTouchPoints\"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:\"MutationObserver\"in e||\"WebkitMutationObserver\"in e,passiveListener:function(){var t=!1;try{var a=Object.defineProperty({},\"passive\",{get:function(){t=!0}});e.addEventListener(\"testPassiveListener\",null,a)}catch(e){}return t}(),gestures:\"ongesturestart\"in e}}()),g}function k(e){return void 0===e&&(e={}),b||(b=function(e){var t=(void 0===e?{}:e).userAgent,a=P(),i=o(),s=i.navigator.platform,r=t||i.navigator.userAgent,n={ios:!1,android:!1},l=i.screen.width,d=i.screen.height,p=r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),c=r.match(/(iPad).*OS\\s([\\d_]+)/),u=r.match(/(iPod)(.*OS\\s([\\d_]+))?/),h=!c&&r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),v=\"Win32\"===s,f=\"MacIntel\"===s;return!c&&f&&a.touch&&[\"1024x1366\",\"1366x1024\",\"834x1194\",\"1194x834\",\"834x1112\",\"1112x834\",\"768x1024\",\"1024x768\",\"820x1180\",\"1180x820\",\"810x1080\",\"1080x810\"].indexOf(l+\"x\"+d)>=0&&((c=r.match(/(Version)\\/([\\d.]+)/))||(c=[0,1,\"13_0_0\"]),f=!1),p&&!v&&(n.os=\"android\",n.android=!0),(c||h||u)&&(n.os=\"ios\",n.ios=!0),n}(e)),b}function L(){return w||(w=function(){var e,t=o();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf(\"safari\")>=0&&e.indexOf(\"chrome\")<0&&e.indexOf(\"android\")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),w}Object.keys(y).forEach((function(e){Object.defineProperty(m.fn,e,{value:y[e],writable:!0})}));var $={name:\"resize\",create:function(){var e=this;C(e,{resize:{observer:null,createObserver:function(){e&&!e.destroyed&&e.initialized&&(e.resize.observer=new ResizeObserver((function(t){var a=e.width,i=e.height,s=a,r=i;t.forEach((function(t){var a=t.contentBoxSize,i=t.contentRect,n=t.target;n&&n!==e.el||(s=i?i.width:(a[0]||a).inlineSize,r=i?i.height:(a[0]||a).blockSize)})),s===a&&r===i||e.resize.resizeHandler()})),e.resize.observer.observe(e.el))},removeObserver:function(){e.resize.observer&&e.resize.observer.unobserve&&e.el&&(e.resize.observer.unobserve(e.el),e.resize.observer=null)},resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit(\"beforeResize\"),e.emit(\"resize\"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit(\"orientationchange\")}}})},on:{init:function(e){var t=o();e.params.resizeObserver&&void 0!==o().ResizeObserver?e.resize.createObserver():(t.addEventListener(\"resize\",e.resize.resizeHandler),t.addEventListener(\"orientationchange\",e.resize.orientationChangeHandler))},destroy:function(e){var t=o();e.resize.removeObserver(),t.removeEventListener(\"resize\",e.resize.resizeHandler),t.removeEventListener(\"orientationchange\",e.resize.orientationChangeHandler)}}},I={attach:function(e,t){void 0===t&&(t={});var a=o(),i=this,s=new(a.MutationObserver||a.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){i.emit(\"observerUpdate\",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}else i.emit(\"observerUpdate\",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},O={name:\"observer\",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){M(this,{observer:t({},I,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function A(e){var t=this,a=r(),i=o(),s=t.touchEventsData,n=t.params,l=t.touches;if(!t.animating||!n.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var p=m(d.target);if(\"wrapper\"!==n.touchEventsTarget||p.closest(t.wrapperEl).length)if(s.isTouchEvent=\"touchstart\"===d.type,s.isTouchEvent||!(\"which\"in d)||3!==d.which)if(!(!s.isTouchEvent&&\"button\"in d&&d.button>0))if(!s.isTouched||!s.isMoved)if(!!n.noSwipingClass&&\"\"!==n.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(p=m(e.path[0])),n.noSwiping&&p.closest(n.noSwipingSelector?n.noSwipingSelector:\".\"+n.noSwipingClass)[0])t.allowClick=!0;else if(!n.swipeHandler||p.closest(n.swipeHandler)[0]){l.currentX=\"touchstart\"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY=\"touchstart\"===d.type?d.targetTouches[0].pageY:d.pageY;var c=l.currentX,u=l.currentY,h=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,v=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(h&&(c<=v||c>=i.innerWidth-v)){if(\"prevent\"!==h)return;e.preventDefault()}if(C(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=c,l.startY=u,s.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(s.allowThresholdMove=!1),\"touchstart\"!==d.type){var f=!0;p.is(s.formElements)&&(f=!1),a.activeElement&&m(a.activeElement).is(s.formElements)&&a.activeElement!==p[0]&&a.activeElement.blur();var g=f&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!g||p[0].isContentEditable||d.preventDefault()}t.emit(\"touchStart\",d)}}}function D(e){var t=r(),a=this,i=a.touchEventsData,s=a.params,n=a.touches,o=a.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),i.isTouched){if(!i.isTouchEvent||\"touchmove\"===l.type){var d=\"touchmove\"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),p=\"touchmove\"===l.type?d.pageX:l.pageX,c=\"touchmove\"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return n.startX=p,void(n.startY=c);if(!a.allowTouchMove)return a.allowClick=!1,void(i.isTouched&&(C(n,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=x()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(a.isVertical()){if(c<n.startY&&a.translate<=a.maxTranslate()||c>n.startY&&a.translate>=a.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&a.translate<=a.maxTranslate()||p>n.startX&&a.translate>=a.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&m(l.target).is(i.formElements))return i.isMoved=!0,void(a.allowClick=!1);if(i.allowTouchCallbacks&&a.emit(\"touchMove\",l),!(l.targetTouches&&l.targetTouches.length>1)){n.currentX=p,n.currentY=c;var u=n.currentX-n.startX,h=n.currentY-n.startY;if(!(a.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(h,2))<a.params.threshold)){var v;if(void 0===i.isScrolling)a.isHorizontal()&&n.currentY===n.startY||a.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:u*u+h*h>=25&&(v=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,i.isScrolling=a.isHorizontal()?v>s.touchAngle:90-v>s.touchAngle);if(i.isScrolling&&a.emit(\"touchMoveOpposite\",l),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){a.allowClick=!1,!s.cssMode&&l.cancelable&&l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation(),i.isMoved||(s.loop&&a.loopFix(),i.startTranslate=a.getTranslate(),a.setTransition(0),a.animating&&a.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==a.allowSlideNext&&!0!==a.allowSlidePrev||a.setGrabCursor(!0),a.emit(\"sliderFirstMove\",l)),a.emit(\"sliderMove\",l),i.isMoved=!0;var f=a.isHorizontal()?u:h;n.diff=f,f*=s.touchRatio,o&&(f=-f),a.swipeDirection=f>0?\"prev\":\"next\",i.currentTranslate=f+i.startTranslate;var g=!0,b=s.resistanceRatio;if(s.touchReleaseOnEdges&&(b=0),f>0&&i.currentTranslate>a.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=a.minTranslate()-1+Math.pow(-a.minTranslate()+i.startTranslate+f,b))):f<0&&i.currentTranslate<a.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=a.maxTranslate()+1-Math.pow(a.maxTranslate()-i.startTranslate-f,b))),g&&(l.preventedByNestedSwiper=!0),!a.allowSlideNext&&\"next\"===a.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!a.allowSlidePrev&&\"prev\"===a.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),a.allowSlidePrev||a.allowSlideNext||(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=a.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(a.updateActiveIndex(),a.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:n[a.isHorizontal()?\"startX\":\"startY\"],time:i.touchStartTime}),i.velocities.push({position:n[a.isHorizontal()?\"currentX\":\"currentY\"],time:x()})),a.updateProgress(i.currentTranslate),a.setTranslate(i.currentTranslate))}}}}}else i.startMoving&&i.isScrolling&&a.emit(\"touchMoveOpposite\",l)}function N(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,r=t.rtlTranslate,n=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit(\"touchEnd\",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var p,c=x(),u=c-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit(\"tap click\",d),u<300&&c-a.lastClickTime<300&&t.emit(\"doubleTap doubleClick\",d)),a.lastClickTime=x(),E((function(){t.destroyed||(t.allowClick=!0)})),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,p=i.followFinger?r?t.translate:-t.translate:-a.currentTranslate,!i.cssMode)if(i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(a.velocities.length>1){var h=a.velocities.pop(),v=a.velocities.pop(),f=h.position-v.position,m=h.time-v.time;t.velocity=f/m,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(m>150||x()-h.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,b=t.velocity*g,w=t.translate+b;r&&(w=-w);var y,T,S=!1,C=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(w<t.maxTranslate())i.freeModeMomentumBounce?(w+t.maxTranslate()<-C&&(w=t.maxTranslate()-C),y=t.maxTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.maxTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(w>t.minTranslate())i.freeModeMomentumBounce?(w-t.minTranslate()>C&&(w=t.minTranslate()+C),y=t.minTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.minTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(i.freeModeSticky){for(var M,z=0;z<l.length;z+=1)if(l[z]>-w){M=z;break}w=-(w=Math.abs(l[M]-w)<Math.abs(l[M-1]-w)||\"next\"===t.swipeDirection?l[M]:l[M-1])}if(T&&t.once(\"transitionEnd\",(function(){t.loopFix()})),0!==t.velocity){if(g=r?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),i.freeModeSticky){var P=Math.abs((r?-w:w)-t.translate),k=t.slidesSizesGrid[t.activeIndex];g=P<k?i.speed:P<2*k?1.5*i.speed:2.5*i.speed}}else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&S?(t.updateProgress(y),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit(\"momentumBounce\"),t.setTransition(i.speed),setTimeout((function(){t.setTranslate(y),n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):(t.emit(\"_freeModeNoMomentumRelease\"),t.updateProgress(w)),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(i.freeModeSticky)return void t.slideToClosest();i.freeMode&&t.emit(\"_freeModeNoMomentumRelease\")}(!i.freeModeMomentum||u>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var L=0,$=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<i.slidesPerGroupSkip?1:i.slidesPerGroup){var O=I<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[I+O]?p>=o[I]&&p<o[I+O]&&(L=I,$=o[I+O]-o[I]):p>=o[I]&&(L=I,$=o[o.length-1]-o[o.length-2])}var A=(p-o[L])/$,D=L<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);\"next\"===t.swipeDirection&&(A>=i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L)),\"prev\"===t.swipeDirection&&(A>1-i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(L+D):t.slideTo(L):(\"next\"===t.swipeDirection&&t.slideTo(L+D),\"prev\"===t.swipeDirection&&t.slideTo(L))}}}function G(){var e=this,t=e.params,a=e.el;if(!a||0!==a.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,s=e.allowSlidePrev,r=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),(\"auto\"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}function B(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function H(){var e=this,t=e.wrapperEl,a=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=a?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0===i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit(\"setTranslate\",e.translate,!1)}var X=!1;function Y(){}var R={init:!0,direction:\"horizontal\",touchEventsTarget:\"container\",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!1,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:\"slide\",breakpoints:void 0,breakpointsBase:\"window\",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:\"column\",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:\"swiper-no-swiping\",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:\"swiper-container-\",slideClass:\"swiper-slide\",slideBlankClass:\"swiper-slide-invisible-blank\",slideActiveClass:\"swiper-slide-active\",slideDuplicateActiveClass:\"swiper-slide-duplicate-active\",slideVisibleClass:\"swiper-slide-visible\",slideDuplicateClass:\"swiper-slide-duplicate\",slideNextClass:\"swiper-slide-next\",slideDuplicateNextClass:\"swiper-slide-duplicate-next\",slidePrevClass:\"swiper-slide-prev\",slideDuplicatePrevClass:\"swiper-slide-duplicate-prev\",wrapperClass:\"swiper-wrapper\",runCallbacksOnInit:!0,_emitClasses:!1},V={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a];i.params&&C(e,i.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a],s=e[a]||{};i.on&&t.on&&Object.keys(i.on).forEach((function(e){t.on(e,i.on[e])})),i.create&&i.create.bind(t)(s)}))}},eventsEmitter:{on:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;var s=a?\"unshift\":\"push\";return e.split(\" \").forEach((function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)})),i},once:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;function s(){i.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];t.apply(i,r)}return s.__emitterProxy=t,i.on(e,s,a)},onAny:function(e,t){var a=this;if(\"function\"!=typeof e)return a;var i=t?\"unshift\":\"push\";return a.eventsAnyListeners.indexOf(e)<0&&a.eventsAnyListeners[i](e),a},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var a=t.eventsAnyListeners.indexOf(e);return a>=0&&t.eventsAnyListeners.splice(a,1),t},off:function(e,t){var a=this;return a.eventsListeners?(e.split(\" \").forEach((function(e){void 0===t?a.eventsListeners[e]=[]:a.eventsListeners[e]&&a.eventsListeners[e].forEach((function(i,s){(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&a.eventsListeners[e].splice(s,1)}))})),a):a},emit:function(){var e,t,a,i=this;if(!i.eventsListeners)return i;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];\"string\"==typeof r[0]||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),a=i):(e=r[0].events,t=r[0].data,a=r[0].context||i),t.unshift(a);var o=Array.isArray(e)?e:e.split(\" \");return o.forEach((function(e){i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach((function(i){i.apply(a,[e].concat(t))})),i.eventsListeners&&i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(e){e.apply(a,t)}))})),i}},update:{updateSize:function(){var e,t,a=this,i=a.$el;e=void 0!==a.params.width&&null!==a.params.width?a.params.width:i[0].clientWidth,t=void 0!==a.params.height&&null!==a.params.height?a.params.height:i[0].clientHeight,0===e&&a.isHorizontal()||0===t&&a.isVertical()||(e=e-parseInt(i.css(\"padding-left\")||0,10)-parseInt(i.css(\"padding-right\")||0,10),t=t-parseInt(i.css(\"padding-top\")||0,10)-parseInt(i.css(\"padding-bottom\")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),C(a,{width:e,height:t,size:a.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=function(t){return e.isHorizontal()?t:{width:\"height\",\"margin-top\":\"margin-left\",\"margin-bottom \":\"margin-right\",\"margin-left\":\"margin-top\",\"margin-right\":\"margin-bottom\",\"padding-left\":\"padding-top\",\"padding-right\":\"padding-bottom\",marginRight:\"marginBottom\"}[t]},a=function(e,a){return parseFloat(e.getPropertyValue(t(a))||0)},i=e.params,s=e.$wrapperEl,r=e.size,n=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,p=s.children(\".\"+e.params.slideClass),c=l?e.virtual.slides.length:p.length,u=[],h=[],v=[],f=i.slidesOffsetBefore;\"function\"==typeof f&&(f=i.slidesOffsetBefore.call(e));var m=i.slidesOffsetAfter;\"function\"==typeof m&&(m=i.slidesOffsetAfter.call(e));var g=e.snapGrid.length,b=e.slidesGrid.length,w=i.spaceBetween,y=-f,E=0,x=0;if(void 0!==r){var T,S;\"string\"==typeof w&&w.indexOf(\"%\")>=0&&(w=parseFloat(w.replace(\"%\",\"\"))/100*r),e.virtualSize=-w,n?p.css({marginLeft:\"\",marginTop:\"\"}):p.css({marginRight:\"\",marginBottom:\"\"}),i.slidesPerColumn>1&&(T=Math.floor(c/i.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/i.slidesPerColumn)*i.slidesPerColumn,\"auto\"!==i.slidesPerView&&\"row\"===i.slidesPerColumnFill&&(T=Math.max(T,i.slidesPerView*i.slidesPerColumn)));for(var M,z,P,k=i.slidesPerColumn,L=T/k,$=Math.floor(c/i.slidesPerColumn),I=0;I<c;I+=1){S=0;var O=p.eq(I);if(i.slidesPerColumn>1){var A=void 0,D=void 0,N=void 0;if(\"row\"===i.slidesPerColumnFill&&i.slidesPerGroup>1){var G=Math.floor(I/(i.slidesPerGroup*i.slidesPerColumn)),B=I-i.slidesPerColumn*i.slidesPerGroup*G,H=0===G?i.slidesPerGroup:Math.min(Math.ceil((c-G*k*i.slidesPerGroup)/k),i.slidesPerGroup);A=(D=B-(N=Math.floor(B/H))*H+G*i.slidesPerGroup)+N*T/k,O.css({\"-webkit-box-ordinal-group\":A,\"-moz-box-ordinal-group\":A,\"-ms-flex-order\":A,\"-webkit-order\":A,order:A})}else\"column\"===i.slidesPerColumnFill?(N=I-(D=Math.floor(I/k))*k,(D>$||D===$&&N===k-1)&&(N+=1)>=k&&(N=0,D+=1)):D=I-(N=Math.floor(I/L))*L;O.css(t(\"margin-top\"),0!==N&&i.spaceBetween&&i.spaceBetween+\"px\")}if(\"none\"!==O.css(\"display\")){if(\"auto\"===i.slidesPerView){var X=getComputedStyle(O[0]),Y=O[0].style.transform,R=O[0].style.webkitTransform;if(Y&&(O[0].style.transform=\"none\"),R&&(O[0].style.webkitTransform=\"none\"),i.roundLengths)S=e.isHorizontal()?O.outerWidth(!0):O.outerHeight(!0);else{var V=a(X,\"width\"),W=a(X,\"padding-left\"),F=a(X,\"padding-right\"),_=a(X,\"margin-left\"),q=a(X,\"margin-right\"),j=X.getPropertyValue(\"box-sizing\");if(j&&\"border-box\"===j)S=V+_+q;else{var U=O[0],K=U.clientWidth;S=V+W+F+_+q+(U.offsetWidth-K)}}Y&&(O[0].style.transform=Y),R&&(O[0].style.webkitTransform=R),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),p[I]&&(p[I].style[t(\"width\")]=S+\"px\");p[I]&&(p[I].swiperSlideSize=S),v.push(S),i.centeredSlides?(y=y+S/2+E/2+w,0===E&&0!==I&&(y=y-r/2-w),0===I&&(y=y-r/2-w),Math.abs(y)<.001&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup==0&&u.push(y),h.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&u.push(y),h.push(y),y=y+S+w),e.virtualSize+=S+w,E=S,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+m,n&&o&&(\"slide\"===i.effect||\"coverflow\"===i.effect)&&s.css({width:e.virtualSize+i.spaceBetween+\"px\"}),i.setWrapperSize)s.css(((z={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",z));if(i.slidesPerColumn>1)if(e.virtualSize=(S+i.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/i.slidesPerColumn)-i.spaceBetween,s.css(((P={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",P)),i.centeredSlides){M=[];for(var Z=0;Z<u.length;Z+=1){var J=u[Z];i.roundLengths&&(J=Math.floor(J)),u[Z]<e.virtualSize+u[0]&&M.push(J)}u=M}if(!i.centeredSlides){M=[];for(var Q=0;Q<u.length;Q+=1){var ee=u[Q];i.roundLengths&&(ee=Math.floor(ee)),u[Q]<=e.virtualSize-r&&M.push(ee)}u=M,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(0===u.length&&(u=[0]),0!==i.spaceBetween){var te,ae=e.isHorizontal()&&n?\"marginLeft\":t(\"marginRight\");p.filter((function(e,t){return!i.cssMode||t!==p.length-1})).css(((te={})[ae]=w+\"px\",te))}if(i.centeredSlides&&i.centeredSlidesBounds){var ie=0;v.forEach((function(e){ie+=e+(i.spaceBetween?i.spaceBetween:0)}));var se=(ie-=i.spaceBetween)-r;u=u.map((function(e){return e<0?-f:e>se?se+m:e}))}if(i.centerInsufficientSlides){var re=0;if(v.forEach((function(e){re+=e+(i.spaceBetween?i.spaceBetween:0)})),(re-=i.spaceBetween)<r){var ne=(r-re)/2;u.forEach((function(e,t){u[t]=e-ne})),h.forEach((function(e,t){h[t]=e+ne}))}}C(e,{slides:p,snapGrid:u,slidesGrid:h,slidesSizesGrid:v}),c!==d&&e.emit(\"slidesLengthChange\"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit(\"snapGridLengthChange\")),h.length!==b&&e.emit(\"slidesGridLengthChange\"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a=this,i=[],s=0;if(\"number\"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed),\"auto\"!==a.params.slidesPerView&&a.params.slidesPerView>1)if(a.params.centeredSlides)a.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(a.params.slidesPerView);t+=1){var r=a.activeIndex+t;if(r>a.slides.length)break;i.push(a.slides.eq(r)[0])}else i.push(a.slides.eq(a.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var n=i[t].offsetHeight;s=n>s?n:s}s&&a.$wrapperEl.css(\"height\",s+\"px\")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;s&&(r=e),i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(r+(a.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+a.spaceBetween);if(a.watchSlidesVisibility||a.centeredSlides&&a.autoHeight){var d=-(r-o.swiperSlideOffset),p=d+t.slidesSizesGrid[n];(d>=0&&d<t.size-1||p>1&&p<=t.size||d<=0&&p>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(n),i.eq(n).addClass(a.slideVisibleClass))}o.progress=s?-l:l}t.visibleSlides=m(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var a=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*a||0}var i=t.params,s=t.maxTranslate()-t.minTranslate(),r=t.progress,n=t.isBeginning,o=t.isEnd,l=n,d=o;0===s?(r=0,n=!0,o=!0):(n=(r=(e-t.minTranslate())/s)<=0,o=r>=1),C(t,{progress:r,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit(\"reachBeginning toEdge\"),o&&!d&&t.emit(\"reachEnd toEdge\"),(l&&!n||d&&!o)&&t.emit(\"fromEdge\"),t.emit(\"progress\",r)},updateSlidesClasses:function(){var e,t=this,a=t.slides,i=t.params,s=t.$wrapperEl,r=t.activeIndex,n=t.realIndex,o=t.virtual&&i.virtual.enabled;a.removeClass(i.slideActiveClass+\" \"+i.slideNextClass+\" \"+i.slidePrevClass+\" \"+i.slideDuplicateActiveClass+\" \"+i.slideDuplicateNextClass+\" \"+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find(\".\"+i.slideClass+'[data-swiper-slide-index=\"'+r+'\"]'):a.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll(\".\"+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=a.eq(0)).addClass(i.slideNextClass);var d=e.prevAll(\".\"+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=a.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,a=this,i=a.rtlTranslate?a.translate:-a.translate,s=a.slidesGrid,r=a.snapGrid,n=a.params,o=a.activeIndex,l=a.realIndex,d=a.snapIndex,p=e;if(void 0===p){for(var c=0;c<s.length;c+=1)void 0!==s[c+1]?i>=s[c]&&i<s[c+1]-(s[c+1]-s[c])/2?p=c:i>=s[c]&&i<s[c+1]&&(p=c+1):i>=s[c]&&(p=c);n.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(r.indexOf(i)>=0)t=r.indexOf(i);else{var u=Math.min(n.slidesPerGroupSkip,p);t=u+Math.floor((p-u)/n.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),p!==o){var h=parseInt(a.slides.eq(p).attr(\"data-swiper-slide-index\")||p,10);C(a,{snapIndex:t,realIndex:h,previousIndex:o,activeIndex:p}),a.emit(\"activeIndexChange\"),a.emit(\"snapIndexChange\"),l!==h&&a.emit(\"realIndexChange\"),(a.initialized||a.params.runCallbacksOnInit)&&a.emit(\"slideChange\")}else t!==d&&(a.snapIndex=t,a.emit(\"snapIndexChange\"))},updateClickedSlide:function(e){var t,a=this,i=a.params,s=m(e.target).closest(\".\"+i.slideClass)[0],r=!1;if(s)for(var n=0;n<a.slides.length;n+=1)if(a.slides[n]===s){r=!0,t=n;break}if(!s||!r)return a.clickedSlide=void 0,void(a.clickedIndex=void 0);a.clickedSlide=s,a.virtual&&a.params.virtual.enabled?a.clickedIndex=parseInt(m(s).attr(\"data-swiper-slide-index\"),10):a.clickedIndex=t,i.slideToClickedSlide&&void 0!==a.clickedIndex&&a.clickedIndex!==a.activeIndex&&a.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?\"x\":\"y\");var t=this,a=t.params,i=t.rtlTranslate,s=t.translate,r=t.$wrapperEl;if(a.virtualTranslate)return i?-s:s;if(a.cssMode)return s;var n=T(r[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,r=a.$wrapperEl,n=a.wrapperEl,o=a.progress,l=0,d=0;a.isHorizontal()?l=i?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),s.cssMode?n[a.isHorizontal()?\"scrollLeft\":\"scrollTop\"]=a.isHorizontal()?-l:-d:s.virtualTranslate||r.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px)\"),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:d;var p=a.maxTranslate()-a.minTranslate();(0===p?0:(e-a.minTranslate())/p)!==o&&a.updateProgress(e),a.emit(\"setTranslate\",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===i&&(i=!0);var r=this,n=r.params,o=r.wrapperEl;if(r.animating&&n.preventInteractionOnTransition)return!1;var l,d=r.minTranslate(),p=r.maxTranslate();if(l=i&&e>d?d:i&&e<p?p:e,r.updateProgress(l),n.cssMode){var c,u=r.isHorizontal();if(0===t)o[u?\"scrollLeft\":\"scrollTop\"]=-l;else if(o.scrollTo)o.scrollTo(((c={})[u?\"left\":\"top\"]=-l,c.behavior=\"smooth\",c));else o[u?\"scrollLeft\":\"scrollTop\"]=-l;return!0}return 0===t?(r.setTransition(0),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionEnd\"))):(r.setTransition(t),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionStart\")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit(\"transitionEnd\"))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var a=this;a.params.cssMode||a.$wrapperEl.transition(e),a.emit(\"setTransition\",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,r=a.previousIndex;if(!s.cssMode){s.autoHeight&&a.updateAutoHeight();var n=t;if(n||(n=i>r?\"next\":i<r?\"prev\":\"reset\"),a.emit(\"transitionStart\"),e&&i!==r){if(\"reset\"===n)return void a.emit(\"slideResetTransitionStart\");a.emit(\"slideChangeTransitionStart\"),\"next\"===n?a.emit(\"slideNextTransitionStart\"):a.emit(\"slidePrevTransitionStart\")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex,r=a.params;if(a.animating=!1,!r.cssMode){a.setTransition(0);var n=t;if(n||(n=i>s?\"next\":i<s?\"prev\":\"reset\"),a.emit(\"transitionEnd\"),e&&i!==s){if(\"reset\"===n)return void a.emit(\"slideResetTransitionEnd\");a.emit(\"slideChangeTransitionEnd\"),\"next\"===n?a.emit(\"slideNextTransitionEnd\"):a.emit(\"slidePrevTransitionEnd\")}}}},slide:{slideTo:function(e,t,a,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),\"number\"!=typeof e&&\"string\"!=typeof e)throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\"+typeof e+\"] given.\");if(\"string\"==typeof e){var s=parseInt(e,10);if(!isFinite(s))throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\"+e+\"] given.\");e=s}var r=this,n=e;n<0&&(n=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,p=r.previousIndex,c=r.activeIndex,u=r.rtlTranslate,h=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var v=Math.min(r.params.slidesPerGroupSkip,n),f=v+Math.floor((n-v)/r.params.slidesPerGroup);f>=l.length&&(f=l.length-1),(c||o.initialSlide||0)===(p||0)&&a&&r.emit(\"beforeSlideChangeStart\");var m,g=-l[f];if(r.updateProgress(g),o.normalizeSlideIndex)for(var b=0;b<d.length;b+=1){var w=-Math.floor(100*g),y=Math.floor(100*d[b]),E=Math.floor(100*d[b+1]);void 0!==d[b+1]?w>=y&&w<E-(E-y)/2?n=b:w>=y&&w<E&&(n=b+1):w>=y&&(n=b)}if(r.initialized&&n!==c){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(c||0)!==n)return!1}if(m=n>c?\"next\":n<c?\"prev\":\"reset\",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),\"slide\"!==o.effect&&r.setTranslate(g),\"reset\"!==m&&(r.transitionStart(a,m),r.transitionEnd(a,m)),!1;if(o.cssMode){var x,T=r.isHorizontal(),S=-g;if(u&&(S=h.scrollWidth-h.offsetWidth-S),0===t)h[T?\"scrollLeft\":\"scrollTop\"]=S;else if(h.scrollTo)h.scrollTo(((x={})[T?\"left\":\"top\"]=S,x.behavior=\"smooth\",x));else h[T?\"scrollLeft\":\"scrollTop\"]=S;return!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.transitionEnd(a,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,m))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,r=e;return s.params.loop&&(r+=s.loopedSlides),s.slideTo(r,t,a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}return i.slideTo(i.activeIndex+n,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var p=d(l?i.translate:-i.translate),c=n.map((function(e){return d(e)}));n[c.indexOf(p)];var u,h=n[c.indexOf(p)-1];return void 0===h&&s.cssMode&&n.forEach((function(e){!h&&p>=e&&(h=e)})),void 0!==h&&(u=o.indexOf(h))<0&&(u=i.activeIndex-1),i.slideTo(u,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var s=this,r=s.activeIndex,n=Math.min(s.params.slidesPerGroupSkip,r),o=n+Math.floor((r-n)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){var d=s.snapGrid[o];l-d>(s.snapGrid[o+1]-d)*i&&(r+=s.params.slidesPerGroup)}else{var p=s.snapGrid[o-1];l-p<=(s.snapGrid[o]-p)*i&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s=\"auto\"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,r=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10),a.centeredSlides?r<t.loopedSlides-s/2||r>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-s?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var e=this,t=r(),a=e.params,i=e.$wrapperEl;i.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass).remove();var s=i.children(\".\"+a.slideClass);if(a.loopFillGroupWithBlank){var n=a.slidesPerGroup-s.length%a.slidesPerGroup;if(n!==a.slidesPerGroup){for(var o=0;o<n;o+=1){var l=m(t.createElement(\"div\")).addClass(a.slideClass+\" \"+a.slideBlankClass);i.append(l)}s=i.children(\".\"+a.slideClass)}}\"auto\"!==a.slidesPerView||a.loopedSlides||(a.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(a.loopedSlides||a.slidesPerView,10)),e.loopedSlides+=a.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);var d=[],p=[];s.each((function(t,a){var i=m(t);a<e.loopedSlides&&p.push(t),a<s.length&&a>=s.length-e.loopedSlides&&d.push(t),i.attr(\"data-swiper-slide-index\",a)}));for(var c=0;c<p.length;c+=1)i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass));for(var u=d.length-1;u>=0;u-=1)i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass))},loopFix:function(){var e=this;e.emit(\"beforeLoopFix\");var t,a=e.activeIndex,i=e.slides,s=e.loopedSlides,r=e.allowSlidePrev,n=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[a]-e.getTranslate();if(a<s)t=i.length-3*s+a,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d);else if(a>=i.length-s){t=-i.length+a+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)}e.allowSlidePrev=r,e.allowSlideNext=n,e.emit(\"loopFix\")},loopDestroy:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides;t.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass+\",.\"+a.slideClass+\".\"+a.slideBlankClass).remove(),i.removeAttr(\"data-swiper-slide-index\")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var a=t.el;a.style.cursor=\"move\",a.style.cursor=e?\"-webkit-grabbing\":\"-webkit-grab\",a.style.cursor=e?\"-moz-grabbin\":\"-moz-grab\",a.style.cursor=e?\"grabbing\":\"grab\"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor=\"\")}},manipulation:{appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),\"object\"==typeof e&&\"length\"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var r=s+1;if(\"object\"==typeof e&&\"length\"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);r=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,r=a.activeIndex;s.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=i.children(\".\"+s.slideClass));var n=a.slides.length;if(e<=0)a.prependSlide(t);else if(e>=n)a.appendSlide(t);else{for(var o=r>e?r+1:r,l=[],d=n-1;d>=e;d-=1){var p=a.slides.eq(d);p.remove(),l.unshift(p)}if(\"object\"==typeof t&&\"length\"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);o=r>e?r+t.length:r}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&a.support.observer||a.update(),s.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children(\".\"+a.slideClass));var r,n=s;if(\"object\"==typeof e&&\"length\"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1),n=Math.max(n,0);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),a.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=A.bind(e),e.onTouchMove=D.bind(e),e.onTouchEnd=N.bind(e),a.cssMode&&(e.onScroll=H.bind(e)),e.onClick=B.bind(e);var d=!!a.nested;if(!l.touch&&l.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,d),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"touchstart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,p),s.addEventListener(i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),s.addEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,p),X||(t.addEventListener(\"touchstart\",Y),X=!0)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.addEventListener(\"mousedown\",e.onTouchStart,!1),t.addEventListener(\"mousemove\",e.onTouchMove,d),t.addEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.addEventListener(\"click\",e.onClick,!0),a.cssMode&&n.addEventListener(\"scroll\",e.onScroll),a.updateOnWindowResize?e.on(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G,!0):e.on(\"observerUpdate\",G,!0)},detachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support,d=!!a.nested;if(!l.touch&&l.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,d),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"onTouchStart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,p),s.removeEventListener(i.move,e.onTouchMove,d),s.removeEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,p)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.removeEventListener(\"mousedown\",e.onTouchStart,!1),t.removeEventListener(\"mousemove\",e.onTouchMove,d),t.removeEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.removeEventListener(\"click\",e.onClick,!0),a.cssMode&&n.removeEventListener(\"scroll\",e.onScroll),e.off(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides,s=void 0===i?0:i,r=e.params,n=e.$el,o=r.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&[\"slidesPerView\",\"spaceBetween\",\"slidesPerGroup\",\"slidesPerGroupSkip\",\"slidesPerColumn\"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]=\"slidesPerView\"!==e||\"AUTO\"!==t&&\"auto\"!==t?\"slidesPerView\"===e?parseFloat(t):parseInt(t,10):\"auto\")}));var p=d||e.originalParams,c=r.slidesPerColumn>1,u=p.slidesPerColumn>1;c&&!u?(n.removeClass(r.containerModifierClass+\"multirow \"+r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses()):!c&&u&&(n.addClass(r.containerModifierClass+\"multirow\"),\"column\"===p.slidesPerColumnFill&&n.addClass(r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses());var h=p.direction&&p.direction!==r.direction,v=r.loop&&(p.slidesPerView!==r.slidesPerView||h);h&&a&&e.changeDirection(),C(e.params,p),C(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit(\"_beforeBreakpoint\",p),v&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit(\"breakpoint\",p)}}},getBreakpoint:function(e,t,a){if(void 0===t&&(t=\"window\"),e&&(\"container\"!==t||a)){var i=!1,s=o(),r=\"window\"===t?s.innerWidth:a.clientWidth,n=\"window\"===t?s.innerHeight:a.clientHeight,l=Object.keys(e).map((function(e){if(\"string\"==typeof e&&0===e.indexOf(\"@\")){var t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var d=0;d<l.length;d+=1){var p=l[d],c=p.point;p.value<=r&&(i=c)}return i||\"max\"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,a=e.isLocked,i=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,a!==e.isLocked&&e.emit(e.isLocked?\"lock\":\"unlock\"),a&&a!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e,t,a,i=this,s=i.classNames,r=i.params,n=i.rtl,o=i.$el,l=i.device,d=i.support,p=(e=[\"initialized\",r.direction,{\"pointer-events\":d.pointerEvents&&!d.touch},{\"free-mode\":r.freeMode},{autoheight:r.autoHeight},{rtl:n},{multirow:r.slidesPerColumn>1},{\"multirow-column\":r.slidesPerColumn>1&&\"column\"===r.slidesPerColumnFill},{android:l.android},{ios:l.ios},{\"css-mode\":r.cssMode}],t=r.containerModifierClass,a=[],e.forEach((function(e){\"object\"==typeof e?Object.keys(e).forEach((function(i){e[i]&&a.push(t+i)})):\"string\"==typeof e&&a.push(t+e)})),a);s.push.apply(s,p),o.addClass([].concat(s).join(\" \")),i.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,a=e.classNames;t.removeClass(a.join(\" \")),e.emitContainerClasses()}},images:{loadImage:function(e,t,a,i,s,r){var n,l=o();function d(){r&&r()}m(e).parent(\"picture\")[0]||e.complete&&s?d():t?((n=new l.Image).onload=d,n.onerror=d,i&&(n.sizes=i),a&&(n.srcset=a),t&&(n.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit(\"imagesReady\")))}e.imagesToLoad=e.$el.find(\"img\");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute(\"src\"),i.srcset||i.getAttribute(\"srcset\"),i.sizes||i.getAttribute(\"sizes\"),!0,t)}}}},W={},F=function(){function t(){for(var e,a,i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];if(1===s.length&&s[0].constructor&&\"Object\"===Object.prototype.toString.call(s[0]).slice(8,-1)?a=s[0]:(e=s[0],a=s[1]),a||(a={}),a=C({},a),e&&!a.el&&(a.el=e),a.el&&m(a.el).length>1){var n=[];return m(a.el).each((function(e){var i=C({},a,{el:e});n.push(new t(i))})),n}var o=this;o.__swiper__=!0,o.support=P(),o.device=k({userAgent:a.userAgent}),o.browser=L(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(e){var t=o.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if(\"object\"!=typeof s||null===s)return;if(!(i in a)||!(\"enabled\"in s))return;!0===a[i]&&(a[i]={enabled:!0}),\"object\"!=typeof a[i]||\"enabled\"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}}));var l,d,p=C({},R);return o.useParams(p),o.params=C({},p,W,a),o.originalParams=C({},o.params),o.passedParams=C({},a),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=m,C(o,{el:e,classNames:[],slides:m(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return\"horizontal\"===o.params.direction},isVertical:function(){return\"vertical\"===o.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=[\"touchstart\",\"touchmove\",\"touchend\",\"touchcancel\"],d=[\"mousedown\",\"mousemove\",\"mouseup\"],o.support.pointerEvents&&(d=[\"pointerdown\",\"pointermove\",\"pointerup\"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},o.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:\"input, select, option, textarea, button, video, label\",lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit(\"_swiper\"),o.params.init&&o.init(),o}var a,i,s,r=t.prototype;return r.setProgress=function(e,t){var a=this;e=Math.min(Math.max(e,0),1);var i=a.minTranslate(),s=(a.maxTranslate()-i)*e+i;a.translateTo(s,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()},r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(\" \").filter((function(t){return 0===t.indexOf(\"swiper-container\")||0===t.indexOf(e.params.containerModifierClass)}));e.emit(\"_containerClasses\",t.join(\" \"))}},r.getSlideClasses=function(e){var t=this;return e.className.split(\" \").filter((function(e){return 0===e.indexOf(\"swiper-slide\")||0===e.indexOf(t.params.slideClass)})).join(\" \")},r.emitSlidesClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=[];e.slides.each((function(a){var i=e.getSlideClasses(a);t.push({slideEl:a,classNames:i}),e.emit(\"_slideClass\",a,i)})),e.emit(\"_slideClasses\",t)}},r.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,r=e.activeIndex,n=1;if(t.centeredSlides){for(var o,l=a[r].swiperSlideSize,d=r+1;d<a.length;d+=1)a[d]&&!o&&(n+=1,(l+=a[d].swiperSlideSize)>s&&(o=!0));for(var p=r-1;p>=0;p-=1)a[p]&&!o&&(n+=1,(l+=a[p].swiperSlideSize)>s&&(o=!0))}else for(var c=r+1;c<a.length;c+=1)i[c]-i[r]<s&&(n+=1);return n},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,a=e.params;a.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):((\"auto\"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),a.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit(\"update\")}function i(){var t=e.rtlTranslate?-1*e.translate:e.translate,a=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(a),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.direction;return e||(e=\"horizontal\"===i?\"vertical\":\"horizontal\"),e===i||\"horizontal\"!==e&&\"vertical\"!==e||(a.$el.removeClass(\"\"+a.params.containerModifierClass+i).addClass(\"\"+a.params.containerModifierClass+e),a.emitContainerClasses(),a.params.direction=e,a.slides.each((function(t){\"vertical\"===e?t.style.width=\"\":t.style.height=\"\"})),a.emit(\"changeDirection\"),t&&a.update()),a},r.mount=function(e){var t=this;if(t.mounted)return!0;var a,i=m(e||t.params.el);return!!(e=i[0])&&(e.swiper=t,e&&e.shadowRoot&&e.shadowRoot.querySelector?(a=m(e.shadowRoot.querySelector(\".\"+t.params.wrapperClass))).children=function(e){return i.children(e)}:a=i.children(\".\"+t.params.wrapperClass),C(t,{$el:i,el:e,$wrapperEl:a,wrapperEl:a[0],mounted:!0,rtl:\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\"),rtlTranslate:\"horizontal\"===t.params.direction&&(\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\")),wrongRTL:\"-webkit-box\"===a.css(\"display\")}),!0)},r.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit(\"beforeInit\"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit),t.attachEvents(),t.initialized=!0,t.emit(\"init\"),t.emit(\"afterInit\")),t},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a,i=this,s=i.params,r=i.$el,n=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit(\"beforeDestroy\"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr(\"style\"),n.removeAttr(\"style\"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")),i.emit(\"destroy\"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,a=i,Object.keys(a).forEach((function(e){try{a[e]=null}catch(e){}try{delete a[e]}catch(e){}}))),i.destroyed=!0),null},t.extendDefaults=function(e){C(W,e)},t.installModule=function(e){t.prototype.modules||(t.prototype.modules={});var a=e.name||Object.keys(t.prototype.modules).length+\"_\"+x();t.prototype.modules[a]=e},t.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return t.installModule(e)})),t):(t.installModule(e),t)},a=t,s=[{key:\"extendedDefaults\",get:function(){return W}},{key:\"defaults\",get:function(){return R}}],(i=null)&&e(a.prototype,i),s&&e(a,s),t}();Object.keys(V).forEach((function(e){Object.keys(V[e]).forEach((function(t){F.prototype[t]=V[e][t]}))})),F.use([$,O]);var _={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,r=a.centeredSlides,n=t.params.virtual,o=n.addSlidesBefore,l=n.addSlidesAfter,d=t.virtual,p=d.from,c=d.to,u=d.slides,h=d.slidesGrid,v=d.renderSlide,f=d.offset;t.updateActiveIndex();var m,g,b,w=t.activeIndex||0;m=t.rtlTranslate?\"right\":t.isHorizontal()?\"left\":\"top\",r?(g=Math.floor(i/2)+s+l,b=Math.floor(i/2)+s+o):(g=i+(s-1)+l,b=s+o);var y=Math.max((w||0)-b,0),E=Math.min((w||0)+g,u.length-1),x=(t.slidesGrid[y]||0)-(t.slidesGrid[0]||0);function T(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(C(t.virtual,{from:y,to:E,offset:x,slidesGrid:t.slidesGrid}),p===y&&c===E&&!e)return t.slidesGrid!==h&&x!==f&&t.slides.css(m,x+\"px\"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:y,to:E,slides:function(){for(var e=[],t=y;t<=E;t+=1)e.push(u[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&T());var S=[],M=[];if(e)t.$wrapperEl.find(\".\"+t.params.slideClass).remove();else for(var z=p;z<=c;z+=1)(z<y||z>E)&&t.$wrapperEl.find(\".\"+t.params.slideClass+'[data-swiper-slide-index=\"'+z+'\"]').remove();for(var P=0;P<u.length;P+=1)P>=y&&P<=E&&(void 0===c||e?M.push(P):(P>c&&M.push(P),P<p&&S.push(P)));M.forEach((function(e){t.$wrapperEl.append(v(u[e],e))})),S.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(v(u[e],e))})),t.$wrapperEl.children(\".swiper-slide\").css(m,x+\"px\"),T()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];var s=i.renderSlide?m(i.renderSlide.call(a,e,t)):m('<div class=\"'+a.params.slideClass+'\" data-swiper-slide-index=\"'+t+'\">'+e+\"</div>\");return s.attr(\"data-swiper-slide-index\")||s.attr(\"data-swiper-slide-index\",t),i.cache&&(a.virtual.cache[t]=s),s},appendSlide:function(e){var t=this;if(\"object\"==typeof e&&\"length\"in e)for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.push(e[a]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide:function(e){var t=this,a=t.activeIndex,i=a+1,s=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&t.virtual.slides.unshift(e[r]);i=a+e.length,s=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var n=t.virtual.cache,o={};Object.keys(n).forEach((function(e){var t=n[e],a=t.attr(\"data-swiper-slide-index\");a&&t.attr(\"data-swiper-slide-index\",parseInt(a,10)+1),o[parseInt(e,10)+s]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(i,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&(a-=1),a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&(a-=1),a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},q={name:\"virtual\",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){M(this,{virtual:t({},_,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+\"virtual\");var t={watchSlidesProgress:!0};C(e.params,t),C(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},j={handle:function(e){var t=this,a=o(),i=r(),s=t.rtlTranslate,n=e;n.originalEvent&&(n=n.originalEvent);var l=n.keyCode||n.charCode,d=t.params.keyboard.pageUpDown,p=d&&33===l,c=d&&34===l,u=37===l,h=39===l,v=38===l,f=40===l;if(!t.allowSlideNext&&(t.isHorizontal()&&h||t.isVertical()&&f||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&u||t.isVertical()&&v||p))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&(\"input\"===i.activeElement.nodeName.toLowerCase()||\"textarea\"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(p||c||u||h||v||f)){var m=!1;if(t.$el.parents(\".\"+t.params.slideClass).length>0&&0===t.$el.parents(\".\"+t.params.slideActiveClass).length)return;var g=t.$el,b=g[0].clientWidth,w=g[0].clientHeight,y=a.innerWidth,E=a.innerHeight,x=t.$el.offset();s&&(x.left-=t.$el[0].scrollLeft);for(var T=[[x.left,x.top],[x.left+b,x.top],[x.left,x.top+w],[x.left+b,x.top+w]],S=0;S<T.length;S+=1){var C=T[S];if(C[0]>=0&&C[0]<=y&&C[1]>=0&&C[1]<=E){if(0===C[0]&&0===C[1])continue;m=!0}}if(!m)return}t.isHorizontal()?((p||c||u||h)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||h)&&!s||(p||u)&&s)&&t.slideNext(),((p||u)&&!s||(c||h)&&s)&&t.slidePrev()):((p||c||v||f)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||f)&&t.slideNext(),(p||v)&&t.slidePrev()),t.emit(\"keyPress\",l)}},enable:function(){var e=this,t=r();e.keyboard.enabled||(m(t).on(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=r();e.keyboard.enabled&&(m(t).off(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!1)}},U={name:\"keyboard\",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){M(this,{keyboard:t({enabled:!1},j)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}};var K={lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return o().navigator.userAgent.indexOf(\"firefox\")>-1?\"DOMMouseScroll\":function(){var e=r(),t=\"onwheel\",a=t in e;if(!a){var i=e.createElement(\"div\");i.setAttribute(t,\"return;\"),a=\"function\"==typeof i.onwheel}return!a&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature(\"\",\"\")&&(a=e.implementation.hasFeature(\"Events.wheel\",\"3.0\")),a}()?\"wheel\":\"mousewheel\"},normalize:function(e){var t=0,a=0,i=0,s=0;return\"detail\"in e&&(a=e.detail),\"wheelDelta\"in e&&(a=-e.wheelDelta/120),\"wheelDeltaY\"in e&&(a=-e.wheelDeltaY/120),\"wheelDeltaX\"in e&&(t=-e.wheelDeltaX/120),\"axis\"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,\"deltaY\"in e&&(s=e.deltaY),\"deltaX\"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=s,s=0),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!a&&(a=s<1?-1:1),{spinX:t,spinY:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;a.params.cssMode&&t.preventDefault();var s=a.$el;if(\"container\"!==a.params.mousewheel.eventsTarget&&(s=m(a.params.mousewheel.eventsTarget)),!a.mouseEntered&&!s[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,n=a.rtlTranslate?-1:1,o=K.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*n}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*n:-o.pixelY;if(0===r)return!0;i.invert&&(r=-r);var l=a.getTranslate()+r*i.sensitivity;if(l>=a.minTranslate()&&(l=a.minTranslate()),l<=a.maxTranslate()&&(l=a.maxTranslate()),(!!a.params.loop||!(l===a.minTranslate()||l===a.maxTranslate()))&&a.params.nested&&t.stopPropagation(),a.params.freeMode){var d={time:x(),delta:Math.abs(r),direction:Math.sign(r)},p=a.mousewheel.lastEventBeforeSnap,c=p&&d.time<p.time+500&&d.delta<=p.delta&&d.direction===p.direction;if(!c){a.mousewheel.lastEventBeforeSnap=void 0,a.params.loop&&a.loopFix();var u=a.getTranslate()+r*i.sensitivity,h=a.isBeginning,v=a.isEnd;if(u>=a.minTranslate()&&(u=a.minTranslate()),u<=a.maxTranslate()&&(u=a.maxTranslate()),a.setTransition(0),a.setTranslate(u),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!h&&a.isBeginning||!v&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky){clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=void 0;var f=a.mousewheel.recentWheelEvents;f.length>=15&&f.shift();var g=f.length?f[f.length-1]:void 0,b=f[0];if(f.push(d),g&&(d.delta>g.delta||d.direction!==g.direction))f.splice(0);else if(f.length>=15&&d.time-b.time<500&&b.delta-d.delta>=1&&d.delta<=6){var w=r>0?.8:.2;a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.mousewheel.timeout=E((function(){a.slideToClosest(a.params.speed,!0,void 0,w)}),0)}a.mousewheel.timeout||(a.mousewheel.timeout=E((function(){a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.slideToClosest(a.params.speed,!0,void 0,.5)}),500))}if(c||a.emit(\"scroll\",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),u===a.minTranslate()||u===a.maxTranslate())return!0}}else{var y={time:x(),delta:Math.abs(r),direction:Math.sign(r),raw:e},T=a.mousewheel.recentWheelEvents;T.length>=2&&T.shift();var S=T.length?T[T.length-1]:void 0;if(T.push(y),S?(y.direction!==S.direction||y.delta>S.delta||y.time>S.time+150)&&a.mousewheel.animateSlider(y):a.mousewheel.animateSlider(y),a.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,a=o();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta)&&(!(this.params.mousewheel.thresholdTime&&x()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime)&&(e.delta>=6&&x()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit(\"scroll\",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit(\"scroll\",e.raw)),t.mousewheel.lastScrollTime=(new a.Date).getTime(),!1)))},releaseScroll:function(e){var t=this,a=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&a.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&a.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.on(\"mouseenter\",e.mousewheel.handleMouseEnter),a.on(\"mouseleave\",e.mousewheel.handleMouseLeave),a.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},Z={toggleEl:function(e,t){e[t?\"addClass\":\"removeClass\"](this.params.navigation.disabledClass),e[0]&&\"BUTTON\"===e[0].tagName&&(e[0].disabled=t)},update:function(){var e=this,t=e.params.navigation,a=e.navigation.toggleEl;if(!e.params.loop){var i=e.navigation,s=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?a(r,!0):a(r,!1),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass)),s&&s.length>0&&(e.isEnd?a(s,!0):a(s,!1),s[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=m(i.nextEl),a.params.uniqueNavElements&&\"string\"==typeof i.nextEl&&e.length>1&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=m(i.prevEl),a.params.uniqueNavElements&&\"string\"==typeof i.prevEl&&t.length>1&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&e.length>0&&e.on(\"click\",a.navigation.onNextClick),t&&t.length>0&&t.on(\"click\",a.navigation.onPrevClick),C(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,i=t.$prevEl;a&&a.length&&(a.off(\"click\",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off(\"click\",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},J={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i,s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,n=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((i=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>s-1-2*e.loopedSlides&&(i-=s-2*e.loopedSlides),i>n-1&&(i-=n),i<0&&\"bullets\"!==e.params.paginationType&&(i=n+i)):i=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,\"bullets\"===a.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,p=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=p.eq(0)[e.isHorizontal()?\"outerWidth\":\"outerHeight\"](!0),r.css(e.isHorizontal()?\"width\":\"height\",e.pagination.bulletSize*(a.dynamicMainBullets+4)+\"px\"),a.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=i-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=i-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(p.length,a.dynamicMainBullets)-1))+o)/2),p.removeClass(a.bulletActiveClass+\" \"+a.bulletActiveClass+\"-next \"+a.bulletActiveClass+\"-next-next \"+a.bulletActiveClass+\"-prev \"+a.bulletActiveClass+\"-prev-prev \"+a.bulletActiveClass+\"-main\"),r.length>1)p.each((function(e){var t=m(e),s=t.index();s===i&&t.addClass(a.bulletActiveClass),a.dynamicBullets&&(s>=o&&s<=l&&t.addClass(a.bulletActiveClass+\"-main\"),s===o&&t.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),s===l&&t.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\"))}));else{var c=p.eq(i),u=c.index();if(c.addClass(a.bulletActiveClass),a.dynamicBullets){for(var h=p.eq(o),v=p.eq(l),f=o;f<=l;f+=1)p.eq(f).addClass(a.bulletActiveClass+\"-main\");if(e.params.loop)if(u>=p.length-a.dynamicMainBullets){for(var g=a.dynamicMainBullets;g>=0;g-=1)p.eq(p.length-g).addClass(a.bulletActiveClass+\"-main\");p.eq(p.length-a.dynamicMainBullets-1).addClass(a.bulletActiveClass+\"-prev\")}else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\");else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\")}}if(a.dynamicBullets){var b=Math.min(p.length,a.dynamicMainBullets+4),w=(e.pagination.bulletSize*b-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,y=t?\"right\":\"left\";p.css(e.isHorizontal()?y:\"top\",w+\"px\")}}if(\"fraction\"===a.type&&(r.find(z(a.currentClass)).text(a.formatFractionCurrent(i+1)),r.find(z(a.totalClass)).text(a.formatFractionTotal(n))),\"progressbar\"===a.type){var E;E=a.progressbarOpposite?e.isHorizontal()?\"vertical\":\"horizontal\":e.isHorizontal()?\"horizontal\":\"vertical\";var x=(i+1)/n,T=1,S=1;\"horizontal\"===E?T=x:S=x,r.find(z(a.progressbarFillClass)).transform(\"translate3d(0,0,0) scaleX(\"+T+\") scaleY(\"+S+\")\").transition(e.params.speed)}\"custom\"===a.type&&a.renderCustom?(r.html(a.renderCustom(e,i+1,n)),e.emit(\"paginationRender\",r[0])):e.emit(\"paginationUpdate\",r[0]),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,s=\"\";if(\"bullets\"===t.type){var r=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&r>a&&(r=a);for(var n=0;n<r;n+=1)t.renderBullet?s+=t.renderBullet.call(e,n,t.bulletClass):s+=\"<\"+t.bulletElement+' class=\"'+t.bulletClass+'\"></'+t.bulletElement+\">\";i.html(s),e.pagination.bullets=i.find(z(t.bulletClass))}\"fraction\"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class=\"'+t.currentClass+'\"></span> / <span class=\"'+t.totalClass+'\"></span>',i.html(s)),\"progressbar\"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class=\"'+t.progressbarFillClass+'\"></span>',i.html(s)),\"custom\"!==t.type&&e.emit(\"paginationRender\",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var a=m(t.el);0!==a.length&&(e.params.uniqueNavElements&&\"string\"==typeof t.el&&a.length>1&&(a=e.$el.find(t.el)),\"bullets\"===t.type&&t.clickable&&a.addClass(t.clickableClass),a.addClass(t.modifierClass+t.type),\"bullets\"===t.type&&t.dynamicBullets&&(a.addClass(\"\"+t.modifierClass+t.type+\"-dynamic\"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),\"progressbar\"===t.type&&t.progressbarOpposite&&a.addClass(t.progressbarOppositeClass),t.clickable&&a.on(\"click\",z(t.bulletClass),(function(t){t.preventDefault();var a=m(this).index()*e.params.slidesPerGroup;e.params.loop&&(a+=e.loopedSlides),e.slideTo(a)})),C(e.pagination,{$el:a,el:a[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.pagination.$el;a.removeClass(t.hiddenClass),a.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&a.off(\"click\",z(t.bulletClass))}}},Q={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=e.rtlTranslate,i=e.progress,s=t.dragSize,r=t.trackSize,n=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=s,p=(r-s)*i;a?(p=-p)>0?(d=s-p,p=0):-p+s>r&&(d=r+p):p<0?(d=s+p,p=0):p+s>r&&(d=r-p),e.isHorizontal()?(n.transform(\"translate3d(\"+p+\"px, 0, 0)\"),n[0].style.width=d+\"px\"):(n.transform(\"translate3d(0px, \"+p+\"px, 0)\"),n[0].style.height=d+\"px\"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=t.$dragEl,i=t.$el;a[0].style.width=\"\",a[0].style.height=\"\";var s,r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,n=e.size/e.virtualSize,o=n*(r/e.size);s=\"auto\"===e.params.scrollbar.dragSize?r*n:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?a[0].style.width=s+\"px\":a[0].style.height=s+\"px\",i[0].style.display=n>=1?\"none\":\"\",e.params.scrollbar.hide&&(i[0].style.opacity=0),C(t,{trackSize:r,divider:n,moveDivider:o,dragSize:s}),t.$el[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientX:e.clientX:\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,a=this,i=a.scrollbar,s=a.rtlTranslate,r=i.$el,n=i.dragSize,o=i.trackSize,l=i.dragStartPos;t=(i.getPointerPosition(e)-r.offset()[a.isHorizontal()?\"left\":\"top\"]-(null!==l?l:n/2))/(o-n),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var d=a.minTranslate()+(a.maxTranslate()-a.minTranslate())*t;a.updateProgress(d),a.setTranslate(d),a.updateActiveIndex(),a.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el,n=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===n[0]||e.target===n?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?\"left\":\"top\"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),n.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),a.hide&&r.css(\"opacity\",1),t.params.cssMode&&t.$wrapperEl.css(\"scroll-snap-type\",\"none\"),t.emit(\"scrollbarDragStart\",e)},onDragMove:function(e){var t=this,a=t.scrollbar,i=t.$wrapperEl,s=a.$el,r=a.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,a.setDragPosition(e),i.transition(0),s.transition(0),r.transition(0),t.emit(\"scrollbarDragMove\",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css(\"scroll-snap-type\",\"\"),s.transition(\"\")),a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=E((function(){r.css(\"opacity\",0),r.transition(400)}),1e3)),t.emit(\"scrollbarDragEnd\",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.addEventListener(i.start,e.scrollbar.onDragStart,d),l.addEventListener(i.move,e.scrollbar.onDragMove,d),l.addEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.addEventListener(s.start,e.scrollbar.onDragStart,d),t.addEventListener(s.move,e.scrollbar.onDragMove,d),t.addEventListener(s.end,e.scrollbar.onDragEnd,p)))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.removeEventListener(i.start,e.scrollbar.onDragStart,d),l.removeEventListener(i.move,e.scrollbar.onDragMove,d),l.removeEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.removeEventListener(s.start,e.scrollbar.onDragStart,d),t.removeEventListener(s.move,e.scrollbar.onDragMove,d),t.removeEventListener(s.end,e.scrollbar.onDragEnd,p)))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,a=e.$el,i=e.params.scrollbar,s=m(i.el);e.params.uniqueNavElements&&\"string\"==typeof i.el&&s.length>1&&1===a.find(i.el).length&&(s=a.find(i.el));var r=s.find(\".\"+e.params.scrollbar.dragClass);0===r.length&&(r=m('<div class=\"'+e.params.scrollbar.dragClass+'\"></div>'),s.append(r)),C(t,{$el:s,el:s[0],$dragEl:r,dragEl:r[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ee={setTransform:function(e,t){var a=this.rtl,i=m(e),s=a?-1:1,r=i.attr(\"data-swiper-parallax\")||\"0\",n=i.attr(\"data-swiper-parallax-x\"),o=i.attr(\"data-swiper-parallax-y\"),l=i.attr(\"data-swiper-parallax-scale\"),d=i.attr(\"data-swiper-parallax-opacity\");if(n||o?(n=n||\"0\",o=o||\"0\"):this.isHorizontal()?(n=r,o=\"0\"):(o=r,n=\"0\"),n=n.indexOf(\"%\")>=0?parseInt(n,10)*t*s+\"%\":n*t*s+\"px\",o=o.indexOf(\"%\")>=0?parseInt(o,10)*t+\"%\":o*t+\"px\",null!=d){var p=d-(d-1)*(1-Math.abs(t));i[0].style.opacity=p}if(null==l)i.transform(\"translate3d(\"+n+\", \"+o+\", 0px)\");else{var c=l-(l-1)*(1-Math.abs(t));i.transform(\"translate3d(\"+n+\", \"+o+\", 0px) scale(\"+c+\")\")}},setTranslate:function(){var e=this,t=e.$el,a=e.slides,i=e.progress,s=e.snapGrid;t.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,i)})),a.each((function(t,a){var r=t.progress;e.params.slidesPerGroup>1&&\"auto\"!==e.params.slidesPerView&&(r+=Math.ceil(a/2)-i*(s.length-1)),r=Math.min(Math.max(r,-1),1),m(t).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,r)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){var a=m(t),i=parseInt(a.attr(\"data-swiper-parallax-duration\"),10)||e;0===e&&(i=0),a.transition(i)}))}},te={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(s-a,2))},onGestureStart:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!a.gestures){if(\"touchstart\"!==e.type||\"touchstart\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,r.scaleStart=te.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=m(e.target).closest(\".\"+t.params.slideClass),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),r.$imageWrapEl=r.$imageEl.parent(\".\"+i.containerClass),r.maxRatio=r.$imageWrapEl.attr(\"data-swiper-zoom\")||i.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl&&r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(!a.gestures){if(\"touchmove\"!==e.type||\"touchmove\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureMoved=!0,r.scaleMove=te.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length?(a.gestures?s.scale=e.scale*s.currentScale:s.scale=r.scaleMove/r.scaleStart*s.currentScale,s.scale>r.maxRatio&&(s.scale=r.maxRatio-1+Math.pow(s.scale-r.maxRatio+1,.5)),s.scale<i.minRatio&&(s.scale=i.minRatio+1-Math.pow(i.minRatio-s.scale+1,.5)),r.$imageEl.transform(\"translate3d(0,0,0) scale(\"+s.scale+\")\")):\"gesturechange\"===e.type&&s.onGestureStart(e)},onGestureEnd:function(e){var t=this,a=t.device,i=t.support,s=t.params.zoom,r=t.zoom,n=r.gesture;if(!i.gestures){if(!r.fakeGestureTouched||!r.fakeGestureMoved)return;if(\"touchend\"!==e.type||\"touchend\"===e.type&&e.changedTouches.length<2&&!a.android)return;r.fakeGestureTouched=!1,r.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(r.scale=Math.max(Math.min(r.scale,n.maxRatio),s.minRatio),n.$imageEl.transition(t.params.speed).transform(\"translate3d(0,0,0) scale(\"+r.scale+\")\"),r.currentScale=r.scale,r.isScaling=!1,1===r.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,a=this.zoom,i=a.gesture,s=a.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(t.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x=\"touchstart\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y=\"touchstart\"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,r=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=T(i.$imageWrapEl[0],\"x\")||0,s.startY=T(i.$imageWrapEl[0],\"y\")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*a.scale,o=s.height*a.scale;if(!(n<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x=\"touchmove\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y=\"touchmove\"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=s.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=s.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(s.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(s.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(s.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(s.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=s.touchesCurrent.x,r.prevPositionY=s.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform(\"translate3d(\"+s.currentX+\"px, \"+s.currentY+\"px,0)\")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,r=300,n=i.x*s,o=a.currentX+n,l=i.y*r,d=a.currentY+l;0!==i.x&&(s=Math.abs((o-a.currentX)/i.x)),0!==i.y&&(r=Math.abs((d-a.currentY)/i.y));var p=Math.max(s,r);a.currentX=o,a.currentY=d;var c=a.width*e.scale,u=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-c/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-u/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(p).transform(\"translate3d(\"+a.currentX+\"px, \"+a.currentY+\"px,0)\")}},onTransitionEnd:function(){var e=this,t=e.zoom,a=t.gesture;a.$slideEl&&e.previousIndex!==e.activeIndex&&(a.$imageEl&&a.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"),a.$imageWrapEl&&a.$imageWrapEl.transform(\"translate3d(0,0,0)\"),t.scale=1,t.currentScale=1,a.$slideEl=void 0,a.$imageEl=void 0,a.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s,r,n,l,d,p,c,u,h,v,f,m,g,b=this,w=o(),y=b.zoom,E=b.params.zoom,x=y.gesture,T=y.image;(x.$slideEl||(b.params.virtual&&b.params.virtual.enabled&&b.virtual?x.$slideEl=b.$wrapperEl.children(\".\"+b.params.slideActiveClass):x.$slideEl=b.slides.eq(b.activeIndex),x.$imageEl=x.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),x.$imageWrapEl=x.$imageEl.parent(\".\"+E.containerClass)),x.$imageEl&&0!==x.$imageEl.length)&&(x.$slideEl.addClass(\"\"+E.zoomedSlideClass),void 0===T.touchesStart.x&&e?(t=\"touchend\"===e.type?e.changedTouches[0].pageX:e.pageX,a=\"touchend\"===e.type?e.changedTouches[0].pageY:e.pageY):(t=T.touchesStart.x,a=T.touchesStart.y),y.scale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,y.currentScale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,e?(m=x.$slideEl[0].offsetWidth,g=x.$slideEl[0].offsetHeight,i=x.$slideEl.offset().left+w.scrollX+m/2-t,s=x.$slideEl.offset().top+w.scrollY+g/2-a,l=x.$imageEl[0].offsetWidth,d=x.$imageEl[0].offsetHeight,p=l*y.scale,c=d*y.scale,v=-(u=Math.min(m/2-p/2,0)),f=-(h=Math.min(g/2-c/2,0)),(r=i*y.scale)<u&&(r=u),r>v&&(r=v),(n=s*y.scale)<h&&(n=h),n>f&&(n=f)):(r=0,n=0),x.$imageWrapEl.transition(300).transform(\"translate3d(\"+r+\"px, \"+n+\"px,0)\"),x.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\"+y.scale+\")\"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?i.$slideEl=e.$wrapperEl.children(\".\"+e.params.slideActiveClass):i.$slideEl=e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),i.$imageWrapEl=i.$imageEl.parent(\".\"+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"),i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"),i.$slideEl.removeClass(\"\"+a.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(e){var t=this,a=t.zoom,i=a.slideSelector,s=a.passiveListener;t.$wrapperEl[e](\"gesturestart\",i,a.onGestureStart,s),t.$wrapperEl[e](\"gesturechange\",i,a.onGestureChange,s),t.$wrapperEl[e](\"gestureend\",i,a.onGestureEnd,s)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures(\"on\"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures(\"off\"))},enable:function(){var e=this,t=e.support,a=e.zoom;if(!a.enabled){a.enabled=!0;var i=!(\"touchstart\"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!t.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;e.zoom.passiveListener=i,e.zoom.slideSelector=r,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,r,a.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,r,a.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,r,a.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,r,a.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,\".\"+e.params.zoom.containerClass,a.onTouchMove,s)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var a=e.support;e.zoom.enabled=!1;var i=!(\"touchstart\"!==e.touchEvents.start||!a.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!a.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;a.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,r,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,r,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,r,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,r,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,\".\"+e.params.zoom.containerClass,t.onTouchMove,s)}}},ae={loadInSlide:function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.lazy;if(void 0!==e&&0!==a.slides.length){var s=a.virtual&&a.params.virtual.enabled?a.$wrapperEl.children(\".\"+a.params.slideClass+'[data-swiper-slide-index=\"'+e+'\"]'):a.slides.eq(e),r=s.find(\".\"+i.elementClass+\":not(.\"+i.loadedClass+\"):not(.\"+i.loadingClass+\")\");!s.hasClass(i.elementClass)||s.hasClass(i.loadedClass)||s.hasClass(i.loadingClass)||r.push(s[0]),0!==r.length&&r.each((function(e){var r=m(e);r.addClass(i.loadingClass);var n=r.attr(\"data-background\"),o=r.attr(\"data-src\"),l=r.attr(\"data-srcset\"),d=r.attr(\"data-sizes\"),p=r.parent(\"picture\");a.loadImage(r[0],o||n,l,d,!1,(function(){if(null!=a&&a&&(!a||a.params)&&!a.destroyed){if(n?(r.css(\"background-image\",'url(\"'+n+'\")'),r.removeAttr(\"data-background\")):(l&&(r.attr(\"srcset\",l),r.removeAttr(\"data-srcset\")),d&&(r.attr(\"sizes\",d),r.removeAttr(\"data-sizes\")),p.length&&p.children(\"source\").each((function(e){var t=m(e);t.attr(\"data-srcset\")&&(t.attr(\"srcset\",t.attr(\"data-srcset\")),t.removeAttr(\"data-srcset\"))})),o&&(r.attr(\"src\",o),r.removeAttr(\"data-src\"))),r.addClass(i.loadedClass).removeClass(i.loadingClass),s.find(\".\"+i.preloaderClass).remove(),a.params.loop&&t){var e=s.attr(\"data-swiper-slide-index\");if(s.hasClass(a.params.slideDuplicateClass)){var c=a.$wrapperEl.children('[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.params.slideDuplicateClass+\")\");a.lazy.loadInSlide(c.index(),!1)}else{var u=a.$wrapperEl.children(\".\"+a.params.slideDuplicateClass+'[data-swiper-slide-index=\"'+e+'\"]');a.lazy.loadInSlide(u.index(),!1)}}a.emit(\"lazyImageReady\",s[0],r[0]),a.params.autoHeight&&a.updateAutoHeight()}})),a.emit(\"lazyImageLoad\",s[0],r[0])}))}},load:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides,s=e.activeIndex,r=e.virtual&&a.virtual.enabled,n=a.lazy,o=a.slidesPerView;function l(e){if(r){if(t.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]').length)return!0}else if(i[e])return!0;return!1}function d(e){return r?m(e).attr(\"data-swiper-slide-index\"):m(e).index()}if(\"auto\"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children(\".\"+a.slideVisibleClass).each((function(t){var a=r?m(t).attr(\"data-swiper-slide-index\"):m(t).index();e.lazy.loadInSlide(a)}));else if(o>1)for(var p=s;p<s+o;p+=1)l(p)&&e.lazy.loadInSlide(p);else e.lazy.loadInSlide(s);if(n.loadPrevNext)if(o>1||n.loadPrevNextAmount&&n.loadPrevNextAmount>1){for(var c=n.loadPrevNextAmount,u=o,h=Math.min(s+u+Math.max(c,u),i.length),v=Math.max(s-Math.max(u,c),0),f=s+o;f<h;f+=1)l(f)&&e.lazy.loadInSlide(f);for(var g=v;g<s;g+=1)l(g)&&e.lazy.loadInSlide(g)}else{var b=t.children(\".\"+a.slideNextClass);b.length>0&&e.lazy.loadInSlide(d(b));var w=t.children(\".\"+a.slidePrevClass);w.length>0&&e.lazy.loadInSlide(d(w))}},checkInViewOnLoad:function(){var e=o(),t=this;if(t&&!t.destroyed){var a=t.params.lazy.scrollingElement?m(t.params.lazy.scrollingElement):m(e),i=a[0]===e,s=i?e.innerWidth:a[0].offsetWidth,r=i?e.innerHeight:a[0].offsetHeight,n=t.$el.offset(),l=!1;t.rtlTranslate&&(n.left-=t.$el[0].scrollLeft);for(var d=[[n.left,n.top],[n.left+t.width,n.top],[n.left,n.top+t.height],[n.left+t.width,n.top+t.height]],p=0;p<d.length;p+=1){var c=d[p];if(c[0]>=0&&c[0]<=s&&c[1]>=0&&c[1]<=r){if(0===c[0]&&0===c[1])continue;l=!0}}l?(t.lazy.load(),a.off(\"scroll\",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,a.on(\"scroll\",t.lazy.checkInViewOnLoad))}}},ie={LinearSpline:function(e,t){var a,i,s,r,n,o=function(e,t){for(i=-1,a=e.length;a-i>1;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ie.LinearSpline(t.slidesGrid,e.slidesGrid):new ie.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,r=s.controller.control,n=s.constructor;function o(e){var t=s.rtlTranslate?-s.translate:s.translate;\"slide\"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&\"container\"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof n&&o(r[l]);else r instanceof n&&t!==r&&o(r)},setTransition:function(e,t){var a,i=this,s=i.constructor,r=i.controller.control;function n(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&E((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){r&&(t.params.loop&&\"slide\"===i.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(r))for(a=0;a<r.length;a+=1)r[a]!==t&&r[a]instanceof s&&n(r[a]);else r instanceof s&&t!==r&&n(r)}},se={getRandomNumber:function(e){void 0===e&&(e=16);return\"x\".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr(\"tabIndex\",\"0\"),e},makeElNotFocusable:function(e){return e.attr(\"tabIndex\",\"-1\"),e},addElRole:function(e,t){return e.attr(\"role\",t),e},addElRoleDescription:function(e,t){return e.attr(\"aria-roledescription\",t),e},addElControls:function(e,t){return e.attr(\"aria-controls\",t),e},addElLabel:function(e,t){return e.attr(\"aria-label\",t),e},addElId:function(e,t){return e.attr(\"id\",t),e},addElLive:function(e,t){return e.attr(\"aria-live\",t),e},disableEl:function(e){return e.attr(\"aria-disabled\",!0),e},enableEl:function(e){return e.attr(\"aria-disabled\",!1),e},onEnterOrSpaceKey:function(e){if(13===e.keyCode||32===e.keyCode){var t=this,a=t.params.a11y,i=m(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(a.lastSlideMessage):t.a11y.notify(a.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(a.firstSlideMessage):t.a11y.notify(a.prevSlideMessage)),t.pagination&&i.is(z(t.params.pagination.bulletClass))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(\"\"),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,a=t.$nextEl,i=t.$prevEl;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),a&&a.length>0&&(e.isEnd?(e.a11y.disableEl(a),e.a11y.makeElNotFocusable(a)):(e.a11y.enableEl(a),e.a11y.makeElFocusable(a)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(a){var i=m(a);e.a11y.makeElFocusable(i),e.params.pagination.renderBullet||(e.a11y.addElRole(i,\"button\"),e.a11y.addElLabel(i,t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/,i.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var a=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(a,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(a,t.containerMessage);var i,s,r,n=e.$wrapperEl,o=n.attr(\"id\")||\"swiper-wrapper-\"+e.a11y.getRandomNumber(16);e.a11y.addElId(n,o),i=e.params.autoplay&&e.params.autoplay.enabled?\"off\":\"polite\",e.a11y.addElLive(n,i),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(m(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(m(e.slides),t.slideRole),e.slides.each((function(a){var i=m(a),s=t.slideLabelMessage.replace(/\\{\\{index\\}\\}/,i.index()+1).replace(/\\{\\{slidesLength\\}\\}/,e.slides.length);e.a11y.addElLabel(i,s)})),e.navigation&&e.navigation.$nextEl&&(s=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(r=e.navigation.$prevEl),s&&s.length&&(e.a11y.makeElFocusable(s),\"BUTTON\"!==s[0].tagName&&(e.a11y.addElRole(s,\"button\"),s.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(s,t.nextSlideMessage),e.a11y.addElControls(s,o)),r&&r.length&&(e.a11y.makeElFocusable(r),\"BUTTON\"!==r[0].tagName&&(e.a11y.addElRole(r,\"button\"),r.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(r,t.prevSlideMessage),e.a11y.addElControls(r,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on(\"keydown\",z(e.params.pagination.bulletClass),e.a11y.onEnterOrSpaceKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&a.a11y.liveRegion.length>0&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off(\"keydown\",a.a11y.onEnterOrSpaceKey),t&&t.off(\"keydown\",a.a11y.onEnterOrSpaceKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off(\"keydown\",z(a.params.pagination.bulletClass),a.a11y.onEnterOrSpaceKey)}},re={init:function(){var e=this,t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var a=e.history;a.initialized=!0,a.paths=re.getPathValues(e.params.url),(a.paths.key||a.paths.value)&&(a.scrollToSlide(0,a.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener(\"popstate\",e.history.setHistoryPopState))}},destroy:function(){var e=o();this.params.history.replaceState||e.removeEventListener(\"popstate\",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=re.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=o(),a=(e?new URL(e):t.location).pathname.slice(1).split(\"/\").filter((function(e){return\"\"!==e})),i=a.length;return{key:a[i-2],value:a[i-1]}},setHistory:function(e,t){var a=this,i=o();if(a.history.initialized&&a.params.history.enabled){var s;s=a.params.url?new URL(a.params.url):i.location;var r=a.slides.eq(t),n=re.slugify(r.attr(\"data-history\"));if(a.params.history.root.length>0){var l=a.params.history.root;\"/\"===l[l.length-1]&&(l=l.slice(0,l.length-1)),n=l+\"/\"+e+\"/\"+n}else s.pathname.includes(e)||(n=e+\"/\"+n);var d=i.history.state;d&&d.value===n||(a.params.history.replaceState?i.history.replaceState({value:n},null,n):i.history.pushState({value:n},null,n))}},slugify:function(e){return e.toString().replace(/\\s+/g,\"-\").replace(/[^\\w-]+/g,\"\").replace(/--+/g,\"-\").replace(/^-+/,\"\").replace(/-+$/,\"\")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,r=i.slides.length;s<r;s+=1){var n=i.slides.eq(s);if(re.slugify(n.attr(\"data-history\"))===t&&!n.hasClass(i.params.slideDuplicateClass)){var o=n.index();i.slideTo(o,e,a)}}else i.slideTo(0,e,a)}},ne={onHashCange:function(){var e=this,t=r();e.emit(\"hashChange\");var a=t.location.hash.replace(\"#\",\"\");if(a!==e.slides.eq(e.activeIndex).attr(\"data-hash\")){var i=e.$wrapperEl.children(\".\"+e.params.slideClass+'[data-hash=\"'+a+'\"]').index();if(void 0===i)return;e.slideTo(i)}},setHash:function(){var e=this,t=o(),a=r();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,\"#\"+e.slides.eq(e.activeIndex).attr(\"data-hash\")||\"\"),e.emit(\"hashSet\");else{var i=e.slides.eq(e.activeIndex),s=i.attr(\"data-hash\")||i.attr(\"data-history\");a.location.hash=s||\"\",e.emit(\"hashSet\")}},init:function(){var e=this,t=r(),a=o();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace(\"#\",\"\");if(i)for(var s=0,n=e.slides.length;s<n;s+=1){var l=e.slides.eq(s);if((l.attr(\"data-hash\")||l.attr(\"data-history\"))===i&&!l.hasClass(e.params.slideDuplicateClass)){var d=l.index();e.slideTo(d,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&m(a).on(\"hashchange\",e.hashNavigation.onHashCange)}},destroy:function(){var e=o();this.params.hashNavigation.watchState&&m(e).off(\"hashchange\",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr(\"data-swiper-autoplay\")&&(a=t.attr(\"data-swiper-autoplay\")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=E((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit(\"autoplayStart\"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit(\"autoplayStop\"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=r();\"hidden\"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),\"visible\"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},le={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var r=0;e.isHorizontal()||(r=s,s=0);var n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:n}).transform(\"translate3d(\"+s+\"px, \"+r+\"px, 0px)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.$wrapperEl;if(a.transition(e),t.params.virtualTranslate&&0!==e){var s=!1;a.transitionEnd((function(){if(!s&&t&&!t.destroyed){s=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)i.trigger(e[a])}}))}}},de={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,r=t.width,n=t.height,o=t.rtlTranslate,l=t.size,d=t.browser,p=t.params.cubeEffect,c=t.isHorizontal(),u=t.virtual&&t.params.virtual.enabled,h=0;p.shadow&&(c?(0===(e=i.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),i.append(e)),e.css({height:r+\"px\"})):0===(e=a.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),a.append(e)));for(var v=0;v<s.length;v+=1){var f=s.eq(v),g=v;u&&(g=parseInt(f.attr(\"data-swiper-slide-index\"),10));var b=90*g,w=Math.floor(b/360);o&&(b=-b,w=Math.floor(-b/360));var y=Math.max(Math.min(f[0].progress,1),-1),E=0,x=0,T=0;g%4==0?(E=4*-w*l,T=0):(g-1)%4==0?(E=0,T=4*-w*l):(g-2)%4==0?(E=l+4*w*l,T=l):(g-3)%4==0&&(E=-l,T=3*l+4*l*w),o&&(E=-E),c||(x=E,E=0);var S=\"rotateX(\"+(c?0:-b)+\"deg) rotateY(\"+(c?b:0)+\"deg) translate3d(\"+E+\"px, \"+x+\"px, \"+T+\"px)\";if(y<=1&&y>-1&&(h=90*g+90*y,o&&(h=90*-g-90*y)),f.transform(S),p.slideShadows){var C=c?f.find(\".swiper-slide-shadow-left\"):f.find(\".swiper-slide-shadow-top\"),M=c?f.find(\".swiper-slide-shadow-right\"):f.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(c?\"left\":\"top\")+'\"></div>'),f.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(c?\"right\":\"bottom\")+'\"></div>'),f.append(M)),C.length&&(C[0].style.opacity=Math.max(-y,0)),M.length&&(M[0].style.opacity=Math.max(y,0))}}if(i.css({\"-webkit-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-moz-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-ms-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"transform-origin\":\"50% 50% -\"+l/2+\"px\"}),p.shadow)if(c)e.transform(\"translate3d(0px, \"+(r/2+p.shadowOffset)+\"px, \"+-r/2+\"px) rotateX(90deg) rotateZ(0deg) scale(\"+p.shadowScale+\")\");else{var z=Math.abs(h)-90*Math.floor(Math.abs(h)/90),P=1.5-(Math.sin(2*z*Math.PI/360)/2+Math.cos(2*z*Math.PI/360)/2),k=p.shadowScale,L=p.shadowScale/P,$=p.shadowOffset;e.transform(\"scale3d(\"+k+\", 1, \"+L+\") translate3d(0px, \"+(n/2+$)+\"px, \"+-n/2/L+\"px) rotateX(-90deg)\")}var I=d.isSafari||d.isWebView?-l/2:0;i.transform(\"translate3d(0px,0,\"+I+\"px) rotateX(\"+(t.isHorizontal()?0:h)+\"deg) rotateY(\"+(t.isHorizontal()?-h:0)+\"deg)\")},setTransition:function(e){var t=this,a=t.$el;t.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&a.find(\".swiper-cube-shadow\").transition(e)}},pe={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s=t.eq(i),r=s[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(s[0].progress,1),-1));var n=-180*r,o=0,l=-s[0].swiperSlideOffset,d=0;if(e.isHorizontal()?a&&(n=-n):(d=l,l=0,o=-n,n=0),s[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var p=e.isHorizontal()?s.find(\".swiper-slide-shadow-left\"):s.find(\".swiper-slide-shadow-top\"),c=e.isHorizontal()?s.find(\".swiper-slide-shadow-right\"):s.find(\".swiper-slide-shadow-bottom\");0===p.length&&(p=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"left\":\"top\")+'\"></div>'),s.append(p)),0===c.length&&(c=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"right\":\"bottom\")+'\"></div>'),s.append(c)),p.length&&(p[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}s.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px) rotateX(\"+o+\"deg) rotateY(\"+n+\"deg)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.activeIndex,s=t.$wrapperEl;if(a.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;a.eq(i).transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)s.trigger(e[a])}}))}}},ce={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.slidesSizesGrid,r=e.params.coverflowEffect,n=e.isHorizontal(),o=e.translate,l=n?t/2-o:a/2-o,d=n?r.rotate:-r.rotate,p=r.depth,c=0,u=i.length;c<u;c+=1){var h=i.eq(c),v=s[c],f=(l-h[0].swiperSlideOffset-v/2)/v*r.modifier,g=n?d*f:0,b=n?0:d*f,w=-p*Math.abs(f),y=r.stretch;\"string\"==typeof y&&-1!==y.indexOf(\"%\")&&(y=parseFloat(r.stretch)/100*v);var E=n?0:y*f,x=n?y*f:0,T=1-(1-r.scale)*Math.abs(f);Math.abs(x)<.001&&(x=0),Math.abs(E)<.001&&(E=0),Math.abs(w)<.001&&(w=0),Math.abs(g)<.001&&(g=0),Math.abs(b)<.001&&(b=0),Math.abs(T)<.001&&(T=0);var S=\"translate3d(\"+x+\"px,\"+E+\"px,\"+w+\"px)  rotateX(\"+b+\"deg) rotateY(\"+g+\"deg) scale(\"+T+\")\";if(h.transform(S),h[0].style.zIndex=1-Math.abs(Math.round(f)),r.slideShadows){var C=n?h.find(\".swiper-slide-shadow-left\"):h.find(\".swiper-slide-shadow-top\"),M=n?h.find(\".swiper-slide-shadow-right\"):h.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(n?\"left\":\"top\")+'\"></div>'),h.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(n?\"right\":\"bottom\")+'\"></div>'),h.append(M)),C.length&&(C[0].style.opacity=f>0?f:0),M.length&&(M[0].style.opacity=-f>0?-f:0)}}},setTransition:function(e){this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var a=e.constructor;return t.swiper instanceof a?(e.thumbs.swiper=t.swiper,C(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),C(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):S(t.swiper)&&(e.thumbs.swiper=new a(C({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on(\"tap\",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var a=t.clickedIndex,i=t.clickedSlide;if(!(i&&m(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==a)){var s;if(s=t.params.loop?parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10):a,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var n=e.slides.eq(r).prevAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index();s=void 0===n?o:void 0===o?n:o-r<r-n?o:n}e.slideTo(s)}}},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i=\"auto\"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView,s=t.params.thumbs.autoScrollOffset,r=s&&!a.params.loop;if(t.realIndex!==a.realIndex||r){var n,o,l=a.activeIndex;if(a.params.loop){a.slides.eq(l).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,l=a.activeIndex);var d=a.slides.eq(l).prevAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index(),p=a.slides.eq(l).nextAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index();n=void 0===d?p:void 0===p?d:p-l==l-d?l:p-l<l-d?p:d,o=t.activeIndex>t.previousIndex?\"next\":\"prev\"}else o=(n=t.realIndex)>t.previousIndex?\"next\":\"prev\";r&&(n+=\"next\"===o?s:-1*s),a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(n)<0&&(a.params.centeredSlides?n=n>l?n-Math.floor(i/2)+1:n+Math.floor(i/2)-1:n>l&&(n=n-i+1),a.slideTo(n,e?0:void 0))}var c=1,u=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(c=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(c=1),c=Math.floor(c),a.slides.removeClass(u),a.params.loop||a.params.virtual&&a.params.virtual.enabled)for(var h=0;h<c;h+=1)a.$wrapperEl.children('[data-swiper-slide-index=\"'+(t.realIndex+h)+'\"]').addClass(u);else for(var v=0;v<c;v+=1)a.slides.eq(t.realIndex+v).addClass(u)}}},he=[q,U,{name:\"mousewheel\",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:\"container\",thresholdDelta:null,thresholdTime:null}},create:function(){M(this,{mousewheel:{enabled:!1,lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:K.enable,disable:K.disable,handle:K.handle,handleMouseEnter:K.handleMouseEnter,handleMouseLeave:K.handleMouseLeave,animateSlider:K.animateSlider,releaseScroll:K.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:\"navigation\",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:\"swiper-button-disabled\",hiddenClass:\"swiper-button-hidden\",lockClass:\"swiper-button-lock\"}},create:function(){M(this,{navigation:t({},Z)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var a=e.navigation,i=a.$nextEl,s=a.$prevEl,r=t.target;if(e.params.navigation.hideOnClick&&!m(r).is(s)&&!m(r).is(i)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===r||e.pagination.el.contains(r)))return;var n;i?n=i.hasClass(e.params.navigation.hiddenClass):s&&(n=s.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit(\"navigationShow\"):e.emit(\"navigationHide\"),i&&i.toggleClass(e.params.navigation.hiddenClass),s&&s.toggleClass(e.params.navigation.hiddenClass)}}}},{name:\"pagination\",params:{pagination:{el:null,bulletElement:\"span\",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:\"bullets\",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:\"swiper-pagination-bullet\",bulletActiveClass:\"swiper-pagination-bullet-active\",modifierClass:\"swiper-pagination-\",currentClass:\"swiper-pagination-current\",totalClass:\"swiper-pagination-total\",hiddenClass:\"swiper-pagination-hidden\",progressbarFillClass:\"swiper-pagination-progressbar-fill\",progressbarOppositeClass:\"swiper-pagination-progressbar-opposite\",clickableClass:\"swiper-pagination-clickable\",lockClass:\"swiper-pagination-lock\"}},create:function(){M(this,{pagination:t({dynamicBulletIndex:0},J)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){var a=t.target;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!m(a).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&a===e.navigation.nextEl||e.navigation.prevEl&&a===e.navigation.prevEl))return;!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit(\"paginationShow\"):e.emit(\"paginationHide\"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass)}}}},{name:\"scrollbar\",params:{scrollbar:{el:null,dragSize:\"auto\",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:\"swiper-scrollbar-lock\",dragClass:\"swiper-scrollbar-drag\"}},create:function(){M(this,{scrollbar:t({isTouched:!1,timeout:null,dragTimeout:null},Q)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:\"parallax\",params:{parallax:{enabled:!1}},create:function(){M(this,{parallax:t({},ee)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:\"zoom\",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:\"swiper-zoom-container\",zoomedSlideClass:\"swiper-slide-zoomed\"}},create:function(){var e=this;M(e,{zoom:t({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},te)});var a=1;Object.defineProperty(e.zoom,\"scale\",{get:function(){return a},set:function(t){if(a!==t){var i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit(\"zoomChange\",t,i,s)}a=t}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:\"lazy\",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:\"\",elementClass:\"swiper-lazy\",loadingClass:\"swiper-lazy-loading\",loadedClass:\"swiper-lazy-loaded\",preloaderClass:\"swiper-lazy-preloader\"}},create:function(){M(this,{lazy:t({initialImageLoaded:!1},ae)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},\"scrollbarDragMove resize _freeModeNoMomentumRelease\":function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:\"controller\",params:{controller:{control:void 0,inverse:!1,by:\"slide\"}},create:function(){M(this,{controller:t({control:this.params.controller.control},ie)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,a){e.controller.control&&e.controller.setTranslate(t,a)},setTransition:function(e,t,a){e.controller.control&&e.controller.setTransition(t,a)}}},{name:\"a11y\",params:{a11y:{enabled:!0,notificationClass:\"swiper-notification\",prevSlideMessage:\"Previous slide\",nextSlideMessage:\"Next slide\",firstSlideMessage:\"This is the first slide\",lastSlideMessage:\"This is the last slide\",paginationBulletMessage:\"Go to slide {{index}}\",slideLabelMessage:\"{{index}} / {{slidesLength}}\",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:\"group\"}},create:function(){M(this,{a11y:t({},se,{liveRegion:m('<span class=\"'+this.params.a11y.notificationClass+'\" aria-live=\"assertive\" aria-atomic=\"true\"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:\"history\",params:{history:{enabled:!1,root:\"\",replaceState:!1,key:\"slides\"}},create:function(){M(this,{history:t({},re)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:\"hash-navigation\",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){M(this,{hashNavigation:t({initialized:!1},ne)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:\"autoplay\",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){M(this,{autoplay:t({},oe,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),r().addEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,a){e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),r().removeEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange)}}},{name:\"effect-fade\",params:{fadeEffect:{crossFade:!1}},create:function(){M(this,{fadeEffect:t({},le)})},on:{beforeInit:function(e){if(\"fade\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"fade\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"fade\"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){\"fade\"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:\"effect-cube\",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){M(this,{cubeEffect:t({},de)})},on:{beforeInit:function(e){if(\"cube\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"cube\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"cube\"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){\"cube\"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:\"effect-flip\",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){M(this,{flipEffect:t({},pe)})},on:{beforeInit:function(e){if(\"flip\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"flip\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"flip\"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){\"flip\"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:\"effect-coverflow\",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){M(this,{coverflowEffect:t({},ce)})},on:{beforeInit:function(e){\"coverflow\"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+\"coverflow\"),e.classNames.push(e.params.containerModifierClass+\"3d\"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:\"thumbs\",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:\"swiper-slide-thumb-active\",thumbsContainerClass:\"swiper-container-thumbs\"}},create:function(){M(this,{thumbs:t({swiper:null,initialized:!1},ue)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var a=e.thumbs.swiper;a&&a.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return F.use(he),F}));\n//# sourceMappingURL=swiper-bundle.min.js.map","date":"2025-10-23T09:20:17.862Z","updated":"2025-10-23T09:20:17.862Z","path":"static-page/assets/js/swiper-bundle.min.js","layout":"false","_id":"cm10dl6pv002hs2y4b6ugcy26","title":"","comments":1,"content":"/**\n * Swiper 6.5.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2021 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 23, 2021\n */\n\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,(function(){\"use strict\";function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}function a(e){return null!==e&&\"object\"==typeof e&&\"constructor\"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(s){void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}var s={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:\"\"},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"}};function r(){var e=\"undefined\"!=typeof document?document:{};return i(e,s),e}var n={document:s,navigator:{userAgent:\"\"},location:{hash:\"\",host:\"\",hostname:\"\",href:\"\",origin:\"\",pathname:\"\",protocol:\"\",search:\"\"},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return\"\"}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return\"undefined\"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){\"undefined\"!=typeof setTimeout&&clearTimeout(e)}};function o(){var e=\"undefined\"!=typeof window?window:{};return i(e,n),e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,a){return(c=p()?Reflect.construct:function(e,t,a){var i=[null];i.push.apply(i,t);var s=new(Function.bind.apply(e,i));return a&&d(s,a.prototype),s}).apply(null,arguments)}function u(e){var t=\"function\"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(a=e,-1===Function.toString.call(a).indexOf(\"[native code]\")))return e;var a;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return c(e,arguments,l(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),d(i,e)})(e)}var h=function(e){var t,a;function i(t){var a,i,s;return a=e.call.apply(e,[this].concat(t))||this,i=function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(a),s=i.__proto__,Object.defineProperty(i,\"__proto__\",{get:function(){return s},set:function(e){s.__proto__=e}}),a}return a=e,(t=i).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,i}(u(Array));function v(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,v(e)):t.push(e)})),t}function f(e,t){return Array.prototype.filter.call(e,t)}function m(e,t){var a=o(),i=r(),s=[];if(!t&&e instanceof h)return e;if(!e)return new h(s);if(\"string\"==typeof e){var n=e.trim();if(n.indexOf(\"<\")>=0&&n.indexOf(\">\")>=0){var l=\"div\";0===n.indexOf(\"<li\")&&(l=\"ul\"),0===n.indexOf(\"<tr\")&&(l=\"tbody\"),0!==n.indexOf(\"<td\")&&0!==n.indexOf(\"<th\")||(l=\"tr\"),0===n.indexOf(\"<tbody\")&&(l=\"table\"),0===n.indexOf(\"<option\")&&(l=\"select\");var d=i.createElement(l);d.innerHTML=n;for(var p=0;p<d.childNodes.length;p+=1)s.push(d.childNodes[p])}else s=function(e,t){if(\"string\"!=typeof e)return[e];for(var a=[],i=t.querySelectorAll(e),s=0;s<i.length;s+=1)a.push(i[s]);return a}(e.trim(),t||i)}else if(e.nodeType||e===a||e===i)s.push(e);else if(Array.isArray(e)){if(e instanceof h)return e;s=e}return new h(function(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}(s))}m.fn=h.prototype;var g,b,w,y={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,i)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,i)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));return f(this,(function(e){return i.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=v(t.map((function(e){return e.split(\" \")})));this.forEach((function(e){i.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&\"string\"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===arguments.length)this[a].setAttribute(e,t);else for(var i in e)this[a][i]=e[i],this[a].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration=\"string\"!=typeof e?e+\"ms\":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];function o(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),m(t).is(s))r.apply(t,a);else for(var i=m(t).parents(),n=0;n<i.length;n+=1)m(i[n]).is(s)&&r.apply(i[n],a)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var d,p=i.split(\" \"),c=0;c<this.length;c+=1){var u=this[c];if(s)for(d=0;d<p.length;d+=1){var h=p[d];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[h]||(u.dom7LiveListeners[h]=[]),u.dom7LiveListeners[h].push({listener:r,proxyListener:o}),u.addEventListener(h,o,n)}else for(d=0;d<p.length;d+=1){var v=p[d];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[v]||(u.dom7Listeners[v]=[]),u.dom7Listeners[v].push({listener:r,proxyListener:l}),u.addEventListener(v,l,n)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=t[0],s=t[1],r=t[2],n=t[3];\"function\"==typeof t[1]&&(i=t[0],r=t[1],n=t[2],s=void 0),n||(n=!1);for(var o=i.split(\" \"),l=0;l<o.length;l+=1)for(var d=o[l],p=0;p<this.length;p+=1){var c=this[p],u=void 0;if(!s&&c.dom7Listeners?u=c.dom7Listeners[d]:s&&c.dom7LiveListeners&&(u=c.dom7LiveListeners[d]),u&&u.length)for(var h=u.length-1;h>=0;h-=1){var v=u[h];r&&v.listener===r||r&&v.listener&&v.listener.dom7proxy&&v.listener.dom7proxy===r?(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1)):r||(c.removeEventListener(d,v.proxyListener,n),u.splice(h,1))}}return this},trigger:function(){for(var e=o(),t=arguments.length,a=new Array(t),i=0;i<t;i++)a[i]=arguments[i];for(var s=a[0].split(\" \"),r=a[1],n=0;n<s.length;n+=1)for(var l=s[n],d=0;d<this.length;d+=1){var p=this[d];if(e.CustomEvent){var c=new e.CustomEvent(l,{detail:r,bubbles:!0,cancelable:!0});p.dom7EventData=a.filter((function(e,t){return t>0})),p.dispatchEvent(c),p.dom7EventData=[],delete p.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on(\"transitionend\",(function a(i){i.target===this&&(e.call(this,i),t.off(\"transitionend\",a))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue(\"margin-right\"))+parseFloat(t.getPropertyValue(\"margin-left\"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue(\"margin-top\"))+parseFloat(t.getPropertyValue(\"margin-bottom\"))}return this[0].offsetHeight}return null},styles:function(){var e=o();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=o(),t=r(),a=this[0],i=a.getBoundingClientRect(),s=t.body,n=a.clientTop||s.clientTop||0,l=a.clientLeft||s.clientLeft||0,d=a===e?e.scrollY:a.scrollTop,p=a===e?e.scrollX:a.scrollLeft;return{top:i.top+d-n,left:i.left+p-l}}return null},css:function(e,t){var a,i=o();if(1===arguments.length){if(\"string\"!=typeof e){for(a=0;a<this.length;a+=1)for(var s in e)this[a].style[s]=e[s];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&\"string\"==typeof e){for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,a){e.apply(t,[t,a])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=o(),s=r(),n=this[0];if(!n||void 0===e)return!1;if(\"string\"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=m(e),a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}if(e===s)return n===s;if(e===i)return n===i;if(e.nodeType||e instanceof h){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return m([]);if(e<0){var a=t+e;return m(a<0?[]:[this[a]])}return m([this[e]])},append:function(){for(var e,t=r(),a=0;a<arguments.length;a+=1){e=a<0||arguments.length<=a?void 0:arguments[a];for(var i=0;i<this.length;i+=1)if(\"string\"==typeof e){var s=t.createElement(\"div\");for(s.innerHTML=e;s.firstChild;)this[i].appendChild(s.firstChild)}else if(e instanceof h)for(var n=0;n<e.length;n+=1)this[i].appendChild(e[n]);else this[i].appendChild(e)}return this},prepend:function(e){var t,a,i=r();for(t=0;t<this.length;t+=1)if(\"string\"==typeof e){var s=i.createElement(\"div\");for(s.innerHTML=e,a=s.childNodes.length-1;a>=0;a-=1)this[t].insertBefore(s.childNodes[a],this[t].childNodes[0])}else if(e instanceof h)for(a=0;a<e.length;a+=1)this[t].insertBefore(e[a],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&m(this[0].nextElementSibling).is(e)?m([this[0].nextElementSibling]):m([]):this[0].nextElementSibling?m([this[0].nextElementSibling]):m([]):m([])},nextAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&m(t.previousElementSibling).is(e)?m([t.previousElementSibling]):m([]):t.previousElementSibling?m([t.previousElementSibling]):m([])}return m([])},prevAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),a=i}return m(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null!==this[a].parentNode&&(e?m(this[a].parentNode).is(e)&&t.push(this[a].parentNode):t.push(this[a].parentNode));return m(t)},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e?m(i).is(e)&&t.push(i):t.push(i),i=i.parentNode;return m(t)},closest:function(e){var t=this;return void 0===e?m([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1){try{var i=this[a].querySelectorAll(e)}catch(t){console.log(e)}for(var s=0;s<i.length;s+=1)t.push(i[s])}return m(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].children,s=0;s<i.length;s+=1)e&&!m(i[s]).is(e)||t.push(i[s]);return m(t)},filter:function(e){return m(f(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function E(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function T(e,t){void 0===t&&(t=\"x\");var a,i,s,r=o(),n=function(e){var t,a=o();return a.getComputedStyle&&(t=a.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return r.WebKitCSSMatrix?((i=n.transform||n.webkitTransform).split(\",\").length>6&&(i=i.split(\", \").map((function(e){return e.replace(\",\",\".\")})).join(\", \")),s=new r.WebKitCSSMatrix(\"none\"===i?\"\":i)):a=(s=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue(\"transform\").replace(\"translate(\",\"matrix(1, 0, 0, 1,\")).toString().split(\",\"),\"x\"===t&&(i=r.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),\"y\"===t&&(i=r.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function S(e){return\"object\"==typeof e&&null!==e&&e.constructor&&\"Object\"===Object.prototype.toString.call(e).slice(8,-1)}function C(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=[\"__proto__\",\"constructor\",\"prototype\"],a=1;a<arguments.length;a+=1){var i=a<0||arguments.length<=a?void 0:arguments[a];if(null!=i)for(var s=Object.keys(Object(i)).filter((function(e){return t.indexOf(e)<0})),r=0,n=s.length;r<n;r+=1){var o=s[r],l=Object.getOwnPropertyDescriptor(i,o);void 0!==l&&l.enumerable&&(S(e[o])&&S(i[o])?i[o].__swiper__?e[o]=i[o]:C(e[o],i[o]):!S(e[o])&&S(i[o])?(e[o]={},i[o].__swiper__?e[o]=i[o]:C(e[o],i[o])):e[o]=i[o])}}return e}function M(e,t){Object.keys(t).forEach((function(a){S(t[a])&&Object.keys(t[a]).forEach((function(i){\"function\"==typeof t[a][i]&&(t[a][i]=t[a][i].bind(e))})),e[a]=t[a]}))}function z(e){return void 0===e&&(e=\"\"),\".\"+e.trim().replace(/([\\.:\\/])/g,\"\\\\$1\").replace(/ /g,\".\")}function P(){return g||(g=function(){var e=o(),t=r();return{touch:!!(\"ontouchstart\"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&\"maxTouchPoints\"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:\"MutationObserver\"in e||\"WebkitMutationObserver\"in e,passiveListener:function(){var t=!1;try{var a=Object.defineProperty({},\"passive\",{get:function(){t=!0}});e.addEventListener(\"testPassiveListener\",null,a)}catch(e){}return t}(),gestures:\"ongesturestart\"in e}}()),g}function k(e){return void 0===e&&(e={}),b||(b=function(e){var t=(void 0===e?{}:e).userAgent,a=P(),i=o(),s=i.navigator.platform,r=t||i.navigator.userAgent,n={ios:!1,android:!1},l=i.screen.width,d=i.screen.height,p=r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),c=r.match(/(iPad).*OS\\s([\\d_]+)/),u=r.match(/(iPod)(.*OS\\s([\\d_]+))?/),h=!c&&r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),v=\"Win32\"===s,f=\"MacIntel\"===s;return!c&&f&&a.touch&&[\"1024x1366\",\"1366x1024\",\"834x1194\",\"1194x834\",\"834x1112\",\"1112x834\",\"768x1024\",\"1024x768\",\"820x1180\",\"1180x820\",\"810x1080\",\"1080x810\"].indexOf(l+\"x\"+d)>=0&&((c=r.match(/(Version)\\/([\\d.]+)/))||(c=[0,1,\"13_0_0\"]),f=!1),p&&!v&&(n.os=\"android\",n.android=!0),(c||h||u)&&(n.os=\"ios\",n.ios=!0),n}(e)),b}function L(){return w||(w=function(){var e,t=o();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf(\"safari\")>=0&&e.indexOf(\"chrome\")<0&&e.indexOf(\"android\")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),w}Object.keys(y).forEach((function(e){Object.defineProperty(m.fn,e,{value:y[e],writable:!0})}));var $={name:\"resize\",create:function(){var e=this;C(e,{resize:{observer:null,createObserver:function(){e&&!e.destroyed&&e.initialized&&(e.resize.observer=new ResizeObserver((function(t){var a=e.width,i=e.height,s=a,r=i;t.forEach((function(t){var a=t.contentBoxSize,i=t.contentRect,n=t.target;n&&n!==e.el||(s=i?i.width:(a[0]||a).inlineSize,r=i?i.height:(a[0]||a).blockSize)})),s===a&&r===i||e.resize.resizeHandler()})),e.resize.observer.observe(e.el))},removeObserver:function(){e.resize.observer&&e.resize.observer.unobserve&&e.el&&(e.resize.observer.unobserve(e.el),e.resize.observer=null)},resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit(\"beforeResize\"),e.emit(\"resize\"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit(\"orientationchange\")}}})},on:{init:function(e){var t=o();e.params.resizeObserver&&void 0!==o().ResizeObserver?e.resize.createObserver():(t.addEventListener(\"resize\",e.resize.resizeHandler),t.addEventListener(\"orientationchange\",e.resize.orientationChangeHandler))},destroy:function(e){var t=o();e.resize.removeObserver(),t.removeEventListener(\"resize\",e.resize.resizeHandler),t.removeEventListener(\"orientationchange\",e.resize.orientationChangeHandler)}}},I={attach:function(e,t){void 0===t&&(t={});var a=o(),i=this,s=new(a.MutationObserver||a.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){i.emit(\"observerUpdate\",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}else i.emit(\"observerUpdate\",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},O={name:\"observer\",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){M(this,{observer:t({},I,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function A(e){var t=this,a=r(),i=o(),s=t.touchEventsData,n=t.params,l=t.touches;if(!t.animating||!n.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var p=m(d.target);if(\"wrapper\"!==n.touchEventsTarget||p.closest(t.wrapperEl).length)if(s.isTouchEvent=\"touchstart\"===d.type,s.isTouchEvent||!(\"which\"in d)||3!==d.which)if(!(!s.isTouchEvent&&\"button\"in d&&d.button>0))if(!s.isTouched||!s.isMoved)if(!!n.noSwipingClass&&\"\"!==n.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(p=m(e.path[0])),n.noSwiping&&p.closest(n.noSwipingSelector?n.noSwipingSelector:\".\"+n.noSwipingClass)[0])t.allowClick=!0;else if(!n.swipeHandler||p.closest(n.swipeHandler)[0]){l.currentX=\"touchstart\"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY=\"touchstart\"===d.type?d.targetTouches[0].pageY:d.pageY;var c=l.currentX,u=l.currentY,h=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,v=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(h&&(c<=v||c>=i.innerWidth-v)){if(\"prevent\"!==h)return;e.preventDefault()}if(C(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=c,l.startY=u,s.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(s.allowThresholdMove=!1),\"touchstart\"!==d.type){var f=!0;p.is(s.formElements)&&(f=!1),a.activeElement&&m(a.activeElement).is(s.formElements)&&a.activeElement!==p[0]&&a.activeElement.blur();var g=f&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!g||p[0].isContentEditable||d.preventDefault()}t.emit(\"touchStart\",d)}}}function D(e){var t=r(),a=this,i=a.touchEventsData,s=a.params,n=a.touches,o=a.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),i.isTouched){if(!i.isTouchEvent||\"touchmove\"===l.type){var d=\"touchmove\"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),p=\"touchmove\"===l.type?d.pageX:l.pageX,c=\"touchmove\"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return n.startX=p,void(n.startY=c);if(!a.allowTouchMove)return a.allowClick=!1,void(i.isTouched&&(C(n,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=x()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(a.isVertical()){if(c<n.startY&&a.translate<=a.maxTranslate()||c>n.startY&&a.translate>=a.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&a.translate<=a.maxTranslate()||p>n.startX&&a.translate>=a.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&m(l.target).is(i.formElements))return i.isMoved=!0,void(a.allowClick=!1);if(i.allowTouchCallbacks&&a.emit(\"touchMove\",l),!(l.targetTouches&&l.targetTouches.length>1)){n.currentX=p,n.currentY=c;var u=n.currentX-n.startX,h=n.currentY-n.startY;if(!(a.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(h,2))<a.params.threshold)){var v;if(void 0===i.isScrolling)a.isHorizontal()&&n.currentY===n.startY||a.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:u*u+h*h>=25&&(v=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,i.isScrolling=a.isHorizontal()?v>s.touchAngle:90-v>s.touchAngle);if(i.isScrolling&&a.emit(\"touchMoveOpposite\",l),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){a.allowClick=!1,!s.cssMode&&l.cancelable&&l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation(),i.isMoved||(s.loop&&a.loopFix(),i.startTranslate=a.getTranslate(),a.setTransition(0),a.animating&&a.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==a.allowSlideNext&&!0!==a.allowSlidePrev||a.setGrabCursor(!0),a.emit(\"sliderFirstMove\",l)),a.emit(\"sliderMove\",l),i.isMoved=!0;var f=a.isHorizontal()?u:h;n.diff=f,f*=s.touchRatio,o&&(f=-f),a.swipeDirection=f>0?\"prev\":\"next\",i.currentTranslate=f+i.startTranslate;var g=!0,b=s.resistanceRatio;if(s.touchReleaseOnEdges&&(b=0),f>0&&i.currentTranslate>a.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=a.minTranslate()-1+Math.pow(-a.minTranslate()+i.startTranslate+f,b))):f<0&&i.currentTranslate<a.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=a.maxTranslate()+1-Math.pow(a.maxTranslate()-i.startTranslate-f,b))),g&&(l.preventedByNestedSwiper=!0),!a.allowSlideNext&&\"next\"===a.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!a.allowSlidePrev&&\"prev\"===a.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),a.allowSlidePrev||a.allowSlideNext||(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=a.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(a.updateActiveIndex(),a.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:n[a.isHorizontal()?\"startX\":\"startY\"],time:i.touchStartTime}),i.velocities.push({position:n[a.isHorizontal()?\"currentX\":\"currentY\"],time:x()})),a.updateProgress(i.currentTranslate),a.setTranslate(i.currentTranslate))}}}}}else i.startMoving&&i.isScrolling&&a.emit(\"touchMoveOpposite\",l)}function N(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,r=t.rtlTranslate,n=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit(\"touchEnd\",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var p,c=x(),u=c-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit(\"tap click\",d),u<300&&c-a.lastClickTime<300&&t.emit(\"doubleTap doubleClick\",d)),a.lastClickTime=x(),E((function(){t.destroyed||(t.allowClick=!0)})),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,p=i.followFinger?r?t.translate:-t.translate:-a.currentTranslate,!i.cssMode)if(i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(a.velocities.length>1){var h=a.velocities.pop(),v=a.velocities.pop(),f=h.position-v.position,m=h.time-v.time;t.velocity=f/m,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(m>150||x()-h.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,b=t.velocity*g,w=t.translate+b;r&&(w=-w);var y,T,S=!1,C=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(w<t.maxTranslate())i.freeModeMomentumBounce?(w+t.maxTranslate()<-C&&(w=t.maxTranslate()-C),y=t.maxTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.maxTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(w>t.minTranslate())i.freeModeMomentumBounce?(w-t.minTranslate()>C&&(w=t.minTranslate()+C),y=t.minTranslate(),S=!0,a.allowMomentumBounce=!0):w=t.minTranslate(),i.loop&&i.centeredSlides&&(T=!0);else if(i.freeModeSticky){for(var M,z=0;z<l.length;z+=1)if(l[z]>-w){M=z;break}w=-(w=Math.abs(l[M]-w)<Math.abs(l[M-1]-w)||\"next\"===t.swipeDirection?l[M]:l[M-1])}if(T&&t.once(\"transitionEnd\",(function(){t.loopFix()})),0!==t.velocity){if(g=r?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),i.freeModeSticky){var P=Math.abs((r?-w:w)-t.translate),k=t.slidesSizesGrid[t.activeIndex];g=P<k?i.speed:P<2*k?1.5*i.speed:2.5*i.speed}}else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&S?(t.updateProgress(y),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit(\"momentumBounce\"),t.setTransition(i.speed),setTimeout((function(){t.setTranslate(y),n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,n.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):(t.emit(\"_freeModeNoMomentumRelease\"),t.updateProgress(w)),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(i.freeModeSticky)return void t.slideToClosest();i.freeMode&&t.emit(\"_freeModeNoMomentumRelease\")}(!i.freeModeMomentum||u>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var L=0,$=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<i.slidesPerGroupSkip?1:i.slidesPerGroup){var O=I<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[I+O]?p>=o[I]&&p<o[I+O]&&(L=I,$=o[I+O]-o[I]):p>=o[I]&&(L=I,$=o[o.length-1]-o[o.length-2])}var A=(p-o[L])/$,D=L<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);\"next\"===t.swipeDirection&&(A>=i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L)),\"prev\"===t.swipeDirection&&(A>1-i.longSwipesRatio?t.slideTo(L+D):t.slideTo(L))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(L+D):t.slideTo(L):(\"next\"===t.swipeDirection&&t.slideTo(L+D),\"prev\"===t.swipeDirection&&t.slideTo(L))}}}function G(){var e=this,t=e.params,a=e.el;if(!a||0!==a.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,s=e.allowSlidePrev,r=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),(\"auto\"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}function B(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function H(){var e=this,t=e.wrapperEl,a=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=a?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0===i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit(\"setTranslate\",e.translate,!1)}var X=!1;function Y(){}var R={init:!0,direction:\"horizontal\",touchEventsTarget:\"container\",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!1,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:\"slide\",breakpoints:void 0,breakpointsBase:\"window\",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:\"column\",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:\"swiper-no-swiping\",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:\"swiper-container-\",slideClass:\"swiper-slide\",slideBlankClass:\"swiper-slide-invisible-blank\",slideActiveClass:\"swiper-slide-active\",slideDuplicateActiveClass:\"swiper-slide-duplicate-active\",slideVisibleClass:\"swiper-slide-visible\",slideDuplicateClass:\"swiper-slide-duplicate\",slideNextClass:\"swiper-slide-next\",slideDuplicateNextClass:\"swiper-slide-duplicate-next\",slidePrevClass:\"swiper-slide-prev\",slideDuplicatePrevClass:\"swiper-slide-duplicate-prev\",wrapperClass:\"swiper-wrapper\",runCallbacksOnInit:!0,_emitClasses:!1},V={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a];i.params&&C(e,i.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var i=t.modules[a],s=e[a]||{};i.on&&t.on&&Object.keys(i.on).forEach((function(e){t.on(e,i.on[e])})),i.create&&i.create.bind(t)(s)}))}},eventsEmitter:{on:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;var s=a?\"unshift\":\"push\";return e.split(\" \").forEach((function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)})),i},once:function(e,t,a){var i=this;if(\"function\"!=typeof t)return i;function s(){i.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];t.apply(i,r)}return s.__emitterProxy=t,i.on(e,s,a)},onAny:function(e,t){var a=this;if(\"function\"!=typeof e)return a;var i=t?\"unshift\":\"push\";return a.eventsAnyListeners.indexOf(e)<0&&a.eventsAnyListeners[i](e),a},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var a=t.eventsAnyListeners.indexOf(e);return a>=0&&t.eventsAnyListeners.splice(a,1),t},off:function(e,t){var a=this;return a.eventsListeners?(e.split(\" \").forEach((function(e){void 0===t?a.eventsListeners[e]=[]:a.eventsListeners[e]&&a.eventsListeners[e].forEach((function(i,s){(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&a.eventsListeners[e].splice(s,1)}))})),a):a},emit:function(){var e,t,a,i=this;if(!i.eventsListeners)return i;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];\"string\"==typeof r[0]||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),a=i):(e=r[0].events,t=r[0].data,a=r[0].context||i),t.unshift(a);var o=Array.isArray(e)?e:e.split(\" \");return o.forEach((function(e){i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach((function(i){i.apply(a,[e].concat(t))})),i.eventsListeners&&i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(e){e.apply(a,t)}))})),i}},update:{updateSize:function(){var e,t,a=this,i=a.$el;e=void 0!==a.params.width&&null!==a.params.width?a.params.width:i[0].clientWidth,t=void 0!==a.params.height&&null!==a.params.height?a.params.height:i[0].clientHeight,0===e&&a.isHorizontal()||0===t&&a.isVertical()||(e=e-parseInt(i.css(\"padding-left\")||0,10)-parseInt(i.css(\"padding-right\")||0,10),t=t-parseInt(i.css(\"padding-top\")||0,10)-parseInt(i.css(\"padding-bottom\")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),C(a,{width:e,height:t,size:a.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=function(t){return e.isHorizontal()?t:{width:\"height\",\"margin-top\":\"margin-left\",\"margin-bottom \":\"margin-right\",\"margin-left\":\"margin-top\",\"margin-right\":\"margin-bottom\",\"padding-left\":\"padding-top\",\"padding-right\":\"padding-bottom\",marginRight:\"marginBottom\"}[t]},a=function(e,a){return parseFloat(e.getPropertyValue(t(a))||0)},i=e.params,s=e.$wrapperEl,r=e.size,n=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,p=s.children(\".\"+e.params.slideClass),c=l?e.virtual.slides.length:p.length,u=[],h=[],v=[],f=i.slidesOffsetBefore;\"function\"==typeof f&&(f=i.slidesOffsetBefore.call(e));var m=i.slidesOffsetAfter;\"function\"==typeof m&&(m=i.slidesOffsetAfter.call(e));var g=e.snapGrid.length,b=e.slidesGrid.length,w=i.spaceBetween,y=-f,E=0,x=0;if(void 0!==r){var T,S;\"string\"==typeof w&&w.indexOf(\"%\")>=0&&(w=parseFloat(w.replace(\"%\",\"\"))/100*r),e.virtualSize=-w,n?p.css({marginLeft:\"\",marginTop:\"\"}):p.css({marginRight:\"\",marginBottom:\"\"}),i.slidesPerColumn>1&&(T=Math.floor(c/i.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/i.slidesPerColumn)*i.slidesPerColumn,\"auto\"!==i.slidesPerView&&\"row\"===i.slidesPerColumnFill&&(T=Math.max(T,i.slidesPerView*i.slidesPerColumn)));for(var M,z,P,k=i.slidesPerColumn,L=T/k,$=Math.floor(c/i.slidesPerColumn),I=0;I<c;I+=1){S=0;var O=p.eq(I);if(i.slidesPerColumn>1){var A=void 0,D=void 0,N=void 0;if(\"row\"===i.slidesPerColumnFill&&i.slidesPerGroup>1){var G=Math.floor(I/(i.slidesPerGroup*i.slidesPerColumn)),B=I-i.slidesPerColumn*i.slidesPerGroup*G,H=0===G?i.slidesPerGroup:Math.min(Math.ceil((c-G*k*i.slidesPerGroup)/k),i.slidesPerGroup);A=(D=B-(N=Math.floor(B/H))*H+G*i.slidesPerGroup)+N*T/k,O.css({\"-webkit-box-ordinal-group\":A,\"-moz-box-ordinal-group\":A,\"-ms-flex-order\":A,\"-webkit-order\":A,order:A})}else\"column\"===i.slidesPerColumnFill?(N=I-(D=Math.floor(I/k))*k,(D>$||D===$&&N===k-1)&&(N+=1)>=k&&(N=0,D+=1)):D=I-(N=Math.floor(I/L))*L;O.css(t(\"margin-top\"),0!==N&&i.spaceBetween&&i.spaceBetween+\"px\")}if(\"none\"!==O.css(\"display\")){if(\"auto\"===i.slidesPerView){var X=getComputedStyle(O[0]),Y=O[0].style.transform,R=O[0].style.webkitTransform;if(Y&&(O[0].style.transform=\"none\"),R&&(O[0].style.webkitTransform=\"none\"),i.roundLengths)S=e.isHorizontal()?O.outerWidth(!0):O.outerHeight(!0);else{var V=a(X,\"width\"),W=a(X,\"padding-left\"),F=a(X,\"padding-right\"),_=a(X,\"margin-left\"),q=a(X,\"margin-right\"),j=X.getPropertyValue(\"box-sizing\");if(j&&\"border-box\"===j)S=V+_+q;else{var U=O[0],K=U.clientWidth;S=V+W+F+_+q+(U.offsetWidth-K)}}Y&&(O[0].style.transform=Y),R&&(O[0].style.webkitTransform=R),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),p[I]&&(p[I].style[t(\"width\")]=S+\"px\");p[I]&&(p[I].swiperSlideSize=S),v.push(S),i.centeredSlides?(y=y+S/2+E/2+w,0===E&&0!==I&&(y=y-r/2-w),0===I&&(y=y-r/2-w),Math.abs(y)<.001&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup==0&&u.push(y),h.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&u.push(y),h.push(y),y=y+S+w),e.virtualSize+=S+w,E=S,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+m,n&&o&&(\"slide\"===i.effect||\"coverflow\"===i.effect)&&s.css({width:e.virtualSize+i.spaceBetween+\"px\"}),i.setWrapperSize)s.css(((z={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",z));if(i.slidesPerColumn>1)if(e.virtualSize=(S+i.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/i.slidesPerColumn)-i.spaceBetween,s.css(((P={})[t(\"width\")]=e.virtualSize+i.spaceBetween+\"px\",P)),i.centeredSlides){M=[];for(var Z=0;Z<u.length;Z+=1){var J=u[Z];i.roundLengths&&(J=Math.floor(J)),u[Z]<e.virtualSize+u[0]&&M.push(J)}u=M}if(!i.centeredSlides){M=[];for(var Q=0;Q<u.length;Q+=1){var ee=u[Q];i.roundLengths&&(ee=Math.floor(ee)),u[Q]<=e.virtualSize-r&&M.push(ee)}u=M,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(0===u.length&&(u=[0]),0!==i.spaceBetween){var te,ae=e.isHorizontal()&&n?\"marginLeft\":t(\"marginRight\");p.filter((function(e,t){return!i.cssMode||t!==p.length-1})).css(((te={})[ae]=w+\"px\",te))}if(i.centeredSlides&&i.centeredSlidesBounds){var ie=0;v.forEach((function(e){ie+=e+(i.spaceBetween?i.spaceBetween:0)}));var se=(ie-=i.spaceBetween)-r;u=u.map((function(e){return e<0?-f:e>se?se+m:e}))}if(i.centerInsufficientSlides){var re=0;if(v.forEach((function(e){re+=e+(i.spaceBetween?i.spaceBetween:0)})),(re-=i.spaceBetween)<r){var ne=(r-re)/2;u.forEach((function(e,t){u[t]=e-ne})),h.forEach((function(e,t){h[t]=e+ne}))}}C(e,{slides:p,snapGrid:u,slidesGrid:h,slidesSizesGrid:v}),c!==d&&e.emit(\"slidesLengthChange\"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit(\"snapGridLengthChange\")),h.length!==b&&e.emit(\"slidesGridLengthChange\"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a=this,i=[],s=0;if(\"number\"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed),\"auto\"!==a.params.slidesPerView&&a.params.slidesPerView>1)if(a.params.centeredSlides)a.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(a.params.slidesPerView);t+=1){var r=a.activeIndex+t;if(r>a.slides.length)break;i.push(a.slides.eq(r)[0])}else i.push(a.slides.eq(a.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var n=i[t].offsetHeight;s=n>s?n:s}s&&a.$wrapperEl.css(\"height\",s+\"px\")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;s&&(r=e),i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(r+(a.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+a.spaceBetween);if(a.watchSlidesVisibility||a.centeredSlides&&a.autoHeight){var d=-(r-o.swiperSlideOffset),p=d+t.slidesSizesGrid[n];(d>=0&&d<t.size-1||p>1&&p<=t.size||d<=0&&p>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(n),i.eq(n).addClass(a.slideVisibleClass))}o.progress=s?-l:l}t.visibleSlides=m(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var a=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*a||0}var i=t.params,s=t.maxTranslate()-t.minTranslate(),r=t.progress,n=t.isBeginning,o=t.isEnd,l=n,d=o;0===s?(r=0,n=!0,o=!0):(n=(r=(e-t.minTranslate())/s)<=0,o=r>=1),C(t,{progress:r,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit(\"reachBeginning toEdge\"),o&&!d&&t.emit(\"reachEnd toEdge\"),(l&&!n||d&&!o)&&t.emit(\"fromEdge\"),t.emit(\"progress\",r)},updateSlidesClasses:function(){var e,t=this,a=t.slides,i=t.params,s=t.$wrapperEl,r=t.activeIndex,n=t.realIndex,o=t.virtual&&i.virtual.enabled;a.removeClass(i.slideActiveClass+\" \"+i.slideNextClass+\" \"+i.slidePrevClass+\" \"+i.slideDuplicateActiveClass+\" \"+i.slideDuplicateNextClass+\" \"+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find(\".\"+i.slideClass+'[data-swiper-slide-index=\"'+r+'\"]'):a.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+n+'\"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll(\".\"+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=a.eq(0)).addClass(i.slideNextClass);var d=e.prevAll(\".\"+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=a.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+l.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(\".\"+i.slideClass+\":not(.\"+i.slideDuplicateClass+')[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass):s.children(\".\"+i.slideClass+\".\"+i.slideDuplicateClass+'[data-swiper-slide-index=\"'+d.attr(\"data-swiper-slide-index\")+'\"]').addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,a=this,i=a.rtlTranslate?a.translate:-a.translate,s=a.slidesGrid,r=a.snapGrid,n=a.params,o=a.activeIndex,l=a.realIndex,d=a.snapIndex,p=e;if(void 0===p){for(var c=0;c<s.length;c+=1)void 0!==s[c+1]?i>=s[c]&&i<s[c+1]-(s[c+1]-s[c])/2?p=c:i>=s[c]&&i<s[c+1]&&(p=c+1):i>=s[c]&&(p=c);n.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(r.indexOf(i)>=0)t=r.indexOf(i);else{var u=Math.min(n.slidesPerGroupSkip,p);t=u+Math.floor((p-u)/n.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),p!==o){var h=parseInt(a.slides.eq(p).attr(\"data-swiper-slide-index\")||p,10);C(a,{snapIndex:t,realIndex:h,previousIndex:o,activeIndex:p}),a.emit(\"activeIndexChange\"),a.emit(\"snapIndexChange\"),l!==h&&a.emit(\"realIndexChange\"),(a.initialized||a.params.runCallbacksOnInit)&&a.emit(\"slideChange\")}else t!==d&&(a.snapIndex=t,a.emit(\"snapIndexChange\"))},updateClickedSlide:function(e){var t,a=this,i=a.params,s=m(e.target).closest(\".\"+i.slideClass)[0],r=!1;if(s)for(var n=0;n<a.slides.length;n+=1)if(a.slides[n]===s){r=!0,t=n;break}if(!s||!r)return a.clickedSlide=void 0,void(a.clickedIndex=void 0);a.clickedSlide=s,a.virtual&&a.params.virtual.enabled?a.clickedIndex=parseInt(m(s).attr(\"data-swiper-slide-index\"),10):a.clickedIndex=t,i.slideToClickedSlide&&void 0!==a.clickedIndex&&a.clickedIndex!==a.activeIndex&&a.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?\"x\":\"y\");var t=this,a=t.params,i=t.rtlTranslate,s=t.translate,r=t.$wrapperEl;if(a.virtualTranslate)return i?-s:s;if(a.cssMode)return s;var n=T(r[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,r=a.$wrapperEl,n=a.wrapperEl,o=a.progress,l=0,d=0;a.isHorizontal()?l=i?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),s.cssMode?n[a.isHorizontal()?\"scrollLeft\":\"scrollTop\"]=a.isHorizontal()?-l:-d:s.virtualTranslate||r.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px)\"),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:d;var p=a.maxTranslate()-a.minTranslate();(0===p?0:(e-a.minTranslate())/p)!==o&&a.updateProgress(e),a.emit(\"setTranslate\",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===i&&(i=!0);var r=this,n=r.params,o=r.wrapperEl;if(r.animating&&n.preventInteractionOnTransition)return!1;var l,d=r.minTranslate(),p=r.maxTranslate();if(l=i&&e>d?d:i&&e<p?p:e,r.updateProgress(l),n.cssMode){var c,u=r.isHorizontal();if(0===t)o[u?\"scrollLeft\":\"scrollTop\"]=-l;else if(o.scrollTo)o.scrollTo(((c={})[u?\"left\":\"top\"]=-l,c.behavior=\"smooth\",c));else o[u?\"scrollLeft\":\"scrollTop\"]=-l;return!0}return 0===t?(r.setTransition(0),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionEnd\"))):(r.setTransition(t),r.setTranslate(l),a&&(r.emit(\"beforeTransitionStart\",t,s),r.emit(\"transitionStart\")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit(\"transitionEnd\"))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var a=this;a.params.cssMode||a.$wrapperEl.transition(e),a.emit(\"setTransition\",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,r=a.previousIndex;if(!s.cssMode){s.autoHeight&&a.updateAutoHeight();var n=t;if(n||(n=i>r?\"next\":i<r?\"prev\":\"reset\"),a.emit(\"transitionStart\"),e&&i!==r){if(\"reset\"===n)return void a.emit(\"slideResetTransitionStart\");a.emit(\"slideChangeTransitionStart\"),\"next\"===n?a.emit(\"slideNextTransitionStart\"):a.emit(\"slidePrevTransitionStart\")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex,r=a.params;if(a.animating=!1,!r.cssMode){a.setTransition(0);var n=t;if(n||(n=i>s?\"next\":i<s?\"prev\":\"reset\"),a.emit(\"transitionEnd\"),e&&i!==s){if(\"reset\"===n)return void a.emit(\"slideResetTransitionEnd\");a.emit(\"slideChangeTransitionEnd\"),\"next\"===n?a.emit(\"slideNextTransitionEnd\"):a.emit(\"slidePrevTransitionEnd\")}}}},slide:{slideTo:function(e,t,a,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),\"number\"!=typeof e&&\"string\"!=typeof e)throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\"+typeof e+\"] given.\");if(\"string\"==typeof e){var s=parseInt(e,10);if(!isFinite(s))throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\"+e+\"] given.\");e=s}var r=this,n=e;n<0&&(n=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,p=r.previousIndex,c=r.activeIndex,u=r.rtlTranslate,h=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var v=Math.min(r.params.slidesPerGroupSkip,n),f=v+Math.floor((n-v)/r.params.slidesPerGroup);f>=l.length&&(f=l.length-1),(c||o.initialSlide||0)===(p||0)&&a&&r.emit(\"beforeSlideChangeStart\");var m,g=-l[f];if(r.updateProgress(g),o.normalizeSlideIndex)for(var b=0;b<d.length;b+=1){var w=-Math.floor(100*g),y=Math.floor(100*d[b]),E=Math.floor(100*d[b+1]);void 0!==d[b+1]?w>=y&&w<E-(E-y)/2?n=b:w>=y&&w<E&&(n=b+1):w>=y&&(n=b)}if(r.initialized&&n!==c){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(c||0)!==n)return!1}if(m=n>c?\"next\":n<c?\"prev\":\"reset\",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),\"slide\"!==o.effect&&r.setTranslate(g),\"reset\"!==m&&(r.transitionStart(a,m),r.transitionEnd(a,m)),!1;if(o.cssMode){var x,T=r.isHorizontal(),S=-g;if(u&&(S=h.scrollWidth-h.offsetWidth-S),0===t)h[T?\"scrollLeft\":\"scrollTop\"]=S;else if(h.scrollTo)h.scrollTo(((x={})[T?\"left\":\"top\"]=S,x.behavior=\"smooth\",x));else h[T?\"scrollLeft\":\"scrollTop\"]=S;return!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.transitionEnd(a,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit(\"beforeTransitionStart\",t,i),r.transitionStart(a,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,m))}),r.$wrapperEl[0].addEventListener(\"transitionend\",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,r=e;return s.params.loop&&(r+=s.loopedSlides),s.slideTo(r,t,a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}return i.slideTo(i.activeIndex+n,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(r&&s.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var p=d(l?i.translate:-i.translate),c=n.map((function(e){return d(e)}));n[c.indexOf(p)];var u,h=n[c.indexOf(p)-1];return void 0===h&&s.cssMode&&n.forEach((function(e){!h&&p>=e&&(h=e)})),void 0!==h&&(u=o.indexOf(h))<0&&(u=i.activeIndex-1),i.slideTo(u,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var s=this,r=s.activeIndex,n=Math.min(s.params.slidesPerGroupSkip,r),o=n+Math.floor((r-n)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){var d=s.snapGrid[o];l-d>(s.snapGrid[o+1]-d)*i&&(r+=s.params.slidesPerGroup)}else{var p=s.snapGrid[o-1];l-p<=(s.snapGrid[o]-p)*i&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s=\"auto\"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,r=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10),a.centeredSlides?r<t.loopedSlides-s/2||r>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-s?(t.loopFix(),r=i.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.slideDuplicateClass+\")\").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var e=this,t=r(),a=e.params,i=e.$wrapperEl;i.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass).remove();var s=i.children(\".\"+a.slideClass);if(a.loopFillGroupWithBlank){var n=a.slidesPerGroup-s.length%a.slidesPerGroup;if(n!==a.slidesPerGroup){for(var o=0;o<n;o+=1){var l=m(t.createElement(\"div\")).addClass(a.slideClass+\" \"+a.slideBlankClass);i.append(l)}s=i.children(\".\"+a.slideClass)}}\"auto\"!==a.slidesPerView||a.loopedSlides||(a.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(a.loopedSlides||a.slidesPerView,10)),e.loopedSlides+=a.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);var d=[],p=[];s.each((function(t,a){var i=m(t);a<e.loopedSlides&&p.push(t),a<s.length&&a>=s.length-e.loopedSlides&&d.push(t),i.attr(\"data-swiper-slide-index\",a)}));for(var c=0;c<p.length;c+=1)i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass));for(var u=d.length-1;u>=0;u-=1)i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass))},loopFix:function(){var e=this;e.emit(\"beforeLoopFix\");var t,a=e.activeIndex,i=e.slides,s=e.loopedSlides,r=e.allowSlidePrev,n=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[a]-e.getTranslate();if(a<s)t=i.length-3*s+a,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d);else if(a>=i.length-s){t=-i.length+a+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)}e.allowSlidePrev=r,e.allowSlideNext=n,e.emit(\"loopFix\")},loopDestroy:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides;t.children(\".\"+a.slideClass+\".\"+a.slideDuplicateClass+\",.\"+a.slideClass+\".\"+a.slideBlankClass).remove(),i.removeAttr(\"data-swiper-slide-index\")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var a=t.el;a.style.cursor=\"move\",a.style.cursor=e?\"-webkit-grabbing\":\"-webkit-grab\",a.style.cursor=e?\"-moz-grabbin\":\"-moz-grab\",a.style.cursor=e?\"grabbing\":\"grab\"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor=\"\")}},manipulation:{appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),\"object\"==typeof e&&\"length\"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var r=s+1;if(\"object\"==typeof e&&\"length\"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);r=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,r=a.activeIndex;s.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=i.children(\".\"+s.slideClass));var n=a.slides.length;if(e<=0)a.prependSlide(t);else if(e>=n)a.appendSlide(t);else{for(var o=r>e?r+1:r,l=[],d=n-1;d>=e;d-=1){var p=a.slides.eq(d);p.remove(),l.unshift(p)}if(\"object\"==typeof t&&\"length\"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);o=r>e?r+t.length:r}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&a.support.observer||a.update(),s.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children(\".\"+a.slideClass));var r,n=s;if(\"object\"==typeof e&&\"length\"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<n&&(n-=1),n=Math.max(n,0);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),a.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=A.bind(e),e.onTouchMove=D.bind(e),e.onTouchEnd=N.bind(e),a.cssMode&&(e.onScroll=H.bind(e)),e.onClick=B.bind(e);var d=!!a.nested;if(!l.touch&&l.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,d),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"touchstart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,p),s.addEventListener(i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),s.addEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,p),X||(t.addEventListener(\"touchstart\",Y),X=!0)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.addEventListener(\"mousedown\",e.onTouchStart,!1),t.addEventListener(\"mousemove\",e.onTouchMove,d),t.addEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.addEventListener(\"click\",e.onClick,!0),a.cssMode&&n.addEventListener(\"scroll\",e.onScroll),a.updateOnWindowResize?e.on(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G,!0):e.on(\"observerUpdate\",G,!0)},detachEvents:function(){var e=this,t=r(),a=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support,d=!!a.nested;if(!l.touch&&l.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,d),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var p=!(\"onTouchStart\"!==i.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,p),s.removeEventListener(i.move,e.onTouchMove,d),s.removeEventListener(i.end,e.onTouchEnd,p),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,p)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(s.removeEventListener(\"mousedown\",e.onTouchStart,!1),t.removeEventListener(\"mousemove\",e.onTouchMove,d),t.removeEventListener(\"mouseup\",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&s.removeEventListener(\"click\",e.onClick,!0),a.cssMode&&n.removeEventListener(\"scroll\",e.onScroll),e.off(o.ios||o.android?\"resize orientationchange observerUpdate\":\"resize observerUpdate\",G)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides,s=void 0===i?0:i,r=e.params,n=e.$el,o=r.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&[\"slidesPerView\",\"spaceBetween\",\"slidesPerGroup\",\"slidesPerGroupSkip\",\"slidesPerColumn\"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]=\"slidesPerView\"!==e||\"AUTO\"!==t&&\"auto\"!==t?\"slidesPerView\"===e?parseFloat(t):parseInt(t,10):\"auto\")}));var p=d||e.originalParams,c=r.slidesPerColumn>1,u=p.slidesPerColumn>1;c&&!u?(n.removeClass(r.containerModifierClass+\"multirow \"+r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses()):!c&&u&&(n.addClass(r.containerModifierClass+\"multirow\"),\"column\"===p.slidesPerColumnFill&&n.addClass(r.containerModifierClass+\"multirow-column\"),e.emitContainerClasses());var h=p.direction&&p.direction!==r.direction,v=r.loop&&(p.slidesPerView!==r.slidesPerView||h);h&&a&&e.changeDirection(),C(e.params,p),C(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit(\"_beforeBreakpoint\",p),v&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit(\"breakpoint\",p)}}},getBreakpoint:function(e,t,a){if(void 0===t&&(t=\"window\"),e&&(\"container\"!==t||a)){var i=!1,s=o(),r=\"window\"===t?s.innerWidth:a.clientWidth,n=\"window\"===t?s.innerHeight:a.clientHeight,l=Object.keys(e).map((function(e){if(\"string\"==typeof e&&0===e.indexOf(\"@\")){var t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var d=0;d<l.length;d+=1){var p=l[d],c=p.point;p.value<=r&&(i=c)}return i||\"max\"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,a=e.isLocked,i=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,a!==e.isLocked&&e.emit(e.isLocked?\"lock\":\"unlock\"),a&&a!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e,t,a,i=this,s=i.classNames,r=i.params,n=i.rtl,o=i.$el,l=i.device,d=i.support,p=(e=[\"initialized\",r.direction,{\"pointer-events\":d.pointerEvents&&!d.touch},{\"free-mode\":r.freeMode},{autoheight:r.autoHeight},{rtl:n},{multirow:r.slidesPerColumn>1},{\"multirow-column\":r.slidesPerColumn>1&&\"column\"===r.slidesPerColumnFill},{android:l.android},{ios:l.ios},{\"css-mode\":r.cssMode}],t=r.containerModifierClass,a=[],e.forEach((function(e){\"object\"==typeof e?Object.keys(e).forEach((function(i){e[i]&&a.push(t+i)})):\"string\"==typeof e&&a.push(t+e)})),a);s.push.apply(s,p),o.addClass([].concat(s).join(\" \")),i.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,a=e.classNames;t.removeClass(a.join(\" \")),e.emitContainerClasses()}},images:{loadImage:function(e,t,a,i,s,r){var n,l=o();function d(){r&&r()}m(e).parent(\"picture\")[0]||e.complete&&s?d():t?((n=new l.Image).onload=d,n.onerror=d,i&&(n.sizes=i),a&&(n.srcset=a),t&&(n.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit(\"imagesReady\")))}e.imagesToLoad=e.$el.find(\"img\");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute(\"src\"),i.srcset||i.getAttribute(\"srcset\"),i.sizes||i.getAttribute(\"sizes\"),!0,t)}}}},W={},F=function(){function t(){for(var e,a,i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];if(1===s.length&&s[0].constructor&&\"Object\"===Object.prototype.toString.call(s[0]).slice(8,-1)?a=s[0]:(e=s[0],a=s[1]),a||(a={}),a=C({},a),e&&!a.el&&(a.el=e),a.el&&m(a.el).length>1){var n=[];return m(a.el).each((function(e){var i=C({},a,{el:e});n.push(new t(i))})),n}var o=this;o.__swiper__=!0,o.support=P(),o.device=k({userAgent:a.userAgent}),o.browser=L(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(e){var t=o.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if(\"object\"!=typeof s||null===s)return;if(!(i in a)||!(\"enabled\"in s))return;!0===a[i]&&(a[i]={enabled:!0}),\"object\"!=typeof a[i]||\"enabled\"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}}));var l,d,p=C({},R);return o.useParams(p),o.params=C({},p,W,a),o.originalParams=C({},o.params),o.passedParams=C({},a),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=m,C(o,{el:e,classNames:[],slides:m(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return\"horizontal\"===o.params.direction},isVertical:function(){return\"vertical\"===o.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=[\"touchstart\",\"touchmove\",\"touchend\",\"touchcancel\"],d=[\"mousedown\",\"mousemove\",\"mouseup\"],o.support.pointerEvents&&(d=[\"pointerdown\",\"pointermove\",\"pointerup\"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},o.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:\"input, select, option, textarea, button, video, label\",lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit(\"_swiper\"),o.params.init&&o.init(),o}var a,i,s,r=t.prototype;return r.setProgress=function(e,t){var a=this;e=Math.min(Math.max(e,0),1);var i=a.minTranslate(),s=(a.maxTranslate()-i)*e+i;a.translateTo(s,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()},r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(\" \").filter((function(t){return 0===t.indexOf(\"swiper-container\")||0===t.indexOf(e.params.containerModifierClass)}));e.emit(\"_containerClasses\",t.join(\" \"))}},r.getSlideClasses=function(e){var t=this;return e.className.split(\" \").filter((function(e){return 0===e.indexOf(\"swiper-slide\")||0===e.indexOf(t.params.slideClass)})).join(\" \")},r.emitSlidesClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=[];e.slides.each((function(a){var i=e.getSlideClasses(a);t.push({slideEl:a,classNames:i}),e.emit(\"_slideClass\",a,i)})),e.emit(\"_slideClasses\",t)}},r.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,r=e.activeIndex,n=1;if(t.centeredSlides){for(var o,l=a[r].swiperSlideSize,d=r+1;d<a.length;d+=1)a[d]&&!o&&(n+=1,(l+=a[d].swiperSlideSize)>s&&(o=!0));for(var p=r-1;p>=0;p-=1)a[p]&&!o&&(n+=1,(l+=a[p].swiperSlideSize)>s&&(o=!0))}else for(var c=r+1;c<a.length;c+=1)i[c]-i[r]<s&&(n+=1);return n},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,a=e.params;a.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):((\"auto\"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),a.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit(\"update\")}function i(){var t=e.rtlTranslate?-1*e.translate:e.translate,a=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(a),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.direction;return e||(e=\"horizontal\"===i?\"vertical\":\"horizontal\"),e===i||\"horizontal\"!==e&&\"vertical\"!==e||(a.$el.removeClass(\"\"+a.params.containerModifierClass+i).addClass(\"\"+a.params.containerModifierClass+e),a.emitContainerClasses(),a.params.direction=e,a.slides.each((function(t){\"vertical\"===e?t.style.width=\"\":t.style.height=\"\"})),a.emit(\"changeDirection\"),t&&a.update()),a},r.mount=function(e){var t=this;if(t.mounted)return!0;var a,i=m(e||t.params.el);return!!(e=i[0])&&(e.swiper=t,e&&e.shadowRoot&&e.shadowRoot.querySelector?(a=m(e.shadowRoot.querySelector(\".\"+t.params.wrapperClass))).children=function(e){return i.children(e)}:a=i.children(\".\"+t.params.wrapperClass),C(t,{$el:i,el:e,$wrapperEl:a,wrapperEl:a[0],mounted:!0,rtl:\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\"),rtlTranslate:\"horizontal\"===t.params.direction&&(\"rtl\"===e.dir.toLowerCase()||\"rtl\"===i.css(\"direction\")),wrongRTL:\"-webkit-box\"===a.css(\"display\")}),!0)},r.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit(\"beforeInit\"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit),t.attachEvents(),t.initialized=!0,t.emit(\"init\"),t.emit(\"afterInit\")),t},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a,i=this,s=i.params,r=i.$el,n=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit(\"beforeDestroy\"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr(\"style\"),n.removeAttr(\"style\"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")),i.emit(\"destroy\"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,a=i,Object.keys(a).forEach((function(e){try{a[e]=null}catch(e){}try{delete a[e]}catch(e){}}))),i.destroyed=!0),null},t.extendDefaults=function(e){C(W,e)},t.installModule=function(e){t.prototype.modules||(t.prototype.modules={});var a=e.name||Object.keys(t.prototype.modules).length+\"_\"+x();t.prototype.modules[a]=e},t.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return t.installModule(e)})),t):(t.installModule(e),t)},a=t,s=[{key:\"extendedDefaults\",get:function(){return W}},{key:\"defaults\",get:function(){return R}}],(i=null)&&e(a.prototype,i),s&&e(a,s),t}();Object.keys(V).forEach((function(e){Object.keys(V[e]).forEach((function(t){F.prototype[t]=V[e][t]}))})),F.use([$,O]);var _={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,r=a.centeredSlides,n=t.params.virtual,o=n.addSlidesBefore,l=n.addSlidesAfter,d=t.virtual,p=d.from,c=d.to,u=d.slides,h=d.slidesGrid,v=d.renderSlide,f=d.offset;t.updateActiveIndex();var m,g,b,w=t.activeIndex||0;m=t.rtlTranslate?\"right\":t.isHorizontal()?\"left\":\"top\",r?(g=Math.floor(i/2)+s+l,b=Math.floor(i/2)+s+o):(g=i+(s-1)+l,b=s+o);var y=Math.max((w||0)-b,0),E=Math.min((w||0)+g,u.length-1),x=(t.slidesGrid[y]||0)-(t.slidesGrid[0]||0);function T(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(C(t.virtual,{from:y,to:E,offset:x,slidesGrid:t.slidesGrid}),p===y&&c===E&&!e)return t.slidesGrid!==h&&x!==f&&t.slides.css(m,x+\"px\"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:y,to:E,slides:function(){for(var e=[],t=y;t<=E;t+=1)e.push(u[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&T());var S=[],M=[];if(e)t.$wrapperEl.find(\".\"+t.params.slideClass).remove();else for(var z=p;z<=c;z+=1)(z<y||z>E)&&t.$wrapperEl.find(\".\"+t.params.slideClass+'[data-swiper-slide-index=\"'+z+'\"]').remove();for(var P=0;P<u.length;P+=1)P>=y&&P<=E&&(void 0===c||e?M.push(P):(P>c&&M.push(P),P<p&&S.push(P)));M.forEach((function(e){t.$wrapperEl.append(v(u[e],e))})),S.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(v(u[e],e))})),t.$wrapperEl.children(\".swiper-slide\").css(m,x+\"px\"),T()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];var s=i.renderSlide?m(i.renderSlide.call(a,e,t)):m('<div class=\"'+a.params.slideClass+'\" data-swiper-slide-index=\"'+t+'\">'+e+\"</div>\");return s.attr(\"data-swiper-slide-index\")||s.attr(\"data-swiper-slide-index\",t),i.cache&&(a.virtual.cache[t]=s),s},appendSlide:function(e){var t=this;if(\"object\"==typeof e&&\"length\"in e)for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.push(e[a]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide:function(e){var t=this,a=t.activeIndex,i=a+1,s=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&t.virtual.slides.unshift(e[r]);i=a+e.length,s=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var n=t.virtual.cache,o={};Object.keys(n).forEach((function(e){var t=n[e],a=t.attr(\"data-swiper-slide-index\");a&&t.attr(\"data-swiper-slide-index\",parseInt(a,10)+1),o[parseInt(e,10)+s]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(i,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&(a-=1),a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&(a-=1),a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},q={name:\"virtual\",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){M(this,{virtual:t({},_,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+\"virtual\");var t={watchSlidesProgress:!0};C(e.params,t),C(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},j={handle:function(e){var t=this,a=o(),i=r(),s=t.rtlTranslate,n=e;n.originalEvent&&(n=n.originalEvent);var l=n.keyCode||n.charCode,d=t.params.keyboard.pageUpDown,p=d&&33===l,c=d&&34===l,u=37===l,h=39===l,v=38===l,f=40===l;if(!t.allowSlideNext&&(t.isHorizontal()&&h||t.isVertical()&&f||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&u||t.isVertical()&&v||p))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&(\"input\"===i.activeElement.nodeName.toLowerCase()||\"textarea\"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(p||c||u||h||v||f)){var m=!1;if(t.$el.parents(\".\"+t.params.slideClass).length>0&&0===t.$el.parents(\".\"+t.params.slideActiveClass).length)return;var g=t.$el,b=g[0].clientWidth,w=g[0].clientHeight,y=a.innerWidth,E=a.innerHeight,x=t.$el.offset();s&&(x.left-=t.$el[0].scrollLeft);for(var T=[[x.left,x.top],[x.left+b,x.top],[x.left,x.top+w],[x.left+b,x.top+w]],S=0;S<T.length;S+=1){var C=T[S];if(C[0]>=0&&C[0]<=y&&C[1]>=0&&C[1]<=E){if(0===C[0]&&0===C[1])continue;m=!0}}if(!m)return}t.isHorizontal()?((p||c||u||h)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||h)&&!s||(p||u)&&s)&&t.slideNext(),((p||u)&&!s||(c||h)&&s)&&t.slidePrev()):((p||c||v||f)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||f)&&t.slideNext(),(p||v)&&t.slidePrev()),t.emit(\"keyPress\",l)}},enable:function(){var e=this,t=r();e.keyboard.enabled||(m(t).on(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=r();e.keyboard.enabled&&(m(t).off(\"keydown\",e.keyboard.handle),e.keyboard.enabled=!1)}},U={name:\"keyboard\",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){M(this,{keyboard:t({enabled:!1},j)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}};var K={lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return o().navigator.userAgent.indexOf(\"firefox\")>-1?\"DOMMouseScroll\":function(){var e=r(),t=\"onwheel\",a=t in e;if(!a){var i=e.createElement(\"div\");i.setAttribute(t,\"return;\"),a=\"function\"==typeof i.onwheel}return!a&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature(\"\",\"\")&&(a=e.implementation.hasFeature(\"Events.wheel\",\"3.0\")),a}()?\"wheel\":\"mousewheel\"},normalize:function(e){var t=0,a=0,i=0,s=0;return\"detail\"in e&&(a=e.detail),\"wheelDelta\"in e&&(a=-e.wheelDelta/120),\"wheelDeltaY\"in e&&(a=-e.wheelDeltaY/120),\"wheelDeltaX\"in e&&(t=-e.wheelDeltaX/120),\"axis\"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,\"deltaY\"in e&&(s=e.deltaY),\"deltaX\"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=s,s=0),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!a&&(a=s<1?-1:1),{spinX:t,spinY:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;a.params.cssMode&&t.preventDefault();var s=a.$el;if(\"container\"!==a.params.mousewheel.eventsTarget&&(s=m(a.params.mousewheel.eventsTarget)),!a.mouseEntered&&!s[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,n=a.rtlTranslate?-1:1,o=K.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*n}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*n:-o.pixelY;if(0===r)return!0;i.invert&&(r=-r);var l=a.getTranslate()+r*i.sensitivity;if(l>=a.minTranslate()&&(l=a.minTranslate()),l<=a.maxTranslate()&&(l=a.maxTranslate()),(!!a.params.loop||!(l===a.minTranslate()||l===a.maxTranslate()))&&a.params.nested&&t.stopPropagation(),a.params.freeMode){var d={time:x(),delta:Math.abs(r),direction:Math.sign(r)},p=a.mousewheel.lastEventBeforeSnap,c=p&&d.time<p.time+500&&d.delta<=p.delta&&d.direction===p.direction;if(!c){a.mousewheel.lastEventBeforeSnap=void 0,a.params.loop&&a.loopFix();var u=a.getTranslate()+r*i.sensitivity,h=a.isBeginning,v=a.isEnd;if(u>=a.minTranslate()&&(u=a.minTranslate()),u<=a.maxTranslate()&&(u=a.maxTranslate()),a.setTransition(0),a.setTranslate(u),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!h&&a.isBeginning||!v&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky){clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=void 0;var f=a.mousewheel.recentWheelEvents;f.length>=15&&f.shift();var g=f.length?f[f.length-1]:void 0,b=f[0];if(f.push(d),g&&(d.delta>g.delta||d.direction!==g.direction))f.splice(0);else if(f.length>=15&&d.time-b.time<500&&b.delta-d.delta>=1&&d.delta<=6){var w=r>0?.8:.2;a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.mousewheel.timeout=E((function(){a.slideToClosest(a.params.speed,!0,void 0,w)}),0)}a.mousewheel.timeout||(a.mousewheel.timeout=E((function(){a.mousewheel.lastEventBeforeSnap=d,f.splice(0),a.slideToClosest(a.params.speed,!0,void 0,.5)}),500))}if(c||a.emit(\"scroll\",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),u===a.minTranslate()||u===a.maxTranslate())return!0}}else{var y={time:x(),delta:Math.abs(r),direction:Math.sign(r),raw:e},T=a.mousewheel.recentWheelEvents;T.length>=2&&T.shift();var S=T.length?T[T.length-1]:void 0;if(T.push(y),S?(y.direction!==S.direction||y.delta>S.delta||y.time>S.time+150)&&a.mousewheel.animateSlider(y):a.mousewheel.animateSlider(y),a.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,a=o();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta)&&(!(this.params.mousewheel.thresholdTime&&x()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime)&&(e.delta>=6&&x()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit(\"scroll\",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit(\"scroll\",e.raw)),t.mousewheel.lastScrollTime=(new a.Date).getTime(),!1)))},releaseScroll:function(e){var t=this,a=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&a.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&a.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.on(\"mouseenter\",e.mousewheel.handleMouseEnter),a.on(\"mouseleave\",e.mousewheel.handleMouseLeave),a.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=K.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var a=e.$el;return\"container\"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},Z={toggleEl:function(e,t){e[t?\"addClass\":\"removeClass\"](this.params.navigation.disabledClass),e[0]&&\"BUTTON\"===e[0].tagName&&(e[0].disabled=t)},update:function(){var e=this,t=e.params.navigation,a=e.navigation.toggleEl;if(!e.params.loop){var i=e.navigation,s=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?a(r,!0):a(r,!1),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass)),s&&s.length>0&&(e.isEnd?a(s,!0):a(s,!1),s[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=m(i.nextEl),a.params.uniqueNavElements&&\"string\"==typeof i.nextEl&&e.length>1&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=m(i.prevEl),a.params.uniqueNavElements&&\"string\"==typeof i.prevEl&&t.length>1&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&e.length>0&&e.on(\"click\",a.navigation.onNextClick),t&&t.length>0&&t.on(\"click\",a.navigation.onPrevClick),C(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,i=t.$prevEl;a&&a.length&&(a.off(\"click\",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off(\"click\",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},J={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i,s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,n=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((i=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>s-1-2*e.loopedSlides&&(i-=s-2*e.loopedSlides),i>n-1&&(i-=n),i<0&&\"bullets\"!==e.params.paginationType&&(i=n+i)):i=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,\"bullets\"===a.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,p=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=p.eq(0)[e.isHorizontal()?\"outerWidth\":\"outerHeight\"](!0),r.css(e.isHorizontal()?\"width\":\"height\",e.pagination.bulletSize*(a.dynamicMainBullets+4)+\"px\"),a.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=i-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=i-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(p.length,a.dynamicMainBullets)-1))+o)/2),p.removeClass(a.bulletActiveClass+\" \"+a.bulletActiveClass+\"-next \"+a.bulletActiveClass+\"-next-next \"+a.bulletActiveClass+\"-prev \"+a.bulletActiveClass+\"-prev-prev \"+a.bulletActiveClass+\"-main\"),r.length>1)p.each((function(e){var t=m(e),s=t.index();s===i&&t.addClass(a.bulletActiveClass),a.dynamicBullets&&(s>=o&&s<=l&&t.addClass(a.bulletActiveClass+\"-main\"),s===o&&t.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),s===l&&t.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\"))}));else{var c=p.eq(i),u=c.index();if(c.addClass(a.bulletActiveClass),a.dynamicBullets){for(var h=p.eq(o),v=p.eq(l),f=o;f<=l;f+=1)p.eq(f).addClass(a.bulletActiveClass+\"-main\");if(e.params.loop)if(u>=p.length-a.dynamicMainBullets){for(var g=a.dynamicMainBullets;g>=0;g-=1)p.eq(p.length-g).addClass(a.bulletActiveClass+\"-main\");p.eq(p.length-a.dynamicMainBullets-1).addClass(a.bulletActiveClass+\"-prev\")}else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\");else h.prev().addClass(a.bulletActiveClass+\"-prev\").prev().addClass(a.bulletActiveClass+\"-prev-prev\"),v.next().addClass(a.bulletActiveClass+\"-next\").next().addClass(a.bulletActiveClass+\"-next-next\")}}if(a.dynamicBullets){var b=Math.min(p.length,a.dynamicMainBullets+4),w=(e.pagination.bulletSize*b-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,y=t?\"right\":\"left\";p.css(e.isHorizontal()?y:\"top\",w+\"px\")}}if(\"fraction\"===a.type&&(r.find(z(a.currentClass)).text(a.formatFractionCurrent(i+1)),r.find(z(a.totalClass)).text(a.formatFractionTotal(n))),\"progressbar\"===a.type){var E;E=a.progressbarOpposite?e.isHorizontal()?\"vertical\":\"horizontal\":e.isHorizontal()?\"horizontal\":\"vertical\";var x=(i+1)/n,T=1,S=1;\"horizontal\"===E?T=x:S=x,r.find(z(a.progressbarFillClass)).transform(\"translate3d(0,0,0) scaleX(\"+T+\") scaleY(\"+S+\")\").transition(e.params.speed)}\"custom\"===a.type&&a.renderCustom?(r.html(a.renderCustom(e,i+1,n)),e.emit(\"paginationRender\",r[0])):e.emit(\"paginationUpdate\",r[0]),r[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,s=\"\";if(\"bullets\"===t.type){var r=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&r>a&&(r=a);for(var n=0;n<r;n+=1)t.renderBullet?s+=t.renderBullet.call(e,n,t.bulletClass):s+=\"<\"+t.bulletElement+' class=\"'+t.bulletClass+'\"></'+t.bulletElement+\">\";i.html(s),e.pagination.bullets=i.find(z(t.bulletClass))}\"fraction\"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class=\"'+t.currentClass+'\"></span> / <span class=\"'+t.totalClass+'\"></span>',i.html(s)),\"progressbar\"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class=\"'+t.progressbarFillClass+'\"></span>',i.html(s)),\"custom\"!==t.type&&e.emit(\"paginationRender\",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var a=m(t.el);0!==a.length&&(e.params.uniqueNavElements&&\"string\"==typeof t.el&&a.length>1&&(a=e.$el.find(t.el)),\"bullets\"===t.type&&t.clickable&&a.addClass(t.clickableClass),a.addClass(t.modifierClass+t.type),\"bullets\"===t.type&&t.dynamicBullets&&(a.addClass(\"\"+t.modifierClass+t.type+\"-dynamic\"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),\"progressbar\"===t.type&&t.progressbarOpposite&&a.addClass(t.progressbarOppositeClass),t.clickable&&a.on(\"click\",z(t.bulletClass),(function(t){t.preventDefault();var a=m(this).index()*e.params.slidesPerGroup;e.params.loop&&(a+=e.loopedSlides),e.slideTo(a)})),C(e.pagination,{$el:a,el:a[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.pagination.$el;a.removeClass(t.hiddenClass),a.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&a.off(\"click\",z(t.bulletClass))}}},Q={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=e.rtlTranslate,i=e.progress,s=t.dragSize,r=t.trackSize,n=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=s,p=(r-s)*i;a?(p=-p)>0?(d=s-p,p=0):-p+s>r&&(d=r+p):p<0?(d=s+p,p=0):p+s>r&&(d=r-p),e.isHorizontal()?(n.transform(\"translate3d(\"+p+\"px, 0, 0)\"),n[0].style.width=d+\"px\"):(n.transform(\"translate3d(0px, \"+p+\"px, 0)\"),n[0].style.height=d+\"px\"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=t.$dragEl,i=t.$el;a[0].style.width=\"\",a[0].style.height=\"\";var s,r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,n=e.size/e.virtualSize,o=n*(r/e.size);s=\"auto\"===e.params.scrollbar.dragSize?r*n:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?a[0].style.width=s+\"px\":a[0].style.height=s+\"px\",i[0].style.display=n>=1?\"none\":\"\",e.params.scrollbar.hide&&(i[0].style.opacity=0),C(t,{trackSize:r,divider:n,moveDivider:o,dragSize:s}),t.$el[e.params.watchOverflow&&e.isLocked?\"addClass\":\"removeClass\"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientX:e.clientX:\"touchstart\"===e.type||\"touchmove\"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,a=this,i=a.scrollbar,s=a.rtlTranslate,r=i.$el,n=i.dragSize,o=i.trackSize,l=i.dragStartPos;t=(i.getPointerPosition(e)-r.offset()[a.isHorizontal()?\"left\":\"top\"]-(null!==l?l:n/2))/(o-n),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var d=a.minTranslate()+(a.maxTranslate()-a.minTranslate())*t;a.updateProgress(d),a.setTranslate(d),a.updateActiveIndex(),a.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el,n=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===n[0]||e.target===n?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?\"left\":\"top\"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),n.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),a.hide&&r.css(\"opacity\",1),t.params.cssMode&&t.$wrapperEl.css(\"scroll-snap-type\",\"none\"),t.emit(\"scrollbarDragStart\",e)},onDragMove:function(e){var t=this,a=t.scrollbar,i=t.$wrapperEl,s=a.$el,r=a.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,a.setDragPosition(e),i.transition(0),s.transition(0),r.transition(0),t.emit(\"scrollbarDragMove\",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css(\"scroll-snap-type\",\"\"),s.transition(\"\")),a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=E((function(){r.css(\"opacity\",0),r.transition(400)}),1e3)),t.emit(\"scrollbarDragEnd\",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.addEventListener(i.start,e.scrollbar.onDragStart,d),l.addEventListener(i.move,e.scrollbar.onDragMove,d),l.addEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.addEventListener(s.start,e.scrollbar.onDragStart,d),t.addEventListener(s.move,e.scrollbar.onDragMove,d),t.addEventListener(s.end,e.scrollbar.onDragEnd,p)))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,i=e.touchEventsTouch,s=e.touchEventsDesktop,n=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},p=!(!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.removeEventListener(i.start,e.scrollbar.onDragStart,d),l.removeEventListener(i.move,e.scrollbar.onDragMove,d),l.removeEventListener(i.end,e.scrollbar.onDragEnd,p)):(l.removeEventListener(s.start,e.scrollbar.onDragStart,d),t.removeEventListener(s.move,e.scrollbar.onDragMove,d),t.removeEventListener(s.end,e.scrollbar.onDragEnd,p)))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,a=e.$el,i=e.params.scrollbar,s=m(i.el);e.params.uniqueNavElements&&\"string\"==typeof i.el&&s.length>1&&1===a.find(i.el).length&&(s=a.find(i.el));var r=s.find(\".\"+e.params.scrollbar.dragClass);0===r.length&&(r=m('<div class=\"'+e.params.scrollbar.dragClass+'\"></div>'),s.append(r)),C(t,{$el:s,el:s[0],$dragEl:r,dragEl:r[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ee={setTransform:function(e,t){var a=this.rtl,i=m(e),s=a?-1:1,r=i.attr(\"data-swiper-parallax\")||\"0\",n=i.attr(\"data-swiper-parallax-x\"),o=i.attr(\"data-swiper-parallax-y\"),l=i.attr(\"data-swiper-parallax-scale\"),d=i.attr(\"data-swiper-parallax-opacity\");if(n||o?(n=n||\"0\",o=o||\"0\"):this.isHorizontal()?(n=r,o=\"0\"):(o=r,n=\"0\"),n=n.indexOf(\"%\")>=0?parseInt(n,10)*t*s+\"%\":n*t*s+\"px\",o=o.indexOf(\"%\")>=0?parseInt(o,10)*t+\"%\":o*t+\"px\",null!=d){var p=d-(d-1)*(1-Math.abs(t));i[0].style.opacity=p}if(null==l)i.transform(\"translate3d(\"+n+\", \"+o+\", 0px)\");else{var c=l-(l-1)*(1-Math.abs(t));i.transform(\"translate3d(\"+n+\", \"+o+\", 0px) scale(\"+c+\")\")}},setTranslate:function(){var e=this,t=e.$el,a=e.slides,i=e.progress,s=e.snapGrid;t.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,i)})),a.each((function(t,a){var r=t.progress;e.params.slidesPerGroup>1&&\"auto\"!==e.params.slidesPerView&&(r+=Math.ceil(a/2)-i*(s.length-1)),r=Math.min(Math.max(r,-1),1),m(t).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){e.parallax.setTransform(t,r)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t){var a=m(t),i=parseInt(a.attr(\"data-swiper-parallax-duration\"),10)||e;0===e&&(i=0),a.transition(i)}))}},te={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(s-a,2))},onGestureStart:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!a.gestures){if(\"touchstart\"!==e.type||\"touchstart\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,r.scaleStart=te.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=m(e.target).closest(\".\"+t.params.slideClass),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),r.$imageWrapEl=r.$imageEl.parent(\".\"+i.containerClass),r.maxRatio=r.$imageWrapEl.attr(\"data-swiper-zoom\")||i.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl&&r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(e){var t=this,a=t.support,i=t.params.zoom,s=t.zoom,r=s.gesture;if(!a.gestures){if(\"touchmove\"!==e.type||\"touchmove\"===e.type&&e.targetTouches.length<2)return;s.fakeGestureMoved=!0,r.scaleMove=te.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length?(a.gestures?s.scale=e.scale*s.currentScale:s.scale=r.scaleMove/r.scaleStart*s.currentScale,s.scale>r.maxRatio&&(s.scale=r.maxRatio-1+Math.pow(s.scale-r.maxRatio+1,.5)),s.scale<i.minRatio&&(s.scale=i.minRatio+1-Math.pow(i.minRatio-s.scale+1,.5)),r.$imageEl.transform(\"translate3d(0,0,0) scale(\"+s.scale+\")\")):\"gesturechange\"===e.type&&s.onGestureStart(e)},onGestureEnd:function(e){var t=this,a=t.device,i=t.support,s=t.params.zoom,r=t.zoom,n=r.gesture;if(!i.gestures){if(!r.fakeGestureTouched||!r.fakeGestureMoved)return;if(\"touchend\"!==e.type||\"touchend\"===e.type&&e.changedTouches.length<2&&!a.android)return;r.fakeGestureTouched=!1,r.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(r.scale=Math.max(Math.min(r.scale,n.maxRatio),s.minRatio),n.$imageEl.transition(t.params.speed).transform(\"translate3d(0,0,0) scale(\"+r.scale+\")\"),r.currentScale=r.scale,r.isScaling=!1,1===r.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,a=this.zoom,i=a.gesture,s=a.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(t.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x=\"touchstart\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y=\"touchstart\"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,r=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=T(i.$imageWrapEl[0],\"x\")||0,s.startY=T(i.$imageWrapEl[0],\"y\")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*a.scale,o=s.height*a.scale;if(!(n<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x=\"touchmove\"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y=\"touchmove\"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=s.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=s.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(s.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(s.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(s.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(s.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=s.touchesCurrent.x,r.prevPositionY=s.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform(\"translate3d(\"+s.currentX+\"px, \"+s.currentY+\"px,0)\")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,r=300,n=i.x*s,o=a.currentX+n,l=i.y*r,d=a.currentY+l;0!==i.x&&(s=Math.abs((o-a.currentX)/i.x)),0!==i.y&&(r=Math.abs((d-a.currentY)/i.y));var p=Math.max(s,r);a.currentX=o,a.currentY=d;var c=a.width*e.scale,u=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-c/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-u/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(p).transform(\"translate3d(\"+a.currentX+\"px, \"+a.currentY+\"px,0)\")}},onTransitionEnd:function(){var e=this,t=e.zoom,a=t.gesture;a.$slideEl&&e.previousIndex!==e.activeIndex&&(a.$imageEl&&a.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"),a.$imageWrapEl&&a.$imageWrapEl.transform(\"translate3d(0,0,0)\"),t.scale=1,t.currentScale=1,a.$slideEl=void 0,a.$imageEl=void 0,a.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s,r,n,l,d,p,c,u,h,v,f,m,g,b=this,w=o(),y=b.zoom,E=b.params.zoom,x=y.gesture,T=y.image;(x.$slideEl||(b.params.virtual&&b.params.virtual.enabled&&b.virtual?x.$slideEl=b.$wrapperEl.children(\".\"+b.params.slideActiveClass):x.$slideEl=b.slides.eq(b.activeIndex),x.$imageEl=x.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),x.$imageWrapEl=x.$imageEl.parent(\".\"+E.containerClass)),x.$imageEl&&0!==x.$imageEl.length)&&(x.$slideEl.addClass(\"\"+E.zoomedSlideClass),void 0===T.touchesStart.x&&e?(t=\"touchend\"===e.type?e.changedTouches[0].pageX:e.pageX,a=\"touchend\"===e.type?e.changedTouches[0].pageY:e.pageY):(t=T.touchesStart.x,a=T.touchesStart.y),y.scale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,y.currentScale=x.$imageWrapEl.attr(\"data-swiper-zoom\")||E.maxRatio,e?(m=x.$slideEl[0].offsetWidth,g=x.$slideEl[0].offsetHeight,i=x.$slideEl.offset().left+w.scrollX+m/2-t,s=x.$slideEl.offset().top+w.scrollY+g/2-a,l=x.$imageEl[0].offsetWidth,d=x.$imageEl[0].offsetHeight,p=l*y.scale,c=d*y.scale,v=-(u=Math.min(m/2-p/2,0)),f=-(h=Math.min(g/2-c/2,0)),(r=i*y.scale)<u&&(r=u),r>v&&(r=v),(n=s*y.scale)<h&&(n=h),n>f&&(n=f)):(r=0,n=0),x.$imageWrapEl.transition(300).transform(\"translate3d(\"+r+\"px, \"+n+\"px,0)\"),x.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\"+y.scale+\")\"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?i.$slideEl=e.$wrapperEl.children(\".\"+e.params.slideActiveClass):i.$slideEl=e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"),i.$imageWrapEl=i.$imageEl.parent(\".\"+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"),i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"),i.$slideEl.removeClass(\"\"+a.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(e){var t=this,a=t.zoom,i=a.slideSelector,s=a.passiveListener;t.$wrapperEl[e](\"gesturestart\",i,a.onGestureStart,s),t.$wrapperEl[e](\"gesturechange\",i,a.onGestureChange,s),t.$wrapperEl[e](\"gestureend\",i,a.onGestureEnd,s)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures(\"on\"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures(\"off\"))},enable:function(){var e=this,t=e.support,a=e.zoom;if(!a.enabled){a.enabled=!0;var i=!(\"touchstart\"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!t.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;e.zoom.passiveListener=i,e.zoom.slideSelector=r,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,r,a.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,r,a.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,r,a.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,r,a.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,\".\"+e.params.zoom.containerClass,a.onTouchMove,s)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var a=e.support;e.zoom.enabled=!1;var i=!(\"touchstart\"!==e.touchEvents.start||!a.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!a.passiveListener||{passive:!1,capture:!0},r=\".\"+e.params.slideClass;a.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,i)):\"touchstart\"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,r,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,r,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,r,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,r,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,\".\"+e.params.zoom.containerClass,t.onTouchMove,s)}}},ae={loadInSlide:function(e,t){void 0===t&&(t=!0);var a=this,i=a.params.lazy;if(void 0!==e&&0!==a.slides.length){var s=a.virtual&&a.params.virtual.enabled?a.$wrapperEl.children(\".\"+a.params.slideClass+'[data-swiper-slide-index=\"'+e+'\"]'):a.slides.eq(e),r=s.find(\".\"+i.elementClass+\":not(.\"+i.loadedClass+\"):not(.\"+i.loadingClass+\")\");!s.hasClass(i.elementClass)||s.hasClass(i.loadedClass)||s.hasClass(i.loadingClass)||r.push(s[0]),0!==r.length&&r.each((function(e){var r=m(e);r.addClass(i.loadingClass);var n=r.attr(\"data-background\"),o=r.attr(\"data-src\"),l=r.attr(\"data-srcset\"),d=r.attr(\"data-sizes\"),p=r.parent(\"picture\");a.loadImage(r[0],o||n,l,d,!1,(function(){if(null!=a&&a&&(!a||a.params)&&!a.destroyed){if(n?(r.css(\"background-image\",'url(\"'+n+'\")'),r.removeAttr(\"data-background\")):(l&&(r.attr(\"srcset\",l),r.removeAttr(\"data-srcset\")),d&&(r.attr(\"sizes\",d),r.removeAttr(\"data-sizes\")),p.length&&p.children(\"source\").each((function(e){var t=m(e);t.attr(\"data-srcset\")&&(t.attr(\"srcset\",t.attr(\"data-srcset\")),t.removeAttr(\"data-srcset\"))})),o&&(r.attr(\"src\",o),r.removeAttr(\"data-src\"))),r.addClass(i.loadedClass).removeClass(i.loadingClass),s.find(\".\"+i.preloaderClass).remove(),a.params.loop&&t){var e=s.attr(\"data-swiper-slide-index\");if(s.hasClass(a.params.slideDuplicateClass)){var c=a.$wrapperEl.children('[data-swiper-slide-index=\"'+e+'\"]:not(.'+a.params.slideDuplicateClass+\")\");a.lazy.loadInSlide(c.index(),!1)}else{var u=a.$wrapperEl.children(\".\"+a.params.slideDuplicateClass+'[data-swiper-slide-index=\"'+e+'\"]');a.lazy.loadInSlide(u.index(),!1)}}a.emit(\"lazyImageReady\",s[0],r[0]),a.params.autoHeight&&a.updateAutoHeight()}})),a.emit(\"lazyImageLoad\",s[0],r[0])}))}},load:function(){var e=this,t=e.$wrapperEl,a=e.params,i=e.slides,s=e.activeIndex,r=e.virtual&&a.virtual.enabled,n=a.lazy,o=a.slidesPerView;function l(e){if(r){if(t.children(\".\"+a.slideClass+'[data-swiper-slide-index=\"'+e+'\"]').length)return!0}else if(i[e])return!0;return!1}function d(e){return r?m(e).attr(\"data-swiper-slide-index\"):m(e).index()}if(\"auto\"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children(\".\"+a.slideVisibleClass).each((function(t){var a=r?m(t).attr(\"data-swiper-slide-index\"):m(t).index();e.lazy.loadInSlide(a)}));else if(o>1)for(var p=s;p<s+o;p+=1)l(p)&&e.lazy.loadInSlide(p);else e.lazy.loadInSlide(s);if(n.loadPrevNext)if(o>1||n.loadPrevNextAmount&&n.loadPrevNextAmount>1){for(var c=n.loadPrevNextAmount,u=o,h=Math.min(s+u+Math.max(c,u),i.length),v=Math.max(s-Math.max(u,c),0),f=s+o;f<h;f+=1)l(f)&&e.lazy.loadInSlide(f);for(var g=v;g<s;g+=1)l(g)&&e.lazy.loadInSlide(g)}else{var b=t.children(\".\"+a.slideNextClass);b.length>0&&e.lazy.loadInSlide(d(b));var w=t.children(\".\"+a.slidePrevClass);w.length>0&&e.lazy.loadInSlide(d(w))}},checkInViewOnLoad:function(){var e=o(),t=this;if(t&&!t.destroyed){var a=t.params.lazy.scrollingElement?m(t.params.lazy.scrollingElement):m(e),i=a[0]===e,s=i?e.innerWidth:a[0].offsetWidth,r=i?e.innerHeight:a[0].offsetHeight,n=t.$el.offset(),l=!1;t.rtlTranslate&&(n.left-=t.$el[0].scrollLeft);for(var d=[[n.left,n.top],[n.left+t.width,n.top],[n.left,n.top+t.height],[n.left+t.width,n.top+t.height]],p=0;p<d.length;p+=1){var c=d[p];if(c[0]>=0&&c[0]<=s&&c[1]>=0&&c[1]<=r){if(0===c[0]&&0===c[1])continue;l=!0}}l?(t.lazy.load(),a.off(\"scroll\",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,a.on(\"scroll\",t.lazy.checkInViewOnLoad))}}},ie={LinearSpline:function(e,t){var a,i,s,r,n,o=function(e,t){for(i=-1,a=e.length;a-i>1;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ie.LinearSpline(t.slidesGrid,e.slidesGrid):new ie.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,r=s.controller.control,n=s.constructor;function o(e){var t=s.rtlTranslate?-s.translate:s.translate;\"slide\"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&\"container\"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof n&&o(r[l]);else r instanceof n&&t!==r&&o(r)},setTransition:function(e,t){var a,i=this,s=i.constructor,r=i.controller.control;function n(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&E((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){r&&(t.params.loop&&\"slide\"===i.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(r))for(a=0;a<r.length;a+=1)r[a]!==t&&r[a]instanceof s&&n(r[a]);else r instanceof s&&t!==r&&n(r)}},se={getRandomNumber:function(e){void 0===e&&(e=16);return\"x\".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr(\"tabIndex\",\"0\"),e},makeElNotFocusable:function(e){return e.attr(\"tabIndex\",\"-1\"),e},addElRole:function(e,t){return e.attr(\"role\",t),e},addElRoleDescription:function(e,t){return e.attr(\"aria-roledescription\",t),e},addElControls:function(e,t){return e.attr(\"aria-controls\",t),e},addElLabel:function(e,t){return e.attr(\"aria-label\",t),e},addElId:function(e,t){return e.attr(\"id\",t),e},addElLive:function(e,t){return e.attr(\"aria-live\",t),e},disableEl:function(e){return e.attr(\"aria-disabled\",!0),e},enableEl:function(e){return e.attr(\"aria-disabled\",!1),e},onEnterOrSpaceKey:function(e){if(13===e.keyCode||32===e.keyCode){var t=this,a=t.params.a11y,i=m(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(a.lastSlideMessage):t.a11y.notify(a.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(a.firstSlideMessage):t.a11y.notify(a.prevSlideMessage)),t.pagination&&i.is(z(t.params.pagination.bulletClass))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(\"\"),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,a=t.$nextEl,i=t.$prevEl;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),a&&a.length>0&&(e.isEnd?(e.a11y.disableEl(a),e.a11y.makeElNotFocusable(a)):(e.a11y.enableEl(a),e.a11y.makeElFocusable(a)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(a){var i=m(a);e.a11y.makeElFocusable(i),e.params.pagination.renderBullet||(e.a11y.addElRole(i,\"button\"),e.a11y.addElLabel(i,t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/,i.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var a=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(a,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(a,t.containerMessage);var i,s,r,n=e.$wrapperEl,o=n.attr(\"id\")||\"swiper-wrapper-\"+e.a11y.getRandomNumber(16);e.a11y.addElId(n,o),i=e.params.autoplay&&e.params.autoplay.enabled?\"off\":\"polite\",e.a11y.addElLive(n,i),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(m(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(m(e.slides),t.slideRole),e.slides.each((function(a){var i=m(a),s=t.slideLabelMessage.replace(/\\{\\{index\\}\\}/,i.index()+1).replace(/\\{\\{slidesLength\\}\\}/,e.slides.length);e.a11y.addElLabel(i,s)})),e.navigation&&e.navigation.$nextEl&&(s=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(r=e.navigation.$prevEl),s&&s.length&&(e.a11y.makeElFocusable(s),\"BUTTON\"!==s[0].tagName&&(e.a11y.addElRole(s,\"button\"),s.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(s,t.nextSlideMessage),e.a11y.addElControls(s,o)),r&&r.length&&(e.a11y.makeElFocusable(r),\"BUTTON\"!==r[0].tagName&&(e.a11y.addElRole(r,\"button\"),r.on(\"keydown\",e.a11y.onEnterOrSpaceKey)),e.a11y.addElLabel(r,t.prevSlideMessage),e.a11y.addElControls(r,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on(\"keydown\",z(e.params.pagination.bulletClass),e.a11y.onEnterOrSpaceKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&a.a11y.liveRegion.length>0&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off(\"keydown\",a.a11y.onEnterOrSpaceKey),t&&t.off(\"keydown\",a.a11y.onEnterOrSpaceKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off(\"keydown\",z(a.params.pagination.bulletClass),a.a11y.onEnterOrSpaceKey)}},re={init:function(){var e=this,t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var a=e.history;a.initialized=!0,a.paths=re.getPathValues(e.params.url),(a.paths.key||a.paths.value)&&(a.scrollToSlide(0,a.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener(\"popstate\",e.history.setHistoryPopState))}},destroy:function(){var e=o();this.params.history.replaceState||e.removeEventListener(\"popstate\",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=re.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=o(),a=(e?new URL(e):t.location).pathname.slice(1).split(\"/\").filter((function(e){return\"\"!==e})),i=a.length;return{key:a[i-2],value:a[i-1]}},setHistory:function(e,t){var a=this,i=o();if(a.history.initialized&&a.params.history.enabled){var s;s=a.params.url?new URL(a.params.url):i.location;var r=a.slides.eq(t),n=re.slugify(r.attr(\"data-history\"));if(a.params.history.root.length>0){var l=a.params.history.root;\"/\"===l[l.length-1]&&(l=l.slice(0,l.length-1)),n=l+\"/\"+e+\"/\"+n}else s.pathname.includes(e)||(n=e+\"/\"+n);var d=i.history.state;d&&d.value===n||(a.params.history.replaceState?i.history.replaceState({value:n},null,n):i.history.pushState({value:n},null,n))}},slugify:function(e){return e.toString().replace(/\\s+/g,\"-\").replace(/[^\\w-]+/g,\"\").replace(/--+/g,\"-\").replace(/^-+/,\"\").replace(/-+$/,\"\")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,r=i.slides.length;s<r;s+=1){var n=i.slides.eq(s);if(re.slugify(n.attr(\"data-history\"))===t&&!n.hasClass(i.params.slideDuplicateClass)){var o=n.index();i.slideTo(o,e,a)}}else i.slideTo(0,e,a)}},ne={onHashCange:function(){var e=this,t=r();e.emit(\"hashChange\");var a=t.location.hash.replace(\"#\",\"\");if(a!==e.slides.eq(e.activeIndex).attr(\"data-hash\")){var i=e.$wrapperEl.children(\".\"+e.params.slideClass+'[data-hash=\"'+a+'\"]').index();if(void 0===i)return;e.slideTo(i)}},setHash:function(){var e=this,t=o(),a=r();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,\"#\"+e.slides.eq(e.activeIndex).attr(\"data-hash\")||\"\"),e.emit(\"hashSet\");else{var i=e.slides.eq(e.activeIndex),s=i.attr(\"data-hash\")||i.attr(\"data-history\");a.location.hash=s||\"\",e.emit(\"hashSet\")}},init:function(){var e=this,t=r(),a=o();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace(\"#\",\"\");if(i)for(var s=0,n=e.slides.length;s<n;s+=1){var l=e.slides.eq(s);if((l.attr(\"data-hash\")||l.attr(\"data-history\"))===i&&!l.hasClass(e.params.slideDuplicateClass)){var d=l.index();e.slideTo(d,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&m(a).on(\"hashchange\",e.hashNavigation.onHashCange)}},destroy:function(){var e=o();this.params.hashNavigation.watchState&&m(e).off(\"hashchange\",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr(\"data-swiper-autoplay\")&&(a=t.attr(\"data-swiper-autoplay\")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=E((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit(\"autoplay\")):(t=e.slideNext(e.params.speed,!0,!0),e.emit(\"autoplay\")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit(\"autoplayStart\"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit(\"autoplayStop\"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=r();\"hidden\"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),\"visible\"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener(\"transitionend\",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},le={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var r=0;e.isHorizontal()||(r=s,s=0);var n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:n}).transform(\"translate3d(\"+s+\"px, \"+r+\"px, 0px)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.$wrapperEl;if(a.transition(e),t.params.virtualTranslate&&0!==e){var s=!1;a.transitionEnd((function(){if(!s&&t&&!t.destroyed){s=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)i.trigger(e[a])}}))}}},de={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,r=t.width,n=t.height,o=t.rtlTranslate,l=t.size,d=t.browser,p=t.params.cubeEffect,c=t.isHorizontal(),u=t.virtual&&t.params.virtual.enabled,h=0;p.shadow&&(c?(0===(e=i.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),i.append(e)),e.css({height:r+\"px\"})):0===(e=a.find(\".swiper-cube-shadow\")).length&&(e=m('<div class=\"swiper-cube-shadow\"></div>'),a.append(e)));for(var v=0;v<s.length;v+=1){var f=s.eq(v),g=v;u&&(g=parseInt(f.attr(\"data-swiper-slide-index\"),10));var b=90*g,w=Math.floor(b/360);o&&(b=-b,w=Math.floor(-b/360));var y=Math.max(Math.min(f[0].progress,1),-1),E=0,x=0,T=0;g%4==0?(E=4*-w*l,T=0):(g-1)%4==0?(E=0,T=4*-w*l):(g-2)%4==0?(E=l+4*w*l,T=l):(g-3)%4==0&&(E=-l,T=3*l+4*l*w),o&&(E=-E),c||(x=E,E=0);var S=\"rotateX(\"+(c?0:-b)+\"deg) rotateY(\"+(c?b:0)+\"deg) translate3d(\"+E+\"px, \"+x+\"px, \"+T+\"px)\";if(y<=1&&y>-1&&(h=90*g+90*y,o&&(h=90*-g-90*y)),f.transform(S),p.slideShadows){var C=c?f.find(\".swiper-slide-shadow-left\"):f.find(\".swiper-slide-shadow-top\"),M=c?f.find(\".swiper-slide-shadow-right\"):f.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(c?\"left\":\"top\")+'\"></div>'),f.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(c?\"right\":\"bottom\")+'\"></div>'),f.append(M)),C.length&&(C[0].style.opacity=Math.max(-y,0)),M.length&&(M[0].style.opacity=Math.max(y,0))}}if(i.css({\"-webkit-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-moz-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"-ms-transform-origin\":\"50% 50% -\"+l/2+\"px\",\"transform-origin\":\"50% 50% -\"+l/2+\"px\"}),p.shadow)if(c)e.transform(\"translate3d(0px, \"+(r/2+p.shadowOffset)+\"px, \"+-r/2+\"px) rotateX(90deg) rotateZ(0deg) scale(\"+p.shadowScale+\")\");else{var z=Math.abs(h)-90*Math.floor(Math.abs(h)/90),P=1.5-(Math.sin(2*z*Math.PI/360)/2+Math.cos(2*z*Math.PI/360)/2),k=p.shadowScale,L=p.shadowScale/P,$=p.shadowOffset;e.transform(\"scale3d(\"+k+\", 1, \"+L+\") translate3d(0px, \"+(n/2+$)+\"px, \"+-n/2/L+\"px) rotateX(-90deg)\")}var I=d.isSafari||d.isWebView?-l/2:0;i.transform(\"translate3d(0px,0,\"+I+\"px) rotateX(\"+(t.isHorizontal()?0:h)+\"deg) rotateY(\"+(t.isHorizontal()?-h:0)+\"deg)\")},setTransition:function(e){var t=this,a=t.$el;t.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&a.find(\".swiper-cube-shadow\").transition(e)}},pe={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s=t.eq(i),r=s[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(s[0].progress,1),-1));var n=-180*r,o=0,l=-s[0].swiperSlideOffset,d=0;if(e.isHorizontal()?a&&(n=-n):(d=l,l=0,o=-n,n=0),s[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var p=e.isHorizontal()?s.find(\".swiper-slide-shadow-left\"):s.find(\".swiper-slide-shadow-top\"),c=e.isHorizontal()?s.find(\".swiper-slide-shadow-right\"):s.find(\".swiper-slide-shadow-bottom\");0===p.length&&(p=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"left\":\"top\")+'\"></div>'),s.append(p)),0===c.length&&(c=m('<div class=\"swiper-slide-shadow-'+(e.isHorizontal()?\"right\":\"bottom\")+'\"></div>'),s.append(c)),p.length&&(p[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}s.transform(\"translate3d(\"+l+\"px, \"+d+\"px, 0px) rotateX(\"+o+\"deg) rotateY(\"+n+\"deg)\")}},setTransition:function(e){var t=this,a=t.slides,i=t.activeIndex,s=t.$wrapperEl;if(a.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;a.eq(i).transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=[\"webkitTransitionEnd\",\"transitionend\"],a=0;a<e.length;a+=1)s.trigger(e[a])}}))}}},ce={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.slidesSizesGrid,r=e.params.coverflowEffect,n=e.isHorizontal(),o=e.translate,l=n?t/2-o:a/2-o,d=n?r.rotate:-r.rotate,p=r.depth,c=0,u=i.length;c<u;c+=1){var h=i.eq(c),v=s[c],f=(l-h[0].swiperSlideOffset-v/2)/v*r.modifier,g=n?d*f:0,b=n?0:d*f,w=-p*Math.abs(f),y=r.stretch;\"string\"==typeof y&&-1!==y.indexOf(\"%\")&&(y=parseFloat(r.stretch)/100*v);var E=n?0:y*f,x=n?y*f:0,T=1-(1-r.scale)*Math.abs(f);Math.abs(x)<.001&&(x=0),Math.abs(E)<.001&&(E=0),Math.abs(w)<.001&&(w=0),Math.abs(g)<.001&&(g=0),Math.abs(b)<.001&&(b=0),Math.abs(T)<.001&&(T=0);var S=\"translate3d(\"+x+\"px,\"+E+\"px,\"+w+\"px)  rotateX(\"+b+\"deg) rotateY(\"+g+\"deg) scale(\"+T+\")\";if(h.transform(S),h[0].style.zIndex=1-Math.abs(Math.round(f)),r.slideShadows){var C=n?h.find(\".swiper-slide-shadow-left\"):h.find(\".swiper-slide-shadow-top\"),M=n?h.find(\".swiper-slide-shadow-right\"):h.find(\".swiper-slide-shadow-bottom\");0===C.length&&(C=m('<div class=\"swiper-slide-shadow-'+(n?\"left\":\"top\")+'\"></div>'),h.append(C)),0===M.length&&(M=m('<div class=\"swiper-slide-shadow-'+(n?\"right\":\"bottom\")+'\"></div>'),h.append(M)),C.length&&(C[0].style.opacity=f>0?f:0),M.length&&(M[0].style.opacity=-f>0?-f:0)}}},setTransition:function(e){this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var a=e.constructor;return t.swiper instanceof a?(e.thumbs.swiper=t.swiper,C(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),C(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):S(t.swiper)&&(e.thumbs.swiper=new a(C({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on(\"tap\",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var a=t.clickedIndex,i=t.clickedSlide;if(!(i&&m(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==a)){var s;if(s=t.params.loop?parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"),10):a,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var n=e.slides.eq(r).prevAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index=\"'+s+'\"]').eq(0).index();s=void 0===n?o:void 0===o?n:o-r<r-n?o:n}e.slideTo(s)}}},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i=\"auto\"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView,s=t.params.thumbs.autoScrollOffset,r=s&&!a.params.loop;if(t.realIndex!==a.realIndex||r){var n,o,l=a.activeIndex;if(a.params.loop){a.slides.eq(l).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,l=a.activeIndex);var d=a.slides.eq(l).prevAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index(),p=a.slides.eq(l).nextAll('[data-swiper-slide-index=\"'+t.realIndex+'\"]').eq(0).index();n=void 0===d?p:void 0===p?d:p-l==l-d?l:p-l<l-d?p:d,o=t.activeIndex>t.previousIndex?\"next\":\"prev\"}else o=(n=t.realIndex)>t.previousIndex?\"next\":\"prev\";r&&(n+=\"next\"===o?s:-1*s),a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(n)<0&&(a.params.centeredSlides?n=n>l?n-Math.floor(i/2)+1:n+Math.floor(i/2)-1:n>l&&(n=n-i+1),a.slideTo(n,e?0:void 0))}var c=1,u=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(c=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(c=1),c=Math.floor(c),a.slides.removeClass(u),a.params.loop||a.params.virtual&&a.params.virtual.enabled)for(var h=0;h<c;h+=1)a.$wrapperEl.children('[data-swiper-slide-index=\"'+(t.realIndex+h)+'\"]').addClass(u);else for(var v=0;v<c;v+=1)a.slides.eq(t.realIndex+v).addClass(u)}}},he=[q,U,{name:\"mousewheel\",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:\"container\",thresholdDelta:null,thresholdTime:null}},create:function(){M(this,{mousewheel:{enabled:!1,lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:K.enable,disable:K.disable,handle:K.handle,handleMouseEnter:K.handleMouseEnter,handleMouseLeave:K.handleMouseLeave,animateSlider:K.animateSlider,releaseScroll:K.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:\"navigation\",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:\"swiper-button-disabled\",hiddenClass:\"swiper-button-hidden\",lockClass:\"swiper-button-lock\"}},create:function(){M(this,{navigation:t({},Z)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var a=e.navigation,i=a.$nextEl,s=a.$prevEl,r=t.target;if(e.params.navigation.hideOnClick&&!m(r).is(s)&&!m(r).is(i)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===r||e.pagination.el.contains(r)))return;var n;i?n=i.hasClass(e.params.navigation.hiddenClass):s&&(n=s.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit(\"navigationShow\"):e.emit(\"navigationHide\"),i&&i.toggleClass(e.params.navigation.hiddenClass),s&&s.toggleClass(e.params.navigation.hiddenClass)}}}},{name:\"pagination\",params:{pagination:{el:null,bulletElement:\"span\",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:\"bullets\",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:\"swiper-pagination-bullet\",bulletActiveClass:\"swiper-pagination-bullet-active\",modifierClass:\"swiper-pagination-\",currentClass:\"swiper-pagination-current\",totalClass:\"swiper-pagination-total\",hiddenClass:\"swiper-pagination-hidden\",progressbarFillClass:\"swiper-pagination-progressbar-fill\",progressbarOppositeClass:\"swiper-pagination-progressbar-opposite\",clickableClass:\"swiper-pagination-clickable\",lockClass:\"swiper-pagination-lock\"}},create:function(){M(this,{pagination:t({dynamicBulletIndex:0},J)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){var a=t.target;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!m(a).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&a===e.navigation.nextEl||e.navigation.prevEl&&a===e.navigation.prevEl))return;!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit(\"paginationShow\"):e.emit(\"paginationHide\"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass)}}}},{name:\"scrollbar\",params:{scrollbar:{el:null,dragSize:\"auto\",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:\"swiper-scrollbar-lock\",dragClass:\"swiper-scrollbar-drag\"}},create:function(){M(this,{scrollbar:t({isTouched:!1,timeout:null,dragTimeout:null},Q)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:\"parallax\",params:{parallax:{enabled:!1}},create:function(){M(this,{parallax:t({},ee)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:\"zoom\",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:\"swiper-zoom-container\",zoomedSlideClass:\"swiper-slide-zoomed\"}},create:function(){var e=this;M(e,{zoom:t({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},te)});var a=1;Object.defineProperty(e.zoom,\"scale\",{get:function(){return a},set:function(t){if(a!==t){var i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit(\"zoomChange\",t,i,s)}a=t}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:\"lazy\",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:\"\",elementClass:\"swiper-lazy\",loadingClass:\"swiper-lazy-loading\",loadedClass:\"swiper-lazy-loaded\",preloaderClass:\"swiper-lazy-preloader\"}},create:function(){M(this,{lazy:t({initialImageLoaded:!1},ae)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},\"scrollbarDragMove resize _freeModeNoMomentumRelease\":function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:\"controller\",params:{controller:{control:void 0,inverse:!1,by:\"slide\"}},create:function(){M(this,{controller:t({control:this.params.controller.control},ie)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,a){e.controller.control&&e.controller.setTranslate(t,a)},setTransition:function(e,t,a){e.controller.control&&e.controller.setTransition(t,a)}}},{name:\"a11y\",params:{a11y:{enabled:!0,notificationClass:\"swiper-notification\",prevSlideMessage:\"Previous slide\",nextSlideMessage:\"Next slide\",firstSlideMessage:\"This is the first slide\",lastSlideMessage:\"This is the last slide\",paginationBulletMessage:\"Go to slide {{index}}\",slideLabelMessage:\"{{index}} / {{slidesLength}}\",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:\"group\"}},create:function(){M(this,{a11y:t({},se,{liveRegion:m('<span class=\"'+this.params.a11y.notificationClass+'\" aria-live=\"assertive\" aria-atomic=\"true\"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:\"history\",params:{history:{enabled:!1,root:\"\",replaceState:!1,key:\"slides\"}},create:function(){M(this,{history:t({},re)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:\"hash-navigation\",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){M(this,{hashNavigation:t({initialized:!1},ne)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:\"autoplay\",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){M(this,{autoplay:t({},oe,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),r().addEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,a){e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),r().removeEventListener(\"visibilitychange\",e.autoplay.onVisibilityChange)}}},{name:\"effect-fade\",params:{fadeEffect:{crossFade:!1}},create:function(){M(this,{fadeEffect:t({},le)})},on:{beforeInit:function(e){if(\"fade\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"fade\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"fade\"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){\"fade\"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:\"effect-cube\",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){M(this,{cubeEffect:t({},de)})},on:{beforeInit:function(e){if(\"cube\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"cube\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"cube\"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){\"cube\"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:\"effect-flip\",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){M(this,{flipEffect:t({},pe)})},on:{beforeInit:function(e){if(\"flip\"===e.params.effect){e.classNames.push(e.params.containerModifierClass+\"flip\"),e.classNames.push(e.params.containerModifierClass+\"3d\");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){\"flip\"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){\"flip\"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:\"effect-coverflow\",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){M(this,{coverflowEffect:t({},ce)})},on:{beforeInit:function(e){\"coverflow\"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+\"coverflow\"),e.classNames.push(e.params.containerModifierClass+\"3d\"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){\"coverflow\"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:\"thumbs\",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:\"swiper-slide-thumb-active\",thumbsContainerClass:\"swiper-container-thumbs\"}},create:function(){M(this,{thumbs:t({swiper:null,initialized:!1},ue)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var a=e.thumbs.swiper;a&&a.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return F.use(he),F}));\n//# sourceMappingURL=swiper-bundle.min.js.map"},{"title":"about","date":"2021-12-18T07:32:26.000Z","layout":"about","_content":"\n# 关于我\n\n你好！我是 Nutcracker，一名热爱技术的开发者。\n\n## 技术栈\n\n- **前端开发**: React, Vue.js, JavaScript, TypeScript\n- **移动开发**: Android, Flutter\n- **后端开发**: Node.js, Java\n- **其他**: Git, Linux, Docker\n\n## 个人简介\n\n我专注于移动应用开发，特别是Android平台的开发。同时我也对前端技术有浓厚兴趣，喜欢探索各种新技术和框架。\n\n在这里，我会分享我的技术学习笔记、开发经验以及对行业的一些思考。\n\n## 联系方式\n\n如果你对我的文章感兴趣，或者有任何技术问题想要交流，欢迎通过以下方式联系我：\n\n- 📧 Email: mrchenzhaojun@gmail.com\n- 🐙 GitHub: [github.com/czj-dev](https://github.com/czj-dev)\n- 🧠 知乎: [chen-zhao-jun-27](https://www.zhihu.com/people/chen-zhao-jun-27)\n- 🎮 Steam: [NutcrackerX](https://steamcommunity.com/id/NutcrackerX)\n\n---\n\n> 你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-18 15:32:26\nlayout: about\n---\n\n# 关于我\n\n你好！我是 Nutcracker，一名热爱技术的开发者。\n\n## 技术栈\n\n- **前端开发**: React, Vue.js, JavaScript, TypeScript\n- **移动开发**: Android, Flutter\n- **后端开发**: Node.js, Java\n- **其他**: Git, Linux, Docker\n\n## 个人简介\n\n我专注于移动应用开发，特别是Android平台的开发。同时我也对前端技术有浓厚兴趣，喜欢探索各种新技术和框架。\n\n在这里，我会分享我的技术学习笔记、开发经验以及对行业的一些思考。\n\n## 联系方式\n\n如果你对我的文章感兴趣，或者有任何技术问题想要交流，欢迎通过以下方式联系我：\n\n- 📧 Email: mrchenzhaojun@gmail.com\n- 🐙 GitHub: [github.com/czj-dev](https://github.com/czj-dev)\n- 🧠 知乎: [chen-zhao-jun-27](https://www.zhihu.com/people/chen-zhao-jun-27)\n- 🎮 Steam: [NutcrackerX](https://steamcommunity.com/id/NutcrackerX)\n\n---\n\n> 你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。\n","updated":"2025-10-23T09:47:03.315Z","path":"about/index.html","_id":"cm10dm61j0000dry4gyyob4c7","comments":1,"content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>你好！我是 Nutcracker，一名热爱技术的开发者。</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li><strong>前端开发</strong>: React, Vue.js, JavaScript, TypeScript</li>\n<li><strong>移动开发</strong>: Android, Flutter</li>\n<li><strong>后端开发</strong>: Node.js, Java</li>\n<li><strong>其他</strong>: Git, Linux, Docker</li>\n</ul>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>我专注于移动应用开发，特别是Android平台的开发。同时我也对前端技术有浓厚兴趣，喜欢探索各种新技术和框架。</p>\n<p>在这里，我会分享我的技术学习笔记、开发经验以及对行业的一些思考。</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果你对我的文章感兴趣，或者有任何技术问题想要交流，欢迎通过以下方式联系我：</p>\n<ul>\n<li>📧 Email: <a href=\"mailto:&#109;&#x72;&#99;&#104;&#x65;&#x6e;&#x7a;&#104;&#x61;&#111;&#106;&#117;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;\">&#109;&#x72;&#99;&#104;&#x65;&#x6e;&#x7a;&#104;&#x61;&#111;&#106;&#117;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></li>\n<li>🐙 GitHub: <a href=\"https://github.com/czj-dev\">github.com&#x2F;czj-dev</a></li>\n<li>🧠 知乎: <a href=\"https://www.zhihu.com/people/chen-zhao-jun-27\">chen-zhao-jun-27</a></li>\n<li>🎮 Steam: <a href=\"https://steamcommunity.com/id/NutcrackerX\">NutcrackerX</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>你好！我是 Nutcracker，一名热爱技术的开发者。</p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li><strong>前端开发</strong>: React, Vue.js, JavaScript, TypeScript</li>\n<li><strong>移动开发</strong>: Android, Flutter</li>\n<li><strong>后端开发</strong>: Node.js, Java</li>\n<li><strong>其他</strong>: Git, Linux, Docker</li>\n</ul>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>我专注于移动应用开发，特别是Android平台的开发。同时我也对前端技术有浓厚兴趣，喜欢探索各种新技术和框架。</p>\n<p>在这里，我会分享我的技术学习笔记、开发经验以及对行业的一些思考。</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果你对我的文章感兴趣，或者有任何技术问题想要交流，欢迎通过以下方式联系我：</p>\n<ul>\n<li>📧 Email: <a href=\"mailto:&#109;&#x72;&#99;&#104;&#x65;&#x6e;&#x7a;&#104;&#x61;&#111;&#106;&#117;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;\">&#109;&#x72;&#99;&#104;&#x65;&#x6e;&#x7a;&#104;&#x61;&#111;&#106;&#117;&#x6e;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></li>\n<li>🐙 GitHub: <a href=\"https://github.com/czj-dev\">github.com&#x2F;czj-dev</a></li>\n<li>🧠 知乎: <a href=\"https://www.zhihu.com/people/chen-zhao-jun-27\">chen-zhao-jun-27</a></li>\n<li>🎮 Steam: <a href=\"https://steamcommunity.com/id/NutcrackerX\">NutcrackerX</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。</p>\n</blockquote>\n"},{"_content":"/* 自定义样式 - 隐藏about页面标题 */\n.about-page .intro-title {\n    display: none !important;\n}\n\n/* 可选：调整about页面的副标题位置 */\n.about-page .intro-subtitle {\n    margin-top: 0;\n}","source":"css/custom.css","raw":"/* 自定义样式 - 隐藏about页面标题 */\n.about-page .intro-title {\n    display: none !important;\n}\n\n/* 可选：调整about页面的副标题位置 */\n.about-page .intro-subtitle {\n    margin-top: 0;\n}","date":"2025-10-23T09:48:16.498Z","updated":"2025-10-23T09:48:16.497Z","path":"css/custom.css","layout":"false","_id":"cmh38oogi00003cuy6l6qh88g","title":"","comments":1,"content":"/* 自定义样式 - 隐藏about页面标题 */\n.about-page .intro-title {\n    display: none !important;\n}\n\n/* 可选：调整about页面的副标题位置 */\n.about-page .intro-subtitle {\n    margin-top: 0;\n}","site":{"data":{}},"excerpt":"","more":"/* 自定义样式 - 隐藏about页面标题 */\n.about-page .intro-title {\n    display: none !important;\n}\n\n/* 可选：调整about页面的副标题位置 */\n.about-page .intro-subtitle {\n    margin-top: 0;\n}"}],"Post":[{"layout":"post","title":"Hello Blog","subtitle":"\"Welcome to Just Blog\"","date":"2017-01-23T08:59:51.000Z","author":"chenzhaojun","header_image":"img/post-bg-2015.jpg","_content":"\n> A new start\n\n## 前言\n\n年底的几天公司比较轻松，想到[郭神](http://my.csdn.net/sinyu890807)之前发过一篇使用[hexo](https://hexo.io/)+[GithubPages](https://pages.github.com/)搭建博客的文章，就想尝试一下。就搭建了一个以 next 为主题的 blog。![next](http://7xrz9n.com1.z0.glb.clouddn.com/hexo31.png)非常的小清新，但总感觉不够精(zhuang)细(bi)，随即又花功夫去找了别的主题。看到了[黄玄](https://huangxuan.me/)的博客感觉看的非常舒适，虽然并不是[hexo](https://hexo.io/)而是[jekll](http://jekyll.com.cn/)构建意味着要重头再来，但秉着美即使正义的观念还是重新做了，最后就有了现在博客的样式。在此感谢[黄玄](https://huangxuan.me/)的开源，感兴趣的可以去 start 一下。\n\n## 正文\n\n搭建博客的目前除了开阔新视野、尝试一下新东西，也是想要在新的一年有一个新的开始。虽然今年的我依然是个弱鸡\n\n![弱鸡](http://p1.bpimg.com/4851/6ed7eeb047a4910b.jpg)\n\n但在新年还是里对自己抱有小小的期待，能够比之前努力那么一点点且可以将这个过程记录下来，那么这个 blog 的建立就非常成功了。\n\n## 后记\n\n从没见过如此简单的正文吧，嘿嘿。没关系，现在让你见识见识比正文还长的后记。其实不打算追加内容的，但是想想 2016 年的计划书连灰都找不到了，完成的事无处打勾，没完成的事情死无对证，咳咳，虽然对自己而言是比较好的结果，还是不希望这样。于是就贴一下 17 年的计划。\n\n### Hello,2017\n\n#### 坚持阅读，至少把 Kindle 里 23 本书给读完。\n\n16 年无论是什么方面的书都读的很少，一直很惭愧，几本专业书籍也一直啃不下去。下班可以把看 B 站的空闲时间给省出来读一些书，期待读书给我的变化。重点是以下基本几本书:\n\n- **Android 艺术开发探索**\n- **Head First 设计模式**\n- **算法**\n- **了不起的盖茨比**\n- **教父**\n- **追风筝的人**\n- **自控力**\n- **跟任何都聊得来**\n- **关键对话:如何高效能沟通**\n\n#### 开始连击\n\n很多习惯要坚持下去才有用。[Loop Habit Tracker](https://github.com/iSoron/uhabits)这款开源 App 可以帮我记录下连击天数和坚持的天数。希望在 2017 年有一个漂亮的成绩。以下是目前列的几项\n\n- **骑车**\n- **跑步**\n- **英语**\n- **阅读**\n- **code**\n\n#### 坚持写博客\n\n很多时候坚持不下来就是因为得不到反馈，没有精神上的力量坚持自己努力下去。发朋友圈更多的获得到的是别人的嘻哈，而博客从书写到维护都是不停锻炼自己。从阅读中获得灵感、从折腾中提升前端的能力、保持对新事物的热度、让别人和自己看到努力的成果。这些都是我想要的，而不是三分钟热度，玩过就甩。\n\n#### 熟悉一门新的语言\n\n虽然目前`Android`都够呛，但是保持学习的热心也是很有必要的。而且前端和移动客户端的交叉越来越大，学习一门前端语言并不是一件坏事。目前决定是`javaScript`虽然已经开始断断续续的学习还是给自己立一个明确的目标比较好。\n\n#### 开发一款自己的 APP\n\n既然是干这行的不从这方面拿出一个看的过去东西实在太说不过去了，且很多东西工作中用不到但确实需要自己去实践，比如有特色的自定义 View、Android 高版本的新特性、复杂一点的数据库都是需要自己去实践而不是写一个两个 demo 和看看贴自己就可以了。看是重构自己的知乎新闻还是选一个新题材就再议了。\n\n> 从身轻如燕，不想举铁，到身重如山，不愿挪窝，可能只是一个星期的事。之后，坚持就成了遥远的记忆。知道某年某月，受了什么刺激，痛心疾首时，又开始一次轮回。\n>\n> ​ ——ze ran\n\n这些就是 2017 的 Plan 了，做到了不错，有超额的惊喜更好，但是最想告诉自己：**哪怕中途失败了也不要因为一个所谓的“完美”而放弃，自我安慰的选择另一个可笑的开始。摔跤了就立刻爬起来而不是把头钻进土里。**\n\n——2017-1-24\n","source":"_posts/2017-01-23-new_start.markdown","raw":"---\nlayout: post\ntitle: \"Hello Blog\"\nsubtitle: '\"Welcome to Just Blog\"'\ndate: 2017-01-23  16:59:51\nauthor: \"chenzhaojun\"\nheader_image: \"img/post-bg-2015.jpg\"\ntags:\n  - 生活\n---\n\n> A new start\n\n## 前言\n\n年底的几天公司比较轻松，想到[郭神](http://my.csdn.net/sinyu890807)之前发过一篇使用[hexo](https://hexo.io/)+[GithubPages](https://pages.github.com/)搭建博客的文章，就想尝试一下。就搭建了一个以 next 为主题的 blog。![next](http://7xrz9n.com1.z0.glb.clouddn.com/hexo31.png)非常的小清新，但总感觉不够精(zhuang)细(bi)，随即又花功夫去找了别的主题。看到了[黄玄](https://huangxuan.me/)的博客感觉看的非常舒适，虽然并不是[hexo](https://hexo.io/)而是[jekll](http://jekyll.com.cn/)构建意味着要重头再来，但秉着美即使正义的观念还是重新做了，最后就有了现在博客的样式。在此感谢[黄玄](https://huangxuan.me/)的开源，感兴趣的可以去 start 一下。\n\n## 正文\n\n搭建博客的目前除了开阔新视野、尝试一下新东西，也是想要在新的一年有一个新的开始。虽然今年的我依然是个弱鸡\n\n![弱鸡](http://p1.bpimg.com/4851/6ed7eeb047a4910b.jpg)\n\n但在新年还是里对自己抱有小小的期待，能够比之前努力那么一点点且可以将这个过程记录下来，那么这个 blog 的建立就非常成功了。\n\n## 后记\n\n从没见过如此简单的正文吧，嘿嘿。没关系，现在让你见识见识比正文还长的后记。其实不打算追加内容的，但是想想 2016 年的计划书连灰都找不到了，完成的事无处打勾，没完成的事情死无对证，咳咳，虽然对自己而言是比较好的结果，还是不希望这样。于是就贴一下 17 年的计划。\n\n### Hello,2017\n\n#### 坚持阅读，至少把 Kindle 里 23 本书给读完。\n\n16 年无论是什么方面的书都读的很少，一直很惭愧，几本专业书籍也一直啃不下去。下班可以把看 B 站的空闲时间给省出来读一些书，期待读书给我的变化。重点是以下基本几本书:\n\n- **Android 艺术开发探索**\n- **Head First 设计模式**\n- **算法**\n- **了不起的盖茨比**\n- **教父**\n- **追风筝的人**\n- **自控力**\n- **跟任何都聊得来**\n- **关键对话:如何高效能沟通**\n\n#### 开始连击\n\n很多习惯要坚持下去才有用。[Loop Habit Tracker](https://github.com/iSoron/uhabits)这款开源 App 可以帮我记录下连击天数和坚持的天数。希望在 2017 年有一个漂亮的成绩。以下是目前列的几项\n\n- **骑车**\n- **跑步**\n- **英语**\n- **阅读**\n- **code**\n\n#### 坚持写博客\n\n很多时候坚持不下来就是因为得不到反馈，没有精神上的力量坚持自己努力下去。发朋友圈更多的获得到的是别人的嘻哈，而博客从书写到维护都是不停锻炼自己。从阅读中获得灵感、从折腾中提升前端的能力、保持对新事物的热度、让别人和自己看到努力的成果。这些都是我想要的，而不是三分钟热度，玩过就甩。\n\n#### 熟悉一门新的语言\n\n虽然目前`Android`都够呛，但是保持学习的热心也是很有必要的。而且前端和移动客户端的交叉越来越大，学习一门前端语言并不是一件坏事。目前决定是`javaScript`虽然已经开始断断续续的学习还是给自己立一个明确的目标比较好。\n\n#### 开发一款自己的 APP\n\n既然是干这行的不从这方面拿出一个看的过去东西实在太说不过去了，且很多东西工作中用不到但确实需要自己去实践，比如有特色的自定义 View、Android 高版本的新特性、复杂一点的数据库都是需要自己去实践而不是写一个两个 demo 和看看贴自己就可以了。看是重构自己的知乎新闻还是选一个新题材就再议了。\n\n> 从身轻如燕，不想举铁，到身重如山，不愿挪窝，可能只是一个星期的事。之后，坚持就成了遥远的记忆。知道某年某月，受了什么刺激，痛心疾首时，又开始一次轮回。\n>\n> ​ ——ze ran\n\n这些就是 2017 的 Plan 了，做到了不错，有超额的惊喜更好，但是最想告诉自己：**哪怕中途失败了也不要因为一个所谓的“完美”而放弃，自我安慰的选择另一个可笑的开始。摔跤了就立刻爬起来而不是把头钻进土里。**\n\n——2017-1-24\n","slug":"2017-01-23-new_start","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6oq0001s2y4emw0gq83","content":"<blockquote>\n<p>A new start</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>年底的几天公司比较轻松，想到<a href=\"http://my.csdn.net/sinyu890807\">郭神</a>之前发过一篇使用<a href=\"https://hexo.io/\">hexo</a>+<a href=\"https://pages.github.com/\">GithubPages</a>搭建博客的文章，就想尝试一下。就搭建了一个以 next 为主题的 blog。<img src=\"http://7xrz9n.com1.z0.glb.clouddn.com/hexo31.png\" alt=\"next\">非常的小清新，但总感觉不够精(zhuang)细(bi)，随即又花功夫去找了别的主题。看到了<a href=\"https://huangxuan.me/\">黄玄</a>的博客感觉看的非常舒适，虽然并不是<a href=\"https://hexo.io/\">hexo</a>而是<a href=\"http://jekyll.com.cn/\">jekll</a>构建意味着要重头再来，但秉着美即使正义的观念还是重新做了，最后就有了现在博客的样式。在此感谢<a href=\"https://huangxuan.me/\">黄玄</a>的开源，感兴趣的可以去 start 一下。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>搭建博客的目前除了开阔新视野、尝试一下新东西，也是想要在新的一年有一个新的开始。虽然今年的我依然是个弱鸡</p>\n<p><img src=\"http://p1.bpimg.com/4851/6ed7eeb047a4910b.jpg\" alt=\"弱鸡\"></p>\n<p>但在新年还是里对自己抱有小小的期待，能够比之前努力那么一点点且可以将这个过程记录下来，那么这个 blog 的建立就非常成功了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>从没见过如此简单的正文吧，嘿嘿。没关系，现在让你见识见识比正文还长的后记。其实不打算追加内容的，但是想想 2016 年的计划书连灰都找不到了，完成的事无处打勾，没完成的事情死无对证，咳咳，虽然对自己而言是比较好的结果，还是不希望这样。于是就贴一下 17 年的计划。</p>\n<h3 id=\"Hello-2017\"><a href=\"#Hello-2017\" class=\"headerlink\" title=\"Hello,2017\"></a>Hello,2017</h3><h4 id=\"坚持阅读，至少把-Kindle-里-23-本书给读完。\"><a href=\"#坚持阅读，至少把-Kindle-里-23-本书给读完。\" class=\"headerlink\" title=\"坚持阅读，至少把 Kindle 里 23 本书给读完。\"></a>坚持阅读，至少把 Kindle 里 23 本书给读完。</h4><p>16 年无论是什么方面的书都读的很少，一直很惭愧，几本专业书籍也一直啃不下去。下班可以把看 B 站的空闲时间给省出来读一些书，期待读书给我的变化。重点是以下基本几本书:</p>\n<ul>\n<li><strong>Android 艺术开发探索</strong></li>\n<li><strong>Head First 设计模式</strong></li>\n<li><strong>算法</strong></li>\n<li><strong>了不起的盖茨比</strong></li>\n<li><strong>教父</strong></li>\n<li><strong>追风筝的人</strong></li>\n<li><strong>自控力</strong></li>\n<li><strong>跟任何都聊得来</strong></li>\n<li><strong>关键对话:如何高效能沟通</strong></li>\n</ul>\n<h4 id=\"开始连击\"><a href=\"#开始连击\" class=\"headerlink\" title=\"开始连击\"></a>开始连击</h4><p>很多习惯要坚持下去才有用。<a href=\"https://github.com/iSoron/uhabits\">Loop Habit Tracker</a>这款开源 App 可以帮我记录下连击天数和坚持的天数。希望在 2017 年有一个漂亮的成绩。以下是目前列的几项</p>\n<ul>\n<li><strong>骑车</strong></li>\n<li><strong>跑步</strong></li>\n<li><strong>英语</strong></li>\n<li><strong>阅读</strong></li>\n<li><strong>code</strong></li>\n</ul>\n<h4 id=\"坚持写博客\"><a href=\"#坚持写博客\" class=\"headerlink\" title=\"坚持写博客\"></a>坚持写博客</h4><p>很多时候坚持不下来就是因为得不到反馈，没有精神上的力量坚持自己努力下去。发朋友圈更多的获得到的是别人的嘻哈，而博客从书写到维护都是不停锻炼自己。从阅读中获得灵感、从折腾中提升前端的能力、保持对新事物的热度、让别人和自己看到努力的成果。这些都是我想要的，而不是三分钟热度，玩过就甩。</p>\n<h4 id=\"熟悉一门新的语言\"><a href=\"#熟悉一门新的语言\" class=\"headerlink\" title=\"熟悉一门新的语言\"></a>熟悉一门新的语言</h4><p>虽然目前<code>Android</code>都够呛，但是保持学习的热心也是很有必要的。而且前端和移动客户端的交叉越来越大，学习一门前端语言并不是一件坏事。目前决定是<code>javaScript</code>虽然已经开始断断续续的学习还是给自己立一个明确的目标比较好。</p>\n<h4 id=\"开发一款自己的-APP\"><a href=\"#开发一款自己的-APP\" class=\"headerlink\" title=\"开发一款自己的 APP\"></a>开发一款自己的 APP</h4><p>既然是干这行的不从这方面拿出一个看的过去东西实在太说不过去了，且很多东西工作中用不到但确实需要自己去实践，比如有特色的自定义 View、Android 高版本的新特性、复杂一点的数据库都是需要自己去实践而不是写一个两个 demo 和看看贴自己就可以了。看是重构自己的知乎新闻还是选一个新题材就再议了。</p>\n<blockquote>\n<p>从身轻如燕，不想举铁，到身重如山，不愿挪窝，可能只是一个星期的事。之后，坚持就成了遥远的记忆。知道某年某月，受了什么刺激，痛心疾首时，又开始一次轮回。</p>\n<p>​ ——ze ran</p>\n</blockquote>\n<p>这些就是 2017 的 Plan 了，做到了不错，有超额的惊喜更好，但是最想告诉自己：<strong>哪怕中途失败了也不要因为一个所谓的“完美”而放弃，自我安慰的选择另一个可笑的开始。摔跤了就立刻爬起来而不是把头钻进土里。</strong></p>\n<p>——2017-1-24</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>A new start</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>年底的几天公司比较轻松，想到<a href=\"http://my.csdn.net/sinyu890807\">郭神</a>之前发过一篇使用<a href=\"https://hexo.io/\">hexo</a>+<a href=\"https://pages.github.com/\">GithubPages</a>搭建博客的文章，就想尝试一下。就搭建了一个以 next 为主题的 blog。<img src=\"http://7xrz9n.com1.z0.glb.clouddn.com/hexo31.png\" alt=\"next\">非常的小清新，但总感觉不够精(zhuang)细(bi)，随即又花功夫去找了别的主题。看到了<a href=\"https://huangxuan.me/\">黄玄</a>的博客感觉看的非常舒适，虽然并不是<a href=\"https://hexo.io/\">hexo</a>而是<a href=\"http://jekyll.com.cn/\">jekll</a>构建意味着要重头再来，但秉着美即使正义的观念还是重新做了，最后就有了现在博客的样式。在此感谢<a href=\"https://huangxuan.me/\">黄玄</a>的开源，感兴趣的可以去 start 一下。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>搭建博客的目前除了开阔新视野、尝试一下新东西，也是想要在新的一年有一个新的开始。虽然今年的我依然是个弱鸡</p>\n<p><img src=\"http://p1.bpimg.com/4851/6ed7eeb047a4910b.jpg\" alt=\"弱鸡\"></p>\n<p>但在新年还是里对自己抱有小小的期待，能够比之前努力那么一点点且可以将这个过程记录下来，那么这个 blog 的建立就非常成功了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>从没见过如此简单的正文吧，嘿嘿。没关系，现在让你见识见识比正文还长的后记。其实不打算追加内容的，但是想想 2016 年的计划书连灰都找不到了，完成的事无处打勾，没完成的事情死无对证，咳咳，虽然对自己而言是比较好的结果，还是不希望这样。于是就贴一下 17 年的计划。</p>\n<h3 id=\"Hello-2017\"><a href=\"#Hello-2017\" class=\"headerlink\" title=\"Hello,2017\"></a>Hello,2017</h3><h4 id=\"坚持阅读，至少把-Kindle-里-23-本书给读完。\"><a href=\"#坚持阅读，至少把-Kindle-里-23-本书给读完。\" class=\"headerlink\" title=\"坚持阅读，至少把 Kindle 里 23 本书给读完。\"></a>坚持阅读，至少把 Kindle 里 23 本书给读完。</h4><p>16 年无论是什么方面的书都读的很少，一直很惭愧，几本专业书籍也一直啃不下去。下班可以把看 B 站的空闲时间给省出来读一些书，期待读书给我的变化。重点是以下基本几本书:</p>\n<ul>\n<li><strong>Android 艺术开发探索</strong></li>\n<li><strong>Head First 设计模式</strong></li>\n<li><strong>算法</strong></li>\n<li><strong>了不起的盖茨比</strong></li>\n<li><strong>教父</strong></li>\n<li><strong>追风筝的人</strong></li>\n<li><strong>自控力</strong></li>\n<li><strong>跟任何都聊得来</strong></li>\n<li><strong>关键对话:如何高效能沟通</strong></li>\n</ul>\n<h4 id=\"开始连击\"><a href=\"#开始连击\" class=\"headerlink\" title=\"开始连击\"></a>开始连击</h4><p>很多习惯要坚持下去才有用。<a href=\"https://github.com/iSoron/uhabits\">Loop Habit Tracker</a>这款开源 App 可以帮我记录下连击天数和坚持的天数。希望在 2017 年有一个漂亮的成绩。以下是目前列的几项</p>\n<ul>\n<li><strong>骑车</strong></li>\n<li><strong>跑步</strong></li>\n<li><strong>英语</strong></li>\n<li><strong>阅读</strong></li>\n<li><strong>code</strong></li>\n</ul>\n<h4 id=\"坚持写博客\"><a href=\"#坚持写博客\" class=\"headerlink\" title=\"坚持写博客\"></a>坚持写博客</h4><p>很多时候坚持不下来就是因为得不到反馈，没有精神上的力量坚持自己努力下去。发朋友圈更多的获得到的是别人的嘻哈，而博客从书写到维护都是不停锻炼自己。从阅读中获得灵感、从折腾中提升前端的能力、保持对新事物的热度、让别人和自己看到努力的成果。这些都是我想要的，而不是三分钟热度，玩过就甩。</p>\n<h4 id=\"熟悉一门新的语言\"><a href=\"#熟悉一门新的语言\" class=\"headerlink\" title=\"熟悉一门新的语言\"></a>熟悉一门新的语言</h4><p>虽然目前<code>Android</code>都够呛，但是保持学习的热心也是很有必要的。而且前端和移动客户端的交叉越来越大，学习一门前端语言并不是一件坏事。目前决定是<code>javaScript</code>虽然已经开始断断续续的学习还是给自己立一个明确的目标比较好。</p>\n<h4 id=\"开发一款自己的-APP\"><a href=\"#开发一款自己的-APP\" class=\"headerlink\" title=\"开发一款自己的 APP\"></a>开发一款自己的 APP</h4><p>既然是干这行的不从这方面拿出一个看的过去东西实在太说不过去了，且很多东西工作中用不到但确实需要自己去实践，比如有特色的自定义 View、Android 高版本的新特性、复杂一点的数据库都是需要自己去实践而不是写一个两个 demo 和看看贴自己就可以了。看是重构自己的知乎新闻还是选一个新题材就再议了。</p>\n<blockquote>\n<p>从身轻如燕，不想举铁，到身重如山，不愿挪窝，可能只是一个星期的事。之后，坚持就成了遥远的记忆。知道某年某月，受了什么刺激，痛心疾首时，又开始一次轮回。</p>\n<p>​ ——ze ran</p>\n</blockquote>\n<p>这些就是 2017 的 Plan 了，做到了不错，有超额的惊喜更好，但是最想告诉自己：<strong>哪怕中途失败了也不要因为一个所谓的“完美”而放弃，自我安慰的选择另一个可笑的开始。摔跤了就立刻爬起来而不是把头钻进土里。</strong></p>\n<p>——2017-1-24</p>\n"},{"layout":"post","title":"RxAndroid学习笔记","subtitle":"\"新的一天!\"","date":"2017-01-24T02:42:00.000Z","atuhor":"chenzhaojun","header_image":"img/reactivex_bg.jpg","_content":"\n> 万物始于微而后成,始于无而后生\n\n\n\n## 前言\n\n`RxJava`在项目中早就开始使用了，但是一直都是结合`Retrofit`来做一些简单的数据处理，和异步操作。用到操作符并不不多且对RxJava没有很清晰的概念，所以想写一篇文章将学习和用到的东西总结一下。本文并不是`RxJava`的理解与教学，网上这类优秀的文章已经很多了。更多的是介绍开发中需要注意的细节，和`RxJava2.X`的迭代。\n\n\n\n## 正文\n\n### 使用RxJava\n\n`RxAndorid`是`RxJava`在Android上的一个扩展，它让我们更方便的在UI和子线程中切换。所以在日常开发中，我们一般两个库都要依赖。\n\n```groovy\n//jcenter\ncompile 'io.reactivex.rxjava2:rxandroid:2.0.1'\ncompile 'io.reactivex.rxjava2:rxjava:2.0.1'\n```\n\n#### 异步操作\n\n正常情况下RxJava是在默认线程中，且上游和下游都在同一个线程，在Android中也就是默认在主线程中执行，当我们需要执行异步操作时就需要我们通过`subscribeOn`和`observeOn`来手动的切换执行事件的线程。\n\n`suscribeOn`一般在调用链中应该只被调用一次。如果并非如此的话，那会以第一次调用的线程为准。`suscribeOn`通俗的讲就是指定上游发送事件的线程。\n\n而另一方面，`observeOn`在调用链中执行多少次都是可以的。`observeOn`指定了调用链中下一个操作符执行的线程，例如：\n\n```java\nmyObservable //observable将会在io线程中订阅\n  .sucribeOn(Schedulers.io())\n  .observeOn(AndroidScheduler.mianThread())\n  .map(/*将会在Android  Ui线程中执行*/)\n  .doOnNext(/*下面的代码会等到下次observeOn执行*/)\n  .observeOn(Schedulers.io())\n  .subcribe(/*将会在i/o线程中执行*/);\n```\n\n常用的调度器有如几种：\n\n- `Schedulers.io()`  :  **适合在I/O线程执行的工作，例如网络请求和磁盘操作，内部有一个线程池可以重复使用**\n- `Scheduler.computation()` : **计算性任务，比如事件的轮询或者处理回调等。**\n- `Schedulers.newThread()  `  :  **代表一个常规的新线程**\n- `AndroidScheduler.mainThread()` :   `RxAndroid`对`RxJava`所做的扩展， **在Android UI线程执行下一个操作符的操作**\n\n\n#### 贴士\n\n- 只有当观察者和被观察者建立连接之后，上游才会开始发送事件，也就是调用`suscribe()`方法后，被观察者才会向观察者发送事件\n- `flatMap`并不保证发送的顺序，如果要求严格按照顺序请使用`concatMap`\n- 如果需要多个接口的数据同步处理那么`zip`操作符可以帮助到你\n\n\n\n### RxJava2.X\n\n\n\n#### Environment\n\n如果你在项目中使用了`Retrofit`+`RxJava`，且你想要切换到2.x你会返现`Retrofit`目前的`RxJava`适配器并不支持2.x.但是没关系jake大神已经为我们写好了新的适配器。\n\n```groovy\ncompile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'\n```\n\n在创建Retrofit对象是将RxJava的Factory替换掉\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(BASE_URL)\n    .addConverterFactory(GsonConverterFactory.create())\n    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())//1.X为RxJavaCallAdapterFactory\n    .build();\n```\n\n\n\n#### Flowable\n\n`Flowable`是RxJava2.0后增加的,为了解决无法意料的`MissingBackpressureException`，但是使用起来更加繁琐，它要求强制的处理上下游的接受发送的事件的效率以及决定背压的处理方式。我们原先的`Observable`仍然可以使用，用来解决非背压式的问题。如果我们要使用`Flowable`必须这样写:\n\n```java\n//创建订阅者\nSubscriber<String> subscriber = new Subscriber<String>() {\n    @Override\n    public void onSubscribe(Subscription s) {\n    //这一步是必须，我们通常可以在这里做一些初始化操作，调用request()方法表示初始化工作已经完成\n    //调用request()方法，会立即触发onNext()方法\n    //在onComplete()方法完成，才会再执行request()后边的代码\n    s.request(Long.MAX_VALUE);\n    }\n\n    @Override\n    public void onNext(String value) {\n        Log.e(\"onNext\", value);\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        Log.e(\"onError\", t.getMessage());\n    }\n\n    @Override\n    public void onComplete() {\n    //由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete\n        Log.e(\"onComplete\", \"complete\");\n    }\n};\n\nFlowable.create(new FlowableOnSubscribe<String>() {\n    @Override\n    public void subscribe(FlowableEmitter<String> e) throws Exception {\n        e.onNext(\"Hello,I am China!\");\n    }\n}, BackpressureStrategy.BUFFER)\n    .subscribe(subscriber);  \n```\n\n`Flowable`在上游有一个默认长度为**128**的缓冲池来放置上阻塞的事件，使用`Flowable`创建一个事件时候，我们必须使用`BackpressureStrategy`这个类中的常量来管理缓冲池:\n\n- `BackpressureStrategy.ERROR` :  **当事件的长度的积累超过缓冲池的长度时直接抛出Exception**\n- `BackpressureStrategy.BUFFER ` :  **缓冲池的长度没有限制**\n- `BackpressureStrategy.DROP` :  **超过缓冲池长度的事件直接丢弃**\n- `BackpressureStrategy.LATEST` :  **超过缓冲长度的事件会丢弃最旧的，保留最新的**\n\n像`interval`等不是自己创建的事件我们指定背压策略是可以使用以下函数来: \n\n- `onBackpressureBuffer()`\n- `onBackpressureDrop()`\n- `onBackpressureLatest()`\n\n```java\nFlowable.interval(1, TimeUnit.MICROSECONDS)\n                .onBackpressureDrop()  //加上背压策略\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(subscriber);\n```\n\n\n\n需要注意的是`Flowable`现在和`Observable`的性能还是有一定的差距的，所以不要为了最求新颖盲目的使用`Flowable`且使用不当很容易造成一些致命的错误。\n\n\n\n#### Dispoasble\n\n`Subscription`命名修改为`Dispoasble`，相关的api也被修改了，例如`CompositeSubscription`修改为`CompositeDisposable`。且需要注意的是2.X中`subscribe(subscriber)`这个重构方法是没有返回值的,但是通常我们将返回的`Subscription`添加到`CompositeSubscription`来管理，所以为了适配1.X可以使用`E subscribeWith(E subscriber)`方法来返回一个`Dispoable`对象，将它添加到`CompositeDisposable`中来管理。\n\n\n\n#### Consumer\n\n`Action1`使用`Consumer`来代替,如果是两个参数，则用`BiConsumer`来代替`Action2`,多个参数则用`Consumer<Object[]>`,删除了`Action3-9`.\n\n\n\n#### Function\n\n`func`也被`Function`替代。同理，`func1`和`func2`更改为`Function`和`BiFunction`，多参数的`FuncN`被`Function<Object,R>`替代，`func3-9`的功能并没有被删除，被`Function3-9`替换了。\n\n\n\n#### fromArray,fromIterable,fromFuture\n\n由于在`Java8`编译时，`javac`不能区分接口类型，所以`from`在2.X被分为了`fromArray`、`fromIterable`和`fromFuture`。\n\n\n\n\n\n","source":"_posts/2017-01-24-rxjava_learning_notes.markdown","raw":"---\nlayout: post\ntitle: \"RxAndroid学习笔记\"\nsubtitle: \"\\\"新的一天!\\\"\"\ndate: 2017-01-24  10:42:00\natuhor:  \"chenzhaojun\"\nheader_image:  \"img/reactivex_bg.jpg\"\ntags:\n    - Android\n---\n\n> 万物始于微而后成,始于无而后生\n\n\n\n## 前言\n\n`RxJava`在项目中早就开始使用了，但是一直都是结合`Retrofit`来做一些简单的数据处理，和异步操作。用到操作符并不不多且对RxJava没有很清晰的概念，所以想写一篇文章将学习和用到的东西总结一下。本文并不是`RxJava`的理解与教学，网上这类优秀的文章已经很多了。更多的是介绍开发中需要注意的细节，和`RxJava2.X`的迭代。\n\n\n\n## 正文\n\n### 使用RxJava\n\n`RxAndorid`是`RxJava`在Android上的一个扩展，它让我们更方便的在UI和子线程中切换。所以在日常开发中，我们一般两个库都要依赖。\n\n```groovy\n//jcenter\ncompile 'io.reactivex.rxjava2:rxandroid:2.0.1'\ncompile 'io.reactivex.rxjava2:rxjava:2.0.1'\n```\n\n#### 异步操作\n\n正常情况下RxJava是在默认线程中，且上游和下游都在同一个线程，在Android中也就是默认在主线程中执行，当我们需要执行异步操作时就需要我们通过`subscribeOn`和`observeOn`来手动的切换执行事件的线程。\n\n`suscribeOn`一般在调用链中应该只被调用一次。如果并非如此的话，那会以第一次调用的线程为准。`suscribeOn`通俗的讲就是指定上游发送事件的线程。\n\n而另一方面，`observeOn`在调用链中执行多少次都是可以的。`observeOn`指定了调用链中下一个操作符执行的线程，例如：\n\n```java\nmyObservable //observable将会在io线程中订阅\n  .sucribeOn(Schedulers.io())\n  .observeOn(AndroidScheduler.mianThread())\n  .map(/*将会在Android  Ui线程中执行*/)\n  .doOnNext(/*下面的代码会等到下次observeOn执行*/)\n  .observeOn(Schedulers.io())\n  .subcribe(/*将会在i/o线程中执行*/);\n```\n\n常用的调度器有如几种：\n\n- `Schedulers.io()`  :  **适合在I/O线程执行的工作，例如网络请求和磁盘操作，内部有一个线程池可以重复使用**\n- `Scheduler.computation()` : **计算性任务，比如事件的轮询或者处理回调等。**\n- `Schedulers.newThread()  `  :  **代表一个常规的新线程**\n- `AndroidScheduler.mainThread()` :   `RxAndroid`对`RxJava`所做的扩展， **在Android UI线程执行下一个操作符的操作**\n\n\n#### 贴士\n\n- 只有当观察者和被观察者建立连接之后，上游才会开始发送事件，也就是调用`suscribe()`方法后，被观察者才会向观察者发送事件\n- `flatMap`并不保证发送的顺序，如果要求严格按照顺序请使用`concatMap`\n- 如果需要多个接口的数据同步处理那么`zip`操作符可以帮助到你\n\n\n\n### RxJava2.X\n\n\n\n#### Environment\n\n如果你在项目中使用了`Retrofit`+`RxJava`，且你想要切换到2.x你会返现`Retrofit`目前的`RxJava`适配器并不支持2.x.但是没关系jake大神已经为我们写好了新的适配器。\n\n```groovy\ncompile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'\n```\n\n在创建Retrofit对象是将RxJava的Factory替换掉\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(BASE_URL)\n    .addConverterFactory(GsonConverterFactory.create())\n    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())//1.X为RxJavaCallAdapterFactory\n    .build();\n```\n\n\n\n#### Flowable\n\n`Flowable`是RxJava2.0后增加的,为了解决无法意料的`MissingBackpressureException`，但是使用起来更加繁琐，它要求强制的处理上下游的接受发送的事件的效率以及决定背压的处理方式。我们原先的`Observable`仍然可以使用，用来解决非背压式的问题。如果我们要使用`Flowable`必须这样写:\n\n```java\n//创建订阅者\nSubscriber<String> subscriber = new Subscriber<String>() {\n    @Override\n    public void onSubscribe(Subscription s) {\n    //这一步是必须，我们通常可以在这里做一些初始化操作，调用request()方法表示初始化工作已经完成\n    //调用request()方法，会立即触发onNext()方法\n    //在onComplete()方法完成，才会再执行request()后边的代码\n    s.request(Long.MAX_VALUE);\n    }\n\n    @Override\n    public void onNext(String value) {\n        Log.e(\"onNext\", value);\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        Log.e(\"onError\", t.getMessage());\n    }\n\n    @Override\n    public void onComplete() {\n    //由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete\n        Log.e(\"onComplete\", \"complete\");\n    }\n};\n\nFlowable.create(new FlowableOnSubscribe<String>() {\n    @Override\n    public void subscribe(FlowableEmitter<String> e) throws Exception {\n        e.onNext(\"Hello,I am China!\");\n    }\n}, BackpressureStrategy.BUFFER)\n    .subscribe(subscriber);  \n```\n\n`Flowable`在上游有一个默认长度为**128**的缓冲池来放置上阻塞的事件，使用`Flowable`创建一个事件时候，我们必须使用`BackpressureStrategy`这个类中的常量来管理缓冲池:\n\n- `BackpressureStrategy.ERROR` :  **当事件的长度的积累超过缓冲池的长度时直接抛出Exception**\n- `BackpressureStrategy.BUFFER ` :  **缓冲池的长度没有限制**\n- `BackpressureStrategy.DROP` :  **超过缓冲池长度的事件直接丢弃**\n- `BackpressureStrategy.LATEST` :  **超过缓冲长度的事件会丢弃最旧的，保留最新的**\n\n像`interval`等不是自己创建的事件我们指定背压策略是可以使用以下函数来: \n\n- `onBackpressureBuffer()`\n- `onBackpressureDrop()`\n- `onBackpressureLatest()`\n\n```java\nFlowable.interval(1, TimeUnit.MICROSECONDS)\n                .onBackpressureDrop()  //加上背压策略\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(subscriber);\n```\n\n\n\n需要注意的是`Flowable`现在和`Observable`的性能还是有一定的差距的，所以不要为了最求新颖盲目的使用`Flowable`且使用不当很容易造成一些致命的错误。\n\n\n\n#### Dispoasble\n\n`Subscription`命名修改为`Dispoasble`，相关的api也被修改了，例如`CompositeSubscription`修改为`CompositeDisposable`。且需要注意的是2.X中`subscribe(subscriber)`这个重构方法是没有返回值的,但是通常我们将返回的`Subscription`添加到`CompositeSubscription`来管理，所以为了适配1.X可以使用`E subscribeWith(E subscriber)`方法来返回一个`Dispoable`对象，将它添加到`CompositeDisposable`中来管理。\n\n\n\n#### Consumer\n\n`Action1`使用`Consumer`来代替,如果是两个参数，则用`BiConsumer`来代替`Action2`,多个参数则用`Consumer<Object[]>`,删除了`Action3-9`.\n\n\n\n#### Function\n\n`func`也被`Function`替代。同理，`func1`和`func2`更改为`Function`和`BiFunction`，多参数的`FuncN`被`Function<Object,R>`替代，`func3-9`的功能并没有被删除，被`Function3-9`替换了。\n\n\n\n#### fromArray,fromIterable,fromFuture\n\n由于在`Java8`编译时，`javac`不能区分接口类型，所以`from`在2.X被分为了`fromArray`、`fromIterable`和`fromFuture`。\n\n\n\n\n\n","slug":"2017-01-24-rxjava_learning_notes","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6ov0003s2y4hlrqdq3d","content":"<blockquote>\n<p>万物始于微而后成,始于无而后生</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>RxJava</code>在项目中早就开始使用了，但是一直都是结合<code>Retrofit</code>来做一些简单的数据处理，和异步操作。用到操作符并不不多且对RxJava没有很清晰的概念，所以想写一篇文章将学习和用到的东西总结一下。本文并不是<code>RxJava</code>的理解与教学，网上这类优秀的文章已经很多了。更多的是介绍开发中需要注意的细节，和<code>RxJava2.X</code>的迭代。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用RxJava\"><a href=\"#使用RxJava\" class=\"headerlink\" title=\"使用RxJava\"></a>使用RxJava</h3><p><code>RxAndorid</code>是<code>RxJava</code>在Android上的一个扩展，它让我们更方便的在UI和子线程中切换。所以在日常开发中，我们一般两个库都要依赖。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jcenter</span></span><br><span class=\"line\">compile <span class=\"string\">&#x27;io.reactivex.rxjava2:rxandroid:2.0.1&#x27;</span></span><br><span class=\"line\">compile <span class=\"string\">&#x27;io.reactivex.rxjava2:rxjava:2.0.1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h4><p>正常情况下RxJava是在默认线程中，且上游和下游都在同一个线程，在Android中也就是默认在主线程中执行，当我们需要执行异步操作时就需要我们通过<code>subscribeOn</code>和<code>observeOn</code>来手动的切换执行事件的线程。</p>\n<p><code>suscribeOn</code>一般在调用链中应该只被调用一次。如果并非如此的话，那会以第一次调用的线程为准。<code>suscribeOn</code>通俗的讲就是指定上游发送事件的线程。</p>\n<p>而另一方面，<code>observeOn</code>在调用链中执行多少次都是可以的。<code>observeOn</code>指定了调用链中下一个操作符执行的线程，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObservable <span class=\"comment\">//observable将会在io线程中订阅</span></span><br><span class=\"line\">  .sucribeOn(Schedulers.io())</span><br><span class=\"line\">  .observeOn(AndroidScheduler.mianThread())</span><br><span class=\"line\">  .map(<span class=\"comment\">/*将会在Android  Ui线程中执行*/</span>)</span><br><span class=\"line\">  .doOnNext(<span class=\"comment\">/*下面的代码会等到下次observeOn执行*/</span>)</span><br><span class=\"line\">  .observeOn(Schedulers.io())</span><br><span class=\"line\">  .subcribe(<span class=\"comment\">/*将会在i/o线程中执行*/</span>);</span><br></pre></td></tr></table></figure>\n\n<p>常用的调度器有如几种：</p>\n<ul>\n<li><code>Schedulers.io()</code>  :  <strong>适合在I&#x2F;O线程执行的工作，例如网络请求和磁盘操作，内部有一个线程池可以重复使用</strong></li>\n<li><code>Scheduler.computation()</code> : <strong>计算性任务，比如事件的轮询或者处理回调等。</strong></li>\n<li><code>Schedulers.newThread()  </code>  :  <strong>代表一个常规的新线程</strong></li>\n<li><code>AndroidScheduler.mainThread()</code> :   <code>RxAndroid</code>对<code>RxJava</code>所做的扩展， <strong>在Android UI线程执行下一个操作符的操作</strong></li>\n</ul>\n<h4 id=\"贴士\"><a href=\"#贴士\" class=\"headerlink\" title=\"贴士\"></a>贴士</h4><ul>\n<li>只有当观察者和被观察者建立连接之后，上游才会开始发送事件，也就是调用<code>suscribe()</code>方法后，被观察者才会向观察者发送事件</li>\n<li><code>flatMap</code>并不保证发送的顺序，如果要求严格按照顺序请使用<code>concatMap</code></li>\n<li>如果需要多个接口的数据同步处理那么<code>zip</code>操作符可以帮助到你</li>\n</ul>\n<h3 id=\"RxJava2-X\"><a href=\"#RxJava2-X\" class=\"headerlink\" title=\"RxJava2.X\"></a>RxJava2.X</h3><h4 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h4><p>如果你在项目中使用了<code>Retrofit</code>+<code>RxJava</code>，且你想要切换到2.x你会返现<code>Retrofit</code>目前的<code>RxJava</code>适配器并不支持2.x.但是没关系jake大神已经为我们写好了新的适配器。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&#x27;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建Retrofit对象是将RxJava的Factory替换掉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Retrofit</span> <span class=\"variable\">retrofit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Retrofit</span>.Builder()</span><br><span class=\"line\">    .baseUrl(BASE_URL)</span><br><span class=\"line\">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())<span class=\"comment\">//1.X为RxJavaCallAdapterFactory</span></span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Flowable\"><a href=\"#Flowable\" class=\"headerlink\" title=\"Flowable\"></a>Flowable</h4><p><code>Flowable</code>是RxJava2.0后增加的,为了解决无法意料的<code>MissingBackpressureException</code>，但是使用起来更加繁琐，它要求强制的处理上下游的接受发送的事件的效率以及决定背压的处理方式。我们原先的<code>Observable</code>仍然可以使用，用来解决非背压式的问题。如果我们要使用<code>Flowable</code>必须这样写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建订阅者</span></span><br><span class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscriber</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSubscribe</span><span class=\"params\">(Subscription s)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这一步是必须，我们通常可以在这里做一些初始化操作，调用request()方法表示初始化工作已经完成</span></span><br><span class=\"line\">    <span class=\"comment\">//调用request()方法，会立即触发onNext()方法</span></span><br><span class=\"line\">    <span class=\"comment\">//在onComplete()方法完成，才会再执行request()后边的代码</span></span><br><span class=\"line\">    s.request(Long.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onNext</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onNext&quot;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable t)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onError&quot;</span>, t.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onComplete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onComplete&quot;</span>, <span class=\"string\">&quot;complete&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Flowable.create(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowableOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">subscribe</span><span class=\"params\">(FlowableEmitter&lt;String&gt; e)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        e.onNext(<span class=\"string\">&quot;Hello,I am China!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, BackpressureStrategy.BUFFER)</span><br><span class=\"line\">    .subscribe(subscriber);  </span><br></pre></td></tr></table></figure>\n\n<p><code>Flowable</code>在上游有一个默认长度为<strong>128</strong>的缓冲池来放置上阻塞的事件，使用<code>Flowable</code>创建一个事件时候，我们必须使用<code>BackpressureStrategy</code>这个类中的常量来管理缓冲池:</p>\n<ul>\n<li><code>BackpressureStrategy.ERROR</code> :  <strong>当事件的长度的积累超过缓冲池的长度时直接抛出Exception</strong></li>\n<li><code>BackpressureStrategy.BUFFER </code> :  <strong>缓冲池的长度没有限制</strong></li>\n<li><code>BackpressureStrategy.DROP</code> :  <strong>超过缓冲池长度的事件直接丢弃</strong></li>\n<li><code>BackpressureStrategy.LATEST</code> :  <strong>超过缓冲长度的事件会丢弃最旧的，保留最新的</strong></li>\n</ul>\n<p>像<code>interval</code>等不是自己创建的事件我们指定背压策略是可以使用以下函数来: </p>\n<ul>\n<li><code>onBackpressureBuffer()</code></li>\n<li><code>onBackpressureDrop()</code></li>\n<li><code>onBackpressureLatest()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flowable.interval(<span class=\"number\">1</span>, TimeUnit.MICROSECONDS)</span><br><span class=\"line\">                .onBackpressureDrop()  <span class=\"comment\">//加上背压策略</span></span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(subscriber);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是<code>Flowable</code>现在和<code>Observable</code>的性能还是有一定的差距的，所以不要为了最求新颖盲目的使用<code>Flowable</code>且使用不当很容易造成一些致命的错误。</p>\n<h4 id=\"Dispoasble\"><a href=\"#Dispoasble\" class=\"headerlink\" title=\"Dispoasble\"></a>Dispoasble</h4><p><code>Subscription</code>命名修改为<code>Dispoasble</code>，相关的api也被修改了，例如<code>CompositeSubscription</code>修改为<code>CompositeDisposable</code>。且需要注意的是2.X中<code>subscribe(subscriber)</code>这个重构方法是没有返回值的,但是通常我们将返回的<code>Subscription</code>添加到<code>CompositeSubscription</code>来管理，所以为了适配1.X可以使用<code>E subscribeWith(E subscriber)</code>方法来返回一个<code>Dispoable</code>对象，将它添加到<code>CompositeDisposable</code>中来管理。</p>\n<h4 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h4><p><code>Action1</code>使用<code>Consumer</code>来代替,如果是两个参数，则用<code>BiConsumer</code>来代替<code>Action2</code>,多个参数则用<code>Consumer&lt;Object[]&gt;</code>,删除了<code>Action3-9</code>.</p>\n<h4 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h4><p><code>func</code>也被<code>Function</code>替代。同理，<code>func1</code>和<code>func2</code>更改为<code>Function</code>和<code>BiFunction</code>，多参数的<code>FuncN</code>被<code>Function&lt;Object,R&gt;</code>替代，<code>func3-9</code>的功能并没有被删除，被<code>Function3-9</code>替换了。</p>\n<h4 id=\"fromArray-fromIterable-fromFuture\"><a href=\"#fromArray-fromIterable-fromFuture\" class=\"headerlink\" title=\"fromArray,fromIterable,fromFuture\"></a>fromArray,fromIterable,fromFuture</h4><p>由于在<code>Java8</code>编译时，<code>javac</code>不能区分接口类型，所以<code>from</code>在2.X被分为了<code>fromArray</code>、<code>fromIterable</code>和<code>fromFuture</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>万物始于微而后成,始于无而后生</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>RxJava</code>在项目中早就开始使用了，但是一直都是结合<code>Retrofit</code>来做一些简单的数据处理，和异步操作。用到操作符并不不多且对RxJava没有很清晰的概念，所以想写一篇文章将学习和用到的东西总结一下。本文并不是<code>RxJava</code>的理解与教学，网上这类优秀的文章已经很多了。更多的是介绍开发中需要注意的细节，和<code>RxJava2.X</code>的迭代。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用RxJava\"><a href=\"#使用RxJava\" class=\"headerlink\" title=\"使用RxJava\"></a>使用RxJava</h3><p><code>RxAndorid</code>是<code>RxJava</code>在Android上的一个扩展，它让我们更方便的在UI和子线程中切换。所以在日常开发中，我们一般两个库都要依赖。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jcenter</span></span><br><span class=\"line\">compile <span class=\"string\">&#x27;io.reactivex.rxjava2:rxandroid:2.0.1&#x27;</span></span><br><span class=\"line\">compile <span class=\"string\">&#x27;io.reactivex.rxjava2:rxjava:2.0.1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h4><p>正常情况下RxJava是在默认线程中，且上游和下游都在同一个线程，在Android中也就是默认在主线程中执行，当我们需要执行异步操作时就需要我们通过<code>subscribeOn</code>和<code>observeOn</code>来手动的切换执行事件的线程。</p>\n<p><code>suscribeOn</code>一般在调用链中应该只被调用一次。如果并非如此的话，那会以第一次调用的线程为准。<code>suscribeOn</code>通俗的讲就是指定上游发送事件的线程。</p>\n<p>而另一方面，<code>observeOn</code>在调用链中执行多少次都是可以的。<code>observeOn</code>指定了调用链中下一个操作符执行的线程，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObservable <span class=\"comment\">//observable将会在io线程中订阅</span></span><br><span class=\"line\">  .sucribeOn(Schedulers.io())</span><br><span class=\"line\">  .observeOn(AndroidScheduler.mianThread())</span><br><span class=\"line\">  .map(<span class=\"comment\">/*将会在Android  Ui线程中执行*/</span>)</span><br><span class=\"line\">  .doOnNext(<span class=\"comment\">/*下面的代码会等到下次observeOn执行*/</span>)</span><br><span class=\"line\">  .observeOn(Schedulers.io())</span><br><span class=\"line\">  .subcribe(<span class=\"comment\">/*将会在i/o线程中执行*/</span>);</span><br></pre></td></tr></table></figure>\n\n<p>常用的调度器有如几种：</p>\n<ul>\n<li><code>Schedulers.io()</code>  :  <strong>适合在I&#x2F;O线程执行的工作，例如网络请求和磁盘操作，内部有一个线程池可以重复使用</strong></li>\n<li><code>Scheduler.computation()</code> : <strong>计算性任务，比如事件的轮询或者处理回调等。</strong></li>\n<li><code>Schedulers.newThread()  </code>  :  <strong>代表一个常规的新线程</strong></li>\n<li><code>AndroidScheduler.mainThread()</code> :   <code>RxAndroid</code>对<code>RxJava</code>所做的扩展， <strong>在Android UI线程执行下一个操作符的操作</strong></li>\n</ul>\n<h4 id=\"贴士\"><a href=\"#贴士\" class=\"headerlink\" title=\"贴士\"></a>贴士</h4><ul>\n<li>只有当观察者和被观察者建立连接之后，上游才会开始发送事件，也就是调用<code>suscribe()</code>方法后，被观察者才会向观察者发送事件</li>\n<li><code>flatMap</code>并不保证发送的顺序，如果要求严格按照顺序请使用<code>concatMap</code></li>\n<li>如果需要多个接口的数据同步处理那么<code>zip</code>操作符可以帮助到你</li>\n</ul>\n<h3 id=\"RxJava2-X\"><a href=\"#RxJava2-X\" class=\"headerlink\" title=\"RxJava2.X\"></a>RxJava2.X</h3><h4 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h4><p>如果你在项目中使用了<code>Retrofit</code>+<code>RxJava</code>，且你想要切换到2.x你会返现<code>Retrofit</code>目前的<code>RxJava</code>适配器并不支持2.x.但是没关系jake大神已经为我们写好了新的适配器。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&#x27;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建Retrofit对象是将RxJava的Factory替换掉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Retrofit</span> <span class=\"variable\">retrofit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Retrofit</span>.Builder()</span><br><span class=\"line\">    .baseUrl(BASE_URL)</span><br><span class=\"line\">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())<span class=\"comment\">//1.X为RxJavaCallAdapterFactory</span></span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Flowable\"><a href=\"#Flowable\" class=\"headerlink\" title=\"Flowable\"></a>Flowable</h4><p><code>Flowable</code>是RxJava2.0后增加的,为了解决无法意料的<code>MissingBackpressureException</code>，但是使用起来更加繁琐，它要求强制的处理上下游的接受发送的事件的效率以及决定背压的处理方式。我们原先的<code>Observable</code>仍然可以使用，用来解决非背压式的问题。如果我们要使用<code>Flowable</code>必须这样写:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建订阅者</span></span><br><span class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscriber</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSubscribe</span><span class=\"params\">(Subscription s)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这一步是必须，我们通常可以在这里做一些初始化操作，调用request()方法表示初始化工作已经完成</span></span><br><span class=\"line\">    <span class=\"comment\">//调用request()方法，会立即触发onNext()方法</span></span><br><span class=\"line\">    <span class=\"comment\">//在onComplete()方法完成，才会再执行request()后边的代码</span></span><br><span class=\"line\">    s.request(Long.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onNext</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onNext&quot;</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable t)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onError&quot;</span>, t.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onComplete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;onComplete&quot;</span>, <span class=\"string\">&quot;complete&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Flowable.create(<span class=\"keyword\">new</span> <span class=\"title class_\">FlowableOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">subscribe</span><span class=\"params\">(FlowableEmitter&lt;String&gt; e)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        e.onNext(<span class=\"string\">&quot;Hello,I am China!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, BackpressureStrategy.BUFFER)</span><br><span class=\"line\">    .subscribe(subscriber);  </span><br></pre></td></tr></table></figure>\n\n<p><code>Flowable</code>在上游有一个默认长度为<strong>128</strong>的缓冲池来放置上阻塞的事件，使用<code>Flowable</code>创建一个事件时候，我们必须使用<code>BackpressureStrategy</code>这个类中的常量来管理缓冲池:</p>\n<ul>\n<li><code>BackpressureStrategy.ERROR</code> :  <strong>当事件的长度的积累超过缓冲池的长度时直接抛出Exception</strong></li>\n<li><code>BackpressureStrategy.BUFFER </code> :  <strong>缓冲池的长度没有限制</strong></li>\n<li><code>BackpressureStrategy.DROP</code> :  <strong>超过缓冲池长度的事件直接丢弃</strong></li>\n<li><code>BackpressureStrategy.LATEST</code> :  <strong>超过缓冲长度的事件会丢弃最旧的，保留最新的</strong></li>\n</ul>\n<p>像<code>interval</code>等不是自己创建的事件我们指定背压策略是可以使用以下函数来: </p>\n<ul>\n<li><code>onBackpressureBuffer()</code></li>\n<li><code>onBackpressureDrop()</code></li>\n<li><code>onBackpressureLatest()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flowable.interval(<span class=\"number\">1</span>, TimeUnit.MICROSECONDS)</span><br><span class=\"line\">                .onBackpressureDrop()  <span class=\"comment\">//加上背压策略</span></span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">                .subscribe(subscriber);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是<code>Flowable</code>现在和<code>Observable</code>的性能还是有一定的差距的，所以不要为了最求新颖盲目的使用<code>Flowable</code>且使用不当很容易造成一些致命的错误。</p>\n<h4 id=\"Dispoasble\"><a href=\"#Dispoasble\" class=\"headerlink\" title=\"Dispoasble\"></a>Dispoasble</h4><p><code>Subscription</code>命名修改为<code>Dispoasble</code>，相关的api也被修改了，例如<code>CompositeSubscription</code>修改为<code>CompositeDisposable</code>。且需要注意的是2.X中<code>subscribe(subscriber)</code>这个重构方法是没有返回值的,但是通常我们将返回的<code>Subscription</code>添加到<code>CompositeSubscription</code>来管理，所以为了适配1.X可以使用<code>E subscribeWith(E subscriber)</code>方法来返回一个<code>Dispoable</code>对象，将它添加到<code>CompositeDisposable</code>中来管理。</p>\n<h4 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h4><p><code>Action1</code>使用<code>Consumer</code>来代替,如果是两个参数，则用<code>BiConsumer</code>来代替<code>Action2</code>,多个参数则用<code>Consumer&lt;Object[]&gt;</code>,删除了<code>Action3-9</code>.</p>\n<h4 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h4><p><code>func</code>也被<code>Function</code>替代。同理，<code>func1</code>和<code>func2</code>更改为<code>Function</code>和<code>BiFunction</code>，多参数的<code>FuncN</code>被<code>Function&lt;Object,R&gt;</code>替代，<code>func3-9</code>的功能并没有被删除，被<code>Function3-9</code>替换了。</p>\n<h4 id=\"fromArray-fromIterable-fromFuture\"><a href=\"#fromArray-fromIterable-fromFuture\" class=\"headerlink\" title=\"fromArray,fromIterable,fromFuture\"></a>fromArray,fromIterable,fromFuture</h4><p>由于在<code>Java8</code>编译时，<code>javac</code>不能区分接口类型，所以<code>from</code>在2.X被分为了<code>fromArray</code>、<code>fromIterable</code>和<code>fromFuture</code>。</p>\n"},{"layout":"post","title":"策略模式(Strategy Pettern)","subtitle":"Head First学习笔记（一）","date":"2017-02-04T06:12:11.000Z","atuhor":"chenzhaojun","header_image":"img/java.jpg","_content":"\n## 前言\n\n今年的读书计划正式开张了，其实过年的时候就把书单中的《了不起的盖茨比》给阅读完了，但是看完如猪八戒吃人参果——不知啥滋味。只知道大概的故事情节，书中华丽的词藻、作品的艺术和主题并不能完全体会，更别说写一些阅读后的观感了。抽空肯定是要重新阅读几遍的，所以就不把它当作已读书籍了。\n\n正式的阅读是从今天开始了，准备学习技术方面的书籍，但也先来点轻松的，就是这本《Head First 设计模式》。之前看过《Head First Java》书中内容通俗易懂，生动有趣是本入门的好书，设计模式呢是和那本书一起买的，买了也有些时候了，但是从学校到工作都是各种地方吃灰的角色，一直不能静下心来实践，感到十分羞愧。工作中也用到和阅读到各种设计模式却一直没有正确的认识，呈现在赶紧捡起来。\n\n## 正文\n\n> 设计模式是一种反复使用、多数人知晓、经过分类编目、代码设计的总结。它告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计模式并使它们适合我们特定的应用，是我们责无旁贷的事。\n\n\n\n\n### 设计原则\n\n虽然之前并没有系统的学习设计模式，但对设计模式的六大设计原则还是略有耳闻的。不过本书目前不知道出于什么原因没有去介绍它，而是自己组织语言目前也就不得而知了，咱还是按书上的通俗易懂的先来。\n\n- **找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。**\n- **针对接口编程，而不是针对实现编程。**\n- **多用组合，少用继承。**\n\n\n\n### 实现策略模式\n\n我们通过`java`代码来实现策略模式。\n\n现在公司有一种产品——`Bird`(是的，你没看错，我们的产品就是鸟！),这只鸟目前的功能是`walk()`和`display`。我们还开设了两个子产品乌鸦和麻雀,如图:\n\n```mermaid\ngraph TB;\nBird[\"Bird<br> <br> <br>display()<br> <br>walk()\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n\n```\n\n今年，公司的竞争压力加剧，公司主管认为是该创新的时候了，他们需要在下一次股东会议上展示一些\"真正\"让人印象深刻的东西来振奋人心了，于是我们决定让鸟能飞!\n\n小明拍胸脯保证一周就可以完成,他想他只要在**`Bird`类中加上`fly()`方法，这样所有鸟类就都会飞了**:\n\n```mermaid\ngraph TB;\nBird[\"Bird<br> <br> <br>display()<br> <br>walk() <br> <br> fly() //👈小明加上的\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n```\n\n小明觉得天衣无缝，但是在股东会议上的展示上主管发现有很多橡胶鸟也在飞，主管让小明尽快的解决问题，不然就准备去逛前程无忧吧。\n\n**小明觉得可以把橡胶鸟类中的`fly()`方法覆盖掉，但是以后如果加入别的鸟类又会如何?再给鸟增加一个shout的功能呢?**\n\n利用继承来提供`Bird`的行为，会导致:\n\n- **代码在多个子类中重复。**\n- **很难知道所有鸟的全部行为。**\n- **改变会牵一发动全身,造成其他鸟不想要的改变。**\n- **运行时的行为不容易改变。**\n\n如果用接口呢？同样不行,使用接口会导致大量的重复代码，如果要稍微修改一下飞行的姿势那么每个鸟类的都要去处理。\n\n这时候策略模式就上场了，策略模式的定义 :\n\n> ```\n> 策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。\n> ```\n\n我们将`fly()`和`shout()`在`Bird`中声明出来，并提供两个接口`FlyBehavior`和`ShoutBehavior`来实现这两个方法\n\n```java\n/**\n * Bird\n */\npublic abstract class Bird {\n    private FlyBehavior flyBehavior;\n    private ShoutBehavior shoutBehavior;\n\n    public abstract void display();\n\n    public void flyPerform() {\n      //调用FlyBehavior的fly方法\n        flyBehavior.fly();\n    }\n\n    public void shoutPerform() {\n      //ShoutBehavior的shout方法\n        shoutBehavior.shout();\n    }\n\n    public void setFlyBehavior(FlyBehavior flyBehavior) {\n        this.flyBehavior = flyBehavior;\n    }\n\n    public void setShoutBehavior(ShoutBehavior shoutBehavior) {\n        this.shoutBehavior = shoutBehavior;\n    }\n\n    public void walk() {\n        System.err.println(\"I was walking...\");\n    }\n}\n\n/**\n * FlyBehavior\n */\npublic interface FlyBehavior {\n    void fly();\n}\n\n/**\n * ShoutBehavior\n */\npublic interface ShoutBehavior {\n    void shout();\n}\n\n```\n\n你可能要骂娘了，这不还是使用接口吗，你丫逗我?放下手里的板凳别急。**我们将鸟的行为以接口的形式声明在里面，而实现则放在分开的类中，此类专门提供某行为接口的实现，这样，鸟类就不再需要知道行为的实现细节了。**\n\n**针对接口编程，关键就在于多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。**\n\n```mermaid\ngraph TB;\nBird[\"FlyBehavior<br> <br> <br>fly()\"]\nBird --> Fly[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nBird --> FlyNoWay[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle Bird fill:#FFFACD;\n```\n\n`FlyBehavior`和`ShoutBehavior`的实现类我们很简单我们就只列举一个:\n\n```java\npublic class FlyNoWay implements FlyBehavior {\n    @Override\n    public void fly() {\n        System.err.println(\"I Can`t Fly\");\n    }\n}\n```\n\n\n\n所有都完成后，我们增加一个产品喜鹊Magpie来测试我们模式。\n\n```java\n/**\n * 喜鹊——Bird的实现类\n */\npublic class Magpie extends Bird {\n    public Magpie() {\n        setFlyBehavior(new Fly());\n        setShoutBehavior(new Shout());\n    }\n\n    @Override\n    public void display() {\n        System.err.println(\"I`m black\");\n    }\n}\n\n```\n\n我们指定了Margpie的`fly()`和`Shout`的实现类，然后我们让它飞起来:\n\n```java\npublic class Main {\n\n    public static void main(String args[]) {\n         Magpie magpie=new Magpie();\n         magpie.display();\n         magpie.flyPerform();\n         magpie.shoutPerform();\n    }\n}\n```\n\n输出为\n\n```java\nI`m black\nI Can Fly\nG G G...\n```\n\n我们也可以调用`seter`方法来动态改变鸟的行为。\n\n```java\n         magpie.setFlyBehavior(new FlyNoWay());\n         magpie.flyPerform();\n```\n\n输出为:\n\n```java\nI`m black\nI Can Fly\nG G G...\nI Can`t Fly\n```\n\n这就是策略模式，不要怀疑。多亏这个模式，小明可以勾画他的赌城狂欢之旅了。\n\n现在回头看看整体的布局\n\n```mermaid\ngraph TB;\n  subgraph 封装飞行行为\nFlyBehavior[\"FlyBehavior<br> <br> <br>fly()\"]\nFlyBehavior --> Fly[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nFlyBehavior --> FlyNoWay[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle FlyBehavior fill:#FFFACD;\n    end\n  subgraph 客户\nBird[\"Bird<br> <br> <br>display()<br> <br>walk() <br> <br> fly()\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n    end\n   subgraph 封装叫喊行为\nShoutBehavior[\"ShoutBehavior<br> <br> <br>fly()\"]\nShoutBehavior --> Shout[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nShoutBehavior --> NoShout[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle ShoutBehavior fill:#FFFACD;\n    end\nBird --> FlyBehavior\nBird --> ShoutBehavior\n```\n\n","source":"_posts/2017-02-04-Strategy.markdown","raw":"---\nlayout: post\ntitle: \"策略模式(Strategy Pettern)\"\nsubtitle: \"Head First学习笔记（一）\"\ndate: 2017-02-04 14:12:11\natuhor: \"chenzhaojun\"\nheader_image: \"img/java.jpg\"\ntags:\n    - 基础\n---\n\n## 前言\n\n今年的读书计划正式开张了，其实过年的时候就把书单中的《了不起的盖茨比》给阅读完了，但是看完如猪八戒吃人参果——不知啥滋味。只知道大概的故事情节，书中华丽的词藻、作品的艺术和主题并不能完全体会，更别说写一些阅读后的观感了。抽空肯定是要重新阅读几遍的，所以就不把它当作已读书籍了。\n\n正式的阅读是从今天开始了，准备学习技术方面的书籍，但也先来点轻松的，就是这本《Head First 设计模式》。之前看过《Head First Java》书中内容通俗易懂，生动有趣是本入门的好书，设计模式呢是和那本书一起买的，买了也有些时候了，但是从学校到工作都是各种地方吃灰的角色，一直不能静下心来实践，感到十分羞愧。工作中也用到和阅读到各种设计模式却一直没有正确的认识，呈现在赶紧捡起来。\n\n## 正文\n\n> 设计模式是一种反复使用、多数人知晓、经过分类编目、代码设计的总结。它告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计模式并使它们适合我们特定的应用，是我们责无旁贷的事。\n\n\n\n\n### 设计原则\n\n虽然之前并没有系统的学习设计模式，但对设计模式的六大设计原则还是略有耳闻的。不过本书目前不知道出于什么原因没有去介绍它，而是自己组织语言目前也就不得而知了，咱还是按书上的通俗易懂的先来。\n\n- **找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。**\n- **针对接口编程，而不是针对实现编程。**\n- **多用组合，少用继承。**\n\n\n\n### 实现策略模式\n\n我们通过`java`代码来实现策略模式。\n\n现在公司有一种产品——`Bird`(是的，你没看错，我们的产品就是鸟！),这只鸟目前的功能是`walk()`和`display`。我们还开设了两个子产品乌鸦和麻雀,如图:\n\n```mermaid\ngraph TB;\nBird[\"Bird<br> <br> <br>display()<br> <br>walk()\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n\n```\n\n今年，公司的竞争压力加剧，公司主管认为是该创新的时候了，他们需要在下一次股东会议上展示一些\"真正\"让人印象深刻的东西来振奋人心了，于是我们决定让鸟能飞!\n\n小明拍胸脯保证一周就可以完成,他想他只要在**`Bird`类中加上`fly()`方法，这样所有鸟类就都会飞了**:\n\n```mermaid\ngraph TB;\nBird[\"Bird<br> <br> <br>display()<br> <br>walk() <br> <br> fly() //👈小明加上的\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n```\n\n小明觉得天衣无缝，但是在股东会议上的展示上主管发现有很多橡胶鸟也在飞，主管让小明尽快的解决问题，不然就准备去逛前程无忧吧。\n\n**小明觉得可以把橡胶鸟类中的`fly()`方法覆盖掉，但是以后如果加入别的鸟类又会如何?再给鸟增加一个shout的功能呢?**\n\n利用继承来提供`Bird`的行为，会导致:\n\n- **代码在多个子类中重复。**\n- **很难知道所有鸟的全部行为。**\n- **改变会牵一发动全身,造成其他鸟不想要的改变。**\n- **运行时的行为不容易改变。**\n\n如果用接口呢？同样不行,使用接口会导致大量的重复代码，如果要稍微修改一下飞行的姿势那么每个鸟类的都要去处理。\n\n这时候策略模式就上场了，策略模式的定义 :\n\n> ```\n> 策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。\n> ```\n\n我们将`fly()`和`shout()`在`Bird`中声明出来，并提供两个接口`FlyBehavior`和`ShoutBehavior`来实现这两个方法\n\n```java\n/**\n * Bird\n */\npublic abstract class Bird {\n    private FlyBehavior flyBehavior;\n    private ShoutBehavior shoutBehavior;\n\n    public abstract void display();\n\n    public void flyPerform() {\n      //调用FlyBehavior的fly方法\n        flyBehavior.fly();\n    }\n\n    public void shoutPerform() {\n      //ShoutBehavior的shout方法\n        shoutBehavior.shout();\n    }\n\n    public void setFlyBehavior(FlyBehavior flyBehavior) {\n        this.flyBehavior = flyBehavior;\n    }\n\n    public void setShoutBehavior(ShoutBehavior shoutBehavior) {\n        this.shoutBehavior = shoutBehavior;\n    }\n\n    public void walk() {\n        System.err.println(\"I was walking...\");\n    }\n}\n\n/**\n * FlyBehavior\n */\npublic interface FlyBehavior {\n    void fly();\n}\n\n/**\n * ShoutBehavior\n */\npublic interface ShoutBehavior {\n    void shout();\n}\n\n```\n\n你可能要骂娘了，这不还是使用接口吗，你丫逗我?放下手里的板凳别急。**我们将鸟的行为以接口的形式声明在里面，而实现则放在分开的类中，此类专门提供某行为接口的实现，这样，鸟类就不再需要知道行为的实现细节了。**\n\n**针对接口编程，关键就在于多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。**\n\n```mermaid\ngraph TB;\nBird[\"FlyBehavior<br> <br> <br>fly()\"]\nBird --> Fly[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nBird --> FlyNoWay[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle Bird fill:#FFFACD;\n```\n\n`FlyBehavior`和`ShoutBehavior`的实现类我们很简单我们就只列举一个:\n\n```java\npublic class FlyNoWay implements FlyBehavior {\n    @Override\n    public void fly() {\n        System.err.println(\"I Can`t Fly\");\n    }\n}\n```\n\n\n\n所有都完成后，我们增加一个产品喜鹊Magpie来测试我们模式。\n\n```java\n/**\n * 喜鹊——Bird的实现类\n */\npublic class Magpie extends Bird {\n    public Magpie() {\n        setFlyBehavior(new Fly());\n        setShoutBehavior(new Shout());\n    }\n\n    @Override\n    public void display() {\n        System.err.println(\"I`m black\");\n    }\n}\n\n```\n\n我们指定了Margpie的`fly()`和`Shout`的实现类，然后我们让它飞起来:\n\n```java\npublic class Main {\n\n    public static void main(String args[]) {\n         Magpie magpie=new Magpie();\n         magpie.display();\n         magpie.flyPerform();\n         magpie.shoutPerform();\n    }\n}\n```\n\n输出为\n\n```java\nI`m black\nI Can Fly\nG G G...\n```\n\n我们也可以调用`seter`方法来动态改变鸟的行为。\n\n```java\n         magpie.setFlyBehavior(new FlyNoWay());\n         magpie.flyPerform();\n```\n\n输出为:\n\n```java\nI`m black\nI Can Fly\nG G G...\nI Can`t Fly\n```\n\n这就是策略模式，不要怀疑。多亏这个模式，小明可以勾画他的赌城狂欢之旅了。\n\n现在回头看看整体的布局\n\n```mermaid\ngraph TB;\n  subgraph 封装飞行行为\nFlyBehavior[\"FlyBehavior<br> <br> <br>fly()\"]\nFlyBehavior --> Fly[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nFlyBehavior --> FlyNoWay[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle FlyBehavior fill:#FFFACD;\n    end\n  subgraph 客户\nBird[\"Bird<br> <br> <br>display()<br> <br>walk() <br> <br> fly()\"]\nBird --> crow[\"crow<br> <br>display() //外观是黑色\"]\nBird --> sparrow[\"sparrow<br> <br>display() //外观是黄色\"]\nstyle Bird fill:#FFFACD;\n    end\n   subgraph 封装叫喊行为\nShoutBehavior[\"ShoutBehavior<br> <br> <br>fly()\"]\nShoutBehavior --> Shout[\"Fly<br> <br>fly(){<br> <br> // I Can Fly<br>}\"]\nShoutBehavior --> NoShout[\"FlyNoWay<br> <br>fly(){<br> <br>  //I Can`t Fly<br>}\"]\nstyle ShoutBehavior fill:#FFFACD;\n    end\nBird --> FlyBehavior\nBird --> ShoutBehavior\n```\n\n","slug":"2017-02-04-Strategy","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6oy0006s2y47sqld7oo","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今年的读书计划正式开张了，其实过年的时候就把书单中的《了不起的盖茨比》给阅读完了，但是看完如猪八戒吃人参果——不知啥滋味。只知道大概的故事情节，书中华丽的词藻、作品的艺术和主题并不能完全体会，更别说写一些阅读后的观感了。抽空肯定是要重新阅读几遍的，所以就不把它当作已读书籍了。</p>\n<p>正式的阅读是从今天开始了，准备学习技术方面的书籍，但也先来点轻松的，就是这本《Head First 设计模式》。之前看过《Head First Java》书中内容通俗易懂，生动有趣是本入门的好书，设计模式呢是和那本书一起买的，买了也有些时候了，但是从学校到工作都是各种地方吃灰的角色，一直不能静下心来实践，感到十分羞愧。工作中也用到和阅读到各种设计模式却一直没有正确的认识，呈现在赶紧捡起来。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>设计模式是一种反复使用、多数人知晓、经过分类编目、代码设计的总结。它告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计模式并使它们适合我们特定的应用，是我们责无旁贷的事。</p>\n</blockquote>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><p>虽然之前并没有系统的学习设计模式，但对设计模式的六大设计原则还是略有耳闻的。不过本书目前不知道出于什么原因没有去介绍它，而是自己组织语言目前也就不得而知了，咱还是按书上的通俗易懂的先来。</p>\n<ul>\n<li><strong>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong></li>\n<li><strong>针对接口编程，而不是针对实现编程。</strong></li>\n<li><strong>多用组合，少用继承。</strong></li>\n</ul>\n<h3 id=\"实现策略模式\"><a href=\"#实现策略模式\" class=\"headerlink\" title=\"实现策略模式\"></a>实现策略模式</h3><p>我们通过<code>java</code>代码来实现策略模式。</p>\n<p>现在公司有一种产品——<code>Bird</code>(是的，你没看错，我们的产品就是鸟！),这只鸟目前的功能是<code>walk()</code>和<code>display</code>。我们还开设了两个子产品乌鸦和麻雀,如图:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk()&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>今年，公司的竞争压力加剧，公司主管认为是该创新的时候了，他们需要在下一次股东会议上展示一些”真正”让人印象深刻的东西来振奋人心了，于是我们决定让鸟能飞!</p>\n<p>小明拍胸脯保证一周就可以完成,他想他只要在**<code>Bird</code>类中加上<code>fly()</code>方法，这样所有鸟类就都会飞了**:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly() //👈小明加上的&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br></pre></td></tr></table></figure>\n\n<p>小明觉得天衣无缝，但是在股东会议上的展示上主管发现有很多橡胶鸟也在飞，主管让小明尽快的解决问题，不然就准备去逛前程无忧吧。</p>\n<p><strong>小明觉得可以把橡胶鸟类中的<code>fly()</code>方法覆盖掉，但是以后如果加入别的鸟类又会如何?再给鸟增加一个shout的功能呢?</strong></p>\n<p>利用继承来提供<code>Bird</code>的行为，会导致:</p>\n<ul>\n<li><strong>代码在多个子类中重复。</strong></li>\n<li><strong>很难知道所有鸟的全部行为。</strong></li>\n<li><strong>改变会牵一发动全身,造成其他鸟不想要的改变。</strong></li>\n<li><strong>运行时的行为不容易改变。</strong></li>\n</ul>\n<p>如果用接口呢？同样不行,使用接口会导致大量的重复代码，如果要稍微修改一下飞行的姿势那么每个鸟类的都要去处理。</p>\n<p>这时候策略模式就上场了，策略模式的定义 :</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我们将<code>fly()</code>和<code>shout()</code>在<code>Bird</code>中声明出来，并提供两个接口<code>FlyBehavior</code>和<code>ShoutBehavior</code>来实现这两个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Bird</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShoutBehavior shoutBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flyPerform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//调用FlyBehavior的fly方法</span></span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shoutPerform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//ShoutBehavior的shout方法</span></span><br><span class=\"line\">        shoutBehavior.shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setShoutBehavior</span><span class=\"params\">(ShoutBehavior shoutBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.shoutBehavior = shoutBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I was walking...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * FlyBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ShoutBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ShoutBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>你可能要骂娘了，这不还是使用接口吗，你丫逗我?放下手里的板凳别急。<strong>我们将鸟的行为以接口的形式声明在里面，而实现则放在分开的类中，此类专门提供某行为接口的实现，这样，鸟类就不再需要知道行为的实现细节了。</strong></p>\n<p><strong>针对接口编程，关键就在于多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">Bird --&gt; Fly[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">Bird --&gt; FlyNoWay[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br></pre></td></tr></table></figure>\n\n<p><code>FlyBehavior</code>和<code>ShoutBehavior</code>的实现类我们很简单我们就只列举一个:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I Can`t Fly&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>所有都完成后，我们增加一个产品喜鹊Magpie来测试我们模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 喜鹊——Bird的实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Magpie</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Magpie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">Fly</span>());</span><br><span class=\"line\">        setShoutBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">Shout</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I`m black&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们指定了Margpie的<code>fly()</code>和<code>Shout</code>的实现类，然后我们让它飞起来:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">         Magpie magpie=<span class=\"keyword\">new</span> <span class=\"title class_\">Magpie</span>();</span><br><span class=\"line\">         magpie.display();</span><br><span class=\"line\">         magpie.flyPerform();</span><br><span class=\"line\">         magpie.shoutPerform();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I`m black</span><br><span class=\"line\">I Can Fly</span><br><span class=\"line\">G G G...</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以调用<code>seter</code>方法来动态改变鸟的行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magpie.setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">FlyNoWay</span>());</span><br><span class=\"line\">magpie.flyPerform();</span><br></pre></td></tr></table></figure>\n\n<p>输出为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I`m black</span><br><span class=\"line\">I Can Fly</span><br><span class=\"line\">G G G...</span><br><span class=\"line\">I Can`t Fly</span><br></pre></td></tr></table></figure>\n\n<p>这就是策略模式，不要怀疑。多亏这个模式，小明可以勾画他的赌城狂欢之旅了。</p>\n<p>现在回头看看整体的布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">  subgraph 封装飞行行为</span><br><span class=\"line\">FlyBehavior[&quot;FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">FlyBehavior --&gt; Fly[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">FlyBehavior --&gt; FlyNoWay[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style FlyBehavior fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  subgraph 客户</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly()&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">   subgraph 封装叫喊行为</span><br><span class=\"line\">ShoutBehavior[&quot;ShoutBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">ShoutBehavior --&gt; Shout[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">ShoutBehavior --&gt; NoShout[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style ShoutBehavior fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">Bird --&gt; FlyBehavior</span><br><span class=\"line\">Bird --&gt; ShoutBehavior</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今年的读书计划正式开张了，其实过年的时候就把书单中的《了不起的盖茨比》给阅读完了，但是看完如猪八戒吃人参果——不知啥滋味。只知道大概的故事情节，书中华丽的词藻、作品的艺术和主题并不能完全体会，更别说写一些阅读后的观感了。抽空肯定是要重新阅读几遍的，所以就不把它当作已读书籍了。</p>\n<p>正式的阅读是从今天开始了，准备学习技术方面的书籍，但也先来点轻松的，就是这本《Head First 设计模式》。之前看过《Head First Java》书中内容通俗易懂，生动有趣是本入门的好书，设计模式呢是和那本书一起买的，买了也有些时候了，但是从学校到工作都是各种地方吃灰的角色，一直不能静下心来实践，感到十分羞愧。工作中也用到和阅读到各种设计模式却一直没有正确的认识，呈现在赶紧捡起来。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>设计模式是一种反复使用、多数人知晓、经过分类编目、代码设计的总结。它告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计模式并使它们适合我们特定的应用，是我们责无旁贷的事。</p>\n</blockquote>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><p>虽然之前并没有系统的学习设计模式，但对设计模式的六大设计原则还是略有耳闻的。不过本书目前不知道出于什么原因没有去介绍它，而是自己组织语言目前也就不得而知了，咱还是按书上的通俗易懂的先来。</p>\n<ul>\n<li><strong>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong></li>\n<li><strong>针对接口编程，而不是针对实现编程。</strong></li>\n<li><strong>多用组合，少用继承。</strong></li>\n</ul>\n<h3 id=\"实现策略模式\"><a href=\"#实现策略模式\" class=\"headerlink\" title=\"实现策略模式\"></a>实现策略模式</h3><p>我们通过<code>java</code>代码来实现策略模式。</p>\n<p>现在公司有一种产品——<code>Bird</code>(是的，你没看错，我们的产品就是鸟！),这只鸟目前的功能是<code>walk()</code>和<code>display</code>。我们还开设了两个子产品乌鸦和麻雀,如图:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk()&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>今年，公司的竞争压力加剧，公司主管认为是该创新的时候了，他们需要在下一次股东会议上展示一些”真正”让人印象深刻的东西来振奋人心了，于是我们决定让鸟能飞!</p>\n<p>小明拍胸脯保证一周就可以完成,他想他只要在**<code>Bird</code>类中加上<code>fly()</code>方法，这样所有鸟类就都会飞了**:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly() //👈小明加上的&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br></pre></td></tr></table></figure>\n\n<p>小明觉得天衣无缝，但是在股东会议上的展示上主管发现有很多橡胶鸟也在飞，主管让小明尽快的解决问题，不然就准备去逛前程无忧吧。</p>\n<p><strong>小明觉得可以把橡胶鸟类中的<code>fly()</code>方法覆盖掉，但是以后如果加入别的鸟类又会如何?再给鸟增加一个shout的功能呢?</strong></p>\n<p>利用继承来提供<code>Bird</code>的行为，会导致:</p>\n<ul>\n<li><strong>代码在多个子类中重复。</strong></li>\n<li><strong>很难知道所有鸟的全部行为。</strong></li>\n<li><strong>改变会牵一发动全身,造成其他鸟不想要的改变。</strong></li>\n<li><strong>运行时的行为不容易改变。</strong></li>\n</ul>\n<p>如果用接口呢？同样不行,使用接口会导致大量的重复代码，如果要稍微修改一下飞行的姿势那么每个鸟类的都要去处理。</p>\n<p>这时候策略模式就上场了，策略模式的定义 :</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我们将<code>fly()</code>和<code>shout()</code>在<code>Bird</code>中声明出来，并提供两个接口<code>FlyBehavior</code>和<code>ShoutBehavior</code>来实现这两个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Bird</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FlyBehavior flyBehavior;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShoutBehavior shoutBehavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flyPerform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//调用FlyBehavior的fly方法</span></span><br><span class=\"line\">        flyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shoutPerform</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//ShoutBehavior的shout方法</span></span><br><span class=\"line\">        shoutBehavior.shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlyBehavior</span><span class=\"params\">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flyBehavior = flyBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setShoutBehavior</span><span class=\"params\">(ShoutBehavior shoutBehavior)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.shoutBehavior = shoutBehavior;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I was walking...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * FlyBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ShoutBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ShoutBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>你可能要骂娘了，这不还是使用接口吗，你丫逗我?放下手里的板凳别急。<strong>我们将鸟的行为以接口的形式声明在里面，而实现则放在分开的类中，此类专门提供某行为接口的实现，这样，鸟类就不再需要知道行为的实现细节了。</strong></p>\n<p><strong>针对接口编程，关键就在于多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">Bird[&quot;FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">Bird --&gt; Fly[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">Bird --&gt; FlyNoWay[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br></pre></td></tr></table></figure>\n\n<p><code>FlyBehavior</code>和<code>ShoutBehavior</code>的实现类我们很简单我们就只列举一个:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyNoWay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FlyBehavior</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I Can`t Fly&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>所有都完成后，我们增加一个产品喜鹊Magpie来测试我们模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 喜鹊——Bird的实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Magpie</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Magpie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">Fly</span>());</span><br><span class=\"line\">        setShoutBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">Shout</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;I`m black&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们指定了Margpie的<code>fly()</code>和<code>Shout</code>的实现类，然后我们让它飞起来:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">         Magpie magpie=<span class=\"keyword\">new</span> <span class=\"title class_\">Magpie</span>();</span><br><span class=\"line\">         magpie.display();</span><br><span class=\"line\">         magpie.flyPerform();</span><br><span class=\"line\">         magpie.shoutPerform();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I`m black</span><br><span class=\"line\">I Can Fly</span><br><span class=\"line\">G G G...</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以调用<code>seter</code>方法来动态改变鸟的行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magpie.setFlyBehavior(<span class=\"keyword\">new</span> <span class=\"title class_\">FlyNoWay</span>());</span><br><span class=\"line\">magpie.flyPerform();</span><br></pre></td></tr></table></figure>\n\n<p>输出为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I`m black</span><br><span class=\"line\">I Can Fly</span><br><span class=\"line\">G G G...</span><br><span class=\"line\">I Can`t Fly</span><br></pre></td></tr></table></figure>\n\n<p>这就是策略模式，不要怀疑。多亏这个模式，小明可以勾画他的赌城狂欢之旅了。</p>\n<p>现在回头看看整体的布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">  subgraph 封装飞行行为</span><br><span class=\"line\">FlyBehavior[&quot;FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">FlyBehavior --&gt; Fly[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">FlyBehavior --&gt; FlyNoWay[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style FlyBehavior fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  subgraph 客户</span><br><span class=\"line\">Bird[&quot;Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly()&quot;]</span><br><span class=\"line\">Bird --&gt; crow[&quot;crow&lt;br&gt; &lt;br&gt;display() //外观是黑色&quot;]</span><br><span class=\"line\">Bird --&gt; sparrow[&quot;sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色&quot;]</span><br><span class=\"line\">style Bird fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">   subgraph 封装叫喊行为</span><br><span class=\"line\">ShoutBehavior[&quot;ShoutBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()&quot;]</span><br><span class=\"line\">ShoutBehavior --&gt; Shout[&quot;Fly&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">ShoutBehavior --&gt; NoShout[&quot;FlyNoWay&lt;br&gt; &lt;br&gt;fly()&#123;&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;&#125;&quot;]</span><br><span class=\"line\">style ShoutBehavior fill:#FFFACD;</span><br><span class=\"line\">    end</span><br><span class=\"line\">Bird --&gt; FlyBehavior</span><br><span class=\"line\">Bird --&gt; ShoutBehavior</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"装饰者模式(Decorator)","subtitle":"\"Head First学习笔记（三）\"","date":"2017-02-08T03:31:10.000Z","author":"chenzhaojun","header_image":"img/java.jpg","catalog":true,"_content":"\n> your internal mediocrity is the moment when you lost the faith of being excellent\n\n## 前言\n\n又到了学习 Head First 的时间了，今天大名鼎鼎的星巴兹咖啡找到我们，让我们帮忙更新他们的订单系统,他们现在的订单系统是这样的：![system](http://my.csdn.net/uploads/201205/06/1336303779_2807.jpg)\n\n看起来还好不是吗，简单清晰。所有的饮料都继承`Beverage`，具体的饮料用`cost()`来计算价格`description`来描述。但是他们遇到了一个问题，购买咖啡时候，也可以要求在其中加入各种调料，例如 : `milk(牛奶)`、`Soy(豆浆)`、`Mocha(摩卡)`等等。最后会更具加入的不同调料收取费用。所以订单系统必须考虑的到这些调料。所以他们尝试这样搭建一个系统 :\n\n![system1](http://my.csdn.net/uploads/201205/06/1336303992_9751.jpg)\n\n是不是看起来很酷，但收银员可不这么想，这对他来说如一个噩梦。而且当修改或增加饮料时候，那么维护起来也非常的恐怖。于是我们的小明又要接手新的活了。\n\n## 正文\n\n作为一个出色的 OO 程序员，小明也很快完成了他的第一版设计 :\n\n![system2](http://my.csdn.net/uploads/201205/07/1336354047_2530.jpg)\n\n具体的实现 :\n\n```java\npublic class Beverage {\n    private static final double milkSort = 0.1;\n    private static final double soySort = 0.3;\n    private static final double mochaSort = 0.4;\n    private static final double whipSort = 0.5;\n    private String description;\n    private boolean milk;\n    private boolean soy;\n    private boolean mocha;\n    private boolean whip;\n\n    public String getDescription() { return description;}\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public boolean isMilk() { return milk;}\n\n    public void setMilk(boolean milk) {this.milk = milk;}\n\n    public boolean isSoy() {return soy; }\n\n    public void setSoy(boolean soy) {this.soy = soy;}\n\n    public boolean isMocha() {return mocha;}\n\n    public void setMocha(boolean mocha) {this.mocha = mocha;}\n\n    public boolean isWhip() {return whip; }\n\n    public void setWhip(boolean whip) {this.whip = whip;}\n\n    public double cost() {\n        double cost = 0;\n        if (isMilk()) {\n            cost += milkSort;\n        }\n        if (isSoy()) {\n            cost += soySort;\n        }\n        if (isMocha()) {\n            cost += mochaSort;\n        }\n        if (isWhip()) {\n            cost += whipSort;\n        }\n        return cost;\n    }\n}\n```\n\n当我们要创建饮料时 :\n\n```java\npublic class DarkRoast extends Beverage{\n  public DarkRoast(){\n    description = \"Most Excellent Dark Roast\";\n  }\n  public double cost{\n    return 1.99+super.cost();\n  }\n}\n```\n\n目前看来没有什么问题，但哪些因素会影响这个设计?\n\n- 调整价钱的改变会使得我们更改现有代码。\n- 一旦出现新的饮料，我们就需要加上新的方法，并且要修改超类中`cost()`方法。\n- 以后可能会开发出新饮料。对这些饮料而言，某些调料可能并不合适，但是在这个设计方式中，子类仍将继承那些不合适的方法。\n- 万一顾客想要双倍摩卡的咖啡怎么办？\n- 当我们要设计新的功能，例如不同价格的同一调料，那将是巨大的改动。\n- 轮到你了\n\n### 什么是装饰者模式\n\n> 类应该对扩展开放，对修改关闭\n\n小明去求教了禅雅塔大师，大师告诉他可以用装饰者模式来解决这个问题并给了他一张图 :\n\n![decorator](http://my.csdn.net/uploads/201205/08/1336484138_5451.jpg)\n\n装饰者模式就是 : **装饰者模式动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案。**\n\n于是小明奖星巴兹的系统也设计成了装饰者模式 :\n\n![decorator_xbz](http://my.csdn.net/uploads/201205/08/1336484312_7020.jpg)\n\n程序实现 :\n\n```java\n//基类\npublic abstract class Beverage {\n    public String description;\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public abstract double cost();\n}\n```\n\n装饰者类,将`getDescription()`抽象化，子类必须实现它 :\n\n```java\npublic abstract class CondimentDecorator extends Beverage{\n    public abstract String getDescription();\n}\n```\n\n接下来实现具体的饮料和调料类，只各列举个一个列子 :\n\n```java\npublic class HouseBlend extends Beverage {\n    public HouseBlend() {\n        setDescription(\"HouseBlend\");\n    }\n\n    @Override\n    public double cost() {\n        return 1.88;\n    }\n}\n\npublic class Mocha extends CondimentDecorator{\n    Beverage beverage;\n    public Mocha(Beverage beverage)\n    {\n        this.beverage=beverage;\n    }\n    public String getDescription()\n    {\n        return beverage.getDescription()+\", Mocha\";\n    }\n    public double cost()\n    {\n        return 0.20+beverage.cost();\n    }\n}\n```\n\n测试 :\n\n```java\n    public static void main(String[] arg) {\n        Beverage espresso=new HouseBlend();\n        espresso = new Mocha(espresso);\n        espresso = new Soy(espresso);\n        espresso = new Whip(espresso);\n        System.err.println(espresso.getDescription()+\": \"+espresso.cost());\n\n        Beverage houseBlend = new Espresso();\n        houseBlend = new Mocha(new Mocha(new Whip(houseBlend)));\n        System.err.println(houseBlend.getDescription()+\": \"+houseBlend.cost());\n    }\n```\n\n输出为 :\n\n```\nHouseBlend, Mocha,Soy,Whip: 2.88\nEspresso,Whip, Mocha, Mocha: 1.69\n```\n\n同样完美的实现了星巴兹的功能，虽然看起来比刚才还稍微复杂一些，但是我们可以很轻松组合这些调料，增加和修改也不用促及底层的任何代码，收银员也不会向老板抱怨要炒我们鱿鱼——这就是装饰者模式。\n\n## 要点\n\n- 继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。\n- 在我们的设计中，应该允许在运行时动态地加上新的行为。\n- 除了继承，装饰者模式也可以让我们扩展行为。\n- 装饰者类反应出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。\n- 装饰者可以在被装饰者的行为前面/或后面加上自己的行为，甚至将装饰者的整个行为取代掉，从而达到特定的目的。\n- 你可以用无数个装饰者包装一个组件。\n- 装饰者一般对组件的客户是透明的，除非客户程序依赖与组件的具体类型。\n- 装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。\n","source":"_posts/2017-02-08-decorator.markdown","raw":"---\nlayout: post\ntitle: \"装饰者模式(Decorator)\"\nsubtitle: '\"Head First学习笔记（三）\"'\ndate: 2017-02-08 11:31:10\nauthor: \"chenzhaojun\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - 基础\n---\n\n> your internal mediocrity is the moment when you lost the faith of being excellent\n\n## 前言\n\n又到了学习 Head First 的时间了，今天大名鼎鼎的星巴兹咖啡找到我们，让我们帮忙更新他们的订单系统,他们现在的订单系统是这样的：![system](http://my.csdn.net/uploads/201205/06/1336303779_2807.jpg)\n\n看起来还好不是吗，简单清晰。所有的饮料都继承`Beverage`，具体的饮料用`cost()`来计算价格`description`来描述。但是他们遇到了一个问题，购买咖啡时候，也可以要求在其中加入各种调料，例如 : `milk(牛奶)`、`Soy(豆浆)`、`Mocha(摩卡)`等等。最后会更具加入的不同调料收取费用。所以订单系统必须考虑的到这些调料。所以他们尝试这样搭建一个系统 :\n\n![system1](http://my.csdn.net/uploads/201205/06/1336303992_9751.jpg)\n\n是不是看起来很酷，但收银员可不这么想，这对他来说如一个噩梦。而且当修改或增加饮料时候，那么维护起来也非常的恐怖。于是我们的小明又要接手新的活了。\n\n## 正文\n\n作为一个出色的 OO 程序员，小明也很快完成了他的第一版设计 :\n\n![system2](http://my.csdn.net/uploads/201205/07/1336354047_2530.jpg)\n\n具体的实现 :\n\n```java\npublic class Beverage {\n    private static final double milkSort = 0.1;\n    private static final double soySort = 0.3;\n    private static final double mochaSort = 0.4;\n    private static final double whipSort = 0.5;\n    private String description;\n    private boolean milk;\n    private boolean soy;\n    private boolean mocha;\n    private boolean whip;\n\n    public String getDescription() { return description;}\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public boolean isMilk() { return milk;}\n\n    public void setMilk(boolean milk) {this.milk = milk;}\n\n    public boolean isSoy() {return soy; }\n\n    public void setSoy(boolean soy) {this.soy = soy;}\n\n    public boolean isMocha() {return mocha;}\n\n    public void setMocha(boolean mocha) {this.mocha = mocha;}\n\n    public boolean isWhip() {return whip; }\n\n    public void setWhip(boolean whip) {this.whip = whip;}\n\n    public double cost() {\n        double cost = 0;\n        if (isMilk()) {\n            cost += milkSort;\n        }\n        if (isSoy()) {\n            cost += soySort;\n        }\n        if (isMocha()) {\n            cost += mochaSort;\n        }\n        if (isWhip()) {\n            cost += whipSort;\n        }\n        return cost;\n    }\n}\n```\n\n当我们要创建饮料时 :\n\n```java\npublic class DarkRoast extends Beverage{\n  public DarkRoast(){\n    description = \"Most Excellent Dark Roast\";\n  }\n  public double cost{\n    return 1.99+super.cost();\n  }\n}\n```\n\n目前看来没有什么问题，但哪些因素会影响这个设计?\n\n- 调整价钱的改变会使得我们更改现有代码。\n- 一旦出现新的饮料，我们就需要加上新的方法，并且要修改超类中`cost()`方法。\n- 以后可能会开发出新饮料。对这些饮料而言，某些调料可能并不合适，但是在这个设计方式中，子类仍将继承那些不合适的方法。\n- 万一顾客想要双倍摩卡的咖啡怎么办？\n- 当我们要设计新的功能，例如不同价格的同一调料，那将是巨大的改动。\n- 轮到你了\n\n### 什么是装饰者模式\n\n> 类应该对扩展开放，对修改关闭\n\n小明去求教了禅雅塔大师，大师告诉他可以用装饰者模式来解决这个问题并给了他一张图 :\n\n![decorator](http://my.csdn.net/uploads/201205/08/1336484138_5451.jpg)\n\n装饰者模式就是 : **装饰者模式动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案。**\n\n于是小明奖星巴兹的系统也设计成了装饰者模式 :\n\n![decorator_xbz](http://my.csdn.net/uploads/201205/08/1336484312_7020.jpg)\n\n程序实现 :\n\n```java\n//基类\npublic abstract class Beverage {\n    public String description;\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public abstract double cost();\n}\n```\n\n装饰者类,将`getDescription()`抽象化，子类必须实现它 :\n\n```java\npublic abstract class CondimentDecorator extends Beverage{\n    public abstract String getDescription();\n}\n```\n\n接下来实现具体的饮料和调料类，只各列举个一个列子 :\n\n```java\npublic class HouseBlend extends Beverage {\n    public HouseBlend() {\n        setDescription(\"HouseBlend\");\n    }\n\n    @Override\n    public double cost() {\n        return 1.88;\n    }\n}\n\npublic class Mocha extends CondimentDecorator{\n    Beverage beverage;\n    public Mocha(Beverage beverage)\n    {\n        this.beverage=beverage;\n    }\n    public String getDescription()\n    {\n        return beverage.getDescription()+\", Mocha\";\n    }\n    public double cost()\n    {\n        return 0.20+beverage.cost();\n    }\n}\n```\n\n测试 :\n\n```java\n    public static void main(String[] arg) {\n        Beverage espresso=new HouseBlend();\n        espresso = new Mocha(espresso);\n        espresso = new Soy(espresso);\n        espresso = new Whip(espresso);\n        System.err.println(espresso.getDescription()+\": \"+espresso.cost());\n\n        Beverage houseBlend = new Espresso();\n        houseBlend = new Mocha(new Mocha(new Whip(houseBlend)));\n        System.err.println(houseBlend.getDescription()+\": \"+houseBlend.cost());\n    }\n```\n\n输出为 :\n\n```\nHouseBlend, Mocha,Soy,Whip: 2.88\nEspresso,Whip, Mocha, Mocha: 1.69\n```\n\n同样完美的实现了星巴兹的功能，虽然看起来比刚才还稍微复杂一些，但是我们可以很轻松组合这些调料，增加和修改也不用促及底层的任何代码，收银员也不会向老板抱怨要炒我们鱿鱼——这就是装饰者模式。\n\n## 要点\n\n- 继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。\n- 在我们的设计中，应该允许在运行时动态地加上新的行为。\n- 除了继承，装饰者模式也可以让我们扩展行为。\n- 装饰者类反应出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。\n- 装饰者可以在被装饰者的行为前面/或后面加上自己的行为，甚至将装饰者的整个行为取代掉，从而达到特定的目的。\n- 你可以用无数个装饰者包装一个组件。\n- 装饰者一般对组件的客户是透明的，除非客户程序依赖与组件的具体类型。\n- 装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。\n","slug":"2017-02-08-decorator","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6oz0007s2y46jxu8u66","content":"<blockquote>\n<p>your internal mediocrity is the moment when you lost the faith of being excellent</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了学习 Head First 的时间了，今天大名鼎鼎的星巴兹咖啡找到我们，让我们帮忙更新他们的订单系统,他们现在的订单系统是这样的：<img src=\"http://my.csdn.net/uploads/201205/06/1336303779_2807.jpg\" alt=\"system\"></p>\n<p>看起来还好不是吗，简单清晰。所有的饮料都继承<code>Beverage</code>，具体的饮料用<code>cost()</code>来计算价格<code>description</code>来描述。但是他们遇到了一个问题，购买咖啡时候，也可以要求在其中加入各种调料，例如 : <code>milk(牛奶)</code>、<code>Soy(豆浆)</code>、<code>Mocha(摩卡)</code>等等。最后会更具加入的不同调料收取费用。所以订单系统必须考虑的到这些调料。所以他们尝试这样搭建一个系统 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/06/1336303992_9751.jpg\" alt=\"system1\"></p>\n<p>是不是看起来很酷，但收银员可不这么想，这对他来说如一个噩梦。而且当修改或增加饮料时候，那么维护起来也非常的恐怖。于是我们的小明又要接手新的活了。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>作为一个出色的 OO 程序员，小明也很快完成了他的第一版设计 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/07/1336354047_2530.jpg\" alt=\"system2\"></p>\n<p>具体的实现 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">milkSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">soySort</span> <span class=\"operator\">=</span> <span class=\"number\">0.3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">mochaSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">whipSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> milk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> soy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> mocha;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> whip;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> description;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDescription</span><span class=\"params\">(String description)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMilk</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> milk;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMilk</span><span class=\"params\">(<span class=\"type\">boolean</span> milk)</span> &#123;<span class=\"built_in\">this</span>.milk = milk;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSoy</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> soy; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSoy</span><span class=\"params\">(<span class=\"type\">boolean</span> soy)</span> &#123;<span class=\"built_in\">this</span>.soy = soy;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMocha</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> mocha;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMocha</span><span class=\"params\">(<span class=\"type\">boolean</span> mocha)</span> &#123;<span class=\"built_in\">this</span>.mocha = mocha;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isWhip</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> whip; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWhip</span><span class=\"params\">(<span class=\"type\">boolean</span> whip)</span> &#123;<span class=\"built_in\">this</span>.whip = whip;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isMilk()) &#123;</span><br><span class=\"line\">            cost += milkSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSoy()) &#123;</span><br><span class=\"line\">            cost += soySort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isMocha()) &#123;</span><br><span class=\"line\">            cost += mochaSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWhip()) &#123;</span><br><span class=\"line\">            cost += whipSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们要创建饮料时 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DarkRoast</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">DarkRoast</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    description = <span class=\"string\">&quot;Most Excellent Dark Roast&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> cost&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>+<span class=\"built_in\">super</span>.cost();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前看来没有什么问题，但哪些因素会影响这个设计?</p>\n<ul>\n<li>调整价钱的改变会使得我们更改现有代码。</li>\n<li>一旦出现新的饮料，我们就需要加上新的方法，并且要修改超类中<code>cost()</code>方法。</li>\n<li>以后可能会开发出新饮料。对这些饮料而言，某些调料可能并不合适，但是在这个设计方式中，子类仍将继承那些不合适的方法。</li>\n<li>万一顾客想要双倍摩卡的咖啡怎么办？</li>\n<li>当我们要设计新的功能，例如不同价格的同一调料，那将是巨大的改动。</li>\n<li>轮到你了</li>\n</ul>\n<h3 id=\"什么是装饰者模式\"><a href=\"#什么是装饰者模式\" class=\"headerlink\" title=\"什么是装饰者模式\"></a>什么是装饰者模式</h3><blockquote>\n<p>类应该对扩展开放，对修改关闭</p>\n</blockquote>\n<p>小明去求教了禅雅塔大师，大师告诉他可以用装饰者模式来解决这个问题并给了他一张图 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/08/1336484138_5451.jpg\" alt=\"decorator\"></p>\n<p>装饰者模式就是 : <strong>装饰者模式动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案。</strong></p>\n<p>于是小明奖星巴兹的系统也设计成了装饰者模式 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/08/1336484312_7020.jpg\" alt=\"decorator_xbz\"></p>\n<p>程序实现 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDescription</span><span class=\"params\">(String description)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>装饰者类,将<code>getDescription()</code>抽象化，子类必须实现它 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来实现具体的饮料和调料类，只各列举个一个列子 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HouseBlend</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HouseBlend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        setDescription(<span class=\"string\">&quot;HouseBlend&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.88</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CondimentDecorator</span>&#123;</span><br><span class=\"line\">    Beverage beverage;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.beverage=beverage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beverage.getDescription()+<span class=\"string\">&quot;, Mocha&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.20</span>+beverage.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arg)</span> &#123;</span><br><span class=\"line\">    Beverage espresso=<span class=\"keyword\">new</span> <span class=\"title class_\">HouseBlend</span>();</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(espresso);</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Soy</span>(espresso);</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Whip</span>(espresso);</span><br><span class=\"line\">    System.err.println(espresso.getDescription()+<span class=\"string\">&quot;: &quot;</span>+espresso.cost());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Beverage</span> <span class=\"variable\">houseBlend</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Espresso</span>();</span><br><span class=\"line\">    houseBlend = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Whip</span>(houseBlend)));</span><br><span class=\"line\">    System.err.println(houseBlend.getDescription()+<span class=\"string\">&quot;: &quot;</span>+houseBlend.cost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出为 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HouseBlend, Mocha,Soy,Whip: 2.88</span><br><span class=\"line\">Espresso,Whip, Mocha, Mocha: 1.69</span><br></pre></td></tr></table></figure>\n\n<p>同样完美的实现了星巴兹的功能，虽然看起来比刚才还稍微复杂一些，但是我们可以很轻松组合这些调料，增加和修改也不用促及底层的任何代码，收银员也不会向老板抱怨要炒我们鱿鱼——这就是装饰者模式。</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。</li>\n<li>在我们的设计中，应该允许在运行时动态地加上新的行为。</li>\n<li>除了继承，装饰者模式也可以让我们扩展行为。</li>\n<li>装饰者类反应出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。</li>\n<li>装饰者可以在被装饰者的行为前面&#x2F;或后面加上自己的行为，甚至将装饰者的整个行为取代掉，从而达到特定的目的。</li>\n<li>你可以用无数个装饰者包装一个组件。</li>\n<li>装饰者一般对组件的客户是透明的，除非客户程序依赖与组件的具体类型。</li>\n<li>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>your internal mediocrity is the moment when you lost the faith of being excellent</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了学习 Head First 的时间了，今天大名鼎鼎的星巴兹咖啡找到我们，让我们帮忙更新他们的订单系统,他们现在的订单系统是这样的：<img src=\"http://my.csdn.net/uploads/201205/06/1336303779_2807.jpg\" alt=\"system\"></p>\n<p>看起来还好不是吗，简单清晰。所有的饮料都继承<code>Beverage</code>，具体的饮料用<code>cost()</code>来计算价格<code>description</code>来描述。但是他们遇到了一个问题，购买咖啡时候，也可以要求在其中加入各种调料，例如 : <code>milk(牛奶)</code>、<code>Soy(豆浆)</code>、<code>Mocha(摩卡)</code>等等。最后会更具加入的不同调料收取费用。所以订单系统必须考虑的到这些调料。所以他们尝试这样搭建一个系统 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/06/1336303992_9751.jpg\" alt=\"system1\"></p>\n<p>是不是看起来很酷，但收银员可不这么想，这对他来说如一个噩梦。而且当修改或增加饮料时候，那么维护起来也非常的恐怖。于是我们的小明又要接手新的活了。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>作为一个出色的 OO 程序员，小明也很快完成了他的第一版设计 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/07/1336354047_2530.jpg\" alt=\"system2\"></p>\n<p>具体的实现 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">milkSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">soySort</span> <span class=\"operator\">=</span> <span class=\"number\">0.3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">mochaSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">whipSort</span> <span class=\"operator\">=</span> <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> milk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> soy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> mocha;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> whip;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> description;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDescription</span><span class=\"params\">(String description)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMilk</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> milk;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMilk</span><span class=\"params\">(<span class=\"type\">boolean</span> milk)</span> &#123;<span class=\"built_in\">this</span>.milk = milk;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSoy</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> soy; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSoy</span><span class=\"params\">(<span class=\"type\">boolean</span> soy)</span> &#123;<span class=\"built_in\">this</span>.soy = soy;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMocha</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> mocha;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMocha</span><span class=\"params\">(<span class=\"type\">boolean</span> mocha)</span> &#123;<span class=\"built_in\">this</span>.mocha = mocha;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isWhip</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> whip; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWhip</span><span class=\"params\">(<span class=\"type\">boolean</span> whip)</span> &#123;<span class=\"built_in\">this</span>.whip = whip;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isMilk()) &#123;</span><br><span class=\"line\">            cost += milkSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSoy()) &#123;</span><br><span class=\"line\">            cost += soySort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isMocha()) &#123;</span><br><span class=\"line\">            cost += mochaSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWhip()) &#123;</span><br><span class=\"line\">            cost += whipSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们要创建饮料时 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DarkRoast</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">DarkRoast</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    description = <span class=\"string\">&quot;Most Excellent Dark Roast&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> cost&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>+<span class=\"built_in\">super</span>.cost();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前看来没有什么问题，但哪些因素会影响这个设计?</p>\n<ul>\n<li>调整价钱的改变会使得我们更改现有代码。</li>\n<li>一旦出现新的饮料，我们就需要加上新的方法，并且要修改超类中<code>cost()</code>方法。</li>\n<li>以后可能会开发出新饮料。对这些饮料而言，某些调料可能并不合适，但是在这个设计方式中，子类仍将继承那些不合适的方法。</li>\n<li>万一顾客想要双倍摩卡的咖啡怎么办？</li>\n<li>当我们要设计新的功能，例如不同价格的同一调料，那将是巨大的改动。</li>\n<li>轮到你了</li>\n</ul>\n<h3 id=\"什么是装饰者模式\"><a href=\"#什么是装饰者模式\" class=\"headerlink\" title=\"什么是装饰者模式\"></a>什么是装饰者模式</h3><blockquote>\n<p>类应该对扩展开放，对修改关闭</p>\n</blockquote>\n<p>小明去求教了禅雅塔大师，大师告诉他可以用装饰者模式来解决这个问题并给了他一张图 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/08/1336484138_5451.jpg\" alt=\"decorator\"></p>\n<p>装饰者模式就是 : <strong>装饰者模式动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案。</strong></p>\n<p>于是小明奖星巴兹的系统也设计成了装饰者模式 :</p>\n<p><img src=\"http://my.csdn.net/uploads/201205/08/1336484312_7020.jpg\" alt=\"decorator_xbz\"></p>\n<p>程序实现 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDescription</span><span class=\"params\">(String description)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.description = description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>装饰者类,将<code>getDescription()</code>抽象化，子类必须实现它 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来实现具体的饮料和调料类，只各列举个一个列子 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HouseBlend</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HouseBlend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        setDescription(<span class=\"string\">&quot;HouseBlend&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.88</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CondimentDecorator</span>&#123;</span><br><span class=\"line\">    Beverage beverage;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.beverage=beverage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beverage.getDescription()+<span class=\"string\">&quot;, Mocha&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.20</span>+beverage.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arg)</span> &#123;</span><br><span class=\"line\">    Beverage espresso=<span class=\"keyword\">new</span> <span class=\"title class_\">HouseBlend</span>();</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(espresso);</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Soy</span>(espresso);</span><br><span class=\"line\">    espresso = <span class=\"keyword\">new</span> <span class=\"title class_\">Whip</span>(espresso);</span><br><span class=\"line\">    System.err.println(espresso.getDescription()+<span class=\"string\">&quot;: &quot;</span>+espresso.cost());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Beverage</span> <span class=\"variable\">houseBlend</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Espresso</span>();</span><br><span class=\"line\">    houseBlend = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Whip</span>(houseBlend)));</span><br><span class=\"line\">    System.err.println(houseBlend.getDescription()+<span class=\"string\">&quot;: &quot;</span>+houseBlend.cost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出为 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HouseBlend, Mocha,Soy,Whip: 2.88</span><br><span class=\"line\">Espresso,Whip, Mocha, Mocha: 1.69</span><br></pre></td></tr></table></figure>\n\n<p>同样完美的实现了星巴兹的功能，虽然看起来比刚才还稍微复杂一些，但是我们可以很轻松组合这些调料，增加和修改也不用促及底层的任何代码，收银员也不会向老板抱怨要炒我们鱿鱼——这就是装饰者模式。</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。</li>\n<li>在我们的设计中，应该允许在运行时动态地加上新的行为。</li>\n<li>除了继承，装饰者模式也可以让我们扩展行为。</li>\n<li>装饰者类反应出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。</li>\n<li>装饰者可以在被装饰者的行为前面&#x2F;或后面加上自己的行为，甚至将装饰者的整个行为取代掉，从而达到特定的目的。</li>\n<li>你可以用无数个装饰者包装一个组件。</li>\n<li>装饰者一般对组件的客户是透明的，除非客户程序依赖与组件的具体类型。</li>\n<li>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。</li>\n</ul>\n"},{"layout":"post","title":"观察者模式(Observer Pettern)","subtitle":"\"Head First学习笔记（二）\"","date":"2017-02-07T11:42:42.000Z","author":"chenzhaojun","header_image":"img/java.jpg","_content":"\n> 在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新\n\n## 代码实现\n\n观察者模式应该是`Java`和`Android`中用到的非常多的一个设计模式了，`Java`还提供了`Observer`相关的实现类，它们在`java.util.*`下，但它的`Observable`是个实现类，我们使用时需要继承它,这样并不方便我们的使用， 今天我们就参照书籍和相关类自己实现一个传统的`观察者模式`。\n\n上一次我们公司通过[**策略模式(StrategyPattern)**](<https://mr9527.github.io/2017/02/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(StrategyPattern)/>)来实现了一个暂时完美的产品“Bird”。公司已经步入了正轨，名气也逐渐大了起来，气象站的老板**Just**找到我们想让我们帮它做一款气象站的应用。\n\n应用的功能是三块布告板，一块用来显示当天的**temperature(温度)**、**humidity(湿度)**与**pressure(气压)**,另一块用来显示天气预报，最后一块用来显示当前温度的酷热指数(就是天气爽不爽)。当然这只是目前的功能，以后可能会随时增加或移除公告板。\n\n### 设计程序\n\n观察者模式有两个主要的角色 :可观察的对象`observable`或者也叫做`Subject`，订阅者`observer`。当`observable`发生改变的时候(这里对应的就是天气发生了变化),它会通知所有的`observer`(布告板),让它们根据情况去做自己的事情(更新显示的数据)。\n\n气象站的功能和观察者模式非常吻合,小明决定直接参照`Java`中的`Observer`来实现:\n\n记得上一次提起的设计原则——**针对接口编程,而不是针对实现编程**.我们将`observer`和`observable`的功能都用接口来声明:\n\n```java\n//observable\npublic interface Observable {\n\n    void registerObserver(Observer observer);\n\n    void removeObserver(Observer observer);\n\n    void notifyObserver(Object arg);\n}\n\n//observer\npublic interface Observer {\n    void update(Observable observable,Object arg);\n}\n```\n\n这样我们就将`observable`的注册、注销、和推送与`Observer`的更新都给抽离出来了减少了耦合增加了扩展性。\n\n还有一点需要注意的就是我们的`observer`都一个通用的功能——投影到公告板，这一点在设计原则中也提到了——**找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。**我们也将这个功能抽离出来。\n\n```java\npublic interface DisplayElement {\n    void display();\n}\n```\n\n程序设计完了,来看看 UML 图 :\n\n![Observer结构图](http://ok6cuokj5.bkt.clouddn.com/observer.png)\n\n再来看具体的实现 :\n\n### 气象站\n\n```java\npublic class WeatherData implements Observable {\n    private float temperature;\n    private float humidity;\n    private float pressure;\n    private List<Observer> observers;\n    private boolean changed;\n\n    public WeatherData() {\n        observers = new ArrayList<Observer>();\n    }\n\n    public void setWeatherData(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public float getHumidity() {\n        return humidity;\n    }\n\n    public float getPressure() {\n        return pressure;\n    }\n\n    public void setChanged(boolean changed) {\n        this.changed = changed;\n    }\n\n    public void clearChanged() {\n        this.changed = false;\n    }\n\n    public void measurementsChanged() {\n        System.err.println(\"数据发生了改变\");\n        notifyObserver(null);\n    }\n\n    @Override\n    public void registerObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    @Override\n    public void removeObserver(Observer observer) {\n        int i = observers.indexOf(observer);\n        if (i >= 0) {\n            observers.remove(i);\n        }\n    }\n\n    @Override\n    public void notifyObserver(Object arg) {\n        if (!changed) return;\n        for (Observer observer : observers) {\n            observer.update(this, arg);\n        }\n        clearChanged();\n    }\n}\n```\n\n我们在气象站通过一个`List`来管理订阅者们，当数据发生改变时候去通知它们，可以看到完全是面向对象的方式实现的，`observable`并不知道也不需要知道它的`observer`有哪些功能。至于为什么加一个开关`changed`，是因为这样我们可以更好的控制布告板的显示，我们不能每次发生一点改动就去更新它，那样用户的设备会爆炸的(当然没那么严重),有了这个\"开关\"我们就可以控制它的频率，比如每隔一段时间发送一次，或者变动较大发送一次。\n\n### 天气数据布告板\n\n```java\npublic class CurrentConditionsDisplay implements Observer, DisplayElement {\n    private Observable observable;\n\n    public CurrentConditionsDisplay(Observable observable) {\n        this.observable = observable;\n        observable.registerObserver(this);\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        this.observable = observable;\n        display();\n    }\n\n    @Override\n    public void display() {\n        if (observable instanceof WeatherData) {\n            WeatherData data = (WeatherData) observable;\n            System.err.println(\"温度\" + data.getTemperature() + \"湿度\" + data.getHumidity() + \"气压\" + data.getPressure());\n        }\n    }\n}\n```\n\n我们通过多态来获得`observable`的信息，然后调用`dispaly()`来显示布告板。\n\n### 天气预报布告板\n\n```java\npublic class ForecastDisplay implements Observer, DisplayElement {\n    private float currentPressure = 29.92f;\n    private float lastPressure;\n    private Observable weatherData;\n\n    public ForecastDisplay(Observable weatherData) {\n        this.weatherData = weatherData;\n        weatherData.registerObserver(this);\n    }\n\n\n    public void display() {\n        System.out.print(\"Forecast: \");\n        if (currentPressure > lastPressure) {\n            System.out.println(\"Improving weather on the way!\");\n        } else if (currentPressure == lastPressure) {\n            System.out.println(\"More of the same\");\n        } else if (currentPressure < lastPressure) {\n            System.out.println(\"Watch out for cooler, rainy weather\");\n        }\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        if (observable instanceof WeatherData) {\n            lastPressure = currentPressure;\n            currentPressure = ((WeatherData) observable).getPressure();\n            display();\n        }\n    }\n}\n```\n\n### 酷热指数布告板\n\n```java\npublic class ComfortLevelDisplay implements Observer, DisplayElement {\n    private Observable observable;\n\n    public ComfortLevelDisplay(Observable observable) {\n        this.observable = observable;\n        observable.registerObserver(this);\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        this.observable = observable;\n        display();\n    }\n\n    @Override\n    public void display() {\n        if (observable instanceof WeatherData) {\n            double comfortLevel = getComfortLevel(((WeatherData) observable).getTemperature(), ((WeatherData) observable).getHumidity());\n            System.err.println(\"酷热指数 :  \" + comfortLevel);\n        }\n    }\n\n    public double getComfortLevel(float t, float rh) {\n        return (16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh)\n                + (0.00941695 * (t * t)) + (0.00728898 * (rh * rh))\n                + (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +\n                (0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 *\n                (rh * rh * rh)) + (0.00000142721 * (t * t * t * rh)) +\n                (0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +\n                0.000000000843296 * (t * t * rh * rh * rh)) -\n                (0.0000000000481975 * (t * t * t * rh * rh * rh));\n    }\n}\n```\n\n这一大坨代码就是用来计算\"酷热指数的\"。至于为什么这么写，你可以问气象局或者百度~。\n\n最后我们来测试一下:\n\n```java\npublic class Main {\n    public static void main(String[] arg) {\n        WeatherData weatherData = new WeatherData();\n        ComfortLevelDisplay comfortLevelDisplay = new ComfortLevelDisplay(weatherData);\n        CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData);\n        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);\n\n        weatherData.setWeatherData(13, 14, 15);\n        weatherData.setChanged(true);\n        weatherData.setWeatherData(15, 16, 16);\n        weatherData.setWeatherData(13, 16, 16);\n    }\n}\n\n```\n\n我们在气象站中更新了三次数据来看看公告板是如何显示的吧 :\n\n```java\nlog: 数据发生了改变\nlog: 数据发生了改变\n酷热指数 :  84.45697418607358\n温度15.0 湿度16.0 气压16.0\nForecast: Watch out for cooler, rainy weather\nlog: 数据发生了改变\n```\n\n是不是和你预期的一样呢,观察者模式在这里就介绍完了。\n\n> 为交互对象之间的松耦合设计而努力\n\n## 要点\n\n- 观察者模式定义了对象之间一对多的关系。\n- 主题（也就是可观察者）用一个共同的接口来更新观察者。\n- 观察者和观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。\n- 使用此模式时，你可以从被观察者处推(pus)或拉(pull)数据(推的方式被认为更\"正确\")。\n- 有多个观察者时，不可以依赖特定的通知次序。\n- Java 有多种观察者模式的实现，包括了通用的`java.util.Obseravble`。\n\nday day up\n","source":"_posts/2017-02-07-observer.markdown","raw":"---\nlayout: post\ntitle: \"观察者模式(Observer Pettern)\"\nsubtitle: '\"Head First学习笔记（二）\"'\ndate: 2017-02-07 19:42:42\nauthor: \"chenzhaojun\"\nheader_image: \"img/java.jpg\"\ntags:\n  - 基础\n---\n\n> 在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新\n\n## 代码实现\n\n观察者模式应该是`Java`和`Android`中用到的非常多的一个设计模式了，`Java`还提供了`Observer`相关的实现类，它们在`java.util.*`下，但它的`Observable`是个实现类，我们使用时需要继承它,这样并不方便我们的使用， 今天我们就参照书籍和相关类自己实现一个传统的`观察者模式`。\n\n上一次我们公司通过[**策略模式(StrategyPattern)**](<https://mr9527.github.io/2017/02/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(StrategyPattern)/>)来实现了一个暂时完美的产品“Bird”。公司已经步入了正轨，名气也逐渐大了起来，气象站的老板**Just**找到我们想让我们帮它做一款气象站的应用。\n\n应用的功能是三块布告板，一块用来显示当天的**temperature(温度)**、**humidity(湿度)**与**pressure(气压)**,另一块用来显示天气预报，最后一块用来显示当前温度的酷热指数(就是天气爽不爽)。当然这只是目前的功能，以后可能会随时增加或移除公告板。\n\n### 设计程序\n\n观察者模式有两个主要的角色 :可观察的对象`observable`或者也叫做`Subject`，订阅者`observer`。当`observable`发生改变的时候(这里对应的就是天气发生了变化),它会通知所有的`observer`(布告板),让它们根据情况去做自己的事情(更新显示的数据)。\n\n气象站的功能和观察者模式非常吻合,小明决定直接参照`Java`中的`Observer`来实现:\n\n记得上一次提起的设计原则——**针对接口编程,而不是针对实现编程**.我们将`observer`和`observable`的功能都用接口来声明:\n\n```java\n//observable\npublic interface Observable {\n\n    void registerObserver(Observer observer);\n\n    void removeObserver(Observer observer);\n\n    void notifyObserver(Object arg);\n}\n\n//observer\npublic interface Observer {\n    void update(Observable observable,Object arg);\n}\n```\n\n这样我们就将`observable`的注册、注销、和推送与`Observer`的更新都给抽离出来了减少了耦合增加了扩展性。\n\n还有一点需要注意的就是我们的`observer`都一个通用的功能——投影到公告板，这一点在设计原则中也提到了——**找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。**我们也将这个功能抽离出来。\n\n```java\npublic interface DisplayElement {\n    void display();\n}\n```\n\n程序设计完了,来看看 UML 图 :\n\n![Observer结构图](http://ok6cuokj5.bkt.clouddn.com/observer.png)\n\n再来看具体的实现 :\n\n### 气象站\n\n```java\npublic class WeatherData implements Observable {\n    private float temperature;\n    private float humidity;\n    private float pressure;\n    private List<Observer> observers;\n    private boolean changed;\n\n    public WeatherData() {\n        observers = new ArrayList<Observer>();\n    }\n\n    public void setWeatherData(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public float getHumidity() {\n        return humidity;\n    }\n\n    public float getPressure() {\n        return pressure;\n    }\n\n    public void setChanged(boolean changed) {\n        this.changed = changed;\n    }\n\n    public void clearChanged() {\n        this.changed = false;\n    }\n\n    public void measurementsChanged() {\n        System.err.println(\"数据发生了改变\");\n        notifyObserver(null);\n    }\n\n    @Override\n    public void registerObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    @Override\n    public void removeObserver(Observer observer) {\n        int i = observers.indexOf(observer);\n        if (i >= 0) {\n            observers.remove(i);\n        }\n    }\n\n    @Override\n    public void notifyObserver(Object arg) {\n        if (!changed) return;\n        for (Observer observer : observers) {\n            observer.update(this, arg);\n        }\n        clearChanged();\n    }\n}\n```\n\n我们在气象站通过一个`List`来管理订阅者们，当数据发生改变时候去通知它们，可以看到完全是面向对象的方式实现的，`observable`并不知道也不需要知道它的`observer`有哪些功能。至于为什么加一个开关`changed`，是因为这样我们可以更好的控制布告板的显示，我们不能每次发生一点改动就去更新它，那样用户的设备会爆炸的(当然没那么严重),有了这个\"开关\"我们就可以控制它的频率，比如每隔一段时间发送一次，或者变动较大发送一次。\n\n### 天气数据布告板\n\n```java\npublic class CurrentConditionsDisplay implements Observer, DisplayElement {\n    private Observable observable;\n\n    public CurrentConditionsDisplay(Observable observable) {\n        this.observable = observable;\n        observable.registerObserver(this);\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        this.observable = observable;\n        display();\n    }\n\n    @Override\n    public void display() {\n        if (observable instanceof WeatherData) {\n            WeatherData data = (WeatherData) observable;\n            System.err.println(\"温度\" + data.getTemperature() + \"湿度\" + data.getHumidity() + \"气压\" + data.getPressure());\n        }\n    }\n}\n```\n\n我们通过多态来获得`observable`的信息，然后调用`dispaly()`来显示布告板。\n\n### 天气预报布告板\n\n```java\npublic class ForecastDisplay implements Observer, DisplayElement {\n    private float currentPressure = 29.92f;\n    private float lastPressure;\n    private Observable weatherData;\n\n    public ForecastDisplay(Observable weatherData) {\n        this.weatherData = weatherData;\n        weatherData.registerObserver(this);\n    }\n\n\n    public void display() {\n        System.out.print(\"Forecast: \");\n        if (currentPressure > lastPressure) {\n            System.out.println(\"Improving weather on the way!\");\n        } else if (currentPressure == lastPressure) {\n            System.out.println(\"More of the same\");\n        } else if (currentPressure < lastPressure) {\n            System.out.println(\"Watch out for cooler, rainy weather\");\n        }\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        if (observable instanceof WeatherData) {\n            lastPressure = currentPressure;\n            currentPressure = ((WeatherData) observable).getPressure();\n            display();\n        }\n    }\n}\n```\n\n### 酷热指数布告板\n\n```java\npublic class ComfortLevelDisplay implements Observer, DisplayElement {\n    private Observable observable;\n\n    public ComfortLevelDisplay(Observable observable) {\n        this.observable = observable;\n        observable.registerObserver(this);\n    }\n\n    @Override\n    public void update(Observable observable, Object arg) {\n        this.observable = observable;\n        display();\n    }\n\n    @Override\n    public void display() {\n        if (observable instanceof WeatherData) {\n            double comfortLevel = getComfortLevel(((WeatherData) observable).getTemperature(), ((WeatherData) observable).getHumidity());\n            System.err.println(\"酷热指数 :  \" + comfortLevel);\n        }\n    }\n\n    public double getComfortLevel(float t, float rh) {\n        return (16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh)\n                + (0.00941695 * (t * t)) + (0.00728898 * (rh * rh))\n                + (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +\n                (0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 *\n                (rh * rh * rh)) + (0.00000142721 * (t * t * t * rh)) +\n                (0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +\n                0.000000000843296 * (t * t * rh * rh * rh)) -\n                (0.0000000000481975 * (t * t * t * rh * rh * rh));\n    }\n}\n```\n\n这一大坨代码就是用来计算\"酷热指数的\"。至于为什么这么写，你可以问气象局或者百度~。\n\n最后我们来测试一下:\n\n```java\npublic class Main {\n    public static void main(String[] arg) {\n        WeatherData weatherData = new WeatherData();\n        ComfortLevelDisplay comfortLevelDisplay = new ComfortLevelDisplay(weatherData);\n        CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData);\n        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);\n\n        weatherData.setWeatherData(13, 14, 15);\n        weatherData.setChanged(true);\n        weatherData.setWeatherData(15, 16, 16);\n        weatherData.setWeatherData(13, 16, 16);\n    }\n}\n\n```\n\n我们在气象站中更新了三次数据来看看公告板是如何显示的吧 :\n\n```java\nlog: 数据发生了改变\nlog: 数据发生了改变\n酷热指数 :  84.45697418607358\n温度15.0 湿度16.0 气压16.0\nForecast: Watch out for cooler, rainy weather\nlog: 数据发生了改变\n```\n\n是不是和你预期的一样呢,观察者模式在这里就介绍完了。\n\n> 为交互对象之间的松耦合设计而努力\n\n## 要点\n\n- 观察者模式定义了对象之间一对多的关系。\n- 主题（也就是可观察者）用一个共同的接口来更新观察者。\n- 观察者和观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。\n- 使用此模式时，你可以从被观察者处推(pus)或拉(pull)数据(推的方式被认为更\"正确\")。\n- 有多个观察者时，不可以依赖特定的通知次序。\n- Java 有多种观察者模式的实现，包括了通用的`java.util.Obseravble`。\n\nday day up\n","slug":"2017-02-07-observer","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6oz0008s2y48onxatbz","content":"<blockquote>\n<p>在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新</p>\n</blockquote>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>观察者模式应该是<code>Java</code>和<code>Android</code>中用到的非常多的一个设计模式了，<code>Java</code>还提供了<code>Observer</code>相关的实现类，它们在<code>java.util.*</code>下，但它的<code>Observable</code>是个实现类，我们使用时需要继承它,这样并不方便我们的使用， 今天我们就参照书籍和相关类自己实现一个传统的<code>观察者模式</code>。</p>\n<p>上一次我们公司通过<a href=\"https://mr9527.github.io/2017/02/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(StrategyPattern)/\"><strong>策略模式(StrategyPattern)</strong></a>来实现了一个暂时完美的产品“Bird”。公司已经步入了正轨，名气也逐渐大了起来，气象站的老板<strong>Just</strong>找到我们想让我们帮它做一款气象站的应用。</p>\n<p>应用的功能是三块布告板，一块用来显示当天的<strong>temperature(温度)<strong>、</strong>humidity(湿度)<strong>与</strong>pressure(气压)</strong>,另一块用来显示天气预报，最后一块用来显示当前温度的酷热指数(就是天气爽不爽)。当然这只是目前的功能，以后可能会随时增加或移除公告板。</p>\n<h3 id=\"设计程序\"><a href=\"#设计程序\" class=\"headerlink\" title=\"设计程序\"></a>设计程序</h3><p>观察者模式有两个主要的角色 :可观察的对象<code>observable</code>或者也叫做<code>Subject</code>，订阅者<code>observer</code>。当<code>observable</code>发生改变的时候(这里对应的就是天气发生了变化),它会通知所有的<code>observer</code>(布告板),让它们根据情况去做自己的事情(更新显示的数据)。</p>\n<p>气象站的功能和观察者模式非常吻合,小明决定直接参照<code>Java</code>中的<code>Observer</code>来实现:</p>\n<p>记得上一次提起的设计原则——<strong>针对接口编程,而不是针对实现编程</strong>.我们将<code>observer</code>和<code>observable</code>的功能都用接口来声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//observable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">(Object arg)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//observer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable,Object arg)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就将<code>observable</code>的注册、注销、和推送与<code>Observer</code>的更新都给抽离出来了减少了耦合增加了扩展性。</p>\n<p>还有一点需要注意的就是我们的<code>observer</code>都一个通用的功能——投影到公告板，这一点在设计原则中也提到了——<strong>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong>我们也将这个功能抽离出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DisplayElement</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序设计完了,来看看 UML 图 :</p>\n<p><img src=\"http://ok6cuokj5.bkt.clouddn.com/observer.png\" alt=\"Observer结构图\"></p>\n<p>再来看具体的实现 :</p>\n<h3 id=\"气象站\"><a href=\"#气象站\" class=\"headerlink\" title=\"气象站\"></a>气象站</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherData</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> pressure;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> changed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeatherData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        observers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWeatherData</span><span class=\"params\">(<span class=\"type\">float</span> temperature, <span class=\"type\">float</span> humidity, <span class=\"type\">float</span> pressure)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getTemperature</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temperature;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getHumidity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> humidity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getPressure</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pressure;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> changed)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.changed = changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clearChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.changed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measurementsChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;数据发生了改变&quot;</span>);</span><br><span class=\"line\">        notifyObserver(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            observers.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">(Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!changed) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</span><br><span class=\"line\">            observer.update(<span class=\"built_in\">this</span>, arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        clearChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在气象站通过一个<code>List</code>来管理订阅者们，当数据发生改变时候去通知它们，可以看到完全是面向对象的方式实现的，<code>observable</code>并不知道也不需要知道它的<code>observer</code>有哪些功能。至于为什么加一个开关<code>changed</code>，是因为这样我们可以更好的控制布告板的显示，我们不能每次发生一点改动就去更新它，那样用户的设备会爆炸的(当然没那么严重),有了这个”开关”我们就可以控制它的频率，比如每隔一段时间发送一次，或者变动较大发送一次。</p>\n<h3 id=\"天气数据布告板\"><a href=\"#天气数据布告板\" class=\"headerlink\" title=\"天气数据布告板\"></a>天气数据布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CurrentConditionsDisplay</span><span class=\"params\">(Observable observable)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            <span class=\"type\">WeatherData</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> (WeatherData) observable;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;温度&quot;</span> + data.getTemperature() + <span class=\"string\">&quot;湿度&quot;</span> + data.getHumidity() + <span class=\"string\">&quot;气压&quot;</span> + data.getPressure());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过多态来获得<code>observable</code>的信息，然后调用<code>dispaly()</code>来显示布告板。</p>\n<h3 id=\"天气预报布告板\"><a href=\"#天气预报布告板\" class=\"headerlink\" title=\"天气预报布告板\"></a>天气预报布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForecastDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> <span class=\"variable\">currentPressure</span> <span class=\"operator\">=</span> <span class=\"number\">29.92f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> lastPressure;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable weatherData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ForecastDisplay</span><span class=\"params\">(Observable weatherData)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">        weatherData.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;Forecast: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPressure &gt; lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Improving weather on the way!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentPressure == lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;More of the same&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentPressure &lt; lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Watch out for cooler, rainy weather&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            lastPressure = currentPressure;</span><br><span class=\"line\">            currentPressure = ((WeatherData) observable).getPressure();</span><br><span class=\"line\">            display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"酷热指数布告板\"><a href=\"#酷热指数布告板\" class=\"headerlink\" title=\"酷热指数布告板\"></a>酷热指数布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ComfortLevelDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ComfortLevelDisplay</span><span class=\"params\">(Observable observable)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">comfortLevel</span> <span class=\"operator\">=</span> getComfortLevel(((WeatherData) observable).getTemperature(), ((WeatherData) observable).getHumidity());</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;酷热指数 :  &quot;</span> + comfortLevel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getComfortLevel</span><span class=\"params\">(<span class=\"type\">float</span> t, <span class=\"type\">float</span> rh)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">16.923</span> + (<span class=\"number\">0.185212</span> * t) + (<span class=\"number\">5.37941</span> * rh) - (<span class=\"number\">0.100254</span> * t * rh)</span><br><span class=\"line\">                + (<span class=\"number\">0.00941695</span> * (t * t)) + (<span class=\"number\">0.00728898</span> * (rh * rh))</span><br><span class=\"line\">                + (<span class=\"number\">0.000345372</span> * (t * t * rh)) - (<span class=\"number\">0.000814971</span> * (t * rh * rh)) +</span><br><span class=\"line\">                (<span class=\"number\">0.0000102102</span> * (t * t * rh * rh)) - (<span class=\"number\">0.000038646</span> * (t * t * t)) + (<span class=\"number\">0.0000291583</span> *</span><br><span class=\"line\">                (rh * rh * rh)) + (<span class=\"number\">0.00000142721</span> * (t * t * t * rh)) +</span><br><span class=\"line\">                (<span class=\"number\">0.000000197483</span> * (t * rh * rh * rh)) - (<span class=\"number\">0.0000000218429</span> * (t * t * t * rh * rh)) +</span><br><span class=\"line\">                <span class=\"number\">0.000000000843296</span> * (t * t * rh * rh * rh)) -</span><br><span class=\"line\">                (<span class=\"number\">0.0000000000481975</span> * (t * t * t * rh * rh * rh));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一大坨代码就是用来计算”酷热指数的”。至于为什么这么写，你可以问气象局或者百度~。</p>\n<p>最后我们来测试一下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WeatherData</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherData</span>();</span><br><span class=\"line\">        <span class=\"type\">ComfortLevelDisplay</span> <span class=\"variable\">comfortLevelDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComfortLevelDisplay</span>(weatherData);</span><br><span class=\"line\">        <span class=\"type\">CurrentConditionsDisplay</span> <span class=\"variable\">currentConditionsDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CurrentConditionsDisplay</span>(weatherData);</span><br><span class=\"line\">        <span class=\"type\">ForecastDisplay</span> <span class=\"variable\">forecastDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForecastDisplay</span>(weatherData);</span><br><span class=\"line\"></span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        weatherData.setChanged(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">13</span>, <span class=\"number\">16</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们在气象站中更新了三次数据来看看公告板是如何显示的吧 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log: 数据发生了改变</span><br><span class=\"line\">log: 数据发生了改变</span><br><span class=\"line\">酷热指数 :  <span class=\"number\">84.45697418607358</span></span><br><span class=\"line\">温度<span class=\"number\">15.0</span> 湿度<span class=\"number\">16.0</span> 气压<span class=\"number\">16.0</span></span><br><span class=\"line\">Forecast: Watch out <span class=\"keyword\">for</span> cooler, rainy weather</span><br><span class=\"line\">log: 数据发生了改变</span><br></pre></td></tr></table></figure>\n\n<p>是不是和你预期的一样呢,观察者模式在这里就介绍完了。</p>\n<blockquote>\n<p>为交互对象之间的松耦合设计而努力</p>\n</blockquote>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>观察者模式定义了对象之间一对多的关系。</li>\n<li>主题（也就是可观察者）用一个共同的接口来更新观察者。</li>\n<li>观察者和观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。</li>\n<li>使用此模式时，你可以从被观察者处推(pus)或拉(pull)数据(推的方式被认为更”正确”)。</li>\n<li>有多个观察者时，不可以依赖特定的通知次序。</li>\n<li>Java 有多种观察者模式的实现，包括了通用的<code>java.util.Obseravble</code>。</li>\n</ul>\n<p>day day up</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新</p>\n</blockquote>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>观察者模式应该是<code>Java</code>和<code>Android</code>中用到的非常多的一个设计模式了，<code>Java</code>还提供了<code>Observer</code>相关的实现类，它们在<code>java.util.*</code>下，但它的<code>Observable</code>是个实现类，我们使用时需要继承它,这样并不方便我们的使用， 今天我们就参照书籍和相关类自己实现一个传统的<code>观察者模式</code>。</p>\n<p>上一次我们公司通过<a href=\"https://mr9527.github.io/2017/02/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(StrategyPattern)/\"><strong>策略模式(StrategyPattern)</strong></a>来实现了一个暂时完美的产品“Bird”。公司已经步入了正轨，名气也逐渐大了起来，气象站的老板<strong>Just</strong>找到我们想让我们帮它做一款气象站的应用。</p>\n<p>应用的功能是三块布告板，一块用来显示当天的<strong>temperature(温度)<strong>、</strong>humidity(湿度)<strong>与</strong>pressure(气压)</strong>,另一块用来显示天气预报，最后一块用来显示当前温度的酷热指数(就是天气爽不爽)。当然这只是目前的功能，以后可能会随时增加或移除公告板。</p>\n<h3 id=\"设计程序\"><a href=\"#设计程序\" class=\"headerlink\" title=\"设计程序\"></a>设计程序</h3><p>观察者模式有两个主要的角色 :可观察的对象<code>observable</code>或者也叫做<code>Subject</code>，订阅者<code>observer</code>。当<code>observable</code>发生改变的时候(这里对应的就是天气发生了变化),它会通知所有的<code>observer</code>(布告板),让它们根据情况去做自己的事情(更新显示的数据)。</p>\n<p>气象站的功能和观察者模式非常吻合,小明决定直接参照<code>Java</code>中的<code>Observer</code>来实现:</p>\n<p>记得上一次提起的设计原则——<strong>针对接口编程,而不是针对实现编程</strong>.我们将<code>observer</code>和<code>observable</code>的功能都用接口来声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//observable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">(Object arg)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//observer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable,Object arg)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就将<code>observable</code>的注册、注销、和推送与<code>Observer</code>的更新都给抽离出来了减少了耦合增加了扩展性。</p>\n<p>还有一点需要注意的就是我们的<code>observer</code>都一个通用的功能——投影到公告板，这一点在设计原则中也提到了——<strong>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong>我们也将这个功能抽离出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DisplayElement</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序设计完了,来看看 UML 图 :</p>\n<p><img src=\"http://ok6cuokj5.bkt.clouddn.com/observer.png\" alt=\"Observer结构图\"></p>\n<p>再来看具体的实现 :</p>\n<h3 id=\"气象站\"><a href=\"#气象站\" class=\"headerlink\" title=\"气象站\"></a>气象站</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherData</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> pressure;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> changed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeatherData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        observers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWeatherData</span><span class=\"params\">(<span class=\"type\">float</span> temperature, <span class=\"type\">float</span> humidity, <span class=\"type\">float</span> pressure)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getTemperature</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temperature;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getHumidity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> humidity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getPressure</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pressure;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> changed)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.changed = changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clearChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.changed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measurementsChanged</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;数据发生了改变&quot;</span>);</span><br><span class=\"line\">        notifyObserver(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> observers.indexOf(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            observers.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">(Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!changed) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</span><br><span class=\"line\">            observer.update(<span class=\"built_in\">this</span>, arg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        clearChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在气象站通过一个<code>List</code>来管理订阅者们，当数据发生改变时候去通知它们，可以看到完全是面向对象的方式实现的，<code>observable</code>并不知道也不需要知道它的<code>observer</code>有哪些功能。至于为什么加一个开关<code>changed</code>，是因为这样我们可以更好的控制布告板的显示，我们不能每次发生一点改动就去更新它，那样用户的设备会爆炸的(当然没那么严重),有了这个”开关”我们就可以控制它的频率，比如每隔一段时间发送一次，或者变动较大发送一次。</p>\n<h3 id=\"天气数据布告板\"><a href=\"#天气数据布告板\" class=\"headerlink\" title=\"天气数据布告板\"></a>天气数据布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CurrentConditionsDisplay</span><span class=\"params\">(Observable observable)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            <span class=\"type\">WeatherData</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> (WeatherData) observable;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;温度&quot;</span> + data.getTemperature() + <span class=\"string\">&quot;湿度&quot;</span> + data.getHumidity() + <span class=\"string\">&quot;气压&quot;</span> + data.getPressure());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过多态来获得<code>observable</code>的信息，然后调用<code>dispaly()</code>来显示布告板。</p>\n<h3 id=\"天气预报布告板\"><a href=\"#天气预报布告板\" class=\"headerlink\" title=\"天气预报布告板\"></a>天气预报布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForecastDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> <span class=\"variable\">currentPressure</span> <span class=\"operator\">=</span> <span class=\"number\">29.92f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> lastPressure;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable weatherData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ForecastDisplay</span><span class=\"params\">(Observable weatherData)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">        weatherData.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;Forecast: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPressure &gt; lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Improving weather on the way!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentPressure == lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;More of the same&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentPressure &lt; lastPressure) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Watch out for cooler, rainy weather&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            lastPressure = currentPressure;</span><br><span class=\"line\">            currentPressure = ((WeatherData) observable).getPressure();</span><br><span class=\"line\">            display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"酷热指数布告板\"><a href=\"#酷热指数布告板\" class=\"headerlink\" title=\"酷热指数布告板\"></a>酷热指数布告板</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ComfortLevelDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>, DisplayElement &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ComfortLevelDisplay</span><span class=\"params\">(Observable observable)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable observable, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observable <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">comfortLevel</span> <span class=\"operator\">=</span> getComfortLevel(((WeatherData) observable).getTemperature(), ((WeatherData) observable).getHumidity());</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;酷热指数 :  &quot;</span> + comfortLevel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getComfortLevel</span><span class=\"params\">(<span class=\"type\">float</span> t, <span class=\"type\">float</span> rh)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"number\">16.923</span> + (<span class=\"number\">0.185212</span> * t) + (<span class=\"number\">5.37941</span> * rh) - (<span class=\"number\">0.100254</span> * t * rh)</span><br><span class=\"line\">                + (<span class=\"number\">0.00941695</span> * (t * t)) + (<span class=\"number\">0.00728898</span> * (rh * rh))</span><br><span class=\"line\">                + (<span class=\"number\">0.000345372</span> * (t * t * rh)) - (<span class=\"number\">0.000814971</span> * (t * rh * rh)) +</span><br><span class=\"line\">                (<span class=\"number\">0.0000102102</span> * (t * t * rh * rh)) - (<span class=\"number\">0.000038646</span> * (t * t * t)) + (<span class=\"number\">0.0000291583</span> *</span><br><span class=\"line\">                (rh * rh * rh)) + (<span class=\"number\">0.00000142721</span> * (t * t * t * rh)) +</span><br><span class=\"line\">                (<span class=\"number\">0.000000197483</span> * (t * rh * rh * rh)) - (<span class=\"number\">0.0000000218429</span> * (t * t * t * rh * rh)) +</span><br><span class=\"line\">                <span class=\"number\">0.000000000843296</span> * (t * t * rh * rh * rh)) -</span><br><span class=\"line\">                (<span class=\"number\">0.0000000000481975</span> * (t * t * t * rh * rh * rh));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一大坨代码就是用来计算”酷热指数的”。至于为什么这么写，你可以问气象局或者百度~。</p>\n<p>最后我们来测试一下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WeatherData</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherData</span>();</span><br><span class=\"line\">        <span class=\"type\">ComfortLevelDisplay</span> <span class=\"variable\">comfortLevelDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComfortLevelDisplay</span>(weatherData);</span><br><span class=\"line\">        <span class=\"type\">CurrentConditionsDisplay</span> <span class=\"variable\">currentConditionsDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CurrentConditionsDisplay</span>(weatherData);</span><br><span class=\"line\">        <span class=\"type\">ForecastDisplay</span> <span class=\"variable\">forecastDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForecastDisplay</span>(weatherData);</span><br><span class=\"line\"></span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        weatherData.setChanged(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">        weatherData.setWeatherData(<span class=\"number\">13</span>, <span class=\"number\">16</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们在气象站中更新了三次数据来看看公告板是如何显示的吧 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log: 数据发生了改变</span><br><span class=\"line\">log: 数据发生了改变</span><br><span class=\"line\">酷热指数 :  <span class=\"number\">84.45697418607358</span></span><br><span class=\"line\">温度<span class=\"number\">15.0</span> 湿度<span class=\"number\">16.0</span> 气压<span class=\"number\">16.0</span></span><br><span class=\"line\">Forecast: Watch out <span class=\"keyword\">for</span> cooler, rainy weather</span><br><span class=\"line\">log: 数据发生了改变</span><br></pre></td></tr></table></figure>\n\n<p>是不是和你预期的一样呢,观察者模式在这里就介绍完了。</p>\n<blockquote>\n<p>为交互对象之间的松耦合设计而努力</p>\n</blockquote>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>观察者模式定义了对象之间一对多的关系。</li>\n<li>主题（也就是可观察者）用一个共同的接口来更新观察者。</li>\n<li>观察者和观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。</li>\n<li>使用此模式时，你可以从被观察者处推(pus)或拉(pull)数据(推的方式被认为更”正确”)。</li>\n<li>有多个观察者时，不可以依赖特定的通知次序。</li>\n<li>Java 有多种观察者模式的实现，包括了通用的<code>java.util.Obseravble</code>。</li>\n</ul>\n<p>day day up</p>\n"},{"layout":"post","title":"工厂模式(factory Pettern)","subtitle":"\"Head First 学习笔记(四)\"","date":"2017-02-20T03:31:10.000Z","author":"just","header_image":"img/java.jpg","catalog":true,"_content":"\n## 前言\n\n一看日期吓一跳，已经一周多没有写笔记了。除了懒之外还是懒....其实之前认真思考过，是否应该花大量的时间去排版笔记去写 bolg，想想还是应该写下去，除了给予自己反馈增加自己的动力确实能让自己学习到的东西再梳理一遍增加知识在脑袋里的存储时间。\n\n## 正文\n\n工厂模式无论是在平时开发还是各种源码中都经常出现的，它细分为三种 :\n\n- **简单工厂**\n- **工厂方法**\n- **抽象工厂**\n\n虽然分类较多，不过具体的作用都是将对象创建的过程封装起来，以便将代码从具体类解耦。重点介绍较为复杂的抽象工厂，简单工厂和工厂发方法我们应该在平时都经常用到，很容易理解。\n\n### 简单工厂\n\n那么我们先来实现一个小目标吧，比如说，开一个 🍕 披萨店！\n\n披萨的制作流程呢，先要准备材料然后烤制、分割、装盘一个披萨就制作完成了！（😄 就是这么简单）\n\n我们有很多口味的披萨，但所有的披萨都要经过这个流程，唯一的差别就是面饼不同，为了节省店面的成本和方便以后开连锁店我们需要将面饼的制作过程给独立出来，交给代工厂来制作，这样我们的披萨店 🍕 可以省下很多的精力。\n\n这就是简单工厂，简单工厂其实并不是一种设计模式，反而像是一种编程习惯。它将一个项目中需要变化的部分以接口的形式抽象出来，通过创建不同 Factory 实例来完成抽象的功能的具体实现从而达到解耦。\n\n![简单工厂](http://img.imooc.com/57a36e6c00015d0d08390528.png)\n\n### 工厂方法\n\n> 工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类\n\n但是将面饼的制作交给外面的工厂成本太高，且改良工艺沟通起来非常困难，而且连锁店开起来后我们发现那些小店并不愿意承担让别人制作的成本 😠，于是我们改进了经营制度。由我们提供披萨的制作方法，而连锁店他们自己来制作 🍕Pizza 这样仍可以保证双方的利益关系。\n\n![工厂方法](http://img.imooc.com/57a3797d000136af08560459.png)\n\n工厂方法猛一看与静态工厂类似，都是将具体方法抽象出去，只不过一个是继承，另一个是接口罢了。但其实它们的用法还是挺不同的，工厂方法的子类看起来很像是简单工厂。简单工厂把全部的事情在一个地方都处理完了，然而工厂方法却是创建一个框架，让子类决定要如何实现。这种做法更具备弹性，可以修改正在创建的类，同时也仍具有对扩展的方便性，如果有很多相同的实现也可以提供一个默认的实现类来解决代码重复的问题。\n\n### 抽象工厂\n\n接下来的就是今天的正餐了，如果你对前面没有看到代码而不爽那么你可以在抽象工厂的代码中看到它们的影子哦。\n\n前不久我们的 🍕 披萨店已经发展成为和黄焖鸡米饭、沙县小吃以及兰州拉面一个级别的商业帝国了。越来越多连锁店的各种不同的问题冲击着我们的总部，如果要处理这些问题我们总部将变得臃肿不堪。于是我们又准备改革创兴了！\n\n我们先需要一个给我们提供原材料的工厂，全国那么多地方我们不可能都用一个工厂提供，所以我们提供一个规范，如果想要跟我们合作就必须符合这个规范 :\n\n```java\n/**\n * Pizza工厂的接口\n * 在接口中每一种原料都有一个对应的方法创建该原料\n */\npublic interface PizzaIngredientFactory {\n\n    public Cheese createCheese();\n\n    public Dough createDough();\n\n    public Sauce createSauce();\n\n    public Clam createClam();\n}\n\n```\n\n然后我们同样要给 Pizza 连锁店提供规范免得他们瞎搞坏了我们的招牌，毕竟一个差评递上是个好评不是吗!当然也不能太严厉什么都管，那样就会太糟糕了。\n\n```java\n/**\n*创建一个Pizza商店规范\n*/\npublic abstract class PizzaStore {\n    public abstract Pizza createPizza(String name);\n}\n\n```\n\n什么？在规范上太宽松？Native! 这只是 🍕 店的流程规范，而 Pizza 的制作规范还没有开始呢，我们制作了一个一个制作 Pizza 的机器，嘿嘿。店家只需要将机器搬到店里然后把制作好的 Pizza 面饼放置到机器里制作就可以了，像那啥，正新鸡排不就是这样的吗。\n\n```java\n/**\n * 创建一个Pizza的制作机器。\n */\npublic abstract class Pizza {\n    public String name;\n    public Dough dough;\n    public Cheese cheese;\n    public Sauce sauce;\n    public Clam clam;\n\n    //搜集原料\n    abstract void prepare();\n\n    public void bake() {\n        System.err.println(\"Back 25 minutes 350\");\n    }\n\n    public void cut() {\n        System.err.println(\"Cutting the pizza into diagonal slices\");\n    }\n\n    public void box() {\n        System.err.println(\"Place pizza in official PizzaStore box\");\n    }\n}\n```\n\n接下来我们就开始大多阔斧的改革了，先在 NY 试行,NY 是什么地方？谁知道呢。\n\n先找到 NY 的一家工厂让他们帮我们生产材料 :\n\n```java\npublic class NYPizzaIngredientFactory implements PizzaIngredientFactory {\n    @Override\n    public Cheese createCheese() {\n        return new Cheese();\n    }\n\n    public Clam createClam() {\n        return new Clam();\n    }\n\n    @Override\n    public Dough createDough() {\n        return new Dough();\n    }\n\n    @Override\n    public Sauce createSauce() {\n        return new Sauce();\n    }\n}\n\n```\n\n然后整一个店出来,只需要在任何地方使用 app 或网页应用中输入想要点的的 Pizza 的名称就可以制作并且送到了 :\n\n```java\npublic class NYPizzaStore extends PizzaStore {\n\n    @Override\n    public Pizza createPizza(String name) {\n        Pizza pizza = null;\n        NYPizzaIngredientFactory factory = new NYPizzaIngredientFactory();\n        if (name.equals(\"cheese\")) {\n            pizza = new CheesePizza(factory);\n        } else if (name.equals(\"clam\")) {\n            pizza = new ClamPizza(factory);\n        }\n        return pizza;\n    }\n}\n```\n\n机器不是`Pizza`吗？那些不同种类的 Pizza 哪里的呢，嗯哼你问的很有道理，我正准备讲的(才没忘！)。Pizza 可以制作各种披萨，为了方便店家创新我们设计为只要按照规范就可以制作自己的招牌 Pizza。\n\n以 ClamPizza 来举例:\n\n```java\npublic class ClamPizza extends Pizza {\n    private PizzaIngredientFactory pizzaIngredientFactory;\n\n    public ClamPizza(PizzaIngredientFactory pizzaIngredientFactory) {\n        this.pizzaIngredientFactory = pizzaIngredientFactory;\n    }\n\n    @Override\n    void prepare() {\n      //我们可以在这里组合各种原材料 现在用到了特别海鲜Clam\n        dough = pizzaIngredientFactory.createDough();\n        sauce = pizzaIngredientFactory.createSauce();\n        clam = pizzaIngredientFactory.createClam();\n    }\n}\n```\n\n这样一个商业帝国就搭建成了哈哈。这就是抽象工厂，先来看看抽象工厂的结构图 :\n\n![抽象工厂](http://img.imooc.com/57a39dc60001bf0b06180511.png)\n\n臭线工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要关心实际产出的具体产品是是什么。这样一来，客户就从具体的产品中被解耦出来，最后在让我们从我们 🍕Pizza 商业帝国的结构图来看看 :\n\n![Pizza抽象工厂](http://img.imooc.com/57a39e38000114b806070600.png)\n\n## 要点\n\n- 所有的工厂都是用来封装对象的创建\n- 简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体解耦。\n- 工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。\n- 抽象工厂使用对象组合:对象的创建被实现在工厂接口所暴露的方法中。\n- 所有工厂模式都通过减少应用程序和具体类之间的依赖促进耦合。\n- 工厂方法允许类将实例化延迟到子类进行。\n- 抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。\n- 依赖导致原则，指导我们避免依赖具体类型，而要尽量依赖抽象。\n- 工厂是很有具威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。\n","source":"_posts/2017-02-20-factory.markdown","raw":"---\nlayout: post\ntitle: 工厂模式(factory Pettern)\nsubtitle: '\"Head First 学习笔记(四)\"'\ndate: 2017-02-20 11:31:10\nauthor: \"just\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - 基础\n---\n\n## 前言\n\n一看日期吓一跳，已经一周多没有写笔记了。除了懒之外还是懒....其实之前认真思考过，是否应该花大量的时间去排版笔记去写 bolg，想想还是应该写下去，除了给予自己反馈增加自己的动力确实能让自己学习到的东西再梳理一遍增加知识在脑袋里的存储时间。\n\n## 正文\n\n工厂模式无论是在平时开发还是各种源码中都经常出现的，它细分为三种 :\n\n- **简单工厂**\n- **工厂方法**\n- **抽象工厂**\n\n虽然分类较多，不过具体的作用都是将对象创建的过程封装起来，以便将代码从具体类解耦。重点介绍较为复杂的抽象工厂，简单工厂和工厂发方法我们应该在平时都经常用到，很容易理解。\n\n### 简单工厂\n\n那么我们先来实现一个小目标吧，比如说，开一个 🍕 披萨店！\n\n披萨的制作流程呢，先要准备材料然后烤制、分割、装盘一个披萨就制作完成了！（😄 就是这么简单）\n\n我们有很多口味的披萨，但所有的披萨都要经过这个流程，唯一的差别就是面饼不同，为了节省店面的成本和方便以后开连锁店我们需要将面饼的制作过程给独立出来，交给代工厂来制作，这样我们的披萨店 🍕 可以省下很多的精力。\n\n这就是简单工厂，简单工厂其实并不是一种设计模式，反而像是一种编程习惯。它将一个项目中需要变化的部分以接口的形式抽象出来，通过创建不同 Factory 实例来完成抽象的功能的具体实现从而达到解耦。\n\n![简单工厂](http://img.imooc.com/57a36e6c00015d0d08390528.png)\n\n### 工厂方法\n\n> 工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类\n\n但是将面饼的制作交给外面的工厂成本太高，且改良工艺沟通起来非常困难，而且连锁店开起来后我们发现那些小店并不愿意承担让别人制作的成本 😠，于是我们改进了经营制度。由我们提供披萨的制作方法，而连锁店他们自己来制作 🍕Pizza 这样仍可以保证双方的利益关系。\n\n![工厂方法](http://img.imooc.com/57a3797d000136af08560459.png)\n\n工厂方法猛一看与静态工厂类似，都是将具体方法抽象出去，只不过一个是继承，另一个是接口罢了。但其实它们的用法还是挺不同的，工厂方法的子类看起来很像是简单工厂。简单工厂把全部的事情在一个地方都处理完了，然而工厂方法却是创建一个框架，让子类决定要如何实现。这种做法更具备弹性，可以修改正在创建的类，同时也仍具有对扩展的方便性，如果有很多相同的实现也可以提供一个默认的实现类来解决代码重复的问题。\n\n### 抽象工厂\n\n接下来的就是今天的正餐了，如果你对前面没有看到代码而不爽那么你可以在抽象工厂的代码中看到它们的影子哦。\n\n前不久我们的 🍕 披萨店已经发展成为和黄焖鸡米饭、沙县小吃以及兰州拉面一个级别的商业帝国了。越来越多连锁店的各种不同的问题冲击着我们的总部，如果要处理这些问题我们总部将变得臃肿不堪。于是我们又准备改革创兴了！\n\n我们先需要一个给我们提供原材料的工厂，全国那么多地方我们不可能都用一个工厂提供，所以我们提供一个规范，如果想要跟我们合作就必须符合这个规范 :\n\n```java\n/**\n * Pizza工厂的接口\n * 在接口中每一种原料都有一个对应的方法创建该原料\n */\npublic interface PizzaIngredientFactory {\n\n    public Cheese createCheese();\n\n    public Dough createDough();\n\n    public Sauce createSauce();\n\n    public Clam createClam();\n}\n\n```\n\n然后我们同样要给 Pizza 连锁店提供规范免得他们瞎搞坏了我们的招牌，毕竟一个差评递上是个好评不是吗!当然也不能太严厉什么都管，那样就会太糟糕了。\n\n```java\n/**\n*创建一个Pizza商店规范\n*/\npublic abstract class PizzaStore {\n    public abstract Pizza createPizza(String name);\n}\n\n```\n\n什么？在规范上太宽松？Native! 这只是 🍕 店的流程规范，而 Pizza 的制作规范还没有开始呢，我们制作了一个一个制作 Pizza 的机器，嘿嘿。店家只需要将机器搬到店里然后把制作好的 Pizza 面饼放置到机器里制作就可以了，像那啥，正新鸡排不就是这样的吗。\n\n```java\n/**\n * 创建一个Pizza的制作机器。\n */\npublic abstract class Pizza {\n    public String name;\n    public Dough dough;\n    public Cheese cheese;\n    public Sauce sauce;\n    public Clam clam;\n\n    //搜集原料\n    abstract void prepare();\n\n    public void bake() {\n        System.err.println(\"Back 25 minutes 350\");\n    }\n\n    public void cut() {\n        System.err.println(\"Cutting the pizza into diagonal slices\");\n    }\n\n    public void box() {\n        System.err.println(\"Place pizza in official PizzaStore box\");\n    }\n}\n```\n\n接下来我们就开始大多阔斧的改革了，先在 NY 试行,NY 是什么地方？谁知道呢。\n\n先找到 NY 的一家工厂让他们帮我们生产材料 :\n\n```java\npublic class NYPizzaIngredientFactory implements PizzaIngredientFactory {\n    @Override\n    public Cheese createCheese() {\n        return new Cheese();\n    }\n\n    public Clam createClam() {\n        return new Clam();\n    }\n\n    @Override\n    public Dough createDough() {\n        return new Dough();\n    }\n\n    @Override\n    public Sauce createSauce() {\n        return new Sauce();\n    }\n}\n\n```\n\n然后整一个店出来,只需要在任何地方使用 app 或网页应用中输入想要点的的 Pizza 的名称就可以制作并且送到了 :\n\n```java\npublic class NYPizzaStore extends PizzaStore {\n\n    @Override\n    public Pizza createPizza(String name) {\n        Pizza pizza = null;\n        NYPizzaIngredientFactory factory = new NYPizzaIngredientFactory();\n        if (name.equals(\"cheese\")) {\n            pizza = new CheesePizza(factory);\n        } else if (name.equals(\"clam\")) {\n            pizza = new ClamPizza(factory);\n        }\n        return pizza;\n    }\n}\n```\n\n机器不是`Pizza`吗？那些不同种类的 Pizza 哪里的呢，嗯哼你问的很有道理，我正准备讲的(才没忘！)。Pizza 可以制作各种披萨，为了方便店家创新我们设计为只要按照规范就可以制作自己的招牌 Pizza。\n\n以 ClamPizza 来举例:\n\n```java\npublic class ClamPizza extends Pizza {\n    private PizzaIngredientFactory pizzaIngredientFactory;\n\n    public ClamPizza(PizzaIngredientFactory pizzaIngredientFactory) {\n        this.pizzaIngredientFactory = pizzaIngredientFactory;\n    }\n\n    @Override\n    void prepare() {\n      //我们可以在这里组合各种原材料 现在用到了特别海鲜Clam\n        dough = pizzaIngredientFactory.createDough();\n        sauce = pizzaIngredientFactory.createSauce();\n        clam = pizzaIngredientFactory.createClam();\n    }\n}\n```\n\n这样一个商业帝国就搭建成了哈哈。这就是抽象工厂，先来看看抽象工厂的结构图 :\n\n![抽象工厂](http://img.imooc.com/57a39dc60001bf0b06180511.png)\n\n臭线工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要关心实际产出的具体产品是是什么。这样一来，客户就从具体的产品中被解耦出来，最后在让我们从我们 🍕Pizza 商业帝国的结构图来看看 :\n\n![Pizza抽象工厂](http://img.imooc.com/57a39e38000114b806070600.png)\n\n## 要点\n\n- 所有的工厂都是用来封装对象的创建\n- 简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体解耦。\n- 工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。\n- 抽象工厂使用对象组合:对象的创建被实现在工厂接口所暴露的方法中。\n- 所有工厂模式都通过减少应用程序和具体类之间的依赖促进耦合。\n- 工厂方法允许类将实例化延迟到子类进行。\n- 抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。\n- 依赖导致原则，指导我们避免依赖具体类型，而要尽量依赖抽象。\n- 工厂是很有具威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。\n","slug":"2017-02-20-factory","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p1000bs2y4hxvld4ct","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一看日期吓一跳，已经一周多没有写笔记了。除了懒之外还是懒….其实之前认真思考过，是否应该花大量的时间去排版笔记去写 bolg，想想还是应该写下去，除了给予自己反馈增加自己的动力确实能让自己学习到的东西再梳理一遍增加知识在脑袋里的存储时间。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>工厂模式无论是在平时开发还是各种源码中都经常出现的，它细分为三种 :</p>\n<ul>\n<li><strong>简单工厂</strong></li>\n<li><strong>工厂方法</strong></li>\n<li><strong>抽象工厂</strong></li>\n</ul>\n<p>虽然分类较多，不过具体的作用都是将对象创建的过程封装起来，以便将代码从具体类解耦。重点介绍较为复杂的抽象工厂，简单工厂和工厂发方法我们应该在平时都经常用到，很容易理解。</p>\n<h3 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h3><p>那么我们先来实现一个小目标吧，比如说，开一个 🍕 披萨店！</p>\n<p>披萨的制作流程呢，先要准备材料然后烤制、分割、装盘一个披萨就制作完成了！（😄 就是这么简单）</p>\n<p>我们有很多口味的披萨，但所有的披萨都要经过这个流程，唯一的差别就是面饼不同，为了节省店面的成本和方便以后开连锁店我们需要将面饼的制作过程给独立出来，交给代工厂来制作，这样我们的披萨店 🍕 可以省下很多的精力。</p>\n<p>这就是简单工厂，简单工厂其实并不是一种设计模式，反而像是一种编程习惯。它将一个项目中需要变化的部分以接口的形式抽象出来，通过创建不同 Factory 实例来完成抽象的功能的具体实现从而达到解耦。</p>\n<p><img src=\"http://img.imooc.com/57a36e6c00015d0d08390528.png\" alt=\"简单工厂\"></p>\n<h3 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h3><blockquote>\n<p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类</p>\n</blockquote>\n<p>但是将面饼的制作交给外面的工厂成本太高，且改良工艺沟通起来非常困难，而且连锁店开起来后我们发现那些小店并不愿意承担让别人制作的成本 😠，于是我们改进了经营制度。由我们提供披萨的制作方法，而连锁店他们自己来制作 🍕Pizza 这样仍可以保证双方的利益关系。</p>\n<p><img src=\"http://img.imooc.com/57a3797d000136af08560459.png\" alt=\"工厂方法\"></p>\n<p>工厂方法猛一看与静态工厂类似，都是将具体方法抽象出去，只不过一个是继承，另一个是接口罢了。但其实它们的用法还是挺不同的，工厂方法的子类看起来很像是简单工厂。简单工厂把全部的事情在一个地方都处理完了，然而工厂方法却是创建一个框架，让子类决定要如何实现。这种做法更具备弹性，可以修改正在创建的类，同时也仍具有对扩展的方便性，如果有很多相同的实现也可以提供一个默认的实现类来解决代码重复的问题。</p>\n<h3 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h3><p>接下来的就是今天的正餐了，如果你对前面没有看到代码而不爽那么你可以在抽象工厂的代码中看到它们的影子哦。</p>\n<p>前不久我们的 🍕 披萨店已经发展成为和黄焖鸡米饭、沙县小吃以及兰州拉面一个级别的商业帝国了。越来越多连锁店的各种不同的问题冲击着我们的总部，如果要处理这些问题我们总部将变得臃肿不堪。于是我们又准备改革创兴了！</p>\n<p>我们先需要一个给我们提供原材料的工厂，全国那么多地方我们不可能都用一个工厂提供，所以我们提供一个规范，如果想要跟我们合作就必须符合这个规范 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Pizza工厂的接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 在接口中每一种原料都有一个对应的方法创建该原料</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PizzaIngredientFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese <span class=\"title function_\">createCheese</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough <span class=\"title function_\">createDough</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce <span class=\"title function_\">createSauce</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam <span class=\"title function_\">createClam</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后我们同样要给 Pizza 连锁店提供规范免得他们瞎搞坏了我们的招牌，毕竟一个差评递上是个好评不是吗!当然也不能太严厉什么都管，那样就会太糟糕了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*创建一个Pizza商店规范</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PizzaStore</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title function_\">createPizza</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>什么？在规范上太宽松？Native! 这只是 🍕 店的流程规范，而 Pizza 的制作规范还没有开始呢，我们制作了一个一个制作 Pizza 的机器，嘿嘿。店家只需要将机器搬到店里然后把制作好的 Pizza 面饼放置到机器里制作就可以了，像那啥，正新鸡排不就是这样的吗。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个Pizza的制作机器。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough dough;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese cheese;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce sauce;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam clam;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//搜集原料</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bake</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Back 25 minutes 350&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">box</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们就开始大多阔斧的改革了，先在 NY 试行,NY 是什么地方？谁知道呢。</p>\n<p>先找到 NY 的一家工厂让他们帮我们生产材料 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NYPizzaIngredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PizzaIngredientFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese <span class=\"title function_\">createCheese</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cheese</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam <span class=\"title function_\">createClam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Clam</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough <span class=\"title function_\">createDough</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dough</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce <span class=\"title function_\">createSauce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sauce</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后整一个店出来,只需要在任何地方使用 app 或网页应用中输入想要点的的 Pizza 的名称就可以制作并且送到了 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PizzaStore</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pizza <span class=\"title function_\">createPizza</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Pizza</span> <span class=\"variable\">pizza</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">NYPizzaIngredientFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NYPizzaIngredientFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;cheese&quot;</span>)) &#123;</span><br><span class=\"line\">            pizza = <span class=\"keyword\">new</span> <span class=\"title class_\">CheesePizza</span>(factory);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;clam&quot;</span>)) &#123;</span><br><span class=\"line\">            pizza = <span class=\"keyword\">new</span> <span class=\"title class_\">ClamPizza</span>(factory);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>机器不是<code>Pizza</code>吗？那些不同种类的 Pizza 哪里的呢，嗯哼你问的很有道理，我正准备讲的(才没忘！)。Pizza 可以制作各种披萨，为了方便店家创新我们设计为只要按照规范就可以制作自己的招牌 Pizza。</p>\n<p>以 ClamPizza 来举例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClamPizza</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ClamPizza</span><span class=\"params\">(PizzaIngredientFactory pizzaIngredientFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//我们可以在这里组合各种原材料 现在用到了特别海鲜Clam</span></span><br><span class=\"line\">        dough = pizzaIngredientFactory.createDough();</span><br><span class=\"line\">        sauce = pizzaIngredientFactory.createSauce();</span><br><span class=\"line\">        clam = pizzaIngredientFactory.createClam();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个商业帝国就搭建成了哈哈。这就是抽象工厂，先来看看抽象工厂的结构图 :</p>\n<p><img src=\"http://img.imooc.com/57a39dc60001bf0b06180511.png\" alt=\"抽象工厂\"></p>\n<p>臭线工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要关心实际产出的具体产品是是什么。这样一来，客户就从具体的产品中被解耦出来，最后在让我们从我们 🍕Pizza 商业帝国的结构图来看看 :</p>\n<p><img src=\"http://img.imooc.com/57a39e38000114b806070600.png\" alt=\"Pizza抽象工厂\"></p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>所有的工厂都是用来封装对象的创建</li>\n<li>简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体解耦。</li>\n<li>工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。</li>\n<li>抽象工厂使用对象组合:对象的创建被实现在工厂接口所暴露的方法中。</li>\n<li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进耦合。</li>\n<li>工厂方法允许类将实例化延迟到子类进行。</li>\n<li>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。</li>\n<li>依赖导致原则，指导我们避免依赖具体类型，而要尽量依赖抽象。</li>\n<li>工厂是很有具威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一看日期吓一跳，已经一周多没有写笔记了。除了懒之外还是懒….其实之前认真思考过，是否应该花大量的时间去排版笔记去写 bolg，想想还是应该写下去，除了给予自己反馈增加自己的动力确实能让自己学习到的东西再梳理一遍增加知识在脑袋里的存储时间。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>工厂模式无论是在平时开发还是各种源码中都经常出现的，它细分为三种 :</p>\n<ul>\n<li><strong>简单工厂</strong></li>\n<li><strong>工厂方法</strong></li>\n<li><strong>抽象工厂</strong></li>\n</ul>\n<p>虽然分类较多，不过具体的作用都是将对象创建的过程封装起来，以便将代码从具体类解耦。重点介绍较为复杂的抽象工厂，简单工厂和工厂发方法我们应该在平时都经常用到，很容易理解。</p>\n<h3 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h3><p>那么我们先来实现一个小目标吧，比如说，开一个 🍕 披萨店！</p>\n<p>披萨的制作流程呢，先要准备材料然后烤制、分割、装盘一个披萨就制作完成了！（😄 就是这么简单）</p>\n<p>我们有很多口味的披萨，但所有的披萨都要经过这个流程，唯一的差别就是面饼不同，为了节省店面的成本和方便以后开连锁店我们需要将面饼的制作过程给独立出来，交给代工厂来制作，这样我们的披萨店 🍕 可以省下很多的精力。</p>\n<p>这就是简单工厂，简单工厂其实并不是一种设计模式，反而像是一种编程习惯。它将一个项目中需要变化的部分以接口的形式抽象出来，通过创建不同 Factory 实例来完成抽象的功能的具体实现从而达到解耦。</p>\n<p><img src=\"http://img.imooc.com/57a36e6c00015d0d08390528.png\" alt=\"简单工厂\"></p>\n<h3 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h3><blockquote>\n<p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类</p>\n</blockquote>\n<p>但是将面饼的制作交给外面的工厂成本太高，且改良工艺沟通起来非常困难，而且连锁店开起来后我们发现那些小店并不愿意承担让别人制作的成本 😠，于是我们改进了经营制度。由我们提供披萨的制作方法，而连锁店他们自己来制作 🍕Pizza 这样仍可以保证双方的利益关系。</p>\n<p><img src=\"http://img.imooc.com/57a3797d000136af08560459.png\" alt=\"工厂方法\"></p>\n<p>工厂方法猛一看与静态工厂类似，都是将具体方法抽象出去，只不过一个是继承，另一个是接口罢了。但其实它们的用法还是挺不同的，工厂方法的子类看起来很像是简单工厂。简单工厂把全部的事情在一个地方都处理完了，然而工厂方法却是创建一个框架，让子类决定要如何实现。这种做法更具备弹性，可以修改正在创建的类，同时也仍具有对扩展的方便性，如果有很多相同的实现也可以提供一个默认的实现类来解决代码重复的问题。</p>\n<h3 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h3><p>接下来的就是今天的正餐了，如果你对前面没有看到代码而不爽那么你可以在抽象工厂的代码中看到它们的影子哦。</p>\n<p>前不久我们的 🍕 披萨店已经发展成为和黄焖鸡米饭、沙县小吃以及兰州拉面一个级别的商业帝国了。越来越多连锁店的各种不同的问题冲击着我们的总部，如果要处理这些问题我们总部将变得臃肿不堪。于是我们又准备改革创兴了！</p>\n<p>我们先需要一个给我们提供原材料的工厂，全国那么多地方我们不可能都用一个工厂提供，所以我们提供一个规范，如果想要跟我们合作就必须符合这个规范 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Pizza工厂的接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 在接口中每一种原料都有一个对应的方法创建该原料</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PizzaIngredientFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese <span class=\"title function_\">createCheese</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough <span class=\"title function_\">createDough</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce <span class=\"title function_\">createSauce</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam <span class=\"title function_\">createClam</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后我们同样要给 Pizza 连锁店提供规范免得他们瞎搞坏了我们的招牌，毕竟一个差评递上是个好评不是吗!当然也不能太严厉什么都管，那样就会太糟糕了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*创建一个Pizza商店规范</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PizzaStore</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title function_\">createPizza</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>什么？在规范上太宽松？Native! 这只是 🍕 店的流程规范，而 Pizza 的制作规范还没有开始呢，我们制作了一个一个制作 Pizza 的机器，嘿嘿。店家只需要将机器搬到店里然后把制作好的 Pizza 面饼放置到机器里制作就可以了，像那啥，正新鸡排不就是这样的吗。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个Pizza的制作机器。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough dough;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese cheese;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce sauce;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam clam;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//搜集原料</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bake</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Back 25 minutes 350&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Cutting the pizza into diagonal slices&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">box</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们就开始大多阔斧的改革了，先在 NY 试行,NY 是什么地方？谁知道呢。</p>\n<p>先找到 NY 的一家工厂让他们帮我们生产材料 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NYPizzaIngredientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PizzaIngredientFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cheese <span class=\"title function_\">createCheese</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cheese</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Clam <span class=\"title function_\">createClam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Clam</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dough <span class=\"title function_\">createDough</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dough</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sauce <span class=\"title function_\">createSauce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sauce</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后整一个店出来,只需要在任何地方使用 app 或网页应用中输入想要点的的 Pizza 的名称就可以制作并且送到了 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NYPizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PizzaStore</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pizza <span class=\"title function_\">createPizza</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Pizza</span> <span class=\"variable\">pizza</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">NYPizzaIngredientFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NYPizzaIngredientFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;cheese&quot;</span>)) &#123;</span><br><span class=\"line\">            pizza = <span class=\"keyword\">new</span> <span class=\"title class_\">CheesePizza</span>(factory);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;clam&quot;</span>)) &#123;</span><br><span class=\"line\">            pizza = <span class=\"keyword\">new</span> <span class=\"title class_\">ClamPizza</span>(factory);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>机器不是<code>Pizza</code>吗？那些不同种类的 Pizza 哪里的呢，嗯哼你问的很有道理，我正准备讲的(才没忘！)。Pizza 可以制作各种披萨，为了方便店家创新我们设计为只要按照规范就可以制作自己的招牌 Pizza。</p>\n<p>以 ClamPizza 来举例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClamPizza</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ClamPizza</span><span class=\"params\">(PizzaIngredientFactory pizzaIngredientFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">prepare</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//我们可以在这里组合各种原材料 现在用到了特别海鲜Clam</span></span><br><span class=\"line\">        dough = pizzaIngredientFactory.createDough();</span><br><span class=\"line\">        sauce = pizzaIngredientFactory.createSauce();</span><br><span class=\"line\">        clam = pizzaIngredientFactory.createClam();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个商业帝国就搭建成了哈哈。这就是抽象工厂，先来看看抽象工厂的结构图 :</p>\n<p><img src=\"http://img.imooc.com/57a39dc60001bf0b06180511.png\" alt=\"抽象工厂\"></p>\n<p>臭线工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要关心实际产出的具体产品是是什么。这样一来，客户就从具体的产品中被解耦出来，最后在让我们从我们 🍕Pizza 商业帝国的结构图来看看 :</p>\n<p><img src=\"http://img.imooc.com/57a39e38000114b806070600.png\" alt=\"Pizza抽象工厂\"></p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>所有的工厂都是用来封装对象的创建</li>\n<li>简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体解耦。</li>\n<li>工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。</li>\n<li>抽象工厂使用对象组合:对象的创建被实现在工厂接口所暴露的方法中。</li>\n<li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进耦合。</li>\n<li>工厂方法允许类将实例化延迟到子类进行。</li>\n<li>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。</li>\n<li>依赖导致原则，指导我们避免依赖具体类型，而要尽量依赖抽象。</li>\n<li>工厂是很有具威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。</li>\n</ul>\n"},{"layout":"post","title":"适配器模式与外观模式","subtitle":"\"Head First学习笔记(五)\"","date":"2017-03-08T08:21:30.000Z","author":"just","header_image":"img/java.jpg","catalog":true,"_content":"\n> 如果你浪费了自己的年龄，那是挺可悲的。因为你的青春只能持续一点儿时间——很短的一点儿时间。 —— 王尔德\n\n# 前言\n\n今天学习的设计模式为适配器模式和外观模式，至于为什么两个一起学，因为书上是这样的。至于为什么书上是这样的，就一起来回顾吧。\n\n# 正文\n\n## 适配器模式（adapter）\n\n**适配器模式(Adapter)**在 Android 中真是不能再常见了，因为我们所用到的很多控件都需要编写适配器给控件提供数据源，例如: `ListView`、`RecyclerView`、`spinner`等待呢个，至于为什么这些控件要使用适配器模式却一直不求甚解，今天就来好好思考一下。\n\n还记得第一节课的`Duck`吗，我们可以通过适配器模式将它变成`Turkey`！\n\n`Duck`\n\n```java\npublic interface Duck {\n    void fly();\n\n    void quack();\n}\n```\n\n`Turkey`\n\n```java\npublic interface Turkey {\n    void fly();\n\n    void crow();\n}\n```\n\n可以看到它们都有相似的功能，但是用起来却并不一致，我们使用适配器来修改。\n\n```java\npublic class TurkeyAdapter implements Turkey {\n    Duck duck;\n\n    public TurkeyAdapter(Duck duck) {\n        this.duck = duck;\n    }\n\n    @Override\n    public void fly() {\n        duck.fly();\n    }\n\n    @Override\n    public void crow() {\n        duck.quack();\n    }\n}\n```\n\n这样一个非常简单的适配器就完成了，我们可以`TurkeyAdapter`的`crow`以此来调用`duck`的`quack`方法来达到叫喊的功能且不需要修改它们。当然，实际代码中可能更为复杂，\n\n适配器也很贴近生活，我们在生活中经常用到适配器，电源适配器使我们不同电压的电器都能在统一电压的插口中使用。而编程中适配器的作用也是如此。它可以让不同的数据转换后适应现有的系统。而 Android 中也是这样，通过适配器这些控件只需要关心自己逻辑上的各种处理，将具体的显示视图和数据交给适配器来进行转换成控件可使用的。\n\n上面介绍的这一种是“”对象“”适配器，除此之外还有一种“类”适配器，不过需要多重继承才能实现它，这在 java 中是不可能的。它让适配器类同时继承了`duck`和`Turkey`以此来实现适配器的功能。“对象”适配器比“类”适配器更加有弹性，只不过没有\"类\"适配器的轻便。\n\n那么**之前学习到的装饰者模式和适配器模式它们有什么区别？**，装饰主要的工作是扩展被包装的对象的行为或者责任。而适配器模式更主要的是将转换对象的行为为现在可用的。\n\n> **适配器模式**将一个类的接口，转换成客户棋王的另一个接口。适配器让原本接口不兼容的类可以合作无间。\n\n## 外观模式\n\n> **外观模式**提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用\n\n外观模式的功能也是转换，不过它并不是为了修改而是为了简化，使功能更加“聪明”。例如我们在使用`HttpUrlConnection`的时候要按步骤来执行非常多的方法，而为此是封装它就是为了简化那些固定流程，留给使用者更加简单易懂方便的操作。请求数据 👉 接受数据即可。\n\nTODO\n\n## 要点\n\n- 设计原则 : 减少对象之间的交互，只留下最基础的。\n- 当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。\n- 当需要简化并统一一个很大的接口或者一群复杂的接口时候，使用外观。\n- 适配器改变接口以符合客户的期望\n- 外观将客户从一个复杂的子系统中解耦。\n- 实现一个适配可能需要一番功夫，也可能不费工夫，视目标接口的大小与复杂度而定。\n- 实现一个外观，需要将子系统组合进外观中，然后将工作委托给子系统执行。\n- 适配器模式有两种形式:对象适配器和类适配器。类适配器需要用到多重继承。\n- 你可以为一个子系统实现一个以上的外观。\n- 适配将一个对象包装起来以改变接口；装饰者将一个对象包装起来以增加新的行为和责任；而外观将一群对象“包装”起来以简化接口。\n","source":"_posts/2017-03-08-adapter.markdown","raw":"---\nlayout: post\ntitle: 适配器模式与外观模式\nsubtitle: '\"Head First学习笔记(五)\"'\ndate: 2017-03-08 16:21:30\nauthor: \"just\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - 基础\n---\n\n> 如果你浪费了自己的年龄，那是挺可悲的。因为你的青春只能持续一点儿时间——很短的一点儿时间。 —— 王尔德\n\n# 前言\n\n今天学习的设计模式为适配器模式和外观模式，至于为什么两个一起学，因为书上是这样的。至于为什么书上是这样的，就一起来回顾吧。\n\n# 正文\n\n## 适配器模式（adapter）\n\n**适配器模式(Adapter)**在 Android 中真是不能再常见了，因为我们所用到的很多控件都需要编写适配器给控件提供数据源，例如: `ListView`、`RecyclerView`、`spinner`等待呢个，至于为什么这些控件要使用适配器模式却一直不求甚解，今天就来好好思考一下。\n\n还记得第一节课的`Duck`吗，我们可以通过适配器模式将它变成`Turkey`！\n\n`Duck`\n\n```java\npublic interface Duck {\n    void fly();\n\n    void quack();\n}\n```\n\n`Turkey`\n\n```java\npublic interface Turkey {\n    void fly();\n\n    void crow();\n}\n```\n\n可以看到它们都有相似的功能，但是用起来却并不一致，我们使用适配器来修改。\n\n```java\npublic class TurkeyAdapter implements Turkey {\n    Duck duck;\n\n    public TurkeyAdapter(Duck duck) {\n        this.duck = duck;\n    }\n\n    @Override\n    public void fly() {\n        duck.fly();\n    }\n\n    @Override\n    public void crow() {\n        duck.quack();\n    }\n}\n```\n\n这样一个非常简单的适配器就完成了，我们可以`TurkeyAdapter`的`crow`以此来调用`duck`的`quack`方法来达到叫喊的功能且不需要修改它们。当然，实际代码中可能更为复杂，\n\n适配器也很贴近生活，我们在生活中经常用到适配器，电源适配器使我们不同电压的电器都能在统一电压的插口中使用。而编程中适配器的作用也是如此。它可以让不同的数据转换后适应现有的系统。而 Android 中也是这样，通过适配器这些控件只需要关心自己逻辑上的各种处理，将具体的显示视图和数据交给适配器来进行转换成控件可使用的。\n\n上面介绍的这一种是“”对象“”适配器，除此之外还有一种“类”适配器，不过需要多重继承才能实现它，这在 java 中是不可能的。它让适配器类同时继承了`duck`和`Turkey`以此来实现适配器的功能。“对象”适配器比“类”适配器更加有弹性，只不过没有\"类\"适配器的轻便。\n\n那么**之前学习到的装饰者模式和适配器模式它们有什么区别？**，装饰主要的工作是扩展被包装的对象的行为或者责任。而适配器模式更主要的是将转换对象的行为为现在可用的。\n\n> **适配器模式**将一个类的接口，转换成客户棋王的另一个接口。适配器让原本接口不兼容的类可以合作无间。\n\n## 外观模式\n\n> **外观模式**提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用\n\n外观模式的功能也是转换，不过它并不是为了修改而是为了简化，使功能更加“聪明”。例如我们在使用`HttpUrlConnection`的时候要按步骤来执行非常多的方法，而为此是封装它就是为了简化那些固定流程，留给使用者更加简单易懂方便的操作。请求数据 👉 接受数据即可。\n\nTODO\n\n## 要点\n\n- 设计原则 : 减少对象之间的交互，只留下最基础的。\n- 当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。\n- 当需要简化并统一一个很大的接口或者一群复杂的接口时候，使用外观。\n- 适配器改变接口以符合客户的期望\n- 外观将客户从一个复杂的子系统中解耦。\n- 实现一个适配可能需要一番功夫，也可能不费工夫，视目标接口的大小与复杂度而定。\n- 实现一个外观，需要将子系统组合进外观中，然后将工作委托给子系统执行。\n- 适配器模式有两种形式:对象适配器和类适配器。类适配器需要用到多重继承。\n- 你可以为一个子系统实现一个以上的外观。\n- 适配将一个对象包装起来以改变接口；装饰者将一个对象包装起来以增加新的行为和责任；而外观将一群对象“包装”起来以简化接口。\n","slug":"2017-03-08-adapter","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p1000cs2y461hzfxut","content":"<blockquote>\n<p>如果你浪费了自己的年龄，那是挺可悲的。因为你的青春只能持续一点儿时间——很短的一点儿时间。 —— 王尔德</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天学习的设计模式为适配器模式和外观模式，至于为什么两个一起学，因为书上是这样的。至于为什么书上是这样的，就一起来回顾吧。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"适配器模式（adapter）\"><a href=\"#适配器模式（adapter）\" class=\"headerlink\" title=\"适配器模式（adapter）\"></a>适配器模式（adapter）</h2><p>**适配器模式(Adapter)**在 Android 中真是不能再常见了，因为我们所用到的很多控件都需要编写适配器给控件提供数据源，例如: <code>ListView</code>、<code>RecyclerView</code>、<code>spinner</code>等待呢个，至于为什么这些控件要使用适配器模式却一直不求甚解，今天就来好好思考一下。</p>\n<p>还记得第一节课的<code>Duck</code>吗，我们可以通过适配器模式将它变成<code>Turkey</code>！</p>\n<p><code>Duck</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">quack</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Turkey</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Turkey</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">crow</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到它们都有相似的功能，但是用起来却并不一致，我们使用适配器来修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TurkeyAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Turkey</span> &#123;</span><br><span class=\"line\">    Duck duck;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TurkeyAdapter</span><span class=\"params\">(Duck duck)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.duck = duck;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        duck.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">crow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        duck.quack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个非常简单的适配器就完成了，我们可以<code>TurkeyAdapter</code>的<code>crow</code>以此来调用<code>duck</code>的<code>quack</code>方法来达到叫喊的功能且不需要修改它们。当然，实际代码中可能更为复杂，</p>\n<p>适配器也很贴近生活，我们在生活中经常用到适配器，电源适配器使我们不同电压的电器都能在统一电压的插口中使用。而编程中适配器的作用也是如此。它可以让不同的数据转换后适应现有的系统。而 Android 中也是这样，通过适配器这些控件只需要关心自己逻辑上的各种处理，将具体的显示视图和数据交给适配器来进行转换成控件可使用的。</p>\n<p>上面介绍的这一种是“”对象“”适配器，除此之外还有一种“类”适配器，不过需要多重继承才能实现它，这在 java 中是不可能的。它让适配器类同时继承了<code>duck</code>和<code>Turkey</code>以此来实现适配器的功能。“对象”适配器比“类”适配器更加有弹性，只不过没有”类”适配器的轻便。</p>\n<p>那么<strong>之前学习到的装饰者模式和适配器模式它们有什么区别？</strong>，装饰主要的工作是扩展被包装的对象的行为或者责任。而适配器模式更主要的是将转换对象的行为为现在可用的。</p>\n<blockquote>\n<p><strong>适配器模式</strong>将一个类的接口，转换成客户棋王的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p>\n</blockquote>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><blockquote>\n<p><strong>外观模式</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用</p>\n</blockquote>\n<p>外观模式的功能也是转换，不过它并不是为了修改而是为了简化，使功能更加“聪明”。例如我们在使用<code>HttpUrlConnection</code>的时候要按步骤来执行非常多的方法，而为此是封装它就是为了简化那些固定流程，留给使用者更加简单易懂方便的操作。请求数据 👉 接受数据即可。</p>\n<p>TODO</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>设计原则 : 减少对象之间的交互，只留下最基础的。</li>\n<li>当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。</li>\n<li>当需要简化并统一一个很大的接口或者一群复杂的接口时候，使用外观。</li>\n<li>适配器改变接口以符合客户的期望</li>\n<li>外观将客户从一个复杂的子系统中解耦。</li>\n<li>实现一个适配可能需要一番功夫，也可能不费工夫，视目标接口的大小与复杂度而定。</li>\n<li>实现一个外观，需要将子系统组合进外观中，然后将工作委托给子系统执行。</li>\n<li>适配器模式有两种形式:对象适配器和类适配器。类适配器需要用到多重继承。</li>\n<li>你可以为一个子系统实现一个以上的外观。</li>\n<li>适配将一个对象包装起来以改变接口；装饰者将一个对象包装起来以增加新的行为和责任；而外观将一群对象“包装”起来以简化接口。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>如果你浪费了自己的年龄，那是挺可悲的。因为你的青春只能持续一点儿时间——很短的一点儿时间。 —— 王尔德</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天学习的设计模式为适配器模式和外观模式，至于为什么两个一起学，因为书上是这样的。至于为什么书上是这样的，就一起来回顾吧。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"适配器模式（adapter）\"><a href=\"#适配器模式（adapter）\" class=\"headerlink\" title=\"适配器模式（adapter）\"></a>适配器模式（adapter）</h2><p>**适配器模式(Adapter)**在 Android 中真是不能再常见了，因为我们所用到的很多控件都需要编写适配器给控件提供数据源，例如: <code>ListView</code>、<code>RecyclerView</code>、<code>spinner</code>等待呢个，至于为什么这些控件要使用适配器模式却一直不求甚解，今天就来好好思考一下。</p>\n<p>还记得第一节课的<code>Duck</code>吗，我们可以通过适配器模式将它变成<code>Turkey</code>！</p>\n<p><code>Duck</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">quack</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Turkey</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Turkey</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">crow</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到它们都有相似的功能，但是用起来却并不一致，我们使用适配器来修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TurkeyAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Turkey</span> &#123;</span><br><span class=\"line\">    Duck duck;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TurkeyAdapter</span><span class=\"params\">(Duck duck)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.duck = duck;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        duck.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">crow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        duck.quack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个非常简单的适配器就完成了，我们可以<code>TurkeyAdapter</code>的<code>crow</code>以此来调用<code>duck</code>的<code>quack</code>方法来达到叫喊的功能且不需要修改它们。当然，实际代码中可能更为复杂，</p>\n<p>适配器也很贴近生活，我们在生活中经常用到适配器，电源适配器使我们不同电压的电器都能在统一电压的插口中使用。而编程中适配器的作用也是如此。它可以让不同的数据转换后适应现有的系统。而 Android 中也是这样，通过适配器这些控件只需要关心自己逻辑上的各种处理，将具体的显示视图和数据交给适配器来进行转换成控件可使用的。</p>\n<p>上面介绍的这一种是“”对象“”适配器，除此之外还有一种“类”适配器，不过需要多重继承才能实现它，这在 java 中是不可能的。它让适配器类同时继承了<code>duck</code>和<code>Turkey</code>以此来实现适配器的功能。“对象”适配器比“类”适配器更加有弹性，只不过没有”类”适配器的轻便。</p>\n<p>那么<strong>之前学习到的装饰者模式和适配器模式它们有什么区别？</strong>，装饰主要的工作是扩展被包装的对象的行为或者责任。而适配器模式更主要的是将转换对象的行为为现在可用的。</p>\n<blockquote>\n<p><strong>适配器模式</strong>将一个类的接口，转换成客户棋王的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p>\n</blockquote>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><blockquote>\n<p><strong>外观模式</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用</p>\n</blockquote>\n<p>外观模式的功能也是转换，不过它并不是为了修改而是为了简化，使功能更加“聪明”。例如我们在使用<code>HttpUrlConnection</code>的时候要按步骤来执行非常多的方法，而为此是封装它就是为了简化那些固定流程，留给使用者更加简单易懂方便的操作。请求数据 👉 接受数据即可。</p>\n<p>TODO</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>设计原则 : 减少对象之间的交互，只留下最基础的。</li>\n<li>当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。</li>\n<li>当需要简化并统一一个很大的接口或者一群复杂的接口时候，使用外观。</li>\n<li>适配器改变接口以符合客户的期望</li>\n<li>外观将客户从一个复杂的子系统中解耦。</li>\n<li>实现一个适配可能需要一番功夫，也可能不费工夫，视目标接口的大小与复杂度而定。</li>\n<li>实现一个外观，需要将子系统组合进外观中，然后将工作委托给子系统执行。</li>\n<li>适配器模式有两种形式:对象适配器和类适配器。类适配器需要用到多重继承。</li>\n<li>你可以为一个子系统实现一个以上的外观。</li>\n<li>适配将一个对象包装起来以改变接口；装饰者将一个对象包装起来以增加新的行为和责任；而外观将一群对象“包装”起来以简化接口。</li>\n</ul>\n"},{"layout":"post","title":"Data Binding学习笔记","subtitle":"从零开始的Booklet(一)","date":"2017-05-19T08:03:00.000Z","author":"just","header_image":"img/post-bg-alitrip.jpg","catalog":true,"_content":"\n## 前言\n\nDataBinding 出来很久了，不过现在连 MVP 都没有大规模被使用，别说写法用法更颠覆性的 DatatBinding 这样的了。但 DataBinding 这种面向 MVVM 的编程思想前端的使用已经非常普遍了，且确实给开发带来很大的便利。所以还是有必要学习和了解。\n\n## 什么是 DataBinding?\n\n简单的来说 DataBinding 是 Google 在 Android 上的一种 MVVM 的实现。MVVM 是`Model-View-ViewModel`的简写，它是 MVP(Model-View-Persenter) 模式与 WPF 结合的应用方式发展演变过来的一种新型架构。而 WPF 主要带来的特性就是**数据绑定**，这也是 Data Binding 所实现的功能。\n\n![](http://www.cyxqd.com/wp-content/uploads/2014/10/nmwentill.jpg)\n\n## 数据绑定\n\n数据绑定分为**单项绑定**和**双向绑定**;单向绑定就是将视图上的控件的属性绑定到一个对象的某个属性的方法，当对象的属性发生变化时直接影响到控件上；双向绑定的话就是可以互相影响——例如我们将`User`类的`name`属性绑定到`TextView`的`setText`属性上，这样当我们修改 name 的值时 setText 值也发生相应的改变，无需我们自己去 setText 更新属性。Data Binding 不仅可以帮我们在 Android 上实现这一机制，还为此附带了很多便利，减少了很多工具代码的编写。\n\n- **项目更加解耦，各个组件的依赖性进一步降低，增加可复用性**\n\n* **去掉 Activities&Fragment 内的大部分 UI 代码**，例如`onClickListener`、`setText`、`findViewById`等\n* **xml 的功能增强**。xml 不再只是声明 UI 的界面，还起到数据的绑定，赋值，逻辑判断等功能。\n* **性能提高，减少 view id 的定义**。由于数据绑定直接在 xml 产生，所以不用绞尽脑汁的其大量的名称且在绑定的时候就一次性的通过 gruop 将 view 全部获取，比单个`findViewById`更加的迅速。\n\n## 搭建环境\n\nData Binding 在 Android Studio 1.3 版本&Gradle1.5 后就内置在 IDE 中了，我们只需要在`gradle.project`中`Android`模块下声明开启 Data Binding 即可\n\n```groovy\nandroid{\n  ...\n    dataBinding{\n      enabled=true\n    }\n}\n```\n\n## 基础使用\n\n### 编写 View\n\n数据绑定需要在 xml 中声明各种关系，也可以写一些简单的运算。声明一个 data Binding Layout 只需要在原来的 layout xml 文件基础加一个标签即可:\n\n```xml\n<layout>\n//...rootView\n</layout>\n```\n\n这样在编译时，修改后即可搜索到布局生成的对应的\\*Binding 类。生成的规则默认是通过 xml 的文件名生成，例如`activity_main.xml`就会对应生成为`ActivityMainBinding.java`的文件。当然我们也可以指定自定生成的文件名称，需要在`layout`标签下加入`data`标签并指定`class`属性即可(生成 LoginBinding.java)，除此之外`data`也是我们声明变量的地方，稍后再详细介绍。\n\n```xml\n<data class=\"login\">\n....\n</data>\n```\n\n我们来编写一个简单的登录界面:\n\n先使用`variable`绑定我们所需要的对象。`type`为该对象的地址,`name`则随意命名。这里我们声明了一个`Action`和`Presenter`,`Action`用于绑定数据，`Presenter`则用来绑定一些事件和做逻辑处理。\n\n```xml\n<layout>\n<data>\n        <variable\n            name=\"presenter\"\n            type=\"com.example.qhfax.databindingexample.presenter.MainPresenter\" />\n\n        <variable\n            name=\"action\"\n            type=\"com.example.qhfax.databindingexample.bean.Action\" />\n    </data>\n\n  //...rootView\n  </layout>\n```\n\n声明好对象后，我们就开始将对象绑定到数据源上。在 Data Binding 中，我们绑定数据需要使用`@{code}`书写，向插件声明这是一个表达式。这里我们将`name`属性绑定到`TextView`的`setText`上。\n\n```xml\n<TextView\n            android:layout_width=\"63dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginRight=\"8dp\"\n            android:layout_marginTop=\"60dp\"\n            android:gravity=\"center\"\n            android:text=\"@{action.name}\" />\n```\n\n之后在 Activity 中我们需要使用`DataBindingUtil`获取`ActivityMainDataBinding`的实例\n\n```java\nActivityMainDataBinding mMainBind=DataBindingUtil.setContentView(this,R.layout.activity_main);\n```\n\n然后去绑定对象\n\n```java\nAction action = new Action();\naction.setName(\"用户名：\");\nmMainBind.setAction(action)\nmMainBind.setPersenter(persenter);\n```\n\n运行后就可以发现`TextView`就直接被赋值啦。\n\n### 绑定的原理\n\n嗯....我们可以先观察一下目前的流程是怎么走下来的；\n\n1. 在`xml`文件中绑定控件，然后插件会根据`layout`生成对应的实体类。通过 DataBindingUtli 来构建对应的 Bind 实例，查看 DataBindingUtil 的代码会发现的工作实现十分简单，将属性和 view 集合传递给我们的 DataBinding:\n\n   ```java\n   //查找到布局ViewGruop\n   public static <T extends ViewDataBinding> T setContentView(Activity activity, int layoutId,\n               DataBindingComponent bindingComponent) {\n           activity.setContentView(layoutId);\n           View decorView = activity.getWindow().getDecorView();\n           ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);\n           return bindToAddedViews(bindingComponent, contentView, 0, layoutId);\n   //遍历所有的View然后调用ViewDataBinding.Bind方法将数据传给我们的实体类`ActivityMainDataBinding`\n   private static <T extends ViewDataBinding> T bindToAddedViews(DataBindingComponent \t\t\tcomponent, ViewGroup parent, int startChildren, int layoutId) {\n       final int endChildren = parent.getChildCount();\n       final int childrenAdded = endChildren - startChildren;\n       if (childrenAdded == 1) {\n           final View childView = parent.getChildAt(endChildren - 1);\n           return bind(component, childView, layoutId);\n       } else {\n           final View[] children = new View[childrenAdded];\n           for (int i = 0; i < childrenAdded; i++) {\n               children[i] = parent.getChildAt(i + startChildren);\n           }\n           return bind(component, children, layoutId);\n       }\n   }\n   ```\n\n   ​\n\n2. 通过 Bind 实例绑定数据源，关联控件发生改变。那么数据绑定与刷新又是如何发生的呢？在源码中我们可以发现最终应该是调用了`ActivityMainBinding`的`executeBindings()`方法来执行控件刷新的，源码并不复杂。\n\n```java\n protected void executeBindings() {\n   //dirtyFlags的作用主要是通过位运算来判断控件的数据源对象是否被绑定，这里我们就不关心具体实现。\n        long dirtyFlags = 0;\n        synchronized(this) {\n            dirtyFlags = mDirtyFlags;\n            mDirtyFlags = 0;\n        }\n   \t\tcom.example.qhfax.databindingexample.bean.Action action = mAction;\n   \t\tjava.lang.String actionName = null;\n  \t\t if ((dirtyFlags & 0x6L) != 0) {\n                if (action != null) {\n                    // read action.name\n                    actionName = action.getName();\n                }\n      \t  }\n    if ((dirtyFlags & 0x6L) != 0) {\n      // 将我们的textView传递到bindAdapter中进行赋值，由于我们没有给TextView声明ID所有名称是由插件自己生成的名称。\n     android.databinding.adapters.TextViewBindingAdapter.setText(this.mboundView2, actionName);\n      }\n }\n```\n\n可以见看出代码十分的简洁，功能实现都在适配器中进行，这样可以保证情况再复杂代码的可阅读性和适配性也不会层级递增。`TextViewBindingAdapter.setText`方法也就是让`mboundView2`调用`setText`方法显示`actionName`的值，至于 Adapter 的整体的具体实现等到自定义 Adapter 时候我们再解析。\n\n```java\n  @BindingAdapter(\"android:text\")\n    public static void setText(TextView view, CharSequence text) {\n        final CharSequence oldText = view.getText();\n        if (text == oldText || (text == null && oldText.length() == 0)) {\n        //....各种约束判断\n        }\n        view.setText(text);\n    }\n```\n\n### 真正的单向绑定\n\n如果你也在写 Example 就会发现一个问题，当`Action`绑定后，后续`Action`的改变并不会让 UI 更新即 Observable(观察者模式)并没有实现。这显然不是我们想要达到的目的。\n\n![](https://pic3.zhimg.com/079482e5b8748e2e566e9e4eba82e456_b.png)\n\n在 Data Binding 想要一个 View Model 被控件订阅就需要它继承`BaseObservable`，这样当`Action`每次改变的时候我们就通知控件数据被改变了，然后控件自己调用相关属性的方法去更新数据。\n\n```java\n\npublic class Action extends BaseObservable{\n    private String name;\n  //通过在get方法上Bindable注解让BR生成对应的flag，确定如何刷新name值\n    @Bindable\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n      //当我们改变值刷新UI，notifyChange()是通知所有订阅者，即使用了actino类中任意绑定了属性都会受到刷新的命令；notifyPropertyChanged()就很明显是通过flag进行单独刷新。\n       //notifyChange();\n        notifyPropertyChanged(BR.name);\n    }\n```\n\n如果 View Model 已经有继承父类我们也可以通过对绑定的属性单独的声明 Observable。DataBinding 提供了除了基础类型外还有 ObservableParcalable 与 ObservableField 来解决大多数场景遇到的对象属性。\n\n```java\npublic class Action {\n  private ObservableField<String> name =new ObservableField<>();\n  private ObservableInt age =new ObservableInt();\n\n  //这样做的弊端是我们无法直接访问到属性值，需要通过Observable的get/set方法\n  public void setName(String name){\n    this.name.set(name);\n  }\n  public String getName(){\n    return this.name.get();\n  }\n}\n```\n\n这样的话，当我们运行时候控件和数据的联系就建立起来了，更新`name`的同时 TextView 的`text`也会同时发生变化。\n\n数据源一定要写个实体类吗，那么不是需要成吨的 bean ? 我们可以通过 ObservableArrayMap 和 ObservableArrayList 来创建观察者和需要观察的数据。\n\n```java\nObservableArrayMap<String,Object> action = new ObseravbleArryMap<>();\naction.put(\"name\",\"just\");\naction.put(\"password\",\"gbk\")\nObservableArryList list =new ObservableArryList<>();\nlist.add(\"first\");\nlist.add(\"second\")\n```\n\n在 xml 中我们通过 key 和 index 访问他们\n\n```xml\n<variable name=\"action\"\n          type=\"android.databinding.ObserableMap\"></variable>\n<ariable name=\"user\"\n         type=\"android.databing.ObservableList\"></ariable>\n\n<TextView\n          android:text=\"@{action[\"name\"]\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"/>\n<TextView\n          android:text=\"@{user[1]\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"/>\n```\n\n### 事件绑定\n\n我们除了可以绑定 View 各种属性外，我们也可以在 xml 中直接绑定事件，而不用通过 View 转发。\n\n我们在 Presenter 中创建一个监听文本的方法，然后在 xml 中设置`onTextChanged`属性，方法名必须和对应的 listener 对应.\n\n```xml\n<EditText\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:onTextChanged=\"@{presenter::onTextChanged}\"\n  />\n\n```\n\n将 Presenter 绑定在 Activity 上后，就可以接受到 EditText 的改变了\n\n```java\npublic class Presenter{\n  public void onTextChanged(charSequence s,in start ,int before,int count){\n    mView.show(s.toString())\n  }\n}\n```\n\n### 表达式\n\n在 xml 中的 dataBinding 表达式支持 Java 中的大部分语法，具体如下：\n\n- 算数 `+-*/%`\n- 字符串合并`+`\n- 逻辑运算 `&&||`\n- 二元`&|^`\n- 一元`+-!~`\n- 位移`>> >>> >>`\n- 比较`== > <> = <=`\n- instanceof 操作符\n- Grouping（）\n- 文字\n- Cast 类型转换\n- 方法调用\n- 属性访问\n- 数组访问\n- 三目运算符`？：`\n\n尚不支持`super`、`this`、`new`、以及显示的泛型调用。\n\n同时由于在表达式在字符串中声明的，一些特殊字符的转义也是不可避免的。\n\n|    结果    | 转义字符  |\n| :--------: | :-------: |\n|    空格    | `&nbsp;`  |\n|     <      |   `&t;`   |\n|     >      |  `&gt;`   |\n|     &      |  `&amp;`  |\n|     \"      | `&quot;`  |\n| `|`&apos;` |\n|     x      | `&divide` |\n\n除此 java 的这些语法支持外还有一些特殊的支持。\n\n- 空合并运算符——使用`??`来连接两个式子，如果左边的式子为空就取右边的。\n\n  ```xml\n  android:text=\"@{user.name??user.realName}\"\n  ```\n\n- 直接访问资源文件——可以通过`@resource/name 的形式访问资源文件来直接使用\n\n  ```xml\n  android:text=\"@{@String/name(name)}\"\n\n  <string name=\"name\">我的名字是%s</string>\n  ```\n\n### include\n\n在使用 include 布局时候需要将该布局使用的数据通过`bind:xxx=@{}`传递进去，并在布局中进行二次绑定。\n\n```xml\n<include layout=\"@layout/empty\" bind:info=\"@{info}\"/>\n```\n","source":"_posts/2017-05-19-android_databinding.md","raw":"---\nlayout: post\ntitle: \"Data Binding学习笔记\"\nsubtitle: \"从零开始的Booklet(一)\"\ndate: 2017-05-19 16:03:00\nauthor: \"just\"\nheader_image: \"img/post-bg-alitrip.jpg\"\ncatalog: true\ntags:\n  - Android\n  - Booklet\n---\n\n## 前言\n\nDataBinding 出来很久了，不过现在连 MVP 都没有大规模被使用，别说写法用法更颠覆性的 DatatBinding 这样的了。但 DataBinding 这种面向 MVVM 的编程思想前端的使用已经非常普遍了，且确实给开发带来很大的便利。所以还是有必要学习和了解。\n\n## 什么是 DataBinding?\n\n简单的来说 DataBinding 是 Google 在 Android 上的一种 MVVM 的实现。MVVM 是`Model-View-ViewModel`的简写，它是 MVP(Model-View-Persenter) 模式与 WPF 结合的应用方式发展演变过来的一种新型架构。而 WPF 主要带来的特性就是**数据绑定**，这也是 Data Binding 所实现的功能。\n\n![](http://www.cyxqd.com/wp-content/uploads/2014/10/nmwentill.jpg)\n\n## 数据绑定\n\n数据绑定分为**单项绑定**和**双向绑定**;单向绑定就是将视图上的控件的属性绑定到一个对象的某个属性的方法，当对象的属性发生变化时直接影响到控件上；双向绑定的话就是可以互相影响——例如我们将`User`类的`name`属性绑定到`TextView`的`setText`属性上，这样当我们修改 name 的值时 setText 值也发生相应的改变，无需我们自己去 setText 更新属性。Data Binding 不仅可以帮我们在 Android 上实现这一机制，还为此附带了很多便利，减少了很多工具代码的编写。\n\n- **项目更加解耦，各个组件的依赖性进一步降低，增加可复用性**\n\n* **去掉 Activities&Fragment 内的大部分 UI 代码**，例如`onClickListener`、`setText`、`findViewById`等\n* **xml 的功能增强**。xml 不再只是声明 UI 的界面，还起到数据的绑定，赋值，逻辑判断等功能。\n* **性能提高，减少 view id 的定义**。由于数据绑定直接在 xml 产生，所以不用绞尽脑汁的其大量的名称且在绑定的时候就一次性的通过 gruop 将 view 全部获取，比单个`findViewById`更加的迅速。\n\n## 搭建环境\n\nData Binding 在 Android Studio 1.3 版本&Gradle1.5 后就内置在 IDE 中了，我们只需要在`gradle.project`中`Android`模块下声明开启 Data Binding 即可\n\n```groovy\nandroid{\n  ...\n    dataBinding{\n      enabled=true\n    }\n}\n```\n\n## 基础使用\n\n### 编写 View\n\n数据绑定需要在 xml 中声明各种关系，也可以写一些简单的运算。声明一个 data Binding Layout 只需要在原来的 layout xml 文件基础加一个标签即可:\n\n```xml\n<layout>\n//...rootView\n</layout>\n```\n\n这样在编译时，修改后即可搜索到布局生成的对应的\\*Binding 类。生成的规则默认是通过 xml 的文件名生成，例如`activity_main.xml`就会对应生成为`ActivityMainBinding.java`的文件。当然我们也可以指定自定生成的文件名称，需要在`layout`标签下加入`data`标签并指定`class`属性即可(生成 LoginBinding.java)，除此之外`data`也是我们声明变量的地方，稍后再详细介绍。\n\n```xml\n<data class=\"login\">\n....\n</data>\n```\n\n我们来编写一个简单的登录界面:\n\n先使用`variable`绑定我们所需要的对象。`type`为该对象的地址,`name`则随意命名。这里我们声明了一个`Action`和`Presenter`,`Action`用于绑定数据，`Presenter`则用来绑定一些事件和做逻辑处理。\n\n```xml\n<layout>\n<data>\n        <variable\n            name=\"presenter\"\n            type=\"com.example.qhfax.databindingexample.presenter.MainPresenter\" />\n\n        <variable\n            name=\"action\"\n            type=\"com.example.qhfax.databindingexample.bean.Action\" />\n    </data>\n\n  //...rootView\n  </layout>\n```\n\n声明好对象后，我们就开始将对象绑定到数据源上。在 Data Binding 中，我们绑定数据需要使用`@{code}`书写，向插件声明这是一个表达式。这里我们将`name`属性绑定到`TextView`的`setText`上。\n\n```xml\n<TextView\n            android:layout_width=\"63dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"8dp\"\n            android:layout_marginRight=\"8dp\"\n            android:layout_marginTop=\"60dp\"\n            android:gravity=\"center\"\n            android:text=\"@{action.name}\" />\n```\n\n之后在 Activity 中我们需要使用`DataBindingUtil`获取`ActivityMainDataBinding`的实例\n\n```java\nActivityMainDataBinding mMainBind=DataBindingUtil.setContentView(this,R.layout.activity_main);\n```\n\n然后去绑定对象\n\n```java\nAction action = new Action();\naction.setName(\"用户名：\");\nmMainBind.setAction(action)\nmMainBind.setPersenter(persenter);\n```\n\n运行后就可以发现`TextView`就直接被赋值啦。\n\n### 绑定的原理\n\n嗯....我们可以先观察一下目前的流程是怎么走下来的；\n\n1. 在`xml`文件中绑定控件，然后插件会根据`layout`生成对应的实体类。通过 DataBindingUtli 来构建对应的 Bind 实例，查看 DataBindingUtil 的代码会发现的工作实现十分简单，将属性和 view 集合传递给我们的 DataBinding:\n\n   ```java\n   //查找到布局ViewGruop\n   public static <T extends ViewDataBinding> T setContentView(Activity activity, int layoutId,\n               DataBindingComponent bindingComponent) {\n           activity.setContentView(layoutId);\n           View decorView = activity.getWindow().getDecorView();\n           ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);\n           return bindToAddedViews(bindingComponent, contentView, 0, layoutId);\n   //遍历所有的View然后调用ViewDataBinding.Bind方法将数据传给我们的实体类`ActivityMainDataBinding`\n   private static <T extends ViewDataBinding> T bindToAddedViews(DataBindingComponent \t\t\tcomponent, ViewGroup parent, int startChildren, int layoutId) {\n       final int endChildren = parent.getChildCount();\n       final int childrenAdded = endChildren - startChildren;\n       if (childrenAdded == 1) {\n           final View childView = parent.getChildAt(endChildren - 1);\n           return bind(component, childView, layoutId);\n       } else {\n           final View[] children = new View[childrenAdded];\n           for (int i = 0; i < childrenAdded; i++) {\n               children[i] = parent.getChildAt(i + startChildren);\n           }\n           return bind(component, children, layoutId);\n       }\n   }\n   ```\n\n   ​\n\n2. 通过 Bind 实例绑定数据源，关联控件发生改变。那么数据绑定与刷新又是如何发生的呢？在源码中我们可以发现最终应该是调用了`ActivityMainBinding`的`executeBindings()`方法来执行控件刷新的，源码并不复杂。\n\n```java\n protected void executeBindings() {\n   //dirtyFlags的作用主要是通过位运算来判断控件的数据源对象是否被绑定，这里我们就不关心具体实现。\n        long dirtyFlags = 0;\n        synchronized(this) {\n            dirtyFlags = mDirtyFlags;\n            mDirtyFlags = 0;\n        }\n   \t\tcom.example.qhfax.databindingexample.bean.Action action = mAction;\n   \t\tjava.lang.String actionName = null;\n  \t\t if ((dirtyFlags & 0x6L) != 0) {\n                if (action != null) {\n                    // read action.name\n                    actionName = action.getName();\n                }\n      \t  }\n    if ((dirtyFlags & 0x6L) != 0) {\n      // 将我们的textView传递到bindAdapter中进行赋值，由于我们没有给TextView声明ID所有名称是由插件自己生成的名称。\n     android.databinding.adapters.TextViewBindingAdapter.setText(this.mboundView2, actionName);\n      }\n }\n```\n\n可以见看出代码十分的简洁，功能实现都在适配器中进行，这样可以保证情况再复杂代码的可阅读性和适配性也不会层级递增。`TextViewBindingAdapter.setText`方法也就是让`mboundView2`调用`setText`方法显示`actionName`的值，至于 Adapter 的整体的具体实现等到自定义 Adapter 时候我们再解析。\n\n```java\n  @BindingAdapter(\"android:text\")\n    public static void setText(TextView view, CharSequence text) {\n        final CharSequence oldText = view.getText();\n        if (text == oldText || (text == null && oldText.length() == 0)) {\n        //....各种约束判断\n        }\n        view.setText(text);\n    }\n```\n\n### 真正的单向绑定\n\n如果你也在写 Example 就会发现一个问题，当`Action`绑定后，后续`Action`的改变并不会让 UI 更新即 Observable(观察者模式)并没有实现。这显然不是我们想要达到的目的。\n\n![](https://pic3.zhimg.com/079482e5b8748e2e566e9e4eba82e456_b.png)\n\n在 Data Binding 想要一个 View Model 被控件订阅就需要它继承`BaseObservable`，这样当`Action`每次改变的时候我们就通知控件数据被改变了，然后控件自己调用相关属性的方法去更新数据。\n\n```java\n\npublic class Action extends BaseObservable{\n    private String name;\n  //通过在get方法上Bindable注解让BR生成对应的flag，确定如何刷新name值\n    @Bindable\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n      //当我们改变值刷新UI，notifyChange()是通知所有订阅者，即使用了actino类中任意绑定了属性都会受到刷新的命令；notifyPropertyChanged()就很明显是通过flag进行单独刷新。\n       //notifyChange();\n        notifyPropertyChanged(BR.name);\n    }\n```\n\n如果 View Model 已经有继承父类我们也可以通过对绑定的属性单独的声明 Observable。DataBinding 提供了除了基础类型外还有 ObservableParcalable 与 ObservableField 来解决大多数场景遇到的对象属性。\n\n```java\npublic class Action {\n  private ObservableField<String> name =new ObservableField<>();\n  private ObservableInt age =new ObservableInt();\n\n  //这样做的弊端是我们无法直接访问到属性值，需要通过Observable的get/set方法\n  public void setName(String name){\n    this.name.set(name);\n  }\n  public String getName(){\n    return this.name.get();\n  }\n}\n```\n\n这样的话，当我们运行时候控件和数据的联系就建立起来了，更新`name`的同时 TextView 的`text`也会同时发生变化。\n\n数据源一定要写个实体类吗，那么不是需要成吨的 bean ? 我们可以通过 ObservableArrayMap 和 ObservableArrayList 来创建观察者和需要观察的数据。\n\n```java\nObservableArrayMap<String,Object> action = new ObseravbleArryMap<>();\naction.put(\"name\",\"just\");\naction.put(\"password\",\"gbk\")\nObservableArryList list =new ObservableArryList<>();\nlist.add(\"first\");\nlist.add(\"second\")\n```\n\n在 xml 中我们通过 key 和 index 访问他们\n\n```xml\n<variable name=\"action\"\n          type=\"android.databinding.ObserableMap\"></variable>\n<ariable name=\"user\"\n         type=\"android.databing.ObservableList\"></ariable>\n\n<TextView\n          android:text=\"@{action[\"name\"]\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"/>\n<TextView\n          android:text=\"@{user[1]\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"/>\n```\n\n### 事件绑定\n\n我们除了可以绑定 View 各种属性外，我们也可以在 xml 中直接绑定事件，而不用通过 View 转发。\n\n我们在 Presenter 中创建一个监听文本的方法，然后在 xml 中设置`onTextChanged`属性，方法名必须和对应的 listener 对应.\n\n```xml\n<EditText\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:onTextChanged=\"@{presenter::onTextChanged}\"\n  />\n\n```\n\n将 Presenter 绑定在 Activity 上后，就可以接受到 EditText 的改变了\n\n```java\npublic class Presenter{\n  public void onTextChanged(charSequence s,in start ,int before,int count){\n    mView.show(s.toString())\n  }\n}\n```\n\n### 表达式\n\n在 xml 中的 dataBinding 表达式支持 Java 中的大部分语法，具体如下：\n\n- 算数 `+-*/%`\n- 字符串合并`+`\n- 逻辑运算 `&&||`\n- 二元`&|^`\n- 一元`+-!~`\n- 位移`>> >>> >>`\n- 比较`== > <> = <=`\n- instanceof 操作符\n- Grouping（）\n- 文字\n- Cast 类型转换\n- 方法调用\n- 属性访问\n- 数组访问\n- 三目运算符`？：`\n\n尚不支持`super`、`this`、`new`、以及显示的泛型调用。\n\n同时由于在表达式在字符串中声明的，一些特殊字符的转义也是不可避免的。\n\n|    结果    | 转义字符  |\n| :--------: | :-------: |\n|    空格    | `&nbsp;`  |\n|     <      |   `&t;`   |\n|     >      |  `&gt;`   |\n|     &      |  `&amp;`  |\n|     \"      | `&quot;`  |\n| `|`&apos;` |\n|     x      | `&divide` |\n\n除此 java 的这些语法支持外还有一些特殊的支持。\n\n- 空合并运算符——使用`??`来连接两个式子，如果左边的式子为空就取右边的。\n\n  ```xml\n  android:text=\"@{user.name??user.realName}\"\n  ```\n\n- 直接访问资源文件——可以通过`@resource/name 的形式访问资源文件来直接使用\n\n  ```xml\n  android:text=\"@{@String/name(name)}\"\n\n  <string name=\"name\">我的名字是%s</string>\n  ```\n\n### include\n\n在使用 include 布局时候需要将该布局使用的数据通过`bind:xxx=@{}`传递进去，并在布局中进行二次绑定。\n\n```xml\n<include layout=\"@layout/empty\" bind:info=\"@{info}\"/>\n```\n","slug":"2017-05-19-android_databinding","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p2000es2y469nnhb1c","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>DataBinding 出来很久了，不过现在连 MVP 都没有大规模被使用，别说写法用法更颠覆性的 DatatBinding 这样的了。但 DataBinding 这种面向 MVVM 的编程思想前端的使用已经非常普遍了，且确实给开发带来很大的便利。所以还是有必要学习和了解。</p>\n<h2 id=\"什么是-DataBinding\"><a href=\"#什么是-DataBinding\" class=\"headerlink\" title=\"什么是 DataBinding?\"></a>什么是 DataBinding?</h2><p>简单的来说 DataBinding 是 Google 在 Android 上的一种 MVVM 的实现。MVVM 是<code>Model-View-ViewModel</code>的简写，它是 MVP(Model-View-Persenter) 模式与 WPF 结合的应用方式发展演变过来的一种新型架构。而 WPF 主要带来的特性就是<strong>数据绑定</strong>，这也是 Data Binding 所实现的功能。</p>\n<p><img src=\"http://www.cyxqd.com/wp-content/uploads/2014/10/nmwentill.jpg\"></p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>数据绑定分为<strong>单项绑定</strong>和<strong>双向绑定</strong>;单向绑定就是将视图上的控件的属性绑定到一个对象的某个属性的方法，当对象的属性发生变化时直接影响到控件上；双向绑定的话就是可以互相影响——例如我们将<code>User</code>类的<code>name</code>属性绑定到<code>TextView</code>的<code>setText</code>属性上，这样当我们修改 name 的值时 setText 值也发生相应的改变，无需我们自己去 setText 更新属性。Data Binding 不仅可以帮我们在 Android 上实现这一机制，还为此附带了很多便利，减少了很多工具代码的编写。</p>\n<ul>\n<li><strong>项目更加解耦，各个组件的依赖性进一步降低，增加可复用性</strong></li>\n</ul>\n<ul>\n<li><strong>去掉 Activities&amp;Fragment 内的大部分 UI 代码</strong>，例如<code>onClickListener</code>、<code>setText</code>、<code>findViewById</code>等</li>\n<li><strong>xml 的功能增强</strong>。xml 不再只是声明 UI 的界面，还起到数据的绑定，赋值，逻辑判断等功能。</li>\n<li><strong>性能提高，减少 view id 的定义</strong>。由于数据绑定直接在 xml 产生，所以不用绞尽脑汁的其大量的名称且在绑定的时候就一次性的通过 gruop 将 view 全部获取，比单个<code>findViewById</code>更加的迅速。</li>\n</ul>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>Data Binding 在 Android Studio 1.3 版本&amp;Gradle1.5 后就内置在 IDE 中了，我们只需要在<code>gradle.project</code>中<code>Android</code>模块下声明开启 Data Binding 即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">    dataBinding&#123;</span><br><span class=\"line\">      enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><h3 id=\"编写-View\"><a href=\"#编写-View\" class=\"headerlink\" title=\"编写 View\"></a>编写 View</h3><p>数据绑定需要在 xml 中声明各种关系，也可以写一些简单的运算。声明一个 data Binding Layout 只需要在原来的 layout xml 文件基础加一个标签即可:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">//...rootView</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样在编译时，修改后即可搜索到布局生成的对应的*Binding 类。生成的规则默认是通过 xml 的文件名生成，例如<code>activity_main.xml</code>就会对应生成为<code>ActivityMainBinding.java</code>的文件。当然我们也可以指定自定生成的文件名称，需要在<code>layout</code>标签下加入<code>data</code>标签并指定<code>class</code>属性即可(生成 LoginBinding.java)，除此之外<code>data</code>也是我们声明变量的地方，稍后再详细介绍。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来编写一个简单的登录界面:</p>\n<p>先使用<code>variable</code>绑定我们所需要的对象。<code>type</code>为该对象的地址,<code>name</code>则随意命名。这里我们声明了一个<code>Action</code>和<code>Presenter</code>,<code>Action</code>用于绑定数据，<code>Presenter</code>则用来绑定一些事件和做逻辑处理。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;presenter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.example.qhfax.databindingexample.presenter.MainPresenter&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;action&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.example.qhfax.databindingexample.bean.Action&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  //...rootView</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明好对象后，我们就开始将对象绑定到数据源上。在 Data Binding 中，我们绑定数据需要使用<code>@&#123;code&#125;</code>书写，向插件声明这是一个表达式。这里我们将<code>name</code>属性绑定到<code>TextView</code>的<code>setText</code>上。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;63dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">&quot;60dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;action.name&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后在 Activity 中我们需要使用<code>DataBindingUtil</code>获取<code>ActivityMainDataBinding</code>的实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityMainDataBinding mMainBind=DataBindingUtil.setContentView(<span class=\"built_in\">this</span>,R.layout.activity_main);</span><br></pre></td></tr></table></figure>\n\n<p>然后去绑定对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Action</span> <span class=\"variable\">action</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Action</span>();</span><br><span class=\"line\">action.setName(<span class=\"string\">&quot;用户名：&quot;</span>);</span><br><span class=\"line\">mMainBind.setAction(action)</span><br><span class=\"line\">mMainBind.setPersenter(persenter);</span><br></pre></td></tr></table></figure>\n\n<p>运行后就可以发现<code>TextView</code>就直接被赋值啦。</p>\n<h3 id=\"绑定的原理\"><a href=\"#绑定的原理\" class=\"headerlink\" title=\"绑定的原理\"></a>绑定的原理</h3><p>嗯….我们可以先观察一下目前的流程是怎么走下来的；</p>\n<ol>\n<li><p>在<code>xml</code>文件中绑定控件，然后插件会根据<code>layout</code>生成对应的实体类。通过 DataBindingUtli 来构建对应的 Bind 实例，查看 DataBindingUtil 的代码会发现的工作实现十分简单，将属性和 view 集合传递给我们的 DataBinding:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找到布局ViewGruop</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewDataBinding</span>&gt; T <span class=\"title function_\">setContentView</span><span class=\"params\">(Activity activity, <span class=\"type\">int</span> layoutId,</span></span><br><span class=\"line\"><span class=\"params\">            DataBindingComponent bindingComponent)</span> &#123;</span><br><span class=\"line\">        activity.setContentView(layoutId);</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">decorView</span> <span class=\"operator\">=</span> activity.getWindow().getDecorView();</span><br><span class=\"line\">        <span class=\"type\">ViewGroup</span> <span class=\"variable\">contentView</span> <span class=\"operator\">=</span> (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindToAddedViews(bindingComponent, contentView, <span class=\"number\">0</span>, layoutId);</span><br><span class=\"line\"><span class=\"comment\">//遍历所有的View然后调用ViewDataBinding.Bind方法将数据传给我们的实体类`ActivityMainDataBinding`</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewDataBinding</span>&gt; T <span class=\"title function_\">bindToAddedViews</span><span class=\"params\">(DataBindingComponent \t\t\tcomponent, ViewGroup parent, <span class=\"type\">int</span> startChildren, <span class=\"type\">int</span> layoutId)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">endChildren</span> <span class=\"operator\">=</span> parent.getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">childrenAdded</span> <span class=\"operator\">=</span> endChildren - startChildren;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childrenAdded == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">childView</span> <span class=\"operator\">=</span> parent.getChildAt(endChildren - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(component, childView, layoutId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View[] children = <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>[childrenAdded];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class=\"line\">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(component, children, layoutId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>通过 Bind 实例绑定数据源，关联控件发生改变。那么数据绑定与刷新又是如何发生的呢？在源码中我们可以发现最终应该是调用了<code>ActivityMainBinding</code>的<code>executeBindings()</code>方法来执行控件刷新的，源码并不复杂。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeBindings</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dirtyFlags的作用主要是通过位运算来判断控件的数据源对象是否被绑定，这里我们就不关心具体实现。</span></span><br><span class=\"line\">       <span class=\"type\">long</span> <span class=\"variable\">dirtyFlags</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">           dirtyFlags = mDirtyFlags;</span><br><span class=\"line\">           mDirtyFlags = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  \t\tcom.example.qhfax.databindingexample.bean.<span class=\"type\">Action</span> <span class=\"variable\">action</span> <span class=\"operator\">=</span> mAction;</span><br><span class=\"line\">  \t\tjava.lang.<span class=\"type\">String</span> <span class=\"variable\">actionName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> \t\t <span class=\"keyword\">if</span> ((dirtyFlags &amp; <span class=\"number\">0x6L</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (action != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// read action.name</span></span><br><span class=\"line\">                   actionName = action.getName();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     \t  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((dirtyFlags &amp; <span class=\"number\">0x6L</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 将我们的textView传递到bindAdapter中进行赋值，由于我们没有给TextView声明ID所有名称是由插件自己生成的名称。</span></span><br><span class=\"line\">    android.databinding.adapters.TextViewBindingAdapter.setText(<span class=\"built_in\">this</span>.mboundView2, actionName);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以见看出代码十分的简洁，功能实现都在适配器中进行，这样可以保证情况再复杂代码的可阅读性和适配性也不会层级递增。<code>TextViewBindingAdapter.setText</code>方法也就是让<code>mboundView2</code>调用<code>setText</code>方法显示<code>actionName</code>的值，至于 Adapter 的整体的具体实现等到自定义 Adapter 时候我们再解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(&quot;android:text&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setText</span><span class=\"params\">(TextView view, CharSequence text)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">CharSequence</span> <span class=\"variable\">oldText</span> <span class=\"operator\">=</span> view.getText();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (text == oldText || (text == <span class=\"literal\">null</span> &amp;&amp; oldText.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//....各种约束判断</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      view.setText(text);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"真正的单向绑定\"><a href=\"#真正的单向绑定\" class=\"headerlink\" title=\"真正的单向绑定\"></a>真正的单向绑定</h3><p>如果你也在写 Example 就会发现一个问题，当<code>Action</code>绑定后，后续<code>Action</code>的改变并不会让 UI 更新即 Observable(观察者模式)并没有实现。这显然不是我们想要达到的目的。</p>\n<p><img src=\"https://pic3.zhimg.com/079482e5b8748e2e566e9e4eba82e456_b.png\"></p>\n<p>在 Data Binding 想要一个 View Model 被控件订阅就需要它继承<code>BaseObservable</code>，这样当<code>Action</code>每次改变的时候我们就通知控件数据被改变了，然后控件自己调用相关属性的方法去更新数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseObservable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//通过在get方法上Bindable注解让BR生成对应的flag，确定如何刷新name值</span></span><br><span class=\"line\">    <span class=\"meta\">@Bindable</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"comment\">//当我们改变值刷新UI，notifyChange()是通知所有订阅者，即使用了actino类中任意绑定了属性都会受到刷新的命令；notifyPropertyChanged()就很明显是通过flag进行单独刷新。</span></span><br><span class=\"line\">       <span class=\"comment\">//notifyChange();</span></span><br><span class=\"line\">        notifyPropertyChanged(BR.name);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 View Model 已经有继承父类我们也可以通过对绑定的属性单独的声明 Observable。DataBinding 提供了除了基础类型外还有 ObservableParcalable 与 ObservableField 来解决大多数场景遇到的对象属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ObservableField&lt;String&gt; name =<span class=\"keyword\">new</span> <span class=\"title class_\">ObservableField</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">ObservableInt</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">ObservableInt</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//这样做的弊端是我们无法直接访问到属性值，需要通过Observable的get/set方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name.set(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name.get();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，当我们运行时候控件和数据的联系就建立起来了，更新<code>name</code>的同时 TextView 的<code>text</code>也会同时发生变化。</p>\n<p>数据源一定要写个实体类吗，那么不是需要成吨的 bean ? 我们可以通过 ObservableArrayMap 和 ObservableArrayList 来创建观察者和需要观察的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObservableArrayMap&lt;String,Object&gt; action = <span class=\"keyword\">new</span> <span class=\"title class_\">ObseravbleArryMap</span>&lt;&gt;();</span><br><span class=\"line\">action.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;just&quot;</span>);</span><br><span class=\"line\">action.put(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;gbk&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">ObservableArryList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">ObservableArryList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;first&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;second&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 xml 中我们通过 key 和 index 访问他们</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;action&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;android.databinding.ObserableMap&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">variable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ariable</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;android.databing.ObservableList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ariable</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;action[&quot;</span><span class=\"attr\">name</span>&quot;]&quot;</span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;user[1]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p>我们除了可以绑定 View 各种属性外，我们也可以在 xml 中直接绑定事件，而不用通过 View 转发。</p>\n<p>我们在 Presenter 中创建一个监听文本的方法，然后在 xml 中设置<code>onTextChanged</code>属性，方法名必须和对应的 listener 对应.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:onTextChanged</span>=<span class=\"string\">&quot;@&#123;presenter::onTextChanged&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将 Presenter 绑定在 Activity 上后，就可以接受到 EditText 的改变了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Presenter</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onTextChanged</span><span class=\"params\">(charSequence s,in start ,<span class=\"type\">int</span> before,<span class=\"type\">int</span> count)</span>&#123;</span><br><span class=\"line\">    mView.show(s.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>在 xml 中的 dataBinding 表达式支持 Java 中的大部分语法，具体如下：</p>\n<ul>\n<li>算数 <code>+-*/%</code></li>\n<li>字符串合并<code>+</code></li>\n<li>逻辑运算 <code>&amp;&amp;||</code></li>\n<li>二元<code>&amp;|^</code></li>\n<li>一元<code>+-!~</code></li>\n<li>位移<code>&gt;&gt; &gt;&gt;&gt; &gt;&gt;</code></li>\n<li>比较<code>== &gt; &lt;&gt; = &lt;=</code></li>\n<li>instanceof 操作符</li>\n<li>Grouping（）</li>\n<li>文字</li>\n<li>Cast 类型转换</li>\n<li>方法调用</li>\n<li>属性访问</li>\n<li>数组访问</li>\n<li>三目运算符<code>？：</code></li>\n</ul>\n<p>尚不支持<code>super</code>、<code>this</code>、<code>new</code>、以及显示的泛型调用。</p>\n<p>同时由于在表达式在字符串中声明的，一些特殊字符的转义也是不可避免的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">结果</th>\n<th align=\"center\">转义字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">空格</td>\n<td align=\"center\"><code>&amp;nbsp;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"><code>&amp;t;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\"><code>&amp;amp;</code></td>\n</tr>\n<tr>\n<td align=\"center\">“</td>\n<td align=\"center\"><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&#96;</td>\n<td align=\"center\"><code>&amp;apos;</code></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\"><code>&amp;divide</code></td>\n</tr>\n</tbody></table>\n<p>除此 java 的这些语法支持外还有一些特殊的支持。</p>\n<ul>\n<li><p>空合并运算符——使用<code>??</code>来连接两个式子，如果左边的式子为空就取右边的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=&quot;@&#123;user.name??user.realName&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接访问资源文件——可以通过&#96;@resource&#x2F;name 的形式访问资源文件来直接使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=&quot;@&#123;@String/name(name)&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>我的名字是%s<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h3><p>在使用 include 布局时候需要将该布局使用的数据通过<code>bind:xxx=@&#123;&#125;</code>传递进去，并在布局中进行二次绑定。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;@layout/empty&quot;</span> <span class=\"attr\">bind:info</span>=<span class=\"string\">&quot;@&#123;info&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>DataBinding 出来很久了，不过现在连 MVP 都没有大规模被使用，别说写法用法更颠覆性的 DatatBinding 这样的了。但 DataBinding 这种面向 MVVM 的编程思想前端的使用已经非常普遍了，且确实给开发带来很大的便利。所以还是有必要学习和了解。</p>\n<h2 id=\"什么是-DataBinding\"><a href=\"#什么是-DataBinding\" class=\"headerlink\" title=\"什么是 DataBinding?\"></a>什么是 DataBinding?</h2><p>简单的来说 DataBinding 是 Google 在 Android 上的一种 MVVM 的实现。MVVM 是<code>Model-View-ViewModel</code>的简写，它是 MVP(Model-View-Persenter) 模式与 WPF 结合的应用方式发展演变过来的一种新型架构。而 WPF 主要带来的特性就是<strong>数据绑定</strong>，这也是 Data Binding 所实现的功能。</p>\n<p><img src=\"http://www.cyxqd.com/wp-content/uploads/2014/10/nmwentill.jpg\"></p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>数据绑定分为<strong>单项绑定</strong>和<strong>双向绑定</strong>;单向绑定就是将视图上的控件的属性绑定到一个对象的某个属性的方法，当对象的属性发生变化时直接影响到控件上；双向绑定的话就是可以互相影响——例如我们将<code>User</code>类的<code>name</code>属性绑定到<code>TextView</code>的<code>setText</code>属性上，这样当我们修改 name 的值时 setText 值也发生相应的改变，无需我们自己去 setText 更新属性。Data Binding 不仅可以帮我们在 Android 上实现这一机制，还为此附带了很多便利，减少了很多工具代码的编写。</p>\n<ul>\n<li><strong>项目更加解耦，各个组件的依赖性进一步降低，增加可复用性</strong></li>\n</ul>\n<ul>\n<li><strong>去掉 Activities&amp;Fragment 内的大部分 UI 代码</strong>，例如<code>onClickListener</code>、<code>setText</code>、<code>findViewById</code>等</li>\n<li><strong>xml 的功能增强</strong>。xml 不再只是声明 UI 的界面，还起到数据的绑定，赋值，逻辑判断等功能。</li>\n<li><strong>性能提高，减少 view id 的定义</strong>。由于数据绑定直接在 xml 产生，所以不用绞尽脑汁的其大量的名称且在绑定的时候就一次性的通过 gruop 将 view 全部获取，比单个<code>findViewById</code>更加的迅速。</li>\n</ul>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><p>Data Binding 在 Android Studio 1.3 版本&amp;Gradle1.5 后就内置在 IDE 中了，我们只需要在<code>gradle.project</code>中<code>Android</code>模块下声明开启 Data Binding 即可</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">    dataBinding&#123;</span><br><span class=\"line\">      enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><h3 id=\"编写-View\"><a href=\"#编写-View\" class=\"headerlink\" title=\"编写 View\"></a>编写 View</h3><p>数据绑定需要在 xml 中声明各种关系，也可以写一些简单的运算。声明一个 data Binding Layout 只需要在原来的 layout xml 文件基础加一个标签即可:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">//...rootView</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样在编译时，修改后即可搜索到布局生成的对应的*Binding 类。生成的规则默认是通过 xml 的文件名生成，例如<code>activity_main.xml</code>就会对应生成为<code>ActivityMainBinding.java</code>的文件。当然我们也可以指定自定生成的文件名称，需要在<code>layout</code>标签下加入<code>data</code>标签并指定<code>class</code>属性即可(生成 LoginBinding.java)，除此之外<code>data</code>也是我们声明变量的地方，稍后再详细介绍。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来编写一个简单的登录界面:</p>\n<p>先使用<code>variable</code>绑定我们所需要的对象。<code>type</code>为该对象的地址,<code>name</code>则随意命名。这里我们声明了一个<code>Action</code>和<code>Presenter</code>,<code>Action</code>用于绑定数据，<code>Presenter</code>则用来绑定一些事件和做逻辑处理。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;presenter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.example.qhfax.databindingexample.presenter.MainPresenter&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;action&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.example.qhfax.databindingexample.bean.Action&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  //...rootView</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明好对象后，我们就开始将对象绑定到数据源上。在 Data Binding 中，我们绑定数据需要使用<code>@&#123;code&#125;</code>书写，向插件声明这是一个表达式。这里我们将<code>name</code>属性绑定到<code>TextView</code>的<code>setText</code>上。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;63dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">&quot;60dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;action.name&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后在 Activity 中我们需要使用<code>DataBindingUtil</code>获取<code>ActivityMainDataBinding</code>的实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityMainDataBinding mMainBind=DataBindingUtil.setContentView(<span class=\"built_in\">this</span>,R.layout.activity_main);</span><br></pre></td></tr></table></figure>\n\n<p>然后去绑定对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Action</span> <span class=\"variable\">action</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Action</span>();</span><br><span class=\"line\">action.setName(<span class=\"string\">&quot;用户名：&quot;</span>);</span><br><span class=\"line\">mMainBind.setAction(action)</span><br><span class=\"line\">mMainBind.setPersenter(persenter);</span><br></pre></td></tr></table></figure>\n\n<p>运行后就可以发现<code>TextView</code>就直接被赋值啦。</p>\n<h3 id=\"绑定的原理\"><a href=\"#绑定的原理\" class=\"headerlink\" title=\"绑定的原理\"></a>绑定的原理</h3><p>嗯….我们可以先观察一下目前的流程是怎么走下来的；</p>\n<ol>\n<li><p>在<code>xml</code>文件中绑定控件，然后插件会根据<code>layout</code>生成对应的实体类。通过 DataBindingUtli 来构建对应的 Bind 实例，查看 DataBindingUtil 的代码会发现的工作实现十分简单，将属性和 view 集合传递给我们的 DataBinding:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找到布局ViewGruop</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewDataBinding</span>&gt; T <span class=\"title function_\">setContentView</span><span class=\"params\">(Activity activity, <span class=\"type\">int</span> layoutId,</span></span><br><span class=\"line\"><span class=\"params\">            DataBindingComponent bindingComponent)</span> &#123;</span><br><span class=\"line\">        activity.setContentView(layoutId);</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">decorView</span> <span class=\"operator\">=</span> activity.getWindow().getDecorView();</span><br><span class=\"line\">        <span class=\"type\">ViewGroup</span> <span class=\"variable\">contentView</span> <span class=\"operator\">=</span> (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindToAddedViews(bindingComponent, contentView, <span class=\"number\">0</span>, layoutId);</span><br><span class=\"line\"><span class=\"comment\">//遍历所有的View然后调用ViewDataBinding.Bind方法将数据传给我们的实体类`ActivityMainDataBinding`</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewDataBinding</span>&gt; T <span class=\"title function_\">bindToAddedViews</span><span class=\"params\">(DataBindingComponent \t\t\tcomponent, ViewGroup parent, <span class=\"type\">int</span> startChildren, <span class=\"type\">int</span> layoutId)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">endChildren</span> <span class=\"operator\">=</span> parent.getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">childrenAdded</span> <span class=\"operator\">=</span> endChildren - startChildren;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childrenAdded == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">childView</span> <span class=\"operator\">=</span> parent.getChildAt(endChildren - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(component, childView, layoutId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View[] children = <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>[childrenAdded];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class=\"line\">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(component, children, layoutId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>通过 Bind 实例绑定数据源，关联控件发生改变。那么数据绑定与刷新又是如何发生的呢？在源码中我们可以发现最终应该是调用了<code>ActivityMainBinding</code>的<code>executeBindings()</code>方法来执行控件刷新的，源码并不复杂。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeBindings</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dirtyFlags的作用主要是通过位运算来判断控件的数据源对象是否被绑定，这里我们就不关心具体实现。</span></span><br><span class=\"line\">       <span class=\"type\">long</span> <span class=\"variable\">dirtyFlags</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">           dirtyFlags = mDirtyFlags;</span><br><span class=\"line\">           mDirtyFlags = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  \t\tcom.example.qhfax.databindingexample.bean.<span class=\"type\">Action</span> <span class=\"variable\">action</span> <span class=\"operator\">=</span> mAction;</span><br><span class=\"line\">  \t\tjava.lang.<span class=\"type\">String</span> <span class=\"variable\">actionName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> \t\t <span class=\"keyword\">if</span> ((dirtyFlags &amp; <span class=\"number\">0x6L</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (action != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// read action.name</span></span><br><span class=\"line\">                   actionName = action.getName();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     \t  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((dirtyFlags &amp; <span class=\"number\">0x6L</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 将我们的textView传递到bindAdapter中进行赋值，由于我们没有给TextView声明ID所有名称是由插件自己生成的名称。</span></span><br><span class=\"line\">    android.databinding.adapters.TextViewBindingAdapter.setText(<span class=\"built_in\">this</span>.mboundView2, actionName);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以见看出代码十分的简洁，功能实现都在适配器中进行，这样可以保证情况再复杂代码的可阅读性和适配性也不会层级递增。<code>TextViewBindingAdapter.setText</code>方法也就是让<code>mboundView2</code>调用<code>setText</code>方法显示<code>actionName</code>的值，至于 Adapter 的整体的具体实现等到自定义 Adapter 时候我们再解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(&quot;android:text&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setText</span><span class=\"params\">(TextView view, CharSequence text)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">CharSequence</span> <span class=\"variable\">oldText</span> <span class=\"operator\">=</span> view.getText();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (text == oldText || (text == <span class=\"literal\">null</span> &amp;&amp; oldText.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//....各种约束判断</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      view.setText(text);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"真正的单向绑定\"><a href=\"#真正的单向绑定\" class=\"headerlink\" title=\"真正的单向绑定\"></a>真正的单向绑定</h3><p>如果你也在写 Example 就会发现一个问题，当<code>Action</code>绑定后，后续<code>Action</code>的改变并不会让 UI 更新即 Observable(观察者模式)并没有实现。这显然不是我们想要达到的目的。</p>\n<p><img src=\"https://pic3.zhimg.com/079482e5b8748e2e566e9e4eba82e456_b.png\"></p>\n<p>在 Data Binding 想要一个 View Model 被控件订阅就需要它继承<code>BaseObservable</code>，这样当<code>Action</code>每次改变的时候我们就通知控件数据被改变了，然后控件自己调用相关属性的方法去更新数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseObservable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"comment\">//通过在get方法上Bindable注解让BR生成对应的flag，确定如何刷新name值</span></span><br><span class=\"line\">    <span class=\"meta\">@Bindable</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      <span class=\"comment\">//当我们改变值刷新UI，notifyChange()是通知所有订阅者，即使用了actino类中任意绑定了属性都会受到刷新的命令；notifyPropertyChanged()就很明显是通过flag进行单独刷新。</span></span><br><span class=\"line\">       <span class=\"comment\">//notifyChange();</span></span><br><span class=\"line\">        notifyPropertyChanged(BR.name);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 View Model 已经有继承父类我们也可以通过对绑定的属性单独的声明 Observable。DataBinding 提供了除了基础类型外还有 ObservableParcalable 与 ObservableField 来解决大多数场景遇到的对象属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ObservableField&lt;String&gt; name =<span class=\"keyword\">new</span> <span class=\"title class_\">ObservableField</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">ObservableInt</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">ObservableInt</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//这样做的弊端是我们无法直接访问到属性值，需要通过Observable的get/set方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name.set(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name.get();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，当我们运行时候控件和数据的联系就建立起来了，更新<code>name</code>的同时 TextView 的<code>text</code>也会同时发生变化。</p>\n<p>数据源一定要写个实体类吗，那么不是需要成吨的 bean ? 我们可以通过 ObservableArrayMap 和 ObservableArrayList 来创建观察者和需要观察的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObservableArrayMap&lt;String,Object&gt; action = <span class=\"keyword\">new</span> <span class=\"title class_\">ObseravbleArryMap</span>&lt;&gt;();</span><br><span class=\"line\">action.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;just&quot;</span>);</span><br><span class=\"line\">action.put(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;gbk&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">ObservableArryList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">ObservableArryList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;first&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;second&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 xml 中我们通过 key 和 index 访问他们</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;action&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;android.databinding.ObserableMap&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">variable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ariable</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;android.databing.ObservableList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ariable</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;action[&quot;</span><span class=\"attr\">name</span>&quot;]&quot;</span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@&#123;user[1]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p>我们除了可以绑定 View 各种属性外，我们也可以在 xml 中直接绑定事件，而不用通过 View 转发。</p>\n<p>我们在 Presenter 中创建一个监听文本的方法，然后在 xml 中设置<code>onTextChanged</code>属性，方法名必须和对应的 listener 对应.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:onTextChanged</span>=<span class=\"string\">&quot;@&#123;presenter::onTextChanged&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将 Presenter 绑定在 Activity 上后，就可以接受到 EditText 的改变了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Presenter</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onTextChanged</span><span class=\"params\">(charSequence s,in start ,<span class=\"type\">int</span> before,<span class=\"type\">int</span> count)</span>&#123;</span><br><span class=\"line\">    mView.show(s.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>在 xml 中的 dataBinding 表达式支持 Java 中的大部分语法，具体如下：</p>\n<ul>\n<li>算数 <code>+-*/%</code></li>\n<li>字符串合并<code>+</code></li>\n<li>逻辑运算 <code>&amp;&amp;||</code></li>\n<li>二元<code>&amp;|^</code></li>\n<li>一元<code>+-!~</code></li>\n<li>位移<code>&gt;&gt; &gt;&gt;&gt; &gt;&gt;</code></li>\n<li>比较<code>== &gt; &lt;&gt; = &lt;=</code></li>\n<li>instanceof 操作符</li>\n<li>Grouping（）</li>\n<li>文字</li>\n<li>Cast 类型转换</li>\n<li>方法调用</li>\n<li>属性访问</li>\n<li>数组访问</li>\n<li>三目运算符<code>？：</code></li>\n</ul>\n<p>尚不支持<code>super</code>、<code>this</code>、<code>new</code>、以及显示的泛型调用。</p>\n<p>同时由于在表达式在字符串中声明的，一些特殊字符的转义也是不可避免的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">结果</th>\n<th align=\"center\">转义字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">空格</td>\n<td align=\"center\"><code>&amp;nbsp;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"><code>&amp;t;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\"><code>&amp;amp;</code></td>\n</tr>\n<tr>\n<td align=\"center\">“</td>\n<td align=\"center\"><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&#96;</td>\n<td align=\"center\"><code>&amp;apos;</code></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\"><code>&amp;divide</code></td>\n</tr>\n</tbody></table>\n<p>除此 java 的这些语法支持外还有一些特殊的支持。</p>\n<ul>\n<li><p>空合并运算符——使用<code>??</code>来连接两个式子，如果左边的式子为空就取右边的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=&quot;@&#123;user.name??user.realName&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接访问资源文件——可以通过&#96;@resource&#x2F;name 的形式访问资源文件来直接使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=&quot;@&#123;@String/name(name)&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>我的名字是%s<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h3><p>在使用 include 布局时候需要将该布局使用的数据通过<code>bind:xxx=@&#123;&#125;</code>传递进去，并在布局中进行二次绑定。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;@layout/empty&quot;</span> <span class=\"attr\">bind:info</span>=<span class=\"string\">&quot;@&#123;info&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Android 艺术开发探索笔记","subtitle":"第一章","date":"2018-03-15T05:30:00.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n\n\n###activity的生命周期\n\nactivity a 启动 activity b 然后返回activity a 再返回到桌面 它们的生命周期是怎样变化的?\n\nA onCreate —> A onStart —> A onResume —> 跳转 —> A onPause —> B onCreate —> B onStart —> B onResume —> A onStop —> 返回 —> B onPsuse —>  A onRestart —>  A onStart —> A onResume —> B onStop —> B onDestroy —> 返回 —> A onPause —> A onStop —> A onDestroy\n\n### 异常情况下的生命周期分析\n\n当 Activity 被异常终止的时候系统会调用 onSaveInstanceState 方法,该方法的调用一定是在 onStop之前,而和 onPause 的调用顺讯则不是一定的;Activity 被重建后系统会把 onSaveInstanceState 方法所保存的 budle 对象存储到 onRestoreInstanceState 和 onCreate 方法,我们在这两个方法中可以开始我们的重建工作.\n\nonSaveInstanceState 和 onRestoreInstanceState 一定是在Activity被异常销毁的情况下才会被调用,且 onRestoreInstanceState 一单被调用则参数 bundle 一定不为空,而 onCreate 则不一定.\n\n### Activity 的启动模式\n\nAndroid 目前有四种启动模式 standard、singleTop、singleTask、singleInstance:\n\n1. standard: 模式每次启动 Activity 都会重新创建一个新的实例,不管这个实例是否存在.它的 onCreate  onStart onResume 都会被调用. 这种模式下,谁启动了这个 Activity, 这个 Activity 就会运行在它的那个 Activity 所在的栈.比如 activity A 启动了 Activity B 那么 B 就会进入 Activity 所在的栈中.这就解析了我们为什么通过 ApplicationContext 去启动一个 Standard 模式的Activity 会报 `Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag .is this really waht you wan?` 这是因为 Standard 模式的 Activity 会默认进入启动它的 Activity 的人物栈中,但是非 Activity 类型的 Context 并没有所谓的任务栈. 但我们使用 `FLAG_ ACTIVITY_NEW_TASK` 这个标记启动 Activity 解决问题时候,其实它是把 Activity 换为 singleTask 启动的.\n2. singleTop :  栈顶复用模式.当要被启动的 Activity 已经存在任务栈顶,那么就不会创建一个新的实例而是调用栈顶 Activity onNewIntent() 方法.通过它我们可以获得传递数据.此时栈顶 Activity 的 onCreate 不会再被调用;当要启动的 Activity 不存在或者不在任务栈顶那么它就会想 Standard 模式一样重新创建一个实例.\n3. singleTask: 栈内复用模式.一个 singleTask 模式的 Activity A 被启动时,系统会先寻找是否有 A 想要的任务栈,如果不存在就重新创建一个任务栈,然后创建的 A 实例后把 A 放到栈中.如果存在 A 想要的栈,则要先判断 A 实例是否存在.如果存在则将 A 移动到栈顶并回调到 A 的 onNewIntent 方法,如果不存在则创建 A 的实例并将它压入栈内.举例:\n   - 如果目前任务栈 S1 内有三个 Activity ABC. .通过 C 启动一个 singleTask 模式的 Activity D,它的目标栈是 S2 .则系统会新建 S2 栈然后创建 Activity D 的实例压入 S2 栈内\n   - 如果目前任务栈中有 ADBC 四个Activity,现在再次启动 Activity D 它的启动模式为 singleTask。那么系统就会将 D 移动到栈顶并回调它的 onNewIntent 方法.且由于 SingleTask 默认具欧 clearTop 的效果,会导致 D 上面的所有 Activity 出栈,最后栈内的情况就为 AD。\n4. singleInstance 单实例模式 . 这是一种加强的 singleTask 模式.具有此种模式的 activity 智能单独存于一个栈中.系统会为它创建一个单独栈.由于栈内复用的特性,后续的请求均不会创建新的Activity,除非这个栈被系统销毁了.\n\n### Activity的任务栈\n\nAndroid 的任务栈(Task),它是一个栈结构,具有后进先出的特性,用于存放我们的 Activity 组件.\n\n- Android 系统通过 task 管理每个 Activity ,并决定哪个 Activity 与用户交互,只有栈顶的 Activity 才可以和用户交互.  \n- 需要注意的是,一个 App 中可能不止一个任务栈.一个 task 的Activity 可以来自不同的 App.\n- 除了之前说的启动模式可以影响 Activity 和 task 的运行状态之外,还可以通过 manifests 理定制属性 和 Intent 的 Flags 来影响.\n- 任务栈分为前台任务栈和后台任务栈,后台任务栈中的 Activity 位于暂停状态,用户可以通过切换将后台任务再次调到前台\n\n#### Task 相关属性\n\n每一个 Activity 都有一个参数 `taskAffinity` 标示了这个Activity 启动所需要任务栈的名称,默认情况下所有 Activity 所需要的任务栈的名称都是该应用的包名我们可以通过 `taskAffinity` 属性来指定启动 Activity 所需要的任务栈. `taskAffinity` 特点如下:\n\n- taskAffinity 属性的值不能和当前应用的包名相同,非则无效.\n\n- taskAfinity 的命名规范和应用包名类似必须要使用`.`来间隔\n\n- taskAfinity 主要结合 singleTask 或者 allTaskReparenting使用,其他情况没有什么意义\n\n**和 singleTask 结合使用**.启动 Activity 时候系统将它运行在名字和 TaskAffinity 相同的任务栈中 应用场景:\n\n>假如现在有这么一个需求,我们的客户端app正处于后台运行，此时我们因为某些需要，让微信调用自己客户端app的某个页面，用户完成相关操作后，我们不做任何处理，按下回退或者当前Activity.finish()，页面都会停留在自己的客户端（此时我们的app回退栈不为空），这显然不符合逻辑的，用户体验也是相当出问题的。我们要求是，回退必须回到微信客户端,而且要保证不杀死自己的app.这时候我们的处理方案就是，设置当前被调起Activity的属性为：`LaunchMode=\"\"SingleTask\"taskAffinity=\"com.tencent.mm\"` 其中com.tencent.mm是借助于工具找到的微信包名，就是把自己的Activity放到微信默认的Task栈里面，这样回退时就会遵循“Task只要有Activity一定从本Task剩余Activity回退”的原则，不会回到自己的客户端；而且也不会影响自己客户端本来的Activity和Task逻辑。\n\n**和 allowTaskReparenting 结合使用**; allowTaskReparenting 主要作用是应用的迁移,即从一个 task 迁移到另一个 task.当一个应用 A 启动了应用 B 某个 Activity 后,如果这个这个 Activity 的 allowTaskReparenting 属性为“true ”的话. 那么当应用 B 被切换到前台启动的时候这个 Activity 就会从应用 A 的任务栈转移到应用B的任务栈中.应用场景\n\n> 一个e-mail应用消息包含一个网页链接，点击这个链接将出发一个activity来显示这个页面，虽然这个activity是浏览器应用定义的，但是activity由于e-mail应用程序加载的，所以在这个时候该activity也属于e-mail这个task。如果e-mail应用切换到后台，浏览器在下次打开时由于allowTaskReparenting值为true，此时浏览器就会显示该activity而不显示浏览器主界面，同时actvity也将从e-mail的任务栈迁移到浏览器的任务栈，下次打开e-买了时并不会再显示该activity \n\n#### Activity 的 Flags\n\nActivity的标记位功能有很多,有的可以影响 Activity 的运行状态,有得可以指定启动模式.大部分情况下我们不需要为 Activity 指定标记位.列举一些常用的标记位.\n\n#### FLAG_ACTIVITY_NEW_TASK\n\n这个标记的作用是为 Activity 指定 singleTask 启动模式\n\n#### FLAG_ACTIVITY_SINGLE_TOP\n\n这个标记的作用是为 Activity 指定 singleTop 启动模式\n\n#### FLAG_ACTIVITY_CLEAR_TOP\n\n具有此标记位的 Activity ,当它启动时候.如果它已经在栈内存在,它为singleTask 模式时候位于它上面的所有Activity 都会出栈,如果它为 standard 模式启动,那么它连同它之上的所有Activity都会出栈,系统会创建新的 Activity 压入栈.\n\n#### FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\n\n这个标记的 Activity 不会出现在历史 Activity 的列表中,它等同与 Activity 的 `android:excludeFromRecents=true`的属性\n\n#### intentFilter 的匹配规则\n\n当Intent不明确指用调用组件,采用隐式调用时,需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息,如果不匹配将无法启动目标 Activity. Intent 中的过滤信息有 Action 、category、data。为了匹配过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category和 data 可以有多个。同一类别的信息共同约束当前类别的匹配过程。只有一个Intent 同时匹配所有类别，才能成功启动目标 Activity。一个 Activity 中可以有多个 intent-filter，一个 Intent 只要能匹配任何一组 Intent-filter 即可成功启动对应的 Activity。各标签过滤规则：\n\n- **action** action 的匹配规则是 Intent 中的 action 必须能够和过滤规则中的 action 字符串值完全一致。一个过滤规则中可以有多个 action，那么只要 Intent 中的 action 能够和过滤规则中的任何一个 action 相同即可匹配成功。\n- **category** category 的匹配规则是如果 Intent 中含有 category ，那么所有的 category 都必须和过滤规则中的其中的一个 category 相同。和 action 不同的是如果 Intent 中没有 ccategory 这个Intent仍然可以匹配成功，但是一旦有就必须全部匹配。\n- **data** data 的数据格式比较复杂，自行了解。data 的匹配规则也和 action 类似，它也要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data \n\n我们试图通过 Intent 去启动一个 Activity 的时候可以通过 PakcageManager 或者 Intent 的resolveActivity 方法来查找是否有匹配的 Activity。另外PackageManger 还提供了 queryIntentActivities 方法。\n\n","source":"_posts/2018-03-15-andorid_exploration_book_read_01.md","raw":"---\nlayout: post\ntitle: \"Android 艺术开发探索笔记\"\nsubtitle: \"第一章\"\ndate: 2018-03-15 13:30:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n  - Note\n---\n\n\n\n###activity的生命周期\n\nactivity a 启动 activity b 然后返回activity a 再返回到桌面 它们的生命周期是怎样变化的?\n\nA onCreate —> A onStart —> A onResume —> 跳转 —> A onPause —> B onCreate —> B onStart —> B onResume —> A onStop —> 返回 —> B onPsuse —>  A onRestart —>  A onStart —> A onResume —> B onStop —> B onDestroy —> 返回 —> A onPause —> A onStop —> A onDestroy\n\n### 异常情况下的生命周期分析\n\n当 Activity 被异常终止的时候系统会调用 onSaveInstanceState 方法,该方法的调用一定是在 onStop之前,而和 onPause 的调用顺讯则不是一定的;Activity 被重建后系统会把 onSaveInstanceState 方法所保存的 budle 对象存储到 onRestoreInstanceState 和 onCreate 方法,我们在这两个方法中可以开始我们的重建工作.\n\nonSaveInstanceState 和 onRestoreInstanceState 一定是在Activity被异常销毁的情况下才会被调用,且 onRestoreInstanceState 一单被调用则参数 bundle 一定不为空,而 onCreate 则不一定.\n\n### Activity 的启动模式\n\nAndroid 目前有四种启动模式 standard、singleTop、singleTask、singleInstance:\n\n1. standard: 模式每次启动 Activity 都会重新创建一个新的实例,不管这个实例是否存在.它的 onCreate  onStart onResume 都会被调用. 这种模式下,谁启动了这个 Activity, 这个 Activity 就会运行在它的那个 Activity 所在的栈.比如 activity A 启动了 Activity B 那么 B 就会进入 Activity 所在的栈中.这就解析了我们为什么通过 ApplicationContext 去启动一个 Standard 模式的Activity 会报 `Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag .is this really waht you wan?` 这是因为 Standard 模式的 Activity 会默认进入启动它的 Activity 的人物栈中,但是非 Activity 类型的 Context 并没有所谓的任务栈. 但我们使用 `FLAG_ ACTIVITY_NEW_TASK` 这个标记启动 Activity 解决问题时候,其实它是把 Activity 换为 singleTask 启动的.\n2. singleTop :  栈顶复用模式.当要被启动的 Activity 已经存在任务栈顶,那么就不会创建一个新的实例而是调用栈顶 Activity onNewIntent() 方法.通过它我们可以获得传递数据.此时栈顶 Activity 的 onCreate 不会再被调用;当要启动的 Activity 不存在或者不在任务栈顶那么它就会想 Standard 模式一样重新创建一个实例.\n3. singleTask: 栈内复用模式.一个 singleTask 模式的 Activity A 被启动时,系统会先寻找是否有 A 想要的任务栈,如果不存在就重新创建一个任务栈,然后创建的 A 实例后把 A 放到栈中.如果存在 A 想要的栈,则要先判断 A 实例是否存在.如果存在则将 A 移动到栈顶并回调到 A 的 onNewIntent 方法,如果不存在则创建 A 的实例并将它压入栈内.举例:\n   - 如果目前任务栈 S1 内有三个 Activity ABC. .通过 C 启动一个 singleTask 模式的 Activity D,它的目标栈是 S2 .则系统会新建 S2 栈然后创建 Activity D 的实例压入 S2 栈内\n   - 如果目前任务栈中有 ADBC 四个Activity,现在再次启动 Activity D 它的启动模式为 singleTask。那么系统就会将 D 移动到栈顶并回调它的 onNewIntent 方法.且由于 SingleTask 默认具欧 clearTop 的效果,会导致 D 上面的所有 Activity 出栈,最后栈内的情况就为 AD。\n4. singleInstance 单实例模式 . 这是一种加强的 singleTask 模式.具有此种模式的 activity 智能单独存于一个栈中.系统会为它创建一个单独栈.由于栈内复用的特性,后续的请求均不会创建新的Activity,除非这个栈被系统销毁了.\n\n### Activity的任务栈\n\nAndroid 的任务栈(Task),它是一个栈结构,具有后进先出的特性,用于存放我们的 Activity 组件.\n\n- Android 系统通过 task 管理每个 Activity ,并决定哪个 Activity 与用户交互,只有栈顶的 Activity 才可以和用户交互.  \n- 需要注意的是,一个 App 中可能不止一个任务栈.一个 task 的Activity 可以来自不同的 App.\n- 除了之前说的启动模式可以影响 Activity 和 task 的运行状态之外,还可以通过 manifests 理定制属性 和 Intent 的 Flags 来影响.\n- 任务栈分为前台任务栈和后台任务栈,后台任务栈中的 Activity 位于暂停状态,用户可以通过切换将后台任务再次调到前台\n\n#### Task 相关属性\n\n每一个 Activity 都有一个参数 `taskAffinity` 标示了这个Activity 启动所需要任务栈的名称,默认情况下所有 Activity 所需要的任务栈的名称都是该应用的包名我们可以通过 `taskAffinity` 属性来指定启动 Activity 所需要的任务栈. `taskAffinity` 特点如下:\n\n- taskAffinity 属性的值不能和当前应用的包名相同,非则无效.\n\n- taskAfinity 的命名规范和应用包名类似必须要使用`.`来间隔\n\n- taskAfinity 主要结合 singleTask 或者 allTaskReparenting使用,其他情况没有什么意义\n\n**和 singleTask 结合使用**.启动 Activity 时候系统将它运行在名字和 TaskAffinity 相同的任务栈中 应用场景:\n\n>假如现在有这么一个需求,我们的客户端app正处于后台运行，此时我们因为某些需要，让微信调用自己客户端app的某个页面，用户完成相关操作后，我们不做任何处理，按下回退或者当前Activity.finish()，页面都会停留在自己的客户端（此时我们的app回退栈不为空），这显然不符合逻辑的，用户体验也是相当出问题的。我们要求是，回退必须回到微信客户端,而且要保证不杀死自己的app.这时候我们的处理方案就是，设置当前被调起Activity的属性为：`LaunchMode=\"\"SingleTask\"taskAffinity=\"com.tencent.mm\"` 其中com.tencent.mm是借助于工具找到的微信包名，就是把自己的Activity放到微信默认的Task栈里面，这样回退时就会遵循“Task只要有Activity一定从本Task剩余Activity回退”的原则，不会回到自己的客户端；而且也不会影响自己客户端本来的Activity和Task逻辑。\n\n**和 allowTaskReparenting 结合使用**; allowTaskReparenting 主要作用是应用的迁移,即从一个 task 迁移到另一个 task.当一个应用 A 启动了应用 B 某个 Activity 后,如果这个这个 Activity 的 allowTaskReparenting 属性为“true ”的话. 那么当应用 B 被切换到前台启动的时候这个 Activity 就会从应用 A 的任务栈转移到应用B的任务栈中.应用场景\n\n> 一个e-mail应用消息包含一个网页链接，点击这个链接将出发一个activity来显示这个页面，虽然这个activity是浏览器应用定义的，但是activity由于e-mail应用程序加载的，所以在这个时候该activity也属于e-mail这个task。如果e-mail应用切换到后台，浏览器在下次打开时由于allowTaskReparenting值为true，此时浏览器就会显示该activity而不显示浏览器主界面，同时actvity也将从e-mail的任务栈迁移到浏览器的任务栈，下次打开e-买了时并不会再显示该activity \n\n#### Activity 的 Flags\n\nActivity的标记位功能有很多,有的可以影响 Activity 的运行状态,有得可以指定启动模式.大部分情况下我们不需要为 Activity 指定标记位.列举一些常用的标记位.\n\n#### FLAG_ACTIVITY_NEW_TASK\n\n这个标记的作用是为 Activity 指定 singleTask 启动模式\n\n#### FLAG_ACTIVITY_SINGLE_TOP\n\n这个标记的作用是为 Activity 指定 singleTop 启动模式\n\n#### FLAG_ACTIVITY_CLEAR_TOP\n\n具有此标记位的 Activity ,当它启动时候.如果它已经在栈内存在,它为singleTask 模式时候位于它上面的所有Activity 都会出栈,如果它为 standard 模式启动,那么它连同它之上的所有Activity都会出栈,系统会创建新的 Activity 压入栈.\n\n#### FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\n\n这个标记的 Activity 不会出现在历史 Activity 的列表中,它等同与 Activity 的 `android:excludeFromRecents=true`的属性\n\n#### intentFilter 的匹配规则\n\n当Intent不明确指用调用组件,采用隐式调用时,需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息,如果不匹配将无法启动目标 Activity. Intent 中的过滤信息有 Action 、category、data。为了匹配过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category和 data 可以有多个。同一类别的信息共同约束当前类别的匹配过程。只有一个Intent 同时匹配所有类别，才能成功启动目标 Activity。一个 Activity 中可以有多个 intent-filter，一个 Intent 只要能匹配任何一组 Intent-filter 即可成功启动对应的 Activity。各标签过滤规则：\n\n- **action** action 的匹配规则是 Intent 中的 action 必须能够和过滤规则中的 action 字符串值完全一致。一个过滤规则中可以有多个 action，那么只要 Intent 中的 action 能够和过滤规则中的任何一个 action 相同即可匹配成功。\n- **category** category 的匹配规则是如果 Intent 中含有 category ，那么所有的 category 都必须和过滤规则中的其中的一个 category 相同。和 action 不同的是如果 Intent 中没有 ccategory 这个Intent仍然可以匹配成功，但是一旦有就必须全部匹配。\n- **data** data 的数据格式比较复杂，自行了解。data 的匹配规则也和 action 类似，它也要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data \n\n我们试图通过 Intent 去启动一个 Activity 的时候可以通过 PakcageManager 或者 Intent 的resolveActivity 方法来查找是否有匹配的 Activity。另外PackageManger 还提供了 queryIntentActivities 方法。\n\n","slug":"2018-03-15-andorid_exploration_book_read_01","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p3000gs2y49ztm9amk","content":"<p>###activity的生命周期</p>\n<p>activity a 启动 activity b 然后返回activity a 再返回到桌面 它们的生命周期是怎样变化的?</p>\n<p>A onCreate —&gt; A onStart —&gt; A onResume —&gt; 跳转 —&gt; A onPause —&gt; B onCreate —&gt; B onStart —&gt; B onResume —&gt; A onStop —&gt; 返回 —&gt; B onPsuse —&gt;  A onRestart —&gt;  A onStart —&gt; A onResume —&gt; B onStop —&gt; B onDestroy —&gt; 返回 —&gt; A onPause —&gt; A onStop —&gt; A onDestroy</p>\n<h3 id=\"异常情况下的生命周期分析\"><a href=\"#异常情况下的生命周期分析\" class=\"headerlink\" title=\"异常情况下的生命周期分析\"></a>异常情况下的生命周期分析</h3><p>当 Activity 被异常终止的时候系统会调用 onSaveInstanceState 方法,该方法的调用一定是在 onStop之前,而和 onPause 的调用顺讯则不是一定的;Activity 被重建后系统会把 onSaveInstanceState 方法所保存的 budle 对象存储到 onRestoreInstanceState 和 onCreate 方法,我们在这两个方法中可以开始我们的重建工作.</p>\n<p>onSaveInstanceState 和 onRestoreInstanceState 一定是在Activity被异常销毁的情况下才会被调用,且 onRestoreInstanceState 一单被调用则参数 bundle 一定不为空,而 onCreate 则不一定.</p>\n<h3 id=\"Activity-的启动模式\"><a href=\"#Activity-的启动模式\" class=\"headerlink\" title=\"Activity 的启动模式\"></a>Activity 的启动模式</h3><p>Android 目前有四种启动模式 standard、singleTop、singleTask、singleInstance:</p>\n<ol>\n<li>standard: 模式每次启动 Activity 都会重新创建一个新的实例,不管这个实例是否存在.它的 onCreate  onStart onResume 都会被调用. 这种模式下,谁启动了这个 Activity, 这个 Activity 就会运行在它的那个 Activity 所在的栈.比如 activity A 启动了 Activity B 那么 B 就会进入 Activity 所在的栈中.这就解析了我们为什么通过 ApplicationContext 去启动一个 Standard 模式的Activity 会报 <code>Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag .is this really waht you wan?</code> 这是因为 Standard 模式的 Activity 会默认进入启动它的 Activity 的人物栈中,但是非 Activity 类型的 Context 并没有所谓的任务栈. 但我们使用 <code>FLAG_ ACTIVITY_NEW_TASK</code> 这个标记启动 Activity 解决问题时候,其实它是把 Activity 换为 singleTask 启动的.</li>\n<li>singleTop :  栈顶复用模式.当要被启动的 Activity 已经存在任务栈顶,那么就不会创建一个新的实例而是调用栈顶 Activity onNewIntent() 方法.通过它我们可以获得传递数据.此时栈顶 Activity 的 onCreate 不会再被调用;当要启动的 Activity 不存在或者不在任务栈顶那么它就会想 Standard 模式一样重新创建一个实例.</li>\n<li>singleTask: 栈内复用模式.一个 singleTask 模式的 Activity A 被启动时,系统会先寻找是否有 A 想要的任务栈,如果不存在就重新创建一个任务栈,然后创建的 A 实例后把 A 放到栈中.如果存在 A 想要的栈,则要先判断 A 实例是否存在.如果存在则将 A 移动到栈顶并回调到 A 的 onNewIntent 方法,如果不存在则创建 A 的实例并将它压入栈内.举例:<ul>\n<li>如果目前任务栈 S1 内有三个 Activity ABC. .通过 C 启动一个 singleTask 模式的 Activity D,它的目标栈是 S2 .则系统会新建 S2 栈然后创建 Activity D 的实例压入 S2 栈内</li>\n<li>如果目前任务栈中有 ADBC 四个Activity,现在再次启动 Activity D 它的启动模式为 singleTask。那么系统就会将 D 移动到栈顶并回调它的 onNewIntent 方法.且由于 SingleTask 默认具欧 clearTop 的效果,会导致 D 上面的所有 Activity 出栈,最后栈内的情况就为 AD。</li>\n</ul>\n</li>\n<li>singleInstance 单实例模式 . 这是一种加强的 singleTask 模式.具有此种模式的 activity 智能单独存于一个栈中.系统会为它创建一个单独栈.由于栈内复用的特性,后续的请求均不会创建新的Activity,除非这个栈被系统销毁了.</li>\n</ol>\n<h3 id=\"Activity的任务栈\"><a href=\"#Activity的任务栈\" class=\"headerlink\" title=\"Activity的任务栈\"></a>Activity的任务栈</h3><p>Android 的任务栈(Task),它是一个栈结构,具有后进先出的特性,用于存放我们的 Activity 组件.</p>\n<ul>\n<li>Android 系统通过 task 管理每个 Activity ,并决定哪个 Activity 与用户交互,只有栈顶的 Activity 才可以和用户交互.  </li>\n<li>需要注意的是,一个 App 中可能不止一个任务栈.一个 task 的Activity 可以来自不同的 App.</li>\n<li>除了之前说的启动模式可以影响 Activity 和 task 的运行状态之外,还可以通过 manifests 理定制属性 和 Intent 的 Flags 来影响.</li>\n<li>任务栈分为前台任务栈和后台任务栈,后台任务栈中的 Activity 位于暂停状态,用户可以通过切换将后台任务再次调到前台</li>\n</ul>\n<h4 id=\"Task-相关属性\"><a href=\"#Task-相关属性\" class=\"headerlink\" title=\"Task 相关属性\"></a>Task 相关属性</h4><p>每一个 Activity 都有一个参数 <code>taskAffinity</code> 标示了这个Activity 启动所需要任务栈的名称,默认情况下所有 Activity 所需要的任务栈的名称都是该应用的包名我们可以通过 <code>taskAffinity</code> 属性来指定启动 Activity 所需要的任务栈. <code>taskAffinity</code> 特点如下:</p>\n<ul>\n<li><p>taskAffinity 属性的值不能和当前应用的包名相同,非则无效.</p>\n</li>\n<li><p>taskAfinity 的命名规范和应用包名类似必须要使用<code>.</code>来间隔</p>\n</li>\n<li><p>taskAfinity 主要结合 singleTask 或者 allTaskReparenting使用,其他情况没有什么意义</p>\n</li>\n</ul>\n<p><strong>和 singleTask 结合使用</strong>.启动 Activity 时候系统将它运行在名字和 TaskAffinity 相同的任务栈中 应用场景:</p>\n<blockquote>\n<p>假如现在有这么一个需求,我们的客户端app正处于后台运行，此时我们因为某些需要，让微信调用自己客户端app的某个页面，用户完成相关操作后，我们不做任何处理，按下回退或者当前Activity.finish()，页面都会停留在自己的客户端（此时我们的app回退栈不为空），这显然不符合逻辑的，用户体验也是相当出问题的。我们要求是，回退必须回到微信客户端,而且要保证不杀死自己的app.这时候我们的处理方案就是，设置当前被调起Activity的属性为：<code>LaunchMode=&quot;&quot;SingleTask&quot;taskAffinity=&quot;com.tencent.mm&quot;</code> 其中com.tencent.mm是借助于工具找到的微信包名，就是把自己的Activity放到微信默认的Task栈里面，这样回退时就会遵循“Task只要有Activity一定从本Task剩余Activity回退”的原则，不会回到自己的客户端；而且也不会影响自己客户端本来的Activity和Task逻辑。</p>\n</blockquote>\n<p><strong>和 allowTaskReparenting 结合使用</strong>; allowTaskReparenting 主要作用是应用的迁移,即从一个 task 迁移到另一个 task.当一个应用 A 启动了应用 B 某个 Activity 后,如果这个这个 Activity 的 allowTaskReparenting 属性为“true ”的话. 那么当应用 B 被切换到前台启动的时候这个 Activity 就会从应用 A 的任务栈转移到应用B的任务栈中.应用场景</p>\n<blockquote>\n<p>一个e-mail应用消息包含一个网页链接，点击这个链接将出发一个activity来显示这个页面，虽然这个activity是浏览器应用定义的，但是activity由于e-mail应用程序加载的，所以在这个时候该activity也属于e-mail这个task。如果e-mail应用切换到后台，浏览器在下次打开时由于allowTaskReparenting值为true，此时浏览器就会显示该activity而不显示浏览器主界面，同时actvity也将从e-mail的任务栈迁移到浏览器的任务栈，下次打开e-买了时并不会再显示该activity </p>\n</blockquote>\n<h4 id=\"Activity-的-Flags\"><a href=\"#Activity-的-Flags\" class=\"headerlink\" title=\"Activity 的 Flags\"></a>Activity 的 Flags</h4><p>Activity的标记位功能有很多,有的可以影响 Activity 的运行状态,有得可以指定启动模式.大部分情况下我们不需要为 Activity 指定标记位.列举一些常用的标记位.</p>\n<h4 id=\"FLAG-ACTIVITY-NEW-TASK\"><a href=\"#FLAG-ACTIVITY-NEW-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_NEW_TASK\"></a>FLAG_ACTIVITY_NEW_TASK</h4><p>这个标记的作用是为 Activity 指定 singleTask 启动模式</p>\n<h4 id=\"FLAG-ACTIVITY-SINGLE-TOP\"><a href=\"#FLAG-ACTIVITY-SINGLE-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_SINGLE_TOP\"></a>FLAG_ACTIVITY_SINGLE_TOP</h4><p>这个标记的作用是为 Activity 指定 singleTop 启动模式</p>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TOP\"><a href=\"#FLAG-ACTIVITY-CLEAR-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TOP\"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>具有此标记位的 Activity ,当它启动时候.如果它已经在栈内存在,它为singleTask 模式时候位于它上面的所有Activity 都会出栈,如果它为 standard 模式启动,那么它连同它之上的所有Activity都会出栈,系统会创建新的 Activity 压入栈.</p>\n<h4 id=\"FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS\"><a href=\"#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS\" class=\"headerlink\" title=\"FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h4><p>这个标记的 Activity 不会出现在历史 Activity 的列表中,它等同与 Activity 的 <code>android:excludeFromRecents=true</code>的属性</p>\n<h4 id=\"intentFilter-的匹配规则\"><a href=\"#intentFilter-的匹配规则\" class=\"headerlink\" title=\"intentFilter 的匹配规则\"></a>intentFilter 的匹配规则</h4><p>当Intent不明确指用调用组件,采用隐式调用时,需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息,如果不匹配将无法启动目标 Activity. Intent 中的过滤信息有 Action 、category、data。为了匹配过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category和 data 可以有多个。同一类别的信息共同约束当前类别的匹配过程。只有一个Intent 同时匹配所有类别，才能成功启动目标 Activity。一个 Activity 中可以有多个 intent-filter，一个 Intent 只要能匹配任何一组 Intent-filter 即可成功启动对应的 Activity。各标签过滤规则：</p>\n<ul>\n<li><strong>action</strong> action 的匹配规则是 Intent 中的 action 必须能够和过滤规则中的 action 字符串值完全一致。一个过滤规则中可以有多个 action，那么只要 Intent 中的 action 能够和过滤规则中的任何一个 action 相同即可匹配成功。</li>\n<li><strong>category</strong> category 的匹配规则是如果 Intent 中含有 category ，那么所有的 category 都必须和过滤规则中的其中的一个 category 相同。和 action 不同的是如果 Intent 中没有 ccategory 这个Intent仍然可以匹配成功，但是一旦有就必须全部匹配。</li>\n<li><strong>data</strong> data 的数据格式比较复杂，自行了解。data 的匹配规则也和 action 类似，它也要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data</li>\n</ul>\n<p>我们试图通过 Intent 去启动一个 Activity 的时候可以通过 PakcageManager 或者 Intent 的resolveActivity 方法来查找是否有匹配的 Activity。另外PackageManger 还提供了 queryIntentActivities 方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###activity的生命周期</p>\n<p>activity a 启动 activity b 然后返回activity a 再返回到桌面 它们的生命周期是怎样变化的?</p>\n<p>A onCreate —&gt; A onStart —&gt; A onResume —&gt; 跳转 —&gt; A onPause —&gt; B onCreate —&gt; B onStart —&gt; B onResume —&gt; A onStop —&gt; 返回 —&gt; B onPsuse —&gt;  A onRestart —&gt;  A onStart —&gt; A onResume —&gt; B onStop —&gt; B onDestroy —&gt; 返回 —&gt; A onPause —&gt; A onStop —&gt; A onDestroy</p>\n<h3 id=\"异常情况下的生命周期分析\"><a href=\"#异常情况下的生命周期分析\" class=\"headerlink\" title=\"异常情况下的生命周期分析\"></a>异常情况下的生命周期分析</h3><p>当 Activity 被异常终止的时候系统会调用 onSaveInstanceState 方法,该方法的调用一定是在 onStop之前,而和 onPause 的调用顺讯则不是一定的;Activity 被重建后系统会把 onSaveInstanceState 方法所保存的 budle 对象存储到 onRestoreInstanceState 和 onCreate 方法,我们在这两个方法中可以开始我们的重建工作.</p>\n<p>onSaveInstanceState 和 onRestoreInstanceState 一定是在Activity被异常销毁的情况下才会被调用,且 onRestoreInstanceState 一单被调用则参数 bundle 一定不为空,而 onCreate 则不一定.</p>\n<h3 id=\"Activity-的启动模式\"><a href=\"#Activity-的启动模式\" class=\"headerlink\" title=\"Activity 的启动模式\"></a>Activity 的启动模式</h3><p>Android 目前有四种启动模式 standard、singleTop、singleTask、singleInstance:</p>\n<ol>\n<li>standard: 模式每次启动 Activity 都会重新创建一个新的实例,不管这个实例是否存在.它的 onCreate  onStart onResume 都会被调用. 这种模式下,谁启动了这个 Activity, 这个 Activity 就会运行在它的那个 Activity 所在的栈.比如 activity A 启动了 Activity B 那么 B 就会进入 Activity 所在的栈中.这就解析了我们为什么通过 ApplicationContext 去启动一个 Standard 模式的Activity 会报 <code>Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag .is this really waht you wan?</code> 这是因为 Standard 模式的 Activity 会默认进入启动它的 Activity 的人物栈中,但是非 Activity 类型的 Context 并没有所谓的任务栈. 但我们使用 <code>FLAG_ ACTIVITY_NEW_TASK</code> 这个标记启动 Activity 解决问题时候,其实它是把 Activity 换为 singleTask 启动的.</li>\n<li>singleTop :  栈顶复用模式.当要被启动的 Activity 已经存在任务栈顶,那么就不会创建一个新的实例而是调用栈顶 Activity onNewIntent() 方法.通过它我们可以获得传递数据.此时栈顶 Activity 的 onCreate 不会再被调用;当要启动的 Activity 不存在或者不在任务栈顶那么它就会想 Standard 模式一样重新创建一个实例.</li>\n<li>singleTask: 栈内复用模式.一个 singleTask 模式的 Activity A 被启动时,系统会先寻找是否有 A 想要的任务栈,如果不存在就重新创建一个任务栈,然后创建的 A 实例后把 A 放到栈中.如果存在 A 想要的栈,则要先判断 A 实例是否存在.如果存在则将 A 移动到栈顶并回调到 A 的 onNewIntent 方法,如果不存在则创建 A 的实例并将它压入栈内.举例:<ul>\n<li>如果目前任务栈 S1 内有三个 Activity ABC. .通过 C 启动一个 singleTask 模式的 Activity D,它的目标栈是 S2 .则系统会新建 S2 栈然后创建 Activity D 的实例压入 S2 栈内</li>\n<li>如果目前任务栈中有 ADBC 四个Activity,现在再次启动 Activity D 它的启动模式为 singleTask。那么系统就会将 D 移动到栈顶并回调它的 onNewIntent 方法.且由于 SingleTask 默认具欧 clearTop 的效果,会导致 D 上面的所有 Activity 出栈,最后栈内的情况就为 AD。</li>\n</ul>\n</li>\n<li>singleInstance 单实例模式 . 这是一种加强的 singleTask 模式.具有此种模式的 activity 智能单独存于一个栈中.系统会为它创建一个单独栈.由于栈内复用的特性,后续的请求均不会创建新的Activity,除非这个栈被系统销毁了.</li>\n</ol>\n<h3 id=\"Activity的任务栈\"><a href=\"#Activity的任务栈\" class=\"headerlink\" title=\"Activity的任务栈\"></a>Activity的任务栈</h3><p>Android 的任务栈(Task),它是一个栈结构,具有后进先出的特性,用于存放我们的 Activity 组件.</p>\n<ul>\n<li>Android 系统通过 task 管理每个 Activity ,并决定哪个 Activity 与用户交互,只有栈顶的 Activity 才可以和用户交互.  </li>\n<li>需要注意的是,一个 App 中可能不止一个任务栈.一个 task 的Activity 可以来自不同的 App.</li>\n<li>除了之前说的启动模式可以影响 Activity 和 task 的运行状态之外,还可以通过 manifests 理定制属性 和 Intent 的 Flags 来影响.</li>\n<li>任务栈分为前台任务栈和后台任务栈,后台任务栈中的 Activity 位于暂停状态,用户可以通过切换将后台任务再次调到前台</li>\n</ul>\n<h4 id=\"Task-相关属性\"><a href=\"#Task-相关属性\" class=\"headerlink\" title=\"Task 相关属性\"></a>Task 相关属性</h4><p>每一个 Activity 都有一个参数 <code>taskAffinity</code> 标示了这个Activity 启动所需要任务栈的名称,默认情况下所有 Activity 所需要的任务栈的名称都是该应用的包名我们可以通过 <code>taskAffinity</code> 属性来指定启动 Activity 所需要的任务栈. <code>taskAffinity</code> 特点如下:</p>\n<ul>\n<li><p>taskAffinity 属性的值不能和当前应用的包名相同,非则无效.</p>\n</li>\n<li><p>taskAfinity 的命名规范和应用包名类似必须要使用<code>.</code>来间隔</p>\n</li>\n<li><p>taskAfinity 主要结合 singleTask 或者 allTaskReparenting使用,其他情况没有什么意义</p>\n</li>\n</ul>\n<p><strong>和 singleTask 结合使用</strong>.启动 Activity 时候系统将它运行在名字和 TaskAffinity 相同的任务栈中 应用场景:</p>\n<blockquote>\n<p>假如现在有这么一个需求,我们的客户端app正处于后台运行，此时我们因为某些需要，让微信调用自己客户端app的某个页面，用户完成相关操作后，我们不做任何处理，按下回退或者当前Activity.finish()，页面都会停留在自己的客户端（此时我们的app回退栈不为空），这显然不符合逻辑的，用户体验也是相当出问题的。我们要求是，回退必须回到微信客户端,而且要保证不杀死自己的app.这时候我们的处理方案就是，设置当前被调起Activity的属性为：<code>LaunchMode=&quot;&quot;SingleTask&quot;taskAffinity=&quot;com.tencent.mm&quot;</code> 其中com.tencent.mm是借助于工具找到的微信包名，就是把自己的Activity放到微信默认的Task栈里面，这样回退时就会遵循“Task只要有Activity一定从本Task剩余Activity回退”的原则，不会回到自己的客户端；而且也不会影响自己客户端本来的Activity和Task逻辑。</p>\n</blockquote>\n<p><strong>和 allowTaskReparenting 结合使用</strong>; allowTaskReparenting 主要作用是应用的迁移,即从一个 task 迁移到另一个 task.当一个应用 A 启动了应用 B 某个 Activity 后,如果这个这个 Activity 的 allowTaskReparenting 属性为“true ”的话. 那么当应用 B 被切换到前台启动的时候这个 Activity 就会从应用 A 的任务栈转移到应用B的任务栈中.应用场景</p>\n<blockquote>\n<p>一个e-mail应用消息包含一个网页链接，点击这个链接将出发一个activity来显示这个页面，虽然这个activity是浏览器应用定义的，但是activity由于e-mail应用程序加载的，所以在这个时候该activity也属于e-mail这个task。如果e-mail应用切换到后台，浏览器在下次打开时由于allowTaskReparenting值为true，此时浏览器就会显示该activity而不显示浏览器主界面，同时actvity也将从e-mail的任务栈迁移到浏览器的任务栈，下次打开e-买了时并不会再显示该activity </p>\n</blockquote>\n<h4 id=\"Activity-的-Flags\"><a href=\"#Activity-的-Flags\" class=\"headerlink\" title=\"Activity 的 Flags\"></a>Activity 的 Flags</h4><p>Activity的标记位功能有很多,有的可以影响 Activity 的运行状态,有得可以指定启动模式.大部分情况下我们不需要为 Activity 指定标记位.列举一些常用的标记位.</p>\n<h4 id=\"FLAG-ACTIVITY-NEW-TASK\"><a href=\"#FLAG-ACTIVITY-NEW-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_NEW_TASK\"></a>FLAG_ACTIVITY_NEW_TASK</h4><p>这个标记的作用是为 Activity 指定 singleTask 启动模式</p>\n<h4 id=\"FLAG-ACTIVITY-SINGLE-TOP\"><a href=\"#FLAG-ACTIVITY-SINGLE-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_SINGLE_TOP\"></a>FLAG_ACTIVITY_SINGLE_TOP</h4><p>这个标记的作用是为 Activity 指定 singleTop 启动模式</p>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TOP\"><a href=\"#FLAG-ACTIVITY-CLEAR-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TOP\"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>具有此标记位的 Activity ,当它启动时候.如果它已经在栈内存在,它为singleTask 模式时候位于它上面的所有Activity 都会出栈,如果它为 standard 模式启动,那么它连同它之上的所有Activity都会出栈,系统会创建新的 Activity 压入栈.</p>\n<h4 id=\"FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS\"><a href=\"#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS\" class=\"headerlink\" title=\"FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h4><p>这个标记的 Activity 不会出现在历史 Activity 的列表中,它等同与 Activity 的 <code>android:excludeFromRecents=true</code>的属性</p>\n<h4 id=\"intentFilter-的匹配规则\"><a href=\"#intentFilter-的匹配规则\" class=\"headerlink\" title=\"intentFilter 的匹配规则\"></a>intentFilter 的匹配规则</h4><p>当Intent不明确指用调用组件,采用隐式调用时,需要 Intent 能够匹配目标组件的 IntentFilter 中所设置的过滤信息,如果不匹配将无法启动目标 Activity. Intent 中的过滤信息有 Action 、category、data。为了匹配过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category、data 信息，否则匹配失败。一个过滤列表中的 action、category和 data 可以有多个。同一类别的信息共同约束当前类别的匹配过程。只有一个Intent 同时匹配所有类别，才能成功启动目标 Activity。一个 Activity 中可以有多个 intent-filter，一个 Intent 只要能匹配任何一组 Intent-filter 即可成功启动对应的 Activity。各标签过滤规则：</p>\n<ul>\n<li><strong>action</strong> action 的匹配规则是 Intent 中的 action 必须能够和过滤规则中的 action 字符串值完全一致。一个过滤规则中可以有多个 action，那么只要 Intent 中的 action 能够和过滤规则中的任何一个 action 相同即可匹配成功。</li>\n<li><strong>category</strong> category 的匹配规则是如果 Intent 中含有 category ，那么所有的 category 都必须和过滤规则中的其中的一个 category 相同。和 action 不同的是如果 Intent 中没有 ccategory 这个Intent仍然可以匹配成功，但是一旦有就必须全部匹配。</li>\n<li><strong>data</strong> data 的数据格式比较复杂，自行了解。data 的匹配规则也和 action 类似，它也要求 Intent 中必须含有 data 数据，并且 data 数据能够完全匹配过滤规则中的某一个 data</li>\n</ul>\n<p>我们试图通过 Intent 去启动一个 Activity 的时候可以通过 PakcageManager 或者 Intent 的resolveActivity 方法来查找是否有匹配的 Activity。另外PackageManger 还提供了 queryIntentActivities 方法。</p>\n"},{"layout":"post","title":"Android View 事件体系","subtitle":"Android 艺术开发探索笔记","date":"2018-03-19T12:00:00.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n\n\n### View 的位置\n\nView 的位置由它的四个顶点来决定，分别对应于 View 的四个属性：top、left、right、bottom，其中 top 是左上角纵坐标，left 是左上角横坐标，right 是右下角横坐标，bottom 是右下角纵坐标。这些坐标都是相对于 View 的父容器来说的，因此它是一种相对坐标。它们的关系以及获取的 API 如下图。\n\n![img](\\img\\in-post\\image-20150115155321445.png)\n\n#### MotionEvent 和 TouchSlope\n\n##### MotionEvent\n\n在手指接触屏幕后触发的一系列事件，典型的如下：\n\n- ACTION_DWON 手指刚接触屏幕\n- ACTION_UP  手指离开屏幕\n- ACTION_MOVE 手指在屏幕上滑动\n\n在正常情况下，一次手指触摸的行为会触发一系列事件，例如：\n\n- 点击屏幕后手指离开，触发事件为 DOWN -> UP;\n- 点击屏幕滑动一会再离开，时间序列为 DOWN -> MOVE ->…. >MOVE -> UP \n\n\n##### TouchSlop\n\nTouchSolp 是系统能够识别出的被认为的最小滑动距离，如果手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作。这是一个常量和设备有关，在不同的设备可能是不同的，通过 `ViewConfiguration.get(context).getScaledTouchSlop()` 当我们在处理滑动事件的时候，可以利用这个常量来做一些过滤。\n\n#### VelocityTracker、GestureDetector 和 Scroller\n\n##### velocityTracker\n\n速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直的速度。它的使用过程很简单，首先，在 View 的 onTouchEvent 方法中追踪当前单击事件的速度。\n\n```java\nVelocityTracker velocityTracker = VelocityTracker.obtain();\nvelocityTracker.addMovement(envent);\n```\n\n接着，当我们先知道当前的滑动速度时，这个时候可以采用如下方式来获得当前的速度：\n\n```java\nvelocityTracker.computeCurrentVelocity(1000);\nint xVelocity = (int) velocityTracker.getXVelocity();\nint yVelocity = (int) velocityTracker.getYVelocity();\n```\n\n有两点需要注意，第一点，在获取速度之前必须要计算速度，也就是调用 `computeCurrentVelocity`方法；第二点，这里的速度指的是一段时间内手指所划过的像素数，比如将时间间隔设为1000ms 时,在 1s 内，手指在水平方向从左向右滑过 100 像素，那么水平速度就是 100 。 注意速度可以为负数，当手指从右向左时，水平方向速度即为负值。 速度的计算公式大致如下：\n\n```\n速度=（终点-起点位置）/时间\n```\n\n最后，当不需要使用它的时候，需要调用 clear 方法来充值并回收内存\n\n```java\nvelocityTracker.clear();\nvelocityTracker.recycle();\n```\n\n##### GestureDetector\n\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n\n创建一个 GestureDetector 对象并实现 OnGestureDetector 接口\n\n```java\nGestureDetector getsture = new GestureDetector(this);\n//解决长屏幕无法拖动的现象\ngesture.setIsLongpressEnable(false);\n```\n\n接着，在 onTouchEvent 中添加实现接管 View  的 onTouchEvent ：\n\n```java\nboolean consume =gesture.onTouchEnvent(ev);\nreturn consume;\n```\n\nGestureDetector 中有很多方法，我们可以有选择的实现我们所需要的，常用的有：onSingleTapUp(单击)、onFling（滑动）、onScroll（滑动）、onLongPress（长按）、和 onDoubleTap（双击）。在实际开发中，如果只是监听滑动相关的，建议自己在onTouchEvent 中实现，如果要监听双击这种行为的话，那么就使用 GestureDetector。\n\n#### Scroller\n\n弹性滑动对象，用于实现 View 的弹性滑动。我们知道，当使用 View 的 scrollTo/scrollBy方法来进行 滑动时，其过程是瞬间完成的，这个没有过度效果的滑动用户体验不好。这个时候就可以使用 Scroller 来实现过渡效果的滑动。Scroller 本身无法让 View 弹性滑动，它需要和 View 的 computeScroll 方法配合使用才能完成和功能。那么如何使用它呢，它的使用方法是固定的：\n\n```java\nScroller mScroller = new Scroller(context);\n\nprivate void smoothScrollTo(int destX,int destY){\n    int scrollX = getScrollX();\n    int delta =destX-scrollX;\n    // 1000ms 内滑向 dest，效果就是慢慢滑动\n    mScroller.startScroll(scrollX,0,delta,0,1000);\n    invalidate();\n}\n@Override\npublic void computeScroll(){\n    if(mScroller.computeScrollOffset()){\n        scrollTO(mScroller.getCurrX(),mScroller.getCurrY());\n        postInvalidate();\n    }\n}\n```\n\n### View 的滑动\n\n滑动在 Android 开发中具有很重要的作用，不管一些效果多么绚丽，归根结底，它们都是由不同的滑动外加一些特效组成。因此，掌握滑动的方法是实现绚丽的自定义控件的基础。通过三种方式可以实现 View 的滑动。\n\n#### 使用 scrollTo/scrollBy\n\n为了实现 View 的滑动 ，View 专门提供了这两种方法来实现这个功能，就是 scrollTo 和 scrollBy。\n\nscrollBy 实际也是调用 scrollTo 方法，它实现了基于当前位置的相对滑动，而 scrollTo 则实现了给予所传递参数的绝对滑动。\n\n`mScrollX`和`mScrollY`的滑动规则：\n\n> 在滑动过程中，mScrollX 的值总是等于 View 左边缘和 View 内容左边缘在水平方向的距离，而 ScrollY 的值总是等于 View 上边缘的和 View 内容上边缘的竖直方向的距离。并且当**View 左边缘在 View 内容边缘的右边边时，mScrollX 为正值，反之为负值；当 View 的上边缘在 View 内容上边缘的下方时，mScrollY 为正值，反之为负值。 ** scrollTo 和 scrollBy 只能改变 View 内容的位置而不能改变 View 在布局中的位置。\n\n可能按照文字描述感觉有点不合理或者是抽象，但是结合日常生活习惯就很容易理解了。当我们想要在手机上获取当前屏幕的更多内容时候，我们一般会向下滑动或向右滑动，这对应着我们的日常操作习惯。这时候View 的内容区域会向上偏移向左偏移，滑动的距离就是正值。\n\n#### 使用动画\n\n使用动画来让一个 View  平移，主要是操作 View 的 TranslationX 和 Translation Y 属性，既可以使用传统的View动画，也可以采用属性动画。需要注意的是 View 动画并不能真正改变 View 的位置，而是移动 View 的内容区域。\n\n#### 使用 LayoutParams\n\n也可以通过修改 View 的LayoutParms 属性来达到滑动的效果。\n\n#### 各种滑动方式的对比\n\nscrollTo/scrollBy，它可以比较方便实现滑动效果并且不影响 View 内部元素的单机事件。但它只能滑动 View 的内容，并不能滑动 View 本身。\n\n如果是使用属性动画，那么这种方式没有明显的缺点，如果是 View 动画或者是 3.0 以下使用属性动画，切动画元素还需要响应用户的交互，那就不是很适合了。\n\n改变布局这种方式，除了使用起来麻烦点以外也没有明显的缺点。\n\n实现一个简单的屏幕拖拽 View :\n\n```kotlin\n    override fun onTouchEvent(event: MotionEvent?): Boolean {\n        var x = 0\n        var y = 0\n        event?.apply {\n            x = rawX.toInt()\n            y = rawY.toInt()\n            when (action) {\n                MotionEvent.ACTION_DOWN -> {\n                }\n                MotionEvent.ACTION_MOVE -> {\n                    val deltaX = x - mLastX\n                    val deltaY = y - mLastY\n                    Log.i(TAG, \"move translationX：$deltaX ___ translationY：$deltaY\")\n                    translationX += deltaX\n                    translationY += deltaY\n                }\n                MotionEvent.ACTION_UP -> {\n                }\n            }\n        }\n        mLastX = x\n        mLastY = y\n        return super.onTouchEvent(event)\n    }\n```\n\n#### 弹性滑动\n\n如果直接操作 View 移动到指定的位置，这样生硬的滑动显示体验很差。我们可以将一次大的滑动分成若干次小的滑动并在一个时间段内完成。可以通过 Scroller、Handler等来完成。\n\n### View 事件的分发机制\n\n#### 点击事件的传递规则\n\n所谓的点击事件的分发，其实就是对 MotionEvent 事件的分发过程，当用户和屏幕发生交互产生了一个事件的时候，系统需要把这个事件传递给一个具体的 View 处理，这个传递的过程就是分发过程。分发过程由三个很重要的方法来共同完成：dispatchTouchEvent,onInterceptTouchEvent, onTouchEvent\n\n\n\n##### public boolean dipatchTouchEvent(MotionEvent ev)\n\n用来进行事件的分发。如果事件能够传递到此 View 那么此方法一定会被调用，返回结果受当前 View 的 OnTouchEvent 和下级 View 的 dipatchTouch 方法的影响，表示是否消耗当前事件。\n\n\n\n##### public boolean onInterceptTouchEvent(MotionEvent ev)\n\n在上述方法内部调用，用来判断是否拦截某个事件，如果当前 View 拦截了某个事件，那么在同一时间序列当中，此方法不不会被调用，返回结果表示是否拦截当前事件。\n\n\n\n##### public boolean onTouchEvent(MotionEvent ev)\n\n在dipatchTouchEvent 中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前 View 无法再次接受到事件。\n\n它们之间的关系可以用伪代码来表示：\n\n```java\npublic boolean dipatchTouchEvent(MotionEvent ev){\n    boolean consume =false;\n    if(onInterceptTouchEvent(ev)){\n      consume = onTouchEvent(ev);\n    }\n    else{\n      consume = child.dipatchTouchEvent(ev);\n    }\n    return consume;\n}\n```\n\n1. 同一事件序列是指，从手指在屏幕上按下开始，到手指离开屏幕的那一刻结束，这期间所产生的一些列事件，它是由一个 down 事件开始，中间含有数量不定的 Move ，最后由 up 结束。\n2. 正常情况下一个序列事件正能被一个 View 消耗且拦截。因为一旦某个 View 拦截了某次事件，那么整个事件序列都会交给它处理，也就不存在两个 View 消费事件的情况。除非 View  强行把 onTouchEvnet 所传递的事件传递给其他的 View。\n3. 某个 View 一旦被拦截，那么这一个事件序列都由它来处理，并且它的onInterceptTouchEvent 方法不会被调用。因为系统已经决定它来处理了，也就不需要再去询问了。\n4. 某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（TouchEvent返回了false） 那么同一事件序列的所有事件都不会再交给它处理，并且事件重新提交给父容器，父容器的onTouchEvent 事件会被调用。\n5. 如果 View 不消除 ACTION_DOWN以外的事件，这个点击事件会消失，父容器的onTouchEvent 也不会调用，View 也可以一直收到后续的事件，最终这些消失的事件会交给 Activity 处理。\n6. ViewGroup 默认不拦截任何事件，代码实现中 ViewGroup 的 onInterceptTouchEvent 返回为 flase.\n7. View 没有 onInterceptTouchEvent 方法，一旦有点击事件传给它，它的 onTouchEvent 方法就会被调用\n8. View 的 enable 属性不影响 onTouchEvent 的默认返回值。哪怕一个 View 是 disable 方法，只要它的click 或者 LongClickable 方法为ture ，那么它的 onTouchEvent 就返回 true。\n9. View 的 onTouchEvent 默认都是会消耗事件的，除非它是不可点击的。\n10. onClick 发生的前提是它是可点击的，能够接受到 down 和 up 事件\n11. 事件传递过程是由外向内的，即事件总是先传递向父元素，然后再由父元素分发给子 View。通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 除外。\n\n#### 事件分发的源码解析\n\n##### Activity 对点击事件的分发过程\n\n当一个时间产生的时候，事件最先传递给当前的 Activity，由 Activity 的 dispatchTouchEvent 进行事件派发，具体的工作是由 Activity 的 Windows 完成的。windows（PhoneWindow）会将事件传递给 decorView（Activity 根容器）。\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev){\n    if(ev.getAction==MotionEvent.ACTION_DOWN){\n        //空方法\n        onUserInteraction()\n    }\n    //window 是一个接口 实际的唯一实现类是 PhoneWindow ，它会调用 decorView 的 dispatchTouchEvent 方法.\n    if(getWindow().superDispatchTouchEvent(ev)){\n        return true;\n    }\n    return onTouchEvent(ev);\n}\n```\n\n##### 顶级 View 对点击事件的分发过程\n\n顶级 View 也就是 ViewGroup。经过源码分析可以看出几点：\n\n- 子 View 可以通过`requestDisallowInterceptTouchEvent`方法来影响 ViewGroup 的 `FLAG_DISALLOW_INTERCEPT` 标记，这会使得 ViewGroup 无法拦截除了 ACTION_DOWN 以外的事件。因为在ACTION_DOWN 的时候 View 会重置这个标志位。\n\n\n- 当面对 ACTION_DOWN 事件的时候，ViewGroup 总会调用自己的 onInterceptTouchEvent 来询问自己是否要拦截事件。\n- 当 ViewGroup 决定拦截事件后，那么后续的所有事件都会默认给它处理而不会调用 onInterceptTouchEvent\n\n##### View 对点击事件的处理过程\n\nView 对点击事件的处理过程简单一些。\n\n- onTouchListener 的优先级要比 onTouchEvent 高\n- View 即使处于不可用状态仍然会消耗点击事件\n\n\n\n总的来说就是验证了上面总结的 11 条结论。\n\n \n\n","source":"_posts/2018-03-19-andorid_view_event.md","raw":"---\nlayout: post\ntitle: \"Android View 事件体系\"\nsubtitle: \"Android 艺术开发探索笔记\"\ndate: 2018-03-19 20:00:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n  - Note\n---\n\n\n\n### View 的位置\n\nView 的位置由它的四个顶点来决定，分别对应于 View 的四个属性：top、left、right、bottom，其中 top 是左上角纵坐标，left 是左上角横坐标，right 是右下角横坐标，bottom 是右下角纵坐标。这些坐标都是相对于 View 的父容器来说的，因此它是一种相对坐标。它们的关系以及获取的 API 如下图。\n\n![img](\\img\\in-post\\image-20150115155321445.png)\n\n#### MotionEvent 和 TouchSlope\n\n##### MotionEvent\n\n在手指接触屏幕后触发的一系列事件，典型的如下：\n\n- ACTION_DWON 手指刚接触屏幕\n- ACTION_UP  手指离开屏幕\n- ACTION_MOVE 手指在屏幕上滑动\n\n在正常情况下，一次手指触摸的行为会触发一系列事件，例如：\n\n- 点击屏幕后手指离开，触发事件为 DOWN -> UP;\n- 点击屏幕滑动一会再离开，时间序列为 DOWN -> MOVE ->…. >MOVE -> UP \n\n\n##### TouchSlop\n\nTouchSolp 是系统能够识别出的被认为的最小滑动距离，如果手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作。这是一个常量和设备有关，在不同的设备可能是不同的，通过 `ViewConfiguration.get(context).getScaledTouchSlop()` 当我们在处理滑动事件的时候，可以利用这个常量来做一些过滤。\n\n#### VelocityTracker、GestureDetector 和 Scroller\n\n##### velocityTracker\n\n速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直的速度。它的使用过程很简单，首先，在 View 的 onTouchEvent 方法中追踪当前单击事件的速度。\n\n```java\nVelocityTracker velocityTracker = VelocityTracker.obtain();\nvelocityTracker.addMovement(envent);\n```\n\n接着，当我们先知道当前的滑动速度时，这个时候可以采用如下方式来获得当前的速度：\n\n```java\nvelocityTracker.computeCurrentVelocity(1000);\nint xVelocity = (int) velocityTracker.getXVelocity();\nint yVelocity = (int) velocityTracker.getYVelocity();\n```\n\n有两点需要注意，第一点，在获取速度之前必须要计算速度，也就是调用 `computeCurrentVelocity`方法；第二点，这里的速度指的是一段时间内手指所划过的像素数，比如将时间间隔设为1000ms 时,在 1s 内，手指在水平方向从左向右滑过 100 像素，那么水平速度就是 100 。 注意速度可以为负数，当手指从右向左时，水平方向速度即为负值。 速度的计算公式大致如下：\n\n```\n速度=（终点-起点位置）/时间\n```\n\n最后，当不需要使用它的时候，需要调用 clear 方法来充值并回收内存\n\n```java\nvelocityTracker.clear();\nvelocityTracker.recycle();\n```\n\n##### GestureDetector\n\n手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。\n\n创建一个 GestureDetector 对象并实现 OnGestureDetector 接口\n\n```java\nGestureDetector getsture = new GestureDetector(this);\n//解决长屏幕无法拖动的现象\ngesture.setIsLongpressEnable(false);\n```\n\n接着，在 onTouchEvent 中添加实现接管 View  的 onTouchEvent ：\n\n```java\nboolean consume =gesture.onTouchEnvent(ev);\nreturn consume;\n```\n\nGestureDetector 中有很多方法，我们可以有选择的实现我们所需要的，常用的有：onSingleTapUp(单击)、onFling（滑动）、onScroll（滑动）、onLongPress（长按）、和 onDoubleTap（双击）。在实际开发中，如果只是监听滑动相关的，建议自己在onTouchEvent 中实现，如果要监听双击这种行为的话，那么就使用 GestureDetector。\n\n#### Scroller\n\n弹性滑动对象，用于实现 View 的弹性滑动。我们知道，当使用 View 的 scrollTo/scrollBy方法来进行 滑动时，其过程是瞬间完成的，这个没有过度效果的滑动用户体验不好。这个时候就可以使用 Scroller 来实现过渡效果的滑动。Scroller 本身无法让 View 弹性滑动，它需要和 View 的 computeScroll 方法配合使用才能完成和功能。那么如何使用它呢，它的使用方法是固定的：\n\n```java\nScroller mScroller = new Scroller(context);\n\nprivate void smoothScrollTo(int destX,int destY){\n    int scrollX = getScrollX();\n    int delta =destX-scrollX;\n    // 1000ms 内滑向 dest，效果就是慢慢滑动\n    mScroller.startScroll(scrollX,0,delta,0,1000);\n    invalidate();\n}\n@Override\npublic void computeScroll(){\n    if(mScroller.computeScrollOffset()){\n        scrollTO(mScroller.getCurrX(),mScroller.getCurrY());\n        postInvalidate();\n    }\n}\n```\n\n### View 的滑动\n\n滑动在 Android 开发中具有很重要的作用，不管一些效果多么绚丽，归根结底，它们都是由不同的滑动外加一些特效组成。因此，掌握滑动的方法是实现绚丽的自定义控件的基础。通过三种方式可以实现 View 的滑动。\n\n#### 使用 scrollTo/scrollBy\n\n为了实现 View 的滑动 ，View 专门提供了这两种方法来实现这个功能，就是 scrollTo 和 scrollBy。\n\nscrollBy 实际也是调用 scrollTo 方法，它实现了基于当前位置的相对滑动，而 scrollTo 则实现了给予所传递参数的绝对滑动。\n\n`mScrollX`和`mScrollY`的滑动规则：\n\n> 在滑动过程中，mScrollX 的值总是等于 View 左边缘和 View 内容左边缘在水平方向的距离，而 ScrollY 的值总是等于 View 上边缘的和 View 内容上边缘的竖直方向的距离。并且当**View 左边缘在 View 内容边缘的右边边时，mScrollX 为正值，反之为负值；当 View 的上边缘在 View 内容上边缘的下方时，mScrollY 为正值，反之为负值。 ** scrollTo 和 scrollBy 只能改变 View 内容的位置而不能改变 View 在布局中的位置。\n\n可能按照文字描述感觉有点不合理或者是抽象，但是结合日常生活习惯就很容易理解了。当我们想要在手机上获取当前屏幕的更多内容时候，我们一般会向下滑动或向右滑动，这对应着我们的日常操作习惯。这时候View 的内容区域会向上偏移向左偏移，滑动的距离就是正值。\n\n#### 使用动画\n\n使用动画来让一个 View  平移，主要是操作 View 的 TranslationX 和 Translation Y 属性，既可以使用传统的View动画，也可以采用属性动画。需要注意的是 View 动画并不能真正改变 View 的位置，而是移动 View 的内容区域。\n\n#### 使用 LayoutParams\n\n也可以通过修改 View 的LayoutParms 属性来达到滑动的效果。\n\n#### 各种滑动方式的对比\n\nscrollTo/scrollBy，它可以比较方便实现滑动效果并且不影响 View 内部元素的单机事件。但它只能滑动 View 的内容，并不能滑动 View 本身。\n\n如果是使用属性动画，那么这种方式没有明显的缺点，如果是 View 动画或者是 3.0 以下使用属性动画，切动画元素还需要响应用户的交互，那就不是很适合了。\n\n改变布局这种方式，除了使用起来麻烦点以外也没有明显的缺点。\n\n实现一个简单的屏幕拖拽 View :\n\n```kotlin\n    override fun onTouchEvent(event: MotionEvent?): Boolean {\n        var x = 0\n        var y = 0\n        event?.apply {\n            x = rawX.toInt()\n            y = rawY.toInt()\n            when (action) {\n                MotionEvent.ACTION_DOWN -> {\n                }\n                MotionEvent.ACTION_MOVE -> {\n                    val deltaX = x - mLastX\n                    val deltaY = y - mLastY\n                    Log.i(TAG, \"move translationX：$deltaX ___ translationY：$deltaY\")\n                    translationX += deltaX\n                    translationY += deltaY\n                }\n                MotionEvent.ACTION_UP -> {\n                }\n            }\n        }\n        mLastX = x\n        mLastY = y\n        return super.onTouchEvent(event)\n    }\n```\n\n#### 弹性滑动\n\n如果直接操作 View 移动到指定的位置，这样生硬的滑动显示体验很差。我们可以将一次大的滑动分成若干次小的滑动并在一个时间段内完成。可以通过 Scroller、Handler等来完成。\n\n### View 事件的分发机制\n\n#### 点击事件的传递规则\n\n所谓的点击事件的分发，其实就是对 MotionEvent 事件的分发过程，当用户和屏幕发生交互产生了一个事件的时候，系统需要把这个事件传递给一个具体的 View 处理，这个传递的过程就是分发过程。分发过程由三个很重要的方法来共同完成：dispatchTouchEvent,onInterceptTouchEvent, onTouchEvent\n\n\n\n##### public boolean dipatchTouchEvent(MotionEvent ev)\n\n用来进行事件的分发。如果事件能够传递到此 View 那么此方法一定会被调用，返回结果受当前 View 的 OnTouchEvent 和下级 View 的 dipatchTouch 方法的影响，表示是否消耗当前事件。\n\n\n\n##### public boolean onInterceptTouchEvent(MotionEvent ev)\n\n在上述方法内部调用，用来判断是否拦截某个事件，如果当前 View 拦截了某个事件，那么在同一时间序列当中，此方法不不会被调用，返回结果表示是否拦截当前事件。\n\n\n\n##### public boolean onTouchEvent(MotionEvent ev)\n\n在dipatchTouchEvent 中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前 View 无法再次接受到事件。\n\n它们之间的关系可以用伪代码来表示：\n\n```java\npublic boolean dipatchTouchEvent(MotionEvent ev){\n    boolean consume =false;\n    if(onInterceptTouchEvent(ev)){\n      consume = onTouchEvent(ev);\n    }\n    else{\n      consume = child.dipatchTouchEvent(ev);\n    }\n    return consume;\n}\n```\n\n1. 同一事件序列是指，从手指在屏幕上按下开始，到手指离开屏幕的那一刻结束，这期间所产生的一些列事件，它是由一个 down 事件开始，中间含有数量不定的 Move ，最后由 up 结束。\n2. 正常情况下一个序列事件正能被一个 View 消耗且拦截。因为一旦某个 View 拦截了某次事件，那么整个事件序列都会交给它处理，也就不存在两个 View 消费事件的情况。除非 View  强行把 onTouchEvnet 所传递的事件传递给其他的 View。\n3. 某个 View 一旦被拦截，那么这一个事件序列都由它来处理，并且它的onInterceptTouchEvent 方法不会被调用。因为系统已经决定它来处理了，也就不需要再去询问了。\n4. 某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（TouchEvent返回了false） 那么同一事件序列的所有事件都不会再交给它处理，并且事件重新提交给父容器，父容器的onTouchEvent 事件会被调用。\n5. 如果 View 不消除 ACTION_DOWN以外的事件，这个点击事件会消失，父容器的onTouchEvent 也不会调用，View 也可以一直收到后续的事件，最终这些消失的事件会交给 Activity 处理。\n6. ViewGroup 默认不拦截任何事件，代码实现中 ViewGroup 的 onInterceptTouchEvent 返回为 flase.\n7. View 没有 onInterceptTouchEvent 方法，一旦有点击事件传给它，它的 onTouchEvent 方法就会被调用\n8. View 的 enable 属性不影响 onTouchEvent 的默认返回值。哪怕一个 View 是 disable 方法，只要它的click 或者 LongClickable 方法为ture ，那么它的 onTouchEvent 就返回 true。\n9. View 的 onTouchEvent 默认都是会消耗事件的，除非它是不可点击的。\n10. onClick 发生的前提是它是可点击的，能够接受到 down 和 up 事件\n11. 事件传递过程是由外向内的，即事件总是先传递向父元素，然后再由父元素分发给子 View。通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 除外。\n\n#### 事件分发的源码解析\n\n##### Activity 对点击事件的分发过程\n\n当一个时间产生的时候，事件最先传递给当前的 Activity，由 Activity 的 dispatchTouchEvent 进行事件派发，具体的工作是由 Activity 的 Windows 完成的。windows（PhoneWindow）会将事件传递给 decorView（Activity 根容器）。\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev){\n    if(ev.getAction==MotionEvent.ACTION_DOWN){\n        //空方法\n        onUserInteraction()\n    }\n    //window 是一个接口 实际的唯一实现类是 PhoneWindow ，它会调用 decorView 的 dispatchTouchEvent 方法.\n    if(getWindow().superDispatchTouchEvent(ev)){\n        return true;\n    }\n    return onTouchEvent(ev);\n}\n```\n\n##### 顶级 View 对点击事件的分发过程\n\n顶级 View 也就是 ViewGroup。经过源码分析可以看出几点：\n\n- 子 View 可以通过`requestDisallowInterceptTouchEvent`方法来影响 ViewGroup 的 `FLAG_DISALLOW_INTERCEPT` 标记，这会使得 ViewGroup 无法拦截除了 ACTION_DOWN 以外的事件。因为在ACTION_DOWN 的时候 View 会重置这个标志位。\n\n\n- 当面对 ACTION_DOWN 事件的时候，ViewGroup 总会调用自己的 onInterceptTouchEvent 来询问自己是否要拦截事件。\n- 当 ViewGroup 决定拦截事件后，那么后续的所有事件都会默认给它处理而不会调用 onInterceptTouchEvent\n\n##### View 对点击事件的处理过程\n\nView 对点击事件的处理过程简单一些。\n\n- onTouchListener 的优先级要比 onTouchEvent 高\n- View 即使处于不可用状态仍然会消耗点击事件\n\n\n\n总的来说就是验证了上面总结的 11 条结论。\n\n \n\n","slug":"2018-03-19-andorid_view_event","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p5000is2y4ao4p7fel","content":"<h3 id=\"View-的位置\"><a href=\"#View-的位置\" class=\"headerlink\" title=\"View 的位置\"></a>View 的位置</h3><p>View 的位置由它的四个顶点来决定，分别对应于 View 的四个属性：top、left、right、bottom，其中 top 是左上角纵坐标，left 是左上角横坐标，right 是右下角横坐标，bottom 是右下角纵坐标。这些坐标都是相对于 View 的父容器来说的，因此它是一种相对坐标。它们的关系以及获取的 API 如下图。</p>\n<p><img src=\"/%5Cimg%5Cin-post%5Cimage-20150115155321445.png\" alt=\"img\"></p>\n<h4 id=\"MotionEvent-和-TouchSlope\"><a href=\"#MotionEvent-和-TouchSlope\" class=\"headerlink\" title=\"MotionEvent 和 TouchSlope\"></a>MotionEvent 和 TouchSlope</h4><h5 id=\"MotionEvent\"><a href=\"#MotionEvent\" class=\"headerlink\" title=\"MotionEvent\"></a>MotionEvent</h5><p>在手指接触屏幕后触发的一系列事件，典型的如下：</p>\n<ul>\n<li>ACTION_DWON 手指刚接触屏幕</li>\n<li>ACTION_UP  手指离开屏幕</li>\n<li>ACTION_MOVE 手指在屏幕上滑动</li>\n</ul>\n<p>在正常情况下，一次手指触摸的行为会触发一系列事件，例如：</p>\n<ul>\n<li>点击屏幕后手指离开，触发事件为 DOWN -&gt; UP;</li>\n<li>点击屏幕滑动一会再离开，时间序列为 DOWN -&gt; MOVE -&gt;…. &gt;MOVE -&gt; UP</li>\n</ul>\n<h5 id=\"TouchSlop\"><a href=\"#TouchSlop\" class=\"headerlink\" title=\"TouchSlop\"></a>TouchSlop</h5><p>TouchSolp 是系统能够识别出的被认为的最小滑动距离，如果手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作。这是一个常量和设备有关，在不同的设备可能是不同的，通过 <code>ViewConfiguration.get(context).getScaledTouchSlop()</code> 当我们在处理滑动事件的时候，可以利用这个常量来做一些过滤。</p>\n<h4 id=\"VelocityTracker、GestureDetector-和-Scroller\"><a href=\"#VelocityTracker、GestureDetector-和-Scroller\" class=\"headerlink\" title=\"VelocityTracker、GestureDetector 和 Scroller\"></a>VelocityTracker、GestureDetector 和 Scroller</h4><h5 id=\"velocityTracker\"><a href=\"#velocityTracker\" class=\"headerlink\" title=\"velocityTracker\"></a>velocityTracker</h5><p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直的速度。它的使用过程很简单，首先，在 View 的 onTouchEvent 方法中追踪当前单击事件的速度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VelocityTracker</span> <span class=\"variable\">velocityTracker</span> <span class=\"operator\">=</span> VelocityTracker.obtain();</span><br><span class=\"line\">velocityTracker.addMovement(envent);</span><br></pre></td></tr></table></figure>\n\n<p>接着，当我们先知道当前的滑动速度时，这个时候可以采用如下方式来获得当前的速度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">xVelocity</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) velocityTracker.getXVelocity();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">yVelocity</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) velocityTracker.getYVelocity();</span><br></pre></td></tr></table></figure>\n\n<p>有两点需要注意，第一点，在获取速度之前必须要计算速度，也就是调用 <code>computeCurrentVelocity</code>方法；第二点，这里的速度指的是一段时间内手指所划过的像素数，比如将时间间隔设为1000ms 时,在 1s 内，手指在水平方向从左向右滑过 100 像素，那么水平速度就是 100 。 注意速度可以为负数，当手指从右向左时，水平方向速度即为负值。 速度的计算公式大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">速度=（终点-起点位置）/时间</span><br></pre></td></tr></table></figure>\n\n<p>最后，当不需要使用它的时候，需要调用 clear 方法来充值并回收内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">velocityTracker.clear();</span><br><span class=\"line\">velocityTracker.recycle();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GestureDetector\"><a href=\"#GestureDetector\" class=\"headerlink\" title=\"GestureDetector\"></a>GestureDetector</h5><p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。</p>\n<p>创建一个 GestureDetector 对象并实现 OnGestureDetector 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GestureDetector</span> <span class=\"variable\">getsture</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GestureDetector</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//解决长屏幕无法拖动的现象</span></span><br><span class=\"line\">gesture.setIsLongpressEnable(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接着，在 onTouchEvent 中添加实现接管 View  的 onTouchEvent ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">consume</span> <span class=\"operator\">=</span>gesture.onTouchEnvent(ev);</span><br><span class=\"line\"><span class=\"keyword\">return</span> consume;</span><br></pre></td></tr></table></figure>\n\n<p>GestureDetector 中有很多方法，我们可以有选择的实现我们所需要的，常用的有：onSingleTapUp(单击)、onFling（滑动）、onScroll（滑动）、onLongPress（长按）、和 onDoubleTap（双击）。在实际开发中，如果只是监听滑动相关的，建议自己在onTouchEvent 中实现，如果要监听双击这种行为的话，那么就使用 GestureDetector。</p>\n<h4 id=\"Scroller\"><a href=\"#Scroller\" class=\"headerlink\" title=\"Scroller\"></a>Scroller</h4><p>弹性滑动对象，用于实现 View 的弹性滑动。我们知道，当使用 View 的 scrollTo&#x2F;scrollBy方法来进行 滑动时，其过程是瞬间完成的，这个没有过度效果的滑动用户体验不好。这个时候就可以使用 Scroller 来实现过渡效果的滑动。Scroller 本身无法让 View 弹性滑动，它需要和 View 的 computeScroll 方法配合使用才能完成和功能。那么如何使用它呢，它的使用方法是固定的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scroller</span> <span class=\"variable\">mScroller</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scroller</span>(context);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">smoothScrollTo</span><span class=\"params\">(<span class=\"type\">int</span> destX,<span class=\"type\">int</span> destY)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">scrollX</span> <span class=\"operator\">=</span> getScrollX();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">delta</span> <span class=\"operator\">=</span>destX-scrollX;</span><br><span class=\"line\">    <span class=\"comment\">// 1000ms 内滑向 dest，效果就是慢慢滑动</span></span><br><span class=\"line\">    mScroller.startScroll(scrollX,<span class=\"number\">0</span>,delta,<span class=\"number\">0</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    invalidate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">computeScroll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">        scrollTO(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">        postInvalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"View-的滑动\"><a href=\"#View-的滑动\" class=\"headerlink\" title=\"View 的滑动\"></a>View 的滑动</h3><p>滑动在 Android 开发中具有很重要的作用，不管一些效果多么绚丽，归根结底，它们都是由不同的滑动外加一些特效组成。因此，掌握滑动的方法是实现绚丽的自定义控件的基础。通过三种方式可以实现 View 的滑动。</p>\n<h4 id=\"使用-scrollTo-x2F-scrollBy\"><a href=\"#使用-scrollTo-x2F-scrollBy\" class=\"headerlink\" title=\"使用 scrollTo&#x2F;scrollBy\"></a>使用 scrollTo&#x2F;scrollBy</h4><p>为了实现 View 的滑动 ，View 专门提供了这两种方法来实现这个功能，就是 scrollTo 和 scrollBy。</p>\n<p>scrollBy 实际也是调用 scrollTo 方法，它实现了基于当前位置的相对滑动，而 scrollTo 则实现了给予所传递参数的绝对滑动。</p>\n<p><code>mScrollX</code>和<code>mScrollY</code>的滑动规则：</p>\n<blockquote>\n<p>在滑动过程中，mScrollX 的值总是等于 View 左边缘和 View 内容左边缘在水平方向的距离，而 ScrollY 的值总是等于 View 上边缘的和 View 内容上边缘的竖直方向的距离。并且当**View 左边缘在 View 内容边缘的右边边时，mScrollX 为正值，反之为负值；当 View 的上边缘在 View 内容上边缘的下方时，mScrollY 为正值，反之为负值。 ** scrollTo 和 scrollBy 只能改变 View 内容的位置而不能改变 View 在布局中的位置。</p>\n</blockquote>\n<p>可能按照文字描述感觉有点不合理或者是抽象，但是结合日常生活习惯就很容易理解了。当我们想要在手机上获取当前屏幕的更多内容时候，我们一般会向下滑动或向右滑动，这对应着我们的日常操作习惯。这时候View 的内容区域会向上偏移向左偏移，滑动的距离就是正值。</p>\n<h4 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h4><p>使用动画来让一个 View  平移，主要是操作 View 的 TranslationX 和 Translation Y 属性，既可以使用传统的View动画，也可以采用属性动画。需要注意的是 View 动画并不能真正改变 View 的位置，而是移动 View 的内容区域。</p>\n<h4 id=\"使用-LayoutParams\"><a href=\"#使用-LayoutParams\" class=\"headerlink\" title=\"使用 LayoutParams\"></a>使用 LayoutParams</h4><p>也可以通过修改 View 的LayoutParms 属性来达到滑动的效果。</p>\n<h4 id=\"各种滑动方式的对比\"><a href=\"#各种滑动方式的对比\" class=\"headerlink\" title=\"各种滑动方式的对比\"></a>各种滑动方式的对比</h4><p>scrollTo&#x2F;scrollBy，它可以比较方便实现滑动效果并且不影响 View 内部元素的单机事件。但它只能滑动 View 的内容，并不能滑动 View 本身。</p>\n<p>如果是使用属性动画，那么这种方式没有明显的缺点，如果是 View 动画或者是 3.0 以下使用属性动画，切动画元素还需要响应用户的交互，那就不是很适合了。</p>\n<p>改变布局这种方式，除了使用起来麻烦点以外也没有明显的缺点。</p>\n<p>实现一个简单的屏幕拖拽 View :</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(event: <span class=\"type\">MotionEvent</span>?)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">0</span></span><br><span class=\"line\">    event?.apply &#123;</span><br><span class=\"line\">        x = rawX.toInt()</span><br><span class=\"line\">        y = rawY.toInt()</span><br><span class=\"line\">        <span class=\"keyword\">when</span> (action) &#123;</span><br><span class=\"line\">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> deltaX = x - mLastX</span><br><span class=\"line\">                <span class=\"keyword\">val</span> deltaY = y - mLastY</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;move translationX：<span class=\"variable\">$deltaX</span> ___ translationY：<span class=\"variable\">$deltaY</span>&quot;</span>)</span><br><span class=\"line\">                translationX += deltaX</span><br><span class=\"line\">                translationY += deltaY</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_UP -&gt; &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mLastX = x</span><br><span class=\"line\">    mLastY = y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"弹性滑动\"><a href=\"#弹性滑动\" class=\"headerlink\" title=\"弹性滑动\"></a>弹性滑动</h4><p>如果直接操作 View 移动到指定的位置，这样生硬的滑动显示体验很差。我们可以将一次大的滑动分成若干次小的滑动并在一个时间段内完成。可以通过 Scroller、Handler等来完成。</p>\n<h3 id=\"View-事件的分发机制\"><a href=\"#View-事件的分发机制\" class=\"headerlink\" title=\"View 事件的分发机制\"></a>View 事件的分发机制</h3><h4 id=\"点击事件的传递规则\"><a href=\"#点击事件的传递规则\" class=\"headerlink\" title=\"点击事件的传递规则\"></a>点击事件的传递规则</h4><p>所谓的点击事件的分发，其实就是对 MotionEvent 事件的分发过程，当用户和屏幕发生交互产生了一个事件的时候，系统需要把这个事件传递给一个具体的 View 处理，这个传递的过程就是分发过程。分发过程由三个很重要的方法来共同完成：dispatchTouchEvent,onInterceptTouchEvent, onTouchEvent</p>\n<h5 id=\"public-boolean-dipatchTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-dipatchTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean dipatchTouchEvent(MotionEvent ev)\"></a>public boolean dipatchTouchEvent(MotionEvent ev)</h5><p>用来进行事件的分发。如果事件能够传递到此 View 那么此方法一定会被调用，返回结果受当前 View 的 OnTouchEvent 和下级 View 的 dipatchTouch 方法的影响，表示是否消耗当前事件。</p>\n<h5 id=\"public-boolean-onInterceptTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-onInterceptTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean onInterceptTouchEvent(MotionEvent ev)\"></a>public boolean onInterceptTouchEvent(MotionEvent ev)</h5><p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前 View 拦截了某个事件，那么在同一时间序列当中，此方法不不会被调用，返回结果表示是否拦截当前事件。</p>\n<h5 id=\"public-boolean-onTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-onTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean onTouchEvent(MotionEvent ev)\"></a>public boolean onTouchEvent(MotionEvent ev)</h5><p>在dipatchTouchEvent 中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前 View 无法再次接受到事件。</p>\n<p>它们之间的关系可以用伪代码来表示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dipatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">consume</span> <span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev))&#123;</span><br><span class=\"line\">      consume = onTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      consume = child.dipatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>同一事件序列是指，从手指在屏幕上按下开始，到手指离开屏幕的那一刻结束，这期间所产生的一些列事件，它是由一个 down 事件开始，中间含有数量不定的 Move ，最后由 up 结束。</li>\n<li>正常情况下一个序列事件正能被一个 View 消耗且拦截。因为一旦某个 View 拦截了某次事件，那么整个事件序列都会交给它处理，也就不存在两个 View 消费事件的情况。除非 View  强行把 onTouchEvnet 所传递的事件传递给其他的 View。</li>\n<li>某个 View 一旦被拦截，那么这一个事件序列都由它来处理，并且它的onInterceptTouchEvent 方法不会被调用。因为系统已经决定它来处理了，也就不需要再去询问了。</li>\n<li>某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（TouchEvent返回了false） 那么同一事件序列的所有事件都不会再交给它处理，并且事件重新提交给父容器，父容器的onTouchEvent 事件会被调用。</li>\n<li>如果 View 不消除 ACTION_DOWN以外的事件，这个点击事件会消失，父容器的onTouchEvent 也不会调用，View 也可以一直收到后续的事件，最终这些消失的事件会交给 Activity 处理。</li>\n<li>ViewGroup 默认不拦截任何事件，代码实现中 ViewGroup 的 onInterceptTouchEvent 返回为 flase.</li>\n<li>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传给它，它的 onTouchEvent 方法就会被调用</li>\n<li>View 的 enable 属性不影响 onTouchEvent 的默认返回值。哪怕一个 View 是 disable 方法，只要它的click 或者 LongClickable 方法为ture ，那么它的 onTouchEvent 就返回 true。</li>\n<li>View 的 onTouchEvent 默认都是会消耗事件的，除非它是不可点击的。</li>\n<li>onClick 发生的前提是它是可点击的，能够接受到 down 和 up 事件</li>\n<li>事件传递过程是由外向内的，即事件总是先传递向父元素，然后再由父元素分发给子 View。通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 除外。</li>\n</ol>\n<h4 id=\"事件分发的源码解析\"><a href=\"#事件分发的源码解析\" class=\"headerlink\" title=\"事件分发的源码解析\"></a>事件分发的源码解析</h4><h5 id=\"Activity-对点击事件的分发过程\"><a href=\"#Activity-对点击事件的分发过程\" class=\"headerlink\" title=\"Activity 对点击事件的分发过程\"></a>Activity 对点击事件的分发过程</h5><p>当一个时间产生的时候，事件最先传递给当前的 Activity，由 Activity 的 dispatchTouchEvent 进行事件派发，具体的工作是由 Activity 的 Windows 完成的。windows（PhoneWindow）会将事件传递给 decorView（Activity 根容器）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ev.getAction==MotionEvent.ACTION_DOWN)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//空方法</span></span><br><span class=\"line\">        onUserInteraction()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//window 是一个接口 实际的唯一实现类是 PhoneWindow ，它会调用 decorView 的 dispatchTouchEvent 方法.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(getWindow().superDispatchTouchEvent(ev))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"顶级-View-对点击事件的分发过程\"><a href=\"#顶级-View-对点击事件的分发过程\" class=\"headerlink\" title=\"顶级 View 对点击事件的分发过程\"></a>顶级 View 对点击事件的分发过程</h5><p>顶级 View 也就是 ViewGroup。经过源码分析可以看出几点：</p>\n<ul>\n<li><p>子 View 可以通过<code>requestDisallowInterceptTouchEvent</code>方法来影响 ViewGroup 的 <code>FLAG_DISALLOW_INTERCEPT</code> 标记，这会使得 ViewGroup 无法拦截除了 ACTION_DOWN 以外的事件。因为在ACTION_DOWN 的时候 View 会重置这个标志位。</p>\n</li>\n<li><p>当面对 ACTION_DOWN 事件的时候，ViewGroup 总会调用自己的 onInterceptTouchEvent 来询问自己是否要拦截事件。</p>\n</li>\n<li><p>当 ViewGroup 决定拦截事件后，那么后续的所有事件都会默认给它处理而不会调用 onInterceptTouchEvent</p>\n</li>\n</ul>\n<h5 id=\"View-对点击事件的处理过程\"><a href=\"#View-对点击事件的处理过程\" class=\"headerlink\" title=\"View 对点击事件的处理过程\"></a>View 对点击事件的处理过程</h5><p>View 对点击事件的处理过程简单一些。</p>\n<ul>\n<li>onTouchListener 的优先级要比 onTouchEvent 高</li>\n<li>View 即使处于不可用状态仍然会消耗点击事件</li>\n</ul>\n<p>总的来说就是验证了上面总结的 11 条结论。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"View-的位置\"><a href=\"#View-的位置\" class=\"headerlink\" title=\"View 的位置\"></a>View 的位置</h3><p>View 的位置由它的四个顶点来决定，分别对应于 View 的四个属性：top、left、right、bottom，其中 top 是左上角纵坐标，left 是左上角横坐标，right 是右下角横坐标，bottom 是右下角纵坐标。这些坐标都是相对于 View 的父容器来说的，因此它是一种相对坐标。它们的关系以及获取的 API 如下图。</p>\n<p><img src=\"/%5Cimg%5Cin-post%5Cimage-20150115155321445.png\" alt=\"img\"></p>\n<h4 id=\"MotionEvent-和-TouchSlope\"><a href=\"#MotionEvent-和-TouchSlope\" class=\"headerlink\" title=\"MotionEvent 和 TouchSlope\"></a>MotionEvent 和 TouchSlope</h4><h5 id=\"MotionEvent\"><a href=\"#MotionEvent\" class=\"headerlink\" title=\"MotionEvent\"></a>MotionEvent</h5><p>在手指接触屏幕后触发的一系列事件，典型的如下：</p>\n<ul>\n<li>ACTION_DWON 手指刚接触屏幕</li>\n<li>ACTION_UP  手指离开屏幕</li>\n<li>ACTION_MOVE 手指在屏幕上滑动</li>\n</ul>\n<p>在正常情况下，一次手指触摸的行为会触发一系列事件，例如：</p>\n<ul>\n<li>点击屏幕后手指离开，触发事件为 DOWN -&gt; UP;</li>\n<li>点击屏幕滑动一会再离开，时间序列为 DOWN -&gt; MOVE -&gt;…. &gt;MOVE -&gt; UP</li>\n</ul>\n<h5 id=\"TouchSlop\"><a href=\"#TouchSlop\" class=\"headerlink\" title=\"TouchSlop\"></a>TouchSlop</h5><p>TouchSolp 是系统能够识别出的被认为的最小滑动距离，如果手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作。这是一个常量和设备有关，在不同的设备可能是不同的，通过 <code>ViewConfiguration.get(context).getScaledTouchSlop()</code> 当我们在处理滑动事件的时候，可以利用这个常量来做一些过滤。</p>\n<h4 id=\"VelocityTracker、GestureDetector-和-Scroller\"><a href=\"#VelocityTracker、GestureDetector-和-Scroller\" class=\"headerlink\" title=\"VelocityTracker、GestureDetector 和 Scroller\"></a>VelocityTracker、GestureDetector 和 Scroller</h4><h5 id=\"velocityTracker\"><a href=\"#velocityTracker\" class=\"headerlink\" title=\"velocityTracker\"></a>velocityTracker</h5><p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直的速度。它的使用过程很简单，首先，在 View 的 onTouchEvent 方法中追踪当前单击事件的速度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VelocityTracker</span> <span class=\"variable\">velocityTracker</span> <span class=\"operator\">=</span> VelocityTracker.obtain();</span><br><span class=\"line\">velocityTracker.addMovement(envent);</span><br></pre></td></tr></table></figure>\n\n<p>接着，当我们先知道当前的滑动速度时，这个时候可以采用如下方式来获得当前的速度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">xVelocity</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) velocityTracker.getXVelocity();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">yVelocity</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) velocityTracker.getYVelocity();</span><br></pre></td></tr></table></figure>\n\n<p>有两点需要注意，第一点，在获取速度之前必须要计算速度，也就是调用 <code>computeCurrentVelocity</code>方法；第二点，这里的速度指的是一段时间内手指所划过的像素数，比如将时间间隔设为1000ms 时,在 1s 内，手指在水平方向从左向右滑过 100 像素，那么水平速度就是 100 。 注意速度可以为负数，当手指从右向左时，水平方向速度即为负值。 速度的计算公式大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">速度=（终点-起点位置）/时间</span><br></pre></td></tr></table></figure>\n\n<p>最后，当不需要使用它的时候，需要调用 clear 方法来充值并回收内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">velocityTracker.clear();</span><br><span class=\"line\">velocityTracker.recycle();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"GestureDetector\"><a href=\"#GestureDetector\" class=\"headerlink\" title=\"GestureDetector\"></a>GestureDetector</h5><p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。</p>\n<p>创建一个 GestureDetector 对象并实现 OnGestureDetector 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GestureDetector</span> <span class=\"variable\">getsture</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GestureDetector</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//解决长屏幕无法拖动的现象</span></span><br><span class=\"line\">gesture.setIsLongpressEnable(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接着，在 onTouchEvent 中添加实现接管 View  的 onTouchEvent ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">consume</span> <span class=\"operator\">=</span>gesture.onTouchEnvent(ev);</span><br><span class=\"line\"><span class=\"keyword\">return</span> consume;</span><br></pre></td></tr></table></figure>\n\n<p>GestureDetector 中有很多方法，我们可以有选择的实现我们所需要的，常用的有：onSingleTapUp(单击)、onFling（滑动）、onScroll（滑动）、onLongPress（长按）、和 onDoubleTap（双击）。在实际开发中，如果只是监听滑动相关的，建议自己在onTouchEvent 中实现，如果要监听双击这种行为的话，那么就使用 GestureDetector。</p>\n<h4 id=\"Scroller\"><a href=\"#Scroller\" class=\"headerlink\" title=\"Scroller\"></a>Scroller</h4><p>弹性滑动对象，用于实现 View 的弹性滑动。我们知道，当使用 View 的 scrollTo&#x2F;scrollBy方法来进行 滑动时，其过程是瞬间完成的，这个没有过度效果的滑动用户体验不好。这个时候就可以使用 Scroller 来实现过渡效果的滑动。Scroller 本身无法让 View 弹性滑动，它需要和 View 的 computeScroll 方法配合使用才能完成和功能。那么如何使用它呢，它的使用方法是固定的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scroller</span> <span class=\"variable\">mScroller</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scroller</span>(context);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">smoothScrollTo</span><span class=\"params\">(<span class=\"type\">int</span> destX,<span class=\"type\">int</span> destY)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">scrollX</span> <span class=\"operator\">=</span> getScrollX();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">delta</span> <span class=\"operator\">=</span>destX-scrollX;</span><br><span class=\"line\">    <span class=\"comment\">// 1000ms 内滑向 dest，效果就是慢慢滑动</span></span><br><span class=\"line\">    mScroller.startScroll(scrollX,<span class=\"number\">0</span>,delta,<span class=\"number\">0</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    invalidate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">computeScroll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">        scrollTO(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">        postInvalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"View-的滑动\"><a href=\"#View-的滑动\" class=\"headerlink\" title=\"View 的滑动\"></a>View 的滑动</h3><p>滑动在 Android 开发中具有很重要的作用，不管一些效果多么绚丽，归根结底，它们都是由不同的滑动外加一些特效组成。因此，掌握滑动的方法是实现绚丽的自定义控件的基础。通过三种方式可以实现 View 的滑动。</p>\n<h4 id=\"使用-scrollTo-x2F-scrollBy\"><a href=\"#使用-scrollTo-x2F-scrollBy\" class=\"headerlink\" title=\"使用 scrollTo&#x2F;scrollBy\"></a>使用 scrollTo&#x2F;scrollBy</h4><p>为了实现 View 的滑动 ，View 专门提供了这两种方法来实现这个功能，就是 scrollTo 和 scrollBy。</p>\n<p>scrollBy 实际也是调用 scrollTo 方法，它实现了基于当前位置的相对滑动，而 scrollTo 则实现了给予所传递参数的绝对滑动。</p>\n<p><code>mScrollX</code>和<code>mScrollY</code>的滑动规则：</p>\n<blockquote>\n<p>在滑动过程中，mScrollX 的值总是等于 View 左边缘和 View 内容左边缘在水平方向的距离，而 ScrollY 的值总是等于 View 上边缘的和 View 内容上边缘的竖直方向的距离。并且当**View 左边缘在 View 内容边缘的右边边时，mScrollX 为正值，反之为负值；当 View 的上边缘在 View 内容上边缘的下方时，mScrollY 为正值，反之为负值。 ** scrollTo 和 scrollBy 只能改变 View 内容的位置而不能改变 View 在布局中的位置。</p>\n</blockquote>\n<p>可能按照文字描述感觉有点不合理或者是抽象，但是结合日常生活习惯就很容易理解了。当我们想要在手机上获取当前屏幕的更多内容时候，我们一般会向下滑动或向右滑动，这对应着我们的日常操作习惯。这时候View 的内容区域会向上偏移向左偏移，滑动的距离就是正值。</p>\n<h4 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h4><p>使用动画来让一个 View  平移，主要是操作 View 的 TranslationX 和 Translation Y 属性，既可以使用传统的View动画，也可以采用属性动画。需要注意的是 View 动画并不能真正改变 View 的位置，而是移动 View 的内容区域。</p>\n<h4 id=\"使用-LayoutParams\"><a href=\"#使用-LayoutParams\" class=\"headerlink\" title=\"使用 LayoutParams\"></a>使用 LayoutParams</h4><p>也可以通过修改 View 的LayoutParms 属性来达到滑动的效果。</p>\n<h4 id=\"各种滑动方式的对比\"><a href=\"#各种滑动方式的对比\" class=\"headerlink\" title=\"各种滑动方式的对比\"></a>各种滑动方式的对比</h4><p>scrollTo&#x2F;scrollBy，它可以比较方便实现滑动效果并且不影响 View 内部元素的单机事件。但它只能滑动 View 的内容，并不能滑动 View 本身。</p>\n<p>如果是使用属性动画，那么这种方式没有明显的缺点，如果是 View 动画或者是 3.0 以下使用属性动画，切动画元素还需要响应用户的交互，那就不是很适合了。</p>\n<p>改变布局这种方式，除了使用起来麻烦点以外也没有明显的缺点。</p>\n<p>实现一个简单的屏幕拖拽 View :</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(event: <span class=\"type\">MotionEvent</span>?)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">0</span></span><br><span class=\"line\">    event?.apply &#123;</span><br><span class=\"line\">        x = rawX.toInt()</span><br><span class=\"line\">        y = rawY.toInt()</span><br><span class=\"line\">        <span class=\"keyword\">when</span> (action) &#123;</span><br><span class=\"line\">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> deltaX = x - mLastX</span><br><span class=\"line\">                <span class=\"keyword\">val</span> deltaY = y - mLastY</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;move translationX：<span class=\"variable\">$deltaX</span> ___ translationY：<span class=\"variable\">$deltaY</span>&quot;</span>)</span><br><span class=\"line\">                translationX += deltaX</span><br><span class=\"line\">                translationY += deltaY</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_UP -&gt; &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mLastX = x</span><br><span class=\"line\">    mLastY = y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"弹性滑动\"><a href=\"#弹性滑动\" class=\"headerlink\" title=\"弹性滑动\"></a>弹性滑动</h4><p>如果直接操作 View 移动到指定的位置，这样生硬的滑动显示体验很差。我们可以将一次大的滑动分成若干次小的滑动并在一个时间段内完成。可以通过 Scroller、Handler等来完成。</p>\n<h3 id=\"View-事件的分发机制\"><a href=\"#View-事件的分发机制\" class=\"headerlink\" title=\"View 事件的分发机制\"></a>View 事件的分发机制</h3><h4 id=\"点击事件的传递规则\"><a href=\"#点击事件的传递规则\" class=\"headerlink\" title=\"点击事件的传递规则\"></a>点击事件的传递规则</h4><p>所谓的点击事件的分发，其实就是对 MotionEvent 事件的分发过程，当用户和屏幕发生交互产生了一个事件的时候，系统需要把这个事件传递给一个具体的 View 处理，这个传递的过程就是分发过程。分发过程由三个很重要的方法来共同完成：dispatchTouchEvent,onInterceptTouchEvent, onTouchEvent</p>\n<h5 id=\"public-boolean-dipatchTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-dipatchTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean dipatchTouchEvent(MotionEvent ev)\"></a>public boolean dipatchTouchEvent(MotionEvent ev)</h5><p>用来进行事件的分发。如果事件能够传递到此 View 那么此方法一定会被调用，返回结果受当前 View 的 OnTouchEvent 和下级 View 的 dipatchTouch 方法的影响，表示是否消耗当前事件。</p>\n<h5 id=\"public-boolean-onInterceptTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-onInterceptTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean onInterceptTouchEvent(MotionEvent ev)\"></a>public boolean onInterceptTouchEvent(MotionEvent ev)</h5><p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前 View 拦截了某个事件，那么在同一时间序列当中，此方法不不会被调用，返回结果表示是否拦截当前事件。</p>\n<h5 id=\"public-boolean-onTouchEvent-MotionEvent-ev\"><a href=\"#public-boolean-onTouchEvent-MotionEvent-ev\" class=\"headerlink\" title=\"public boolean onTouchEvent(MotionEvent ev)\"></a>public boolean onTouchEvent(MotionEvent ev)</h5><p>在dipatchTouchEvent 中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前 View 无法再次接受到事件。</p>\n<p>它们之间的关系可以用伪代码来表示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dipatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">consume</span> <span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev))&#123;</span><br><span class=\"line\">      consume = onTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      consume = child.dipatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>同一事件序列是指，从手指在屏幕上按下开始，到手指离开屏幕的那一刻结束，这期间所产生的一些列事件，它是由一个 down 事件开始，中间含有数量不定的 Move ，最后由 up 结束。</li>\n<li>正常情况下一个序列事件正能被一个 View 消耗且拦截。因为一旦某个 View 拦截了某次事件，那么整个事件序列都会交给它处理，也就不存在两个 View 消费事件的情况。除非 View  强行把 onTouchEvnet 所传递的事件传递给其他的 View。</li>\n<li>某个 View 一旦被拦截，那么这一个事件序列都由它来处理，并且它的onInterceptTouchEvent 方法不会被调用。因为系统已经决定它来处理了，也就不需要再去询问了。</li>\n<li>某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（TouchEvent返回了false） 那么同一事件序列的所有事件都不会再交给它处理，并且事件重新提交给父容器，父容器的onTouchEvent 事件会被调用。</li>\n<li>如果 View 不消除 ACTION_DOWN以外的事件，这个点击事件会消失，父容器的onTouchEvent 也不会调用，View 也可以一直收到后续的事件，最终这些消失的事件会交给 Activity 处理。</li>\n<li>ViewGroup 默认不拦截任何事件，代码实现中 ViewGroup 的 onInterceptTouchEvent 返回为 flase.</li>\n<li>View 没有 onInterceptTouchEvent 方法，一旦有点击事件传给它，它的 onTouchEvent 方法就会被调用</li>\n<li>View 的 enable 属性不影响 onTouchEvent 的默认返回值。哪怕一个 View 是 disable 方法，只要它的click 或者 LongClickable 方法为ture ，那么它的 onTouchEvent 就返回 true。</li>\n<li>View 的 onTouchEvent 默认都是会消耗事件的，除非它是不可点击的。</li>\n<li>onClick 发生的前提是它是可点击的，能够接受到 down 和 up 事件</li>\n<li>事件传递过程是由外向内的，即事件总是先传递向父元素，然后再由父元素分发给子 View。通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 除外。</li>\n</ol>\n<h4 id=\"事件分发的源码解析\"><a href=\"#事件分发的源码解析\" class=\"headerlink\" title=\"事件分发的源码解析\"></a>事件分发的源码解析</h4><h5 id=\"Activity-对点击事件的分发过程\"><a href=\"#Activity-对点击事件的分发过程\" class=\"headerlink\" title=\"Activity 对点击事件的分发过程\"></a>Activity 对点击事件的分发过程</h5><p>当一个时间产生的时候，事件最先传递给当前的 Activity，由 Activity 的 dispatchTouchEvent 进行事件派发，具体的工作是由 Activity 的 Windows 完成的。windows（PhoneWindow）会将事件传递给 decorView（Activity 根容器）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ev.getAction==MotionEvent.ACTION_DOWN)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//空方法</span></span><br><span class=\"line\">        onUserInteraction()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//window 是一个接口 实际的唯一实现类是 PhoneWindow ，它会调用 decorView 的 dispatchTouchEvent 方法.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(getWindow().superDispatchTouchEvent(ev))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"顶级-View-对点击事件的分发过程\"><a href=\"#顶级-View-对点击事件的分发过程\" class=\"headerlink\" title=\"顶级 View 对点击事件的分发过程\"></a>顶级 View 对点击事件的分发过程</h5><p>顶级 View 也就是 ViewGroup。经过源码分析可以看出几点：</p>\n<ul>\n<li><p>子 View 可以通过<code>requestDisallowInterceptTouchEvent</code>方法来影响 ViewGroup 的 <code>FLAG_DISALLOW_INTERCEPT</code> 标记，这会使得 ViewGroup 无法拦截除了 ACTION_DOWN 以外的事件。因为在ACTION_DOWN 的时候 View 会重置这个标志位。</p>\n</li>\n<li><p>当面对 ACTION_DOWN 事件的时候，ViewGroup 总会调用自己的 onInterceptTouchEvent 来询问自己是否要拦截事件。</p>\n</li>\n<li><p>当 ViewGroup 决定拦截事件后，那么后续的所有事件都会默认给它处理而不会调用 onInterceptTouchEvent</p>\n</li>\n</ul>\n<h5 id=\"View-对点击事件的处理过程\"><a href=\"#View-对点击事件的处理过程\" class=\"headerlink\" title=\"View 对点击事件的处理过程\"></a>View 对点击事件的处理过程</h5><p>View 对点击事件的处理过程简单一些。</p>\n<ul>\n<li>onTouchListener 的优先级要比 onTouchEvent 高</li>\n<li>View 即使处于不可用状态仍然会消耗点击事件</li>\n</ul>\n<p>总的来说就是验证了上面总结的 11 条结论。</p>\n"},{"layout":"post","title":"Android View 工作原理","subtitle":"Android 艺术开发探索笔记","date":"2018-03-25T12:00:00.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n\n\n### 初识 ViewRoot和DecorView\n\nViewRoot 对应 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带， View 的三大流程均是通过 ViewRoot 来完成的。在 ActivityThread 中，当 Activity 对象被创建完毕后，会将 DecorView 添加到 Window 中，同时会创建 ViewRootImpl对象，并将 ViewRootImpl 和 DecorView 建立关联。源码如下：\n\n```java\nroot =new ViewRootImpl(view.getContext(),display);\nroot.setView(View,wparams,panelParentView);\n```\n\nView 的绘制流程是从 ViewRoot 的 prefromTraversals 方法开始的，它经过 measure 、lalyout 和 draw 三个过程才能最终将一个 View 绘制出来，其中 measure 用来测量 View 的宽高，layout 用来确定 View 在父容器中的放置位置，而 draw 则负责将 View 绘制在屏幕上。\n\nViewRoot 的 prefromTraversal 会分别依次调用 prefromMeasure、prefromLayout、prefromDraw 三个方法，这三个 View 分别完成顶级 View 的 measure、layout、和 draw 这三大流程。\n\nMeasure  过程决定了 View 的宽/高, Measure 完成以后，可以通过 getMeasuredWidth 和 getMeasureHeight 方法来完成 View 测量后的宽/高,在几乎所有的情况下它都等同于 View 的最终宽高，但特俗情况除外，这点在本章后面会进行说明。layout 过程决定了 VIew 的四个顶点坐标和实际的 View 的宽/高,完成以后可以通过 getTop()、getleft()、getRight()、getBottom() 来拿到 View 的四个顶点的位置，只有 draw 方法完成以后 View 的内容才能呈现到屏幕上。\n\n#### MeasureSpec\n\nMeasureSpec 代表一个 32 位的 int 值，高 2 位代表 SpecMode ,低30位代表 SpecSize。SepcMode 之测量模式，有如下几种规格：\n\n- **UNSPECIFIED** 父容器不对 View 有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。\n- **EXACTLY** 父容器已经检测出 View 所需要的精确大小，这个时候 VIew 的最终大小就是 SpzeSzie 所指定的值。它对应于 LayoutParams 中的 match_parent 和具体的数值。\n- **AT_MOST**  父容器制定了一个可用大小值，即 SpecSize，View 的大小不能大于这个值，具体是什么值要看不同 View 的具体实现。它对应于 LayoutParams 的 warp_content。\n\n#### View 的工作流程\n\n##### View 的 measure 过程\n\nView 的 measure 过程由其 measure 方法来完成， measure 方法是一个 final 类型的方法，这意味着子类不能重写此方法，在 View 的 measure 方法中回去调用 View 的 onMeasure 方法，因此只需要看 onMeasure 的实现即可。\n\nView 的 onMeasure 方法非常简洁，通过 setMeasureDimension 方法设置 View 由 getDefaultSize 方法得到的宽高的测量值，getDefaultSzie 的源码如下：\n\n```java\npublic static int getDefaultSize(int size,int measureSpec){\n    int result =size;\n    int specMode =MeasureSpec.getMode(measureSpec);\n    int specSize =MeasureSpec.getSize(measureSpec);\n    \n    switch(specMode){\n        case MeasureSpec.UNSPECIFIED:\n            result =size;\n            break;\n        case MeasureSpec.EXACTLY:\n        case MeasureSpec.AT_MOST:\n            result=specSize;\n            break;\n    }\n}\n```\n\n从 getDefault 的实现可以看出,View 的宽/高由 specSzie 决定，所以我们可以得出如下结论：\n\n> 直接继承 View  的自定义控件需要重写 onMeasure 方法并设置 wrap_content 时的自身大小，否则在布局中使用 wrap_content 相当于使用 match_parent。\n\n为什么呢？因为如果 View 在布局中使用 wrap_content ，那么它所对应的测量模式就是 AT_MOST ，最后的取值也就是 specSize，在这种情况下 specSize 是 parenSize,而 parenSize  是父容器中目前可使用的大小。就使得 View 的宽高和父容器剩余空间的大小一致，这种效果就和 match_parent 完全一致的。\n\n如果 View 的测量模式等于 UNSPECIFIED 模式，它的宽高是如何取值的呢？这种情况 View 的大小等于 getSuggestedMinimumWidth/Height 的值。源码如下:\n\n```java\nprotected int getSuggestedMinimumWidth(){\n    return (mBackground==null)?mMinWidth : max(mMinWidth,mBackground.getMinimumWidth);\n}\n```\n\nHeight 方法也类似。总结一下逻辑：如果 View 没有设置背景，那么返回 View 的 minWidth 否则返回 View 的背景的宽度和 View 的 minWidth 的最大值。\n\n##### ViewGroup 的 measure 过程\n\n  对于 ViewGroup 来说，除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素在递归去执行这个过程。和 View 不同的是，ViewGroup 是一个抽象类，因此它没有重写 View 的 onMeasure 的方法，但是它提供了一个叫 measureChildren的方法：\n\n```java\nprotected void measureChildren(int widthMeasureSpec ,int heightMeasureSpec){\n    final int size = mChildrenCount;\n    final View[] children = mChildren;\n    for(int i = 0;i < size;++i){\n        final View child = children[i];\n        if((child.mViewFlags & VISIBILITY_MASK)!=GONE){\n            measureChild(child,widthMeasureSpec,heightMeasureSpec);\n        }\n    }\n}\n```\n\nmeasureChild 就是取出子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 来创建子元素的 MeasureSpec，接着将 MeasureSpec 直接传递给 View 的  measure 方法来进行测量。\n\n我们知道，ViewGruop 并没有定义其测量的具体过程，这是因为 ViewGroup 是一个抽象类，其测量过程的 onMeasure 方法需要各子类去具体实现。\n\n##### 如何取得在Activity View 的宽高\n\n在 Activity 的 onCreate、onResume、onStart 均无法正确的获得 View 的宽高，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的，因此无法保证。有四种方法获得 View 的宽高 :\n\n- **Activity/View#WindowFocusChanged ** ViewFocusChanged 会在 Activity 得到和失去焦点的时候会被调用，这时 View 已经初始化完毕了，宽高已准备好了。需要注意的是这个方法会被多次调用\n\n- **view.post(runnable)** 通过 post 可以将一个 runnable 投递到消息队列的尾部，然后等待 Looper 调用此 runnable 的时候，View 也已经初始化好了。\n\n- **ViewTreeObserver** 使用 ViewObserver 的众多回调可以完成这个功能。\n\n- **手动对 View 进行 measure 来得到宽高** 通过 view.measure 来手动的测量 View 的宽和高，但是也是分情况的：\n\n  - **match_parent** ：这种事无法测量出 View 的宽高的。因为构造 MeasureSpec 的时候我们需要知道 parentSize ，既父容器的空间大小，而这时我们无法确定 parentSzie 的大小，所以理论上无法测量出 Veiw 的大小\n\n  - **warp_content** ：这时我们通过构造一个View理论上最大值的 measureSpec 来去测量。View 的尺寸用二进制表示，最大值是30个1（既 2^30-1,也就是 1<< 30 - 1 ）\n\n    ```java\n    int widthMeasureSpec =MeasureSpec.markMeasureSpec((1 >> 30)-1,MeasureSpec.AT_MOST);\n    int heightMeasureSpec =MeasureSpec.markMeasureSpec((1 >> 30)-1,MeasureSpec.AT_MOST);\n    view.measure(widthMeasureSpec,heightMeasureSpec);\n    \n    //网上还有两种错误的用法,因为它们违背了系统的内部的实现规范，无法通过 MeasureSpec 获得合法的 SpecMode。当父View对子View的高度不满意时，子控件没有测量模式来限制宽高，父空间会重新调用 onMeasure 测量，所以测量结果不一定准确\n    \n    int widthMeasureSpec =MeasureSpec.markMeasureSpec(-1,MeasureSpec.UNSPECIFIED);\n    int heightMeasureSpec =MeasureSpec.markMeasureSpec(-1,MeasureSpec.UNSPECIFIED);\n    view.measure(widthMeasureSpec,heightMeasureSpec);\n    \n    view.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n    ```\n\n\n    ```\n    \n    ​\n\n##### layout 过程\n\nLayout 的作用是 ViewGroup 用来确定子元素的位置，当 ViewGroup 的位置被确定后，它在 onLayout 中遍历所有的子元素并调用其 layout 方法，在 layout 方法中 onLayout 方法会被调用。layout 方法确定 View 本身的位置，而 onLayout 方法则会确定所有子元素的位置。\n\n```java\npublic void layout(int l,int t,int r,int b){\n    if(mPrivateFlags3&PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT!=0){\n        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);\n        mPrivateFlag3 &=~ PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT；\n    }\n    int oldL = mLeft;\n    int oldT = mTop;\n    int oldB = mBootom;\n    int oldR = mRIght;\n    boolean changed = isLayoutModeOption(mParent)?setOpticalFram(l,t,r,b):setFrame(l,t,r,b);\n        if(changed||(mPrivateFlags&PFLAG_LAYOUT_REQUIRED)==PFLAG_LAYOUT_REQUIRED){\n            onLayout(changed,l,t,r,b);\n            ....\n            ....\n        }\n}\n```\n\n大致流程如下：首先通过 setFrame 放来来设定 View 的四个顶点的位置，即初始化 mLeft,mRight,mTop,mBottom 四个值，View 的四个顶点一旦确定，那么 View 在容器中的位置也就确定了；接着调用 onLayout 方法，这个方法用途是父容器确定子元素的位置，和 onMeasure 类似, onLayout 的具体实现同样和具体的布局有关，所以 View 和 ViewGroup 没有具体的实现。\n\n#### Draw 过程\n\nDraw 过程就比较简单了，它的作用是将 View 绘制到屏幕上。遵循以下几步：\n\n- 绘制背景 background.draw(canvas)\n- 绘制自己 onDraw\n- 绘制 children (dispatchDraw)\n- 绘制装饰(onDrawScrollBars)\n\n### \n\n","source":"_posts/2018-03-25-andorid_view_working_principle.md","raw":"---\nlayout: post\ntitle: \"Android View 工作原理\"\nsubtitle: \"Android 艺术开发探索笔记\"\ndate: 2018-03-25 20:00:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n  - Note\n---\n\n\n\n### 初识 ViewRoot和DecorView\n\nViewRoot 对应 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带， View 的三大流程均是通过 ViewRoot 来完成的。在 ActivityThread 中，当 Activity 对象被创建完毕后，会将 DecorView 添加到 Window 中，同时会创建 ViewRootImpl对象，并将 ViewRootImpl 和 DecorView 建立关联。源码如下：\n\n```java\nroot =new ViewRootImpl(view.getContext(),display);\nroot.setView(View,wparams,panelParentView);\n```\n\nView 的绘制流程是从 ViewRoot 的 prefromTraversals 方法开始的，它经过 measure 、lalyout 和 draw 三个过程才能最终将一个 View 绘制出来，其中 measure 用来测量 View 的宽高，layout 用来确定 View 在父容器中的放置位置，而 draw 则负责将 View 绘制在屏幕上。\n\nViewRoot 的 prefromTraversal 会分别依次调用 prefromMeasure、prefromLayout、prefromDraw 三个方法，这三个 View 分别完成顶级 View 的 measure、layout、和 draw 这三大流程。\n\nMeasure  过程决定了 View 的宽/高, Measure 完成以后，可以通过 getMeasuredWidth 和 getMeasureHeight 方法来完成 View 测量后的宽/高,在几乎所有的情况下它都等同于 View 的最终宽高，但特俗情况除外，这点在本章后面会进行说明。layout 过程决定了 VIew 的四个顶点坐标和实际的 View 的宽/高,完成以后可以通过 getTop()、getleft()、getRight()、getBottom() 来拿到 View 的四个顶点的位置，只有 draw 方法完成以后 View 的内容才能呈现到屏幕上。\n\n#### MeasureSpec\n\nMeasureSpec 代表一个 32 位的 int 值，高 2 位代表 SpecMode ,低30位代表 SpecSize。SepcMode 之测量模式，有如下几种规格：\n\n- **UNSPECIFIED** 父容器不对 View 有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。\n- **EXACTLY** 父容器已经检测出 View 所需要的精确大小，这个时候 VIew 的最终大小就是 SpzeSzie 所指定的值。它对应于 LayoutParams 中的 match_parent 和具体的数值。\n- **AT_MOST**  父容器制定了一个可用大小值，即 SpecSize，View 的大小不能大于这个值，具体是什么值要看不同 View 的具体实现。它对应于 LayoutParams 的 warp_content。\n\n#### View 的工作流程\n\n##### View 的 measure 过程\n\nView 的 measure 过程由其 measure 方法来完成， measure 方法是一个 final 类型的方法，这意味着子类不能重写此方法，在 View 的 measure 方法中回去调用 View 的 onMeasure 方法，因此只需要看 onMeasure 的实现即可。\n\nView 的 onMeasure 方法非常简洁，通过 setMeasureDimension 方法设置 View 由 getDefaultSize 方法得到的宽高的测量值，getDefaultSzie 的源码如下：\n\n```java\npublic static int getDefaultSize(int size,int measureSpec){\n    int result =size;\n    int specMode =MeasureSpec.getMode(measureSpec);\n    int specSize =MeasureSpec.getSize(measureSpec);\n    \n    switch(specMode){\n        case MeasureSpec.UNSPECIFIED:\n            result =size;\n            break;\n        case MeasureSpec.EXACTLY:\n        case MeasureSpec.AT_MOST:\n            result=specSize;\n            break;\n    }\n}\n```\n\n从 getDefault 的实现可以看出,View 的宽/高由 specSzie 决定，所以我们可以得出如下结论：\n\n> 直接继承 View  的自定义控件需要重写 onMeasure 方法并设置 wrap_content 时的自身大小，否则在布局中使用 wrap_content 相当于使用 match_parent。\n\n为什么呢？因为如果 View 在布局中使用 wrap_content ，那么它所对应的测量模式就是 AT_MOST ，最后的取值也就是 specSize，在这种情况下 specSize 是 parenSize,而 parenSize  是父容器中目前可使用的大小。就使得 View 的宽高和父容器剩余空间的大小一致，这种效果就和 match_parent 完全一致的。\n\n如果 View 的测量模式等于 UNSPECIFIED 模式，它的宽高是如何取值的呢？这种情况 View 的大小等于 getSuggestedMinimumWidth/Height 的值。源码如下:\n\n```java\nprotected int getSuggestedMinimumWidth(){\n    return (mBackground==null)?mMinWidth : max(mMinWidth,mBackground.getMinimumWidth);\n}\n```\n\nHeight 方法也类似。总结一下逻辑：如果 View 没有设置背景，那么返回 View 的 minWidth 否则返回 View 的背景的宽度和 View 的 minWidth 的最大值。\n\n##### ViewGroup 的 measure 过程\n\n  对于 ViewGroup 来说，除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素在递归去执行这个过程。和 View 不同的是，ViewGroup 是一个抽象类，因此它没有重写 View 的 onMeasure 的方法，但是它提供了一个叫 measureChildren的方法：\n\n```java\nprotected void measureChildren(int widthMeasureSpec ,int heightMeasureSpec){\n    final int size = mChildrenCount;\n    final View[] children = mChildren;\n    for(int i = 0;i < size;++i){\n        final View child = children[i];\n        if((child.mViewFlags & VISIBILITY_MASK)!=GONE){\n            measureChild(child,widthMeasureSpec,heightMeasureSpec);\n        }\n    }\n}\n```\n\nmeasureChild 就是取出子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 来创建子元素的 MeasureSpec，接着将 MeasureSpec 直接传递给 View 的  measure 方法来进行测量。\n\n我们知道，ViewGruop 并没有定义其测量的具体过程，这是因为 ViewGroup 是一个抽象类，其测量过程的 onMeasure 方法需要各子类去具体实现。\n\n##### 如何取得在Activity View 的宽高\n\n在 Activity 的 onCreate、onResume、onStart 均无法正确的获得 View 的宽高，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的，因此无法保证。有四种方法获得 View 的宽高 :\n\n- **Activity/View#WindowFocusChanged ** ViewFocusChanged 会在 Activity 得到和失去焦点的时候会被调用，这时 View 已经初始化完毕了，宽高已准备好了。需要注意的是这个方法会被多次调用\n\n- **view.post(runnable)** 通过 post 可以将一个 runnable 投递到消息队列的尾部，然后等待 Looper 调用此 runnable 的时候，View 也已经初始化好了。\n\n- **ViewTreeObserver** 使用 ViewObserver 的众多回调可以完成这个功能。\n\n- **手动对 View 进行 measure 来得到宽高** 通过 view.measure 来手动的测量 View 的宽和高，但是也是分情况的：\n\n  - **match_parent** ：这种事无法测量出 View 的宽高的。因为构造 MeasureSpec 的时候我们需要知道 parentSize ，既父容器的空间大小，而这时我们无法确定 parentSzie 的大小，所以理论上无法测量出 Veiw 的大小\n\n  - **warp_content** ：这时我们通过构造一个View理论上最大值的 measureSpec 来去测量。View 的尺寸用二进制表示，最大值是30个1（既 2^30-1,也就是 1<< 30 - 1 ）\n\n    ```java\n    int widthMeasureSpec =MeasureSpec.markMeasureSpec((1 >> 30)-1,MeasureSpec.AT_MOST);\n    int heightMeasureSpec =MeasureSpec.markMeasureSpec((1 >> 30)-1,MeasureSpec.AT_MOST);\n    view.measure(widthMeasureSpec,heightMeasureSpec);\n    \n    //网上还有两种错误的用法,因为它们违背了系统的内部的实现规范，无法通过 MeasureSpec 获得合法的 SpecMode。当父View对子View的高度不满意时，子控件没有测量模式来限制宽高，父空间会重新调用 onMeasure 测量，所以测量结果不一定准确\n    \n    int widthMeasureSpec =MeasureSpec.markMeasureSpec(-1,MeasureSpec.UNSPECIFIED);\n    int heightMeasureSpec =MeasureSpec.markMeasureSpec(-1,MeasureSpec.UNSPECIFIED);\n    view.measure(widthMeasureSpec,heightMeasureSpec);\n    \n    view.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n    ```\n\n\n    ```\n    \n    ​\n\n##### layout 过程\n\nLayout 的作用是 ViewGroup 用来确定子元素的位置，当 ViewGroup 的位置被确定后，它在 onLayout 中遍历所有的子元素并调用其 layout 方法，在 layout 方法中 onLayout 方法会被调用。layout 方法确定 View 本身的位置，而 onLayout 方法则会确定所有子元素的位置。\n\n```java\npublic void layout(int l,int t,int r,int b){\n    if(mPrivateFlags3&PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT!=0){\n        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);\n        mPrivateFlag3 &=~ PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT；\n    }\n    int oldL = mLeft;\n    int oldT = mTop;\n    int oldB = mBootom;\n    int oldR = mRIght;\n    boolean changed = isLayoutModeOption(mParent)?setOpticalFram(l,t,r,b):setFrame(l,t,r,b);\n        if(changed||(mPrivateFlags&PFLAG_LAYOUT_REQUIRED)==PFLAG_LAYOUT_REQUIRED){\n            onLayout(changed,l,t,r,b);\n            ....\n            ....\n        }\n}\n```\n\n大致流程如下：首先通过 setFrame 放来来设定 View 的四个顶点的位置，即初始化 mLeft,mRight,mTop,mBottom 四个值，View 的四个顶点一旦确定，那么 View 在容器中的位置也就确定了；接着调用 onLayout 方法，这个方法用途是父容器确定子元素的位置，和 onMeasure 类似, onLayout 的具体实现同样和具体的布局有关，所以 View 和 ViewGroup 没有具体的实现。\n\n#### Draw 过程\n\nDraw 过程就比较简单了，它的作用是将 View 绘制到屏幕上。遵循以下几步：\n\n- 绘制背景 background.draw(canvas)\n- 绘制自己 onDraw\n- 绘制 children (dispatchDraw)\n- 绘制装饰(onDrawScrollBars)\n\n### \n\n","slug":"2018-03-25-andorid_view_working_principle","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p6000ks2y4c0b9hpi6","content":"<h3 id=\"初识-ViewRoot和DecorView\"><a href=\"#初识-ViewRoot和DecorView\" class=\"headerlink\" title=\"初识 ViewRoot和DecorView\"></a>初识 ViewRoot和DecorView</h3><p>ViewRoot 对应 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带， View 的三大流程均是通过 ViewRoot 来完成的。在 ActivityThread 中，当 Activity 对象被创建完毕后，会将 DecorView 添加到 Window 中，同时会创建 ViewRootImpl对象，并将 ViewRootImpl 和 DecorView 建立关联。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root =<span class=\"keyword\">new</span> <span class=\"title class_\">ViewRootImpl</span>(view.getContext(),display);</span><br><span class=\"line\">root.setView(View,wparams,panelParentView);</span><br></pre></td></tr></table></figure>\n\n<p>View 的绘制流程是从 ViewRoot 的 prefromTraversals 方法开始的，它经过 measure 、lalyout 和 draw 三个过程才能最终将一个 View 绘制出来，其中 measure 用来测量 View 的宽高，layout 用来确定 View 在父容器中的放置位置，而 draw 则负责将 View 绘制在屏幕上。</p>\n<p>ViewRoot 的 prefromTraversal 会分别依次调用 prefromMeasure、prefromLayout、prefromDraw 三个方法，这三个 View 分别完成顶级 View 的 measure、layout、和 draw 这三大流程。</p>\n<p>Measure  过程决定了 View 的宽&#x2F;高, Measure 完成以后，可以通过 getMeasuredWidth 和 getMeasureHeight 方法来完成 View 测量后的宽&#x2F;高,在几乎所有的情况下它都等同于 View 的最终宽高，但特俗情况除外，这点在本章后面会进行说明。layout 过程决定了 VIew 的四个顶点坐标和实际的 View 的宽&#x2F;高,完成以后可以通过 getTop()、getleft()、getRight()、getBottom() 来拿到 View 的四个顶点的位置，只有 draw 方法完成以后 View 的内容才能呈现到屏幕上。</p>\n<h4 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h4><p>MeasureSpec 代表一个 32 位的 int 值，高 2 位代表 SpecMode ,低30位代表 SpecSize。SepcMode 之测量模式，有如下几种规格：</p>\n<ul>\n<li><strong>UNSPECIFIED</strong> 父容器不对 View 有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。</li>\n<li><strong>EXACTLY</strong> 父容器已经检测出 View 所需要的精确大小，这个时候 VIew 的最终大小就是 SpzeSzie 所指定的值。它对应于 LayoutParams 中的 match_parent 和具体的数值。</li>\n<li><strong>AT_MOST</strong>  父容器制定了一个可用大小值，即 SpecSize，View 的大小不能大于这个值，具体是什么值要看不同 View 的具体实现。它对应于 LayoutParams 的 warp_content。</li>\n</ul>\n<h4 id=\"View-的工作流程\"><a href=\"#View-的工作流程\" class=\"headerlink\" title=\"View 的工作流程\"></a>View 的工作流程</h4><h5 id=\"View-的-measure-过程\"><a href=\"#View-的-measure-过程\" class=\"headerlink\" title=\"View 的 measure 过程\"></a>View 的 measure 过程</h5><p>View 的 measure 过程由其 measure 方法来完成， measure 方法是一个 final 类型的方法，这意味着子类不能重写此方法，在 View 的 measure 方法中回去调用 View 的 onMeasure 方法，因此只需要看 onMeasure 的实现即可。</p>\n<p>View 的 onMeasure 方法非常简洁，通过 setMeasureDimension 方法设置 View 由 getDefaultSize 方法得到的宽高的测量值，getDefaultSzie 的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getDefaultSize</span><span class=\"params\">(<span class=\"type\">int</span> size,<span class=\"type\">int</span> measureSpec)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>size;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">specMode</span> <span class=\"operator\">=</span>MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">specSize</span> <span class=\"operator\">=</span>MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(specMode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result =size;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">            result=specSize;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 getDefault 的实现可以看出,View 的宽&#x2F;高由 specSzie 决定，所以我们可以得出如下结论：</p>\n<blockquote>\n<p>直接继承 View  的自定义控件需要重写 onMeasure 方法并设置 wrap_content 时的自身大小，否则在布局中使用 wrap_content 相当于使用 match_parent。</p>\n</blockquote>\n<p>为什么呢？因为如果 View 在布局中使用 wrap_content ，那么它所对应的测量模式就是 AT_MOST ，最后的取值也就是 specSize，在这种情况下 specSize 是 parenSize,而 parenSize  是父容器中目前可使用的大小。就使得 View 的宽高和父容器剩余空间的大小一致，这种效果就和 match_parent 完全一致的。</p>\n<p>如果 View 的测量模式等于 UNSPECIFIED 模式，它的宽高是如何取值的呢？这种情况 View 的大小等于 getSuggestedMinimumWidth&#x2F;Height 的值。源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">getSuggestedMinimumWidth</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground==<span class=\"literal\">null</span>)?mMinWidth : max(mMinWidth,mBackground.getMinimumWidth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Height 方法也类似。总结一下逻辑：如果 View 没有设置背景，那么返回 View 的 minWidth 否则返回 View 的背景的宽度和 View 的 minWidth 的最大值。</p>\n<h5 id=\"ViewGroup-的-measure-过程\"><a href=\"#ViewGroup-的-measure-过程\" class=\"headerlink\" title=\"ViewGroup 的 measure 过程\"></a>ViewGroup 的 measure 过程</h5><p>  对于 ViewGroup 来说，除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素在递归去执行这个过程。和 View 不同的是，ViewGroup 是一个抽象类，因此它没有重写 View 的 onMeasure 的方法，但是它提供了一个叫 measureChildren的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measureChildren</span><span class=\"params\">(<span class=\"type\">int</span> widthMeasureSpec ,<span class=\"type\">int</span> heightMeasureSpec)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; size;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> children[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child.mViewFlags &amp; VISIBILITY_MASK)!=GONE)&#123;</span><br><span class=\"line\">            measureChild(child,widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>measureChild 就是取出子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 来创建子元素的 MeasureSpec，接着将 MeasureSpec 直接传递给 View 的  measure 方法来进行测量。</p>\n<p>我们知道，ViewGruop 并没有定义其测量的具体过程，这是因为 ViewGroup 是一个抽象类，其测量过程的 onMeasure 方法需要各子类去具体实现。</p>\n<h5 id=\"如何取得在Activity-View-的宽高\"><a href=\"#如何取得在Activity-View-的宽高\" class=\"headerlink\" title=\"如何取得在Activity View 的宽高\"></a>如何取得在Activity View 的宽高</h5><p>在 Activity 的 onCreate、onResume、onStart 均无法正确的获得 View 的宽高，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的，因此无法保证。有四种方法获得 View 的宽高 :</p>\n<ul>\n<li><p>**Activity&#x2F;View#WindowFocusChanged ** ViewFocusChanged 会在 Activity 得到和失去焦点的时候会被调用，这时 View 已经初始化完毕了，宽高已准备好了。需要注意的是这个方法会被多次调用</p>\n</li>\n<li><p><strong>view.post(runnable)</strong> 通过 post 可以将一个 runnable 投递到消息队列的尾部，然后等待 Looper 调用此 runnable 的时候，View 也已经初始化好了。</p>\n</li>\n<li><p><strong>ViewTreeObserver</strong> 使用 ViewObserver 的众多回调可以完成这个功能。</p>\n</li>\n<li><p><strong>手动对 View 进行 measure 来得到宽高</strong> 通过 view.measure 来手动的测量 View 的宽和高，但是也是分情况的：</p>\n<ul>\n<li><p><strong>match_parent</strong> ：这种事无法测量出 View 的宽高的。因为构造 MeasureSpec 的时候我们需要知道 parentSize ，既父容器的空间大小，而这时我们无法确定 parentSzie 的大小，所以理论上无法测量出 Veiw 的大小</p>\n</li>\n<li><p><strong>warp_content</strong> ：这时我们通过构造一个View理论上最大值的 measureSpec 来去测量。View 的尺寸用二进制表示，最大值是30个1（既 2^30-1,也就是 1&lt;&lt; 30 - 1 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">widthMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec((<span class=\"number\">1</span> &gt;&gt; <span class=\"number\">30</span>)-<span class=\"number\">1</span>,MeasureSpec.AT_MOST);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">heightMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec((<span class=\"number\">1</span> &gt;&gt; <span class=\"number\">30</span>)-<span class=\"number\">1</span>,MeasureSpec.AT_MOST);</span><br><span class=\"line\">view.measure(widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网上还有两种错误的用法,因为它们违背了系统的内部的实现规范，无法通过 MeasureSpec 获得合法的 SpecMode。当父View对子View的高度不满意时，子控件没有测量模式来限制宽高，父空间会重新调用 onMeasure 测量，所以测量结果不一定准确</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">widthMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec(-<span class=\"number\">1</span>,MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">heightMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec(-<span class=\"number\">1</span>,MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\">view.measure(widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">view.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    ​</span><br><span class=\"line\"></span><br><span class=\"line\">##### layout 过程</span><br><span class=\"line\"></span><br><span class=\"line\">Layout 的作用是 ViewGroup 用来确定子元素的位置，当 ViewGroup 的位置被确定后，它在 onLayout 中遍历所有的子元素并调用其 layout 方法，在 layout 方法中 onLayout 方法会被调用。layout 方法确定 View 本身的位置，而 onLayout 方法则会确定所有子元素的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public void layout(int l,int t,int r,int b)&#123;</span><br><span class=\"line\">    if(mPrivateFlags3&amp;PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT!=0)&#123;</span><br><span class=\"line\">        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);</span><br><span class=\"line\">        mPrivateFlag3 &amp;=~ PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int oldL = mLeft;</span><br><span class=\"line\">    int oldT = mTop;</span><br><span class=\"line\">    int oldB = mBootom;</span><br><span class=\"line\">    int oldR = mRIght;</span><br><span class=\"line\">    boolean changed = isLayoutModeOption(mParent)?setOpticalFram(l,t,r,b):setFrame(l,t,r,b);</span><br><span class=\"line\">        if(changed||(mPrivateFlags&amp;PFLAG_LAYOUT_REQUIRED)==PFLAG_LAYOUT_REQUIRED)&#123;</span><br><span class=\"line\">            onLayout(changed,l,t,r,b);</span><br><span class=\"line\">            ....</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>大致流程如下：首先通过 setFrame 放来来设定 View 的四个顶点的位置，即初始化 mLeft,mRight,mTop,mBottom 四个值，View 的四个顶点一旦确定，那么 View 在容器中的位置也就确定了；接着调用 onLayout 方法，这个方法用途是父容器确定子元素的位置，和 onMeasure 类似, onLayout 的具体实现同样和具体的布局有关，所以 View 和 ViewGroup 没有具体的实现。</p>\n<h4 id=\"Draw-过程\"><a href=\"#Draw-过程\" class=\"headerlink\" title=\"Draw 过程\"></a>Draw 过程</h4><p>Draw 过程就比较简单了，它的作用是将 View 绘制到屏幕上。遵循以下几步：</p>\n<ul>\n<li>绘制背景 background.draw(canvas)</li>\n<li>绘制自己 onDraw</li>\n<li>绘制 children (dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初识-ViewRoot和DecorView\"><a href=\"#初识-ViewRoot和DecorView\" class=\"headerlink\" title=\"初识 ViewRoot和DecorView\"></a>初识 ViewRoot和DecorView</h3><p>ViewRoot 对应 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带， View 的三大流程均是通过 ViewRoot 来完成的。在 ActivityThread 中，当 Activity 对象被创建完毕后，会将 DecorView 添加到 Window 中，同时会创建 ViewRootImpl对象，并将 ViewRootImpl 和 DecorView 建立关联。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root =<span class=\"keyword\">new</span> <span class=\"title class_\">ViewRootImpl</span>(view.getContext(),display);</span><br><span class=\"line\">root.setView(View,wparams,panelParentView);</span><br></pre></td></tr></table></figure>\n\n<p>View 的绘制流程是从 ViewRoot 的 prefromTraversals 方法开始的，它经过 measure 、lalyout 和 draw 三个过程才能最终将一个 View 绘制出来，其中 measure 用来测量 View 的宽高，layout 用来确定 View 在父容器中的放置位置，而 draw 则负责将 View 绘制在屏幕上。</p>\n<p>ViewRoot 的 prefromTraversal 会分别依次调用 prefromMeasure、prefromLayout、prefromDraw 三个方法，这三个 View 分别完成顶级 View 的 measure、layout、和 draw 这三大流程。</p>\n<p>Measure  过程决定了 View 的宽&#x2F;高, Measure 完成以后，可以通过 getMeasuredWidth 和 getMeasureHeight 方法来完成 View 测量后的宽&#x2F;高,在几乎所有的情况下它都等同于 View 的最终宽高，但特俗情况除外，这点在本章后面会进行说明。layout 过程决定了 VIew 的四个顶点坐标和实际的 View 的宽&#x2F;高,完成以后可以通过 getTop()、getleft()、getRight()、getBottom() 来拿到 View 的四个顶点的位置，只有 draw 方法完成以后 View 的内容才能呈现到屏幕上。</p>\n<h4 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h4><p>MeasureSpec 代表一个 32 位的 int 值，高 2 位代表 SpecMode ,低30位代表 SpecSize。SepcMode 之测量模式，有如下几种规格：</p>\n<ul>\n<li><strong>UNSPECIFIED</strong> 父容器不对 View 有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。</li>\n<li><strong>EXACTLY</strong> 父容器已经检测出 View 所需要的精确大小，这个时候 VIew 的最终大小就是 SpzeSzie 所指定的值。它对应于 LayoutParams 中的 match_parent 和具体的数值。</li>\n<li><strong>AT_MOST</strong>  父容器制定了一个可用大小值，即 SpecSize，View 的大小不能大于这个值，具体是什么值要看不同 View 的具体实现。它对应于 LayoutParams 的 warp_content。</li>\n</ul>\n<h4 id=\"View-的工作流程\"><a href=\"#View-的工作流程\" class=\"headerlink\" title=\"View 的工作流程\"></a>View 的工作流程</h4><h5 id=\"View-的-measure-过程\"><a href=\"#View-的-measure-过程\" class=\"headerlink\" title=\"View 的 measure 过程\"></a>View 的 measure 过程</h5><p>View 的 measure 过程由其 measure 方法来完成， measure 方法是一个 final 类型的方法，这意味着子类不能重写此方法，在 View 的 measure 方法中回去调用 View 的 onMeasure 方法，因此只需要看 onMeasure 的实现即可。</p>\n<p>View 的 onMeasure 方法非常简洁，通过 setMeasureDimension 方法设置 View 由 getDefaultSize 方法得到的宽高的测量值，getDefaultSzie 的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getDefaultSize</span><span class=\"params\">(<span class=\"type\">int</span> size,<span class=\"type\">int</span> measureSpec)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>size;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">specMode</span> <span class=\"operator\">=</span>MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">specSize</span> <span class=\"operator\">=</span>MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(specMode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result =size;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">            result=specSize;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 getDefault 的实现可以看出,View 的宽&#x2F;高由 specSzie 决定，所以我们可以得出如下结论：</p>\n<blockquote>\n<p>直接继承 View  的自定义控件需要重写 onMeasure 方法并设置 wrap_content 时的自身大小，否则在布局中使用 wrap_content 相当于使用 match_parent。</p>\n</blockquote>\n<p>为什么呢？因为如果 View 在布局中使用 wrap_content ，那么它所对应的测量模式就是 AT_MOST ，最后的取值也就是 specSize，在这种情况下 specSize 是 parenSize,而 parenSize  是父容器中目前可使用的大小。就使得 View 的宽高和父容器剩余空间的大小一致，这种效果就和 match_parent 完全一致的。</p>\n<p>如果 View 的测量模式等于 UNSPECIFIED 模式，它的宽高是如何取值的呢？这种情况 View 的大小等于 getSuggestedMinimumWidth&#x2F;Height 的值。源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">getSuggestedMinimumWidth</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground==<span class=\"literal\">null</span>)?mMinWidth : max(mMinWidth,mBackground.getMinimumWidth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Height 方法也类似。总结一下逻辑：如果 View 没有设置背景，那么返回 View 的 minWidth 否则返回 View 的背景的宽度和 View 的 minWidth 的最大值。</p>\n<h5 id=\"ViewGroup-的-measure-过程\"><a href=\"#ViewGroup-的-measure-过程\" class=\"headerlink\" title=\"ViewGroup 的 measure 过程\"></a>ViewGroup 的 measure 过程</h5><p>  对于 ViewGroup 来说，除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素在递归去执行这个过程。和 View 不同的是，ViewGroup 是一个抽象类，因此它没有重写 View 的 onMeasure 的方法，但是它提供了一个叫 measureChildren的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measureChildren</span><span class=\"params\">(<span class=\"type\">int</span> widthMeasureSpec ,<span class=\"type\">int</span> heightMeasureSpec)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; size;++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> children[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child.mViewFlags &amp; VISIBILITY_MASK)!=GONE)&#123;</span><br><span class=\"line\">            measureChild(child,widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>measureChild 就是取出子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 来创建子元素的 MeasureSpec，接着将 MeasureSpec 直接传递给 View 的  measure 方法来进行测量。</p>\n<p>我们知道，ViewGruop 并没有定义其测量的具体过程，这是因为 ViewGroup 是一个抽象类，其测量过程的 onMeasure 方法需要各子类去具体实现。</p>\n<h5 id=\"如何取得在Activity-View-的宽高\"><a href=\"#如何取得在Activity-View-的宽高\" class=\"headerlink\" title=\"如何取得在Activity View 的宽高\"></a>如何取得在Activity View 的宽高</h5><p>在 Activity 的 onCreate、onResume、onStart 均无法正确的获得 View 的宽高，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的，因此无法保证。有四种方法获得 View 的宽高 :</p>\n<ul>\n<li><p>**Activity&#x2F;View#WindowFocusChanged ** ViewFocusChanged 会在 Activity 得到和失去焦点的时候会被调用，这时 View 已经初始化完毕了，宽高已准备好了。需要注意的是这个方法会被多次调用</p>\n</li>\n<li><p><strong>view.post(runnable)</strong> 通过 post 可以将一个 runnable 投递到消息队列的尾部，然后等待 Looper 调用此 runnable 的时候，View 也已经初始化好了。</p>\n</li>\n<li><p><strong>ViewTreeObserver</strong> 使用 ViewObserver 的众多回调可以完成这个功能。</p>\n</li>\n<li><p><strong>手动对 View 进行 measure 来得到宽高</strong> 通过 view.measure 来手动的测量 View 的宽和高，但是也是分情况的：</p>\n<ul>\n<li><p><strong>match_parent</strong> ：这种事无法测量出 View 的宽高的。因为构造 MeasureSpec 的时候我们需要知道 parentSize ，既父容器的空间大小，而这时我们无法确定 parentSzie 的大小，所以理论上无法测量出 Veiw 的大小</p>\n</li>\n<li><p><strong>warp_content</strong> ：这时我们通过构造一个View理论上最大值的 measureSpec 来去测量。View 的尺寸用二进制表示，最大值是30个1（既 2^30-1,也就是 1&lt;&lt; 30 - 1 ）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">widthMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec((<span class=\"number\">1</span> &gt;&gt; <span class=\"number\">30</span>)-<span class=\"number\">1</span>,MeasureSpec.AT_MOST);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">heightMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec((<span class=\"number\">1</span> &gt;&gt; <span class=\"number\">30</span>)-<span class=\"number\">1</span>,MeasureSpec.AT_MOST);</span><br><span class=\"line\">view.measure(widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网上还有两种错误的用法,因为它们违背了系统的内部的实现规范，无法通过 MeasureSpec 获得合法的 SpecMode。当父View对子View的高度不满意时，子控件没有测量模式来限制宽高，父空间会重新调用 onMeasure 测量，所以测量结果不一定准确</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">widthMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec(-<span class=\"number\">1</span>,MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">heightMeasureSpec</span> <span class=\"operator\">=</span>MeasureSpec.markMeasureSpec(-<span class=\"number\">1</span>,MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\">view.measure(widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">view.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    ​</span><br><span class=\"line\"></span><br><span class=\"line\">##### layout 过程</span><br><span class=\"line\"></span><br><span class=\"line\">Layout 的作用是 ViewGroup 用来确定子元素的位置，当 ViewGroup 的位置被确定后，它在 onLayout 中遍历所有的子元素并调用其 layout 方法，在 layout 方法中 onLayout 方法会被调用。layout 方法确定 View 本身的位置，而 onLayout 方法则会确定所有子元素的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public void layout(int l,int t,int r,int b)&#123;</span><br><span class=\"line\">    if(mPrivateFlags3&amp;PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT!=0)&#123;</span><br><span class=\"line\">        onMeasure(mOldWidthMeasureSpec,mOldHeightMeasureSpec);</span><br><span class=\"line\">        mPrivateFlag3 &amp;=~ PFLAG3_MEASURE_NEEDED_BEFFORE_LAYOUT；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int oldL = mLeft;</span><br><span class=\"line\">    int oldT = mTop;</span><br><span class=\"line\">    int oldB = mBootom;</span><br><span class=\"line\">    int oldR = mRIght;</span><br><span class=\"line\">    boolean changed = isLayoutModeOption(mParent)?setOpticalFram(l,t,r,b):setFrame(l,t,r,b);</span><br><span class=\"line\">        if(changed||(mPrivateFlags&amp;PFLAG_LAYOUT_REQUIRED)==PFLAG_LAYOUT_REQUIRED)&#123;</span><br><span class=\"line\">            onLayout(changed,l,t,r,b);</span><br><span class=\"line\">            ....</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>大致流程如下：首先通过 setFrame 放来来设定 View 的四个顶点的位置，即初始化 mLeft,mRight,mTop,mBottom 四个值，View 的四个顶点一旦确定，那么 View 在容器中的位置也就确定了；接着调用 onLayout 方法，这个方法用途是父容器确定子元素的位置，和 onMeasure 类似, onLayout 的具体实现同样和具体的布局有关，所以 View 和 ViewGroup 没有具体的实现。</p>\n<h4 id=\"Draw-过程\"><a href=\"#Draw-过程\" class=\"headerlink\" title=\"Draw 过程\"></a>Draw 过程</h4><p>Draw 过程就比较简单了，它的作用是将 View 绘制到屏幕上。遵循以下几步：</p>\n<ul>\n<li>绘制背景 background.draw(canvas)</li>\n<li>绘制自己 onDraw</li>\n<li>绘制 children (dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"layout":"post","title":"Android 的线程和线程池","subtitle":"Android 艺术开发探索","date":"2018-04-01T11:44:00.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n这篇文章主要是复习 Android 开发艺术探索的第 10 章和 第 11 章，整理了 Android 中关于线程的知识点。\n\n## ThreadLoacal\n\nThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。\n\nThreadLoacal 的另一个使用场景是复杂逻辑下的对象传递，例如监听器，有些时候一个线程中的任务过于复杂，这可能表现为函数调用栈比较深以及入口的多样性，在这种情况下使用 ThreadLocal 可以让监听器作为线程内的全局对象存在，只要在当前线程，就可以通过 get 方法获取到监听器。\n\nThreadLocal 在不同的对象操作的都只是当前线程的容器对象，因此在不同线程访问同一个 ThreadLocal 的 set 和 get 方法，它们对于 ThreadLocal 所做的读/写操作仅限于各自线程的内部。\n\n在 Handle 中是用 ThreadLocal 来存储 Lopper，使得各个线程的消息队列都是独立的。至于主线程， 单独使用了一个全局静态变量来存储，保证可以在子线程获取到主线程的 Lopper 从而能够将消息加入到主线程的消息队列中处理。\n\n## AsyncTask\n\nAsyncTask 是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后执行了的进度和最终传递给主线程并在主线程更新 UI。从实现上来说，AsyncTask 是 Thread 和 handle 的封装，通过 AsyncTask 可以更方便的更新 UI ，但是 AsyncTask 并不设和进行特别耗时的后台任务，对于特别耗时的任务来说，建议使用线程池。\n\n###AsyncTask 的工作原理\n\n从 `execute` 方法分析可以得出，在 AsyncTask 在执行的 `execute` 方法时，系统会把 Params 参数封装成一个 FutureTask 对象，FutureTask 是一个并发类，这里它充当了 Runnable 的作用。然后将 FutureTask 交给 SerialExecutor 的 excute 方法执行，它会将 FutureTask 放入 mTask 这个队列中，如果这个时候没有活动的 AsyncTask 任务，那么它就直接调用 scheduleNext() 方法把这个任务放入 threadPoolExecutor 这个线程池执行任务，任务执行完成后又会继续调用 scheduleNext 方法来执行下一个任务，直至所有的任务都执行完毕，所以 AsyncTask 默认是一个串行执行的（3.0 及以上），如果想要 3.0 以上执行，那么可以采用 AyncTask 的 excuteOnExecutor 方法，它接受一个线程池并将任务直接放入线程池中执行，可以跳过 excute 方法的排队步骤。\n\n当 任务执行完成后会调用 postResult 通过 InternalHandler 发送一个消息，将结果发送回主线程并回调 onPostEvexute 方法。这里的 Handle 是静态的，这也就意味着 AsyncTask 的实例 必须在主线程中创建。\n\n## HandlerThread\n\n我们平时想在子线程中创建使用 Handler 的时候，会在 Thread 的 run 方法使用 Looper.prepare() 来创建 Looper 并通过 Looper.loop() 开启消息循环，最后再创建和使用 Handler ，这样 Handler 就能正常工作了。而 Android 系统的 HandlerThread 本身就自己完成了这类工作， 并且更加的完善和规范，例如它获取 Looper 的时候考虑到了线程活跃:\n\n```java\n  public Looper getLooper() {\n        if (!isAlive()) {\n            return null;\n        }\n\n        // If the thread has been started, wait until the looper has been created.\n        synchronized (this) {\n            while (isAlive() && mLooper == null) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                }\n            }\n        }\n        return mLooper;\n    }\n```\n\n提供了`quit` 和`quitSafely` 在任务执行的时候结束当前线程的执行，养成良好的编程习惯。 HandlerThread 的具体实践就是 IntentService 这个接下来讲。\n\n## IntentService\n\nIntentService 是一个特殊的 Service ，主要是用于执行后台的耗时任务，当任务执行完毕后它会自动停止，同时由于它是 Service 的原因 这导致它的优先级别普通的 Thread 要高很多，这让它不容易被系统杀死。\n\nIntentService 中封装了 HandlerThread 和 Handler ，会在 onCreate 时创建一个 HandlerThread 并使用 HandlerThread 的 looper 来创建 Handler 。\n\n```java\n    @Override\n    public void onCreate() {\n\t\t...\n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n\n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n```\n\nIntentService 每次被启动的时候会调用 onStartCommand ，onStartCommand 有调用了 onStart ，onStart 方法会通过 mServiceHandler 发送一个消息，将 startId 和 启动 service 的 Intent 对象发送出去，由 onHandlerIntent 方法来处理。\n\n```java\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        onStart(intent, startId);\n        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n    }\n\n\t@Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        Message msg = mServiceHandler.obtainMessage();\n        msg.arg1 = startId;\n        msg.obj = intent;\n        mServiceHandler.sendMessage(msg);\n    }\n\n   private final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\nonHandlerIntent 执行完毕后会调用 stopSelf（startId） 来尝试结束服务，stopSelf（startId）会判断最近启动次数是否和 startId 一致，如果不一致则说明还有未处理的消息，那么就等待消息处理完毕。否则就立刻停止服务。所以，如果我们在同一时间 startService 一个 IntentService 它们仍是一个实例在处理，任务则是串行处理的。\n\n## 线程池\n\n线程池的好处：\n\n1. 重用线程池中的线程，避免因为线程的创建和销毁所带的性能开销。\n2. 能有效的控制线程的最大并发数量，避免大量线程之间因为互相抢占系统资源而导致的阻塞现象。\n3. 能够对线程进行简单的管理，并提供定时执行以及间隔循环执行等功能。\n\nAndroid 的线程池的概念来源于 Java 的 Executor 接口，真正的实现类则是 ThreadPoolExecutor 。常听说的 Android 的四种类程池也都是通过直接或间接配置 ThreadPoolExecutor 来实现的。\n\n### ThreadPoolExecutor\n\nThread 提供了一系列的参数来配置线程池，这些参数会直接影响线程池的功能特性：\n\n#### corePoolSize\n\n线程池的核心线程数量，默认情况下，核心线程池会在线程池中一直存活，即使它们处于闲置状态。如果 ThreadPoolExcutor 的 allowCoreThreadTimeOut 属性设置为 true，那么闲置的核心线程在等待新人任务到来的时候会有超时策略，这个时间由 keepAliveTime 所指定。\n\n#### maximumPoolSize\n\n线程池所能容纳的最大线程数量，达到这个数值后，新的任务会被阻塞。\n\n#### keepAliveTime\n\n非核心线程的超时时长，当超过这个时间后，非核心线程就会被回收，如果 allowCoreThreadTimeOut 为 true 的话，该限制同样作用于 核心线程。\n\n#### unit\n\n指定 KeepAliveTime 的时间单位(SECONDS、MILLISECONDS....)\n\n#### workQueue\n\n线程池中的任务队列,通过线程池的 execute 方法提交的 Runnable 对象会存储在这个队列中。\n\n#### threadFactory\n\n线程工厂，为线程提供创建新线程的功能。它是一个接口，只有 Thread newThread（Runnable a）方法\n\n#### RejectedExecutionHandler\n\n当线程池无法执行新任务时，可能由于队列已满或是无法成功执行任务，这时候 ThreadPoolExcutor 会调用 handler 的 RejectedExecutionHandler 方法来统治回调者，它提供了四种实现 CallerRunsPolicy、AbortPolicy、DiscardPolicy 和 DiscardOldestPolicy\n\n####ThreadPoolExecutor 的执行任务的步骤：\n\n1. 如果线程池中的线程数量为达到核心线程的数量，那么会直接启动一个核心线程来执行任务。\n2. 如果线程池种的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。\n3. 如果在步骤 2 中无法将任务插入到任务队列中，这往往由于任务队列已满，这时候如果线程数量未达到线程池规定的最大值，那么立刻启动一个非核心线程来执行任务\n4. 如果第 3 步执行的线程池数量已经达到线程池规定的最大值，那么就拒绝执行此任务，调用 RejectedExecutionHandler 通知回调者\n\n### 线程池的分类\n\nExecutors 提供大量的创建线程池的方法，使用它可以让我们快速的配置适合我们的 ThreadPoolExcutor，他们具有不同的功能特性大致分为四类，分别是 FixedThreadPool、CachedThreadPool、ScheduledThreadPool 以及 SingleThreadExecutor。\n\n#### FiexdThreadPool\n\n通过 Executors 的 newFixedThreadPool 方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们也不会被回收，除非线程池被关闭了。当所有线程都处于活动状态时，新任务会处于等待状态。队列的大小是没有任何限制的。同时也没有超时机制。\n\n#### CachedThreadPool\n\n通过 Executors 的 newCachedThreadPool 方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大的线程池数量为 Integer.MAX_VALUE.它的线程等待时长为 60 秒，超过 60 秒限制线程就会被回收。CachedThreadPool 比较适合执行大量的耗时任务较少的任务。\n\n#### ScheduledThreadPool\n\n它的核心线程数量是固定的，非核心线程数量没有限制，并且当非核心线程闲置的时候会被立刻回收。这类线程池主要执行定时任务和固定周期的重复任务。\n\n#### SingleThreadExecutor\n\n这个线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行，使得任务不需要处理线程同步的问题。\n\n除了 Excutors 提供的线程实现，我们也可以根据实际需要灵活地配置线程池，比如之前的 AsyncTask 它内部的线程池实现:\n\n```java\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n                sPoolWorkQueue, sThreadFactory);\n        threadPoolExecutor.allowCoreThreadTimeOut(true);\n// CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));  核心线程数量\n// MAXIMUM_POOL_SIZE= CPU_COUNT * 2 + 1;  最大线程数量\n// KEEP_ALIVE_SECONDS = 30 超时时间\n// sPoolWorkQueue = new LinkedBlockingQueue<Runnable>(128); 容量为 128 的队列\n```\n","source":"_posts/2018-04-04-andorid_thread.md","raw":"---\nlayout: post\ntitle: \"Android 的线程和线程池\"\nsubtitle: \"Android 艺术开发探索\"\ndate: 2018-04-01 19:44:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n---\n\n这篇文章主要是复习 Android 开发艺术探索的第 10 章和 第 11 章，整理了 Android 中关于线程的知识点。\n\n## ThreadLoacal\n\nThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。\n\nThreadLoacal 的另一个使用场景是复杂逻辑下的对象传递，例如监听器，有些时候一个线程中的任务过于复杂，这可能表现为函数调用栈比较深以及入口的多样性，在这种情况下使用 ThreadLocal 可以让监听器作为线程内的全局对象存在，只要在当前线程，就可以通过 get 方法获取到监听器。\n\nThreadLocal 在不同的对象操作的都只是当前线程的容器对象，因此在不同线程访问同一个 ThreadLocal 的 set 和 get 方法，它们对于 ThreadLocal 所做的读/写操作仅限于各自线程的内部。\n\n在 Handle 中是用 ThreadLocal 来存储 Lopper，使得各个线程的消息队列都是独立的。至于主线程， 单独使用了一个全局静态变量来存储，保证可以在子线程获取到主线程的 Lopper 从而能够将消息加入到主线程的消息队列中处理。\n\n## AsyncTask\n\nAsyncTask 是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后执行了的进度和最终传递给主线程并在主线程更新 UI。从实现上来说，AsyncTask 是 Thread 和 handle 的封装，通过 AsyncTask 可以更方便的更新 UI ，但是 AsyncTask 并不设和进行特别耗时的后台任务，对于特别耗时的任务来说，建议使用线程池。\n\n###AsyncTask 的工作原理\n\n从 `execute` 方法分析可以得出，在 AsyncTask 在执行的 `execute` 方法时，系统会把 Params 参数封装成一个 FutureTask 对象，FutureTask 是一个并发类，这里它充当了 Runnable 的作用。然后将 FutureTask 交给 SerialExecutor 的 excute 方法执行，它会将 FutureTask 放入 mTask 这个队列中，如果这个时候没有活动的 AsyncTask 任务，那么它就直接调用 scheduleNext() 方法把这个任务放入 threadPoolExecutor 这个线程池执行任务，任务执行完成后又会继续调用 scheduleNext 方法来执行下一个任务，直至所有的任务都执行完毕，所以 AsyncTask 默认是一个串行执行的（3.0 及以上），如果想要 3.0 以上执行，那么可以采用 AyncTask 的 excuteOnExecutor 方法，它接受一个线程池并将任务直接放入线程池中执行，可以跳过 excute 方法的排队步骤。\n\n当 任务执行完成后会调用 postResult 通过 InternalHandler 发送一个消息，将结果发送回主线程并回调 onPostEvexute 方法。这里的 Handle 是静态的，这也就意味着 AsyncTask 的实例 必须在主线程中创建。\n\n## HandlerThread\n\n我们平时想在子线程中创建使用 Handler 的时候，会在 Thread 的 run 方法使用 Looper.prepare() 来创建 Looper 并通过 Looper.loop() 开启消息循环，最后再创建和使用 Handler ，这样 Handler 就能正常工作了。而 Android 系统的 HandlerThread 本身就自己完成了这类工作， 并且更加的完善和规范，例如它获取 Looper 的时候考虑到了线程活跃:\n\n```java\n  public Looper getLooper() {\n        if (!isAlive()) {\n            return null;\n        }\n\n        // If the thread has been started, wait until the looper has been created.\n        synchronized (this) {\n            while (isAlive() && mLooper == null) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                }\n            }\n        }\n        return mLooper;\n    }\n```\n\n提供了`quit` 和`quitSafely` 在任务执行的时候结束当前线程的执行，养成良好的编程习惯。 HandlerThread 的具体实践就是 IntentService 这个接下来讲。\n\n## IntentService\n\nIntentService 是一个特殊的 Service ，主要是用于执行后台的耗时任务，当任务执行完毕后它会自动停止，同时由于它是 Service 的原因 这导致它的优先级别普通的 Thread 要高很多，这让它不容易被系统杀死。\n\nIntentService 中封装了 HandlerThread 和 Handler ，会在 onCreate 时创建一个 HandlerThread 并使用 HandlerThread 的 looper 来创建 Handler 。\n\n```java\n    @Override\n    public void onCreate() {\n\t\t...\n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n\n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n```\n\nIntentService 每次被启动的时候会调用 onStartCommand ，onStartCommand 有调用了 onStart ，onStart 方法会通过 mServiceHandler 发送一个消息，将 startId 和 启动 service 的 Intent 对象发送出去，由 onHandlerIntent 方法来处理。\n\n```java\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        onStart(intent, startId);\n        return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n    }\n\n\t@Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        Message msg = mServiceHandler.obtainMessage();\n        msg.arg1 = startId;\n        msg.obj = intent;\n        mServiceHandler.sendMessage(msg);\n    }\n\n   private final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\nonHandlerIntent 执行完毕后会调用 stopSelf（startId） 来尝试结束服务，stopSelf（startId）会判断最近启动次数是否和 startId 一致，如果不一致则说明还有未处理的消息，那么就等待消息处理完毕。否则就立刻停止服务。所以，如果我们在同一时间 startService 一个 IntentService 它们仍是一个实例在处理，任务则是串行处理的。\n\n## 线程池\n\n线程池的好处：\n\n1. 重用线程池中的线程，避免因为线程的创建和销毁所带的性能开销。\n2. 能有效的控制线程的最大并发数量，避免大量线程之间因为互相抢占系统资源而导致的阻塞现象。\n3. 能够对线程进行简单的管理，并提供定时执行以及间隔循环执行等功能。\n\nAndroid 的线程池的概念来源于 Java 的 Executor 接口，真正的实现类则是 ThreadPoolExecutor 。常听说的 Android 的四种类程池也都是通过直接或间接配置 ThreadPoolExecutor 来实现的。\n\n### ThreadPoolExecutor\n\nThread 提供了一系列的参数来配置线程池，这些参数会直接影响线程池的功能特性：\n\n#### corePoolSize\n\n线程池的核心线程数量，默认情况下，核心线程池会在线程池中一直存活，即使它们处于闲置状态。如果 ThreadPoolExcutor 的 allowCoreThreadTimeOut 属性设置为 true，那么闲置的核心线程在等待新人任务到来的时候会有超时策略，这个时间由 keepAliveTime 所指定。\n\n#### maximumPoolSize\n\n线程池所能容纳的最大线程数量，达到这个数值后，新的任务会被阻塞。\n\n#### keepAliveTime\n\n非核心线程的超时时长，当超过这个时间后，非核心线程就会被回收，如果 allowCoreThreadTimeOut 为 true 的话，该限制同样作用于 核心线程。\n\n#### unit\n\n指定 KeepAliveTime 的时间单位(SECONDS、MILLISECONDS....)\n\n#### workQueue\n\n线程池中的任务队列,通过线程池的 execute 方法提交的 Runnable 对象会存储在这个队列中。\n\n#### threadFactory\n\n线程工厂，为线程提供创建新线程的功能。它是一个接口，只有 Thread newThread（Runnable a）方法\n\n#### RejectedExecutionHandler\n\n当线程池无法执行新任务时，可能由于队列已满或是无法成功执行任务，这时候 ThreadPoolExcutor 会调用 handler 的 RejectedExecutionHandler 方法来统治回调者，它提供了四种实现 CallerRunsPolicy、AbortPolicy、DiscardPolicy 和 DiscardOldestPolicy\n\n####ThreadPoolExecutor 的执行任务的步骤：\n\n1. 如果线程池中的线程数量为达到核心线程的数量，那么会直接启动一个核心线程来执行任务。\n2. 如果线程池种的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。\n3. 如果在步骤 2 中无法将任务插入到任务队列中，这往往由于任务队列已满，这时候如果线程数量未达到线程池规定的最大值，那么立刻启动一个非核心线程来执行任务\n4. 如果第 3 步执行的线程池数量已经达到线程池规定的最大值，那么就拒绝执行此任务，调用 RejectedExecutionHandler 通知回调者\n\n### 线程池的分类\n\nExecutors 提供大量的创建线程池的方法，使用它可以让我们快速的配置适合我们的 ThreadPoolExcutor，他们具有不同的功能特性大致分为四类，分别是 FixedThreadPool、CachedThreadPool、ScheduledThreadPool 以及 SingleThreadExecutor。\n\n#### FiexdThreadPool\n\n通过 Executors 的 newFixedThreadPool 方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们也不会被回收，除非线程池被关闭了。当所有线程都处于活动状态时，新任务会处于等待状态。队列的大小是没有任何限制的。同时也没有超时机制。\n\n#### CachedThreadPool\n\n通过 Executors 的 newCachedThreadPool 方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大的线程池数量为 Integer.MAX_VALUE.它的线程等待时长为 60 秒，超过 60 秒限制线程就会被回收。CachedThreadPool 比较适合执行大量的耗时任务较少的任务。\n\n#### ScheduledThreadPool\n\n它的核心线程数量是固定的，非核心线程数量没有限制，并且当非核心线程闲置的时候会被立刻回收。这类线程池主要执行定时任务和固定周期的重复任务。\n\n#### SingleThreadExecutor\n\n这个线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行，使得任务不需要处理线程同步的问题。\n\n除了 Excutors 提供的线程实现，我们也可以根据实际需要灵活地配置线程池，比如之前的 AsyncTask 它内部的线程池实现:\n\n```java\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n                sPoolWorkQueue, sThreadFactory);\n        threadPoolExecutor.allowCoreThreadTimeOut(true);\n// CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));  核心线程数量\n// MAXIMUM_POOL_SIZE= CPU_COUNT * 2 + 1;  最大线程数量\n// KEEP_ALIVE_SECONDS = 30 超时时间\n// sPoolWorkQueue = new LinkedBlockingQueue<Runnable>(128); 容量为 128 的队列\n```\n","slug":"2018-04-04-andorid_thread","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p7000ms2y4hx0s9x85","content":"<p>这篇文章主要是复习 Android 开发艺术探索的第 10 章和 第 11 章，整理了 Android 中关于线程的知识点。</p>\n<h2 id=\"ThreadLoacal\"><a href=\"#ThreadLoacal\" class=\"headerlink\" title=\"ThreadLoacal\"></a>ThreadLoacal</h2><p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p>\n<p>ThreadLoacal 的另一个使用场景是复杂逻辑下的对象传递，例如监听器，有些时候一个线程中的任务过于复杂，这可能表现为函数调用栈比较深以及入口的多样性，在这种情况下使用 ThreadLocal 可以让监听器作为线程内的全局对象存在，只要在当前线程，就可以通过 get 方法获取到监听器。</p>\n<p>ThreadLocal 在不同的对象操作的都只是当前线程的容器对象，因此在不同线程访问同一个 ThreadLocal 的 set 和 get 方法，它们对于 ThreadLocal 所做的读&#x2F;写操作仅限于各自线程的内部。</p>\n<p>在 Handle 中是用 ThreadLocal 来存储 Lopper，使得各个线程的消息队列都是独立的。至于主线程， 单独使用了一个全局静态变量来存储，保证可以在子线程获取到主线程的 Lopper 从而能够将消息加入到主线程的消息队列中处理。</p>\n<h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><p>AsyncTask 是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后执行了的进度和最终传递给主线程并在主线程更新 UI。从实现上来说，AsyncTask 是 Thread 和 handle 的封装，通过 AsyncTask 可以更方便的更新 UI ，但是 AsyncTask 并不设和进行特别耗时的后台任务，对于特别耗时的任务来说，建议使用线程池。</p>\n<p>###AsyncTask 的工作原理</p>\n<p>从 <code>execute</code> 方法分析可以得出，在 AsyncTask 在执行的 <code>execute</code> 方法时，系统会把 Params 参数封装成一个 FutureTask 对象，FutureTask 是一个并发类，这里它充当了 Runnable 的作用。然后将 FutureTask 交给 SerialExecutor 的 excute 方法执行，它会将 FutureTask 放入 mTask 这个队列中，如果这个时候没有活动的 AsyncTask 任务，那么它就直接调用 scheduleNext() 方法把这个任务放入 threadPoolExecutor 这个线程池执行任务，任务执行完成后又会继续调用 scheduleNext 方法来执行下一个任务，直至所有的任务都执行完毕，所以 AsyncTask 默认是一个串行执行的（3.0 及以上），如果想要 3.0 以上执行，那么可以采用 AyncTask 的 excuteOnExecutor 方法，它接受一个线程池并将任务直接放入线程池中执行，可以跳过 excute 方法的排队步骤。</p>\n<p>当 任务执行完成后会调用 postResult 通过 InternalHandler 发送一个消息，将结果发送回主线程并回调 onPostEvexute 方法。这里的 Handle 是静态的，这也就意味着 AsyncTask 的实例 必须在主线程中创建。</p>\n<h2 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h2><p>我们平时想在子线程中创建使用 Handler 的时候，会在 Thread 的 run 方法使用 Looper.prepare() 来创建 Looper 并通过 Looper.loop() 开启消息循环，最后再创建和使用 Handler ，这样 Handler 就能正常工作了。而 Android 系统的 HandlerThread 本身就自己完成了这类工作， 并且更加的完善和规范，例如它获取 Looper 的时候考虑到了线程活跃:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Looper <span class=\"title function_\">getLooper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isAlive()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// If the thread has been started, wait until the looper has been created.</span></span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (isAlive() &amp;&amp; mLooper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  wait();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mLooper;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供了<code>quit</code> 和<code>quitSafely</code> 在任务执行的时候结束当前线程的执行，养成良好的编程习惯。 HandlerThread 的具体实践就是 IntentService 这个接下来讲。</p>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService 是一个特殊的 Service ，主要是用于执行后台的耗时任务，当任务执行完毕后它会自动停止，同时由于它是 Service 的原因 这导致它的优先级别普通的 Thread 要高很多，这让它不容易被系统杀死。</p>\n<p>IntentService 中封装了 HandlerThread 和 Handler ，会在 onCreate 时创建一个 HandlerThread 并使用 HandlerThread 的 looper 来创建 Handler 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">      <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">      <span class=\"type\">HandlerThread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HandlerThread</span>(<span class=\"string\">&quot;IntentService[&quot;</span> + mName + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">      thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">      mServiceLooper = thread.getLooper();</span><br><span class=\"line\">      mServiceHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceHandler</span>(mServiceLooper);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>IntentService 每次被启动的时候会调用 onStartCommand ，onStartCommand 有调用了 onStart ，onStart 方法会通过 mServiceHandler 发送一个消息，将 startId 和 启动 service 的 Intent 对象发送出去，由 onHandlerIntent 方法来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">       onStart(intent, startId);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Message</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> mServiceHandler.obtainMessage();</span><br><span class=\"line\">       msg.arg1 = startId;</span><br><span class=\"line\">       msg.obj = intent;</span><br><span class=\"line\">       mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"title function_\">ServiceHandler</span><span class=\"params\">(Looper looper)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>(looper);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">           stopSelf(msg.arg1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>onHandlerIntent 执行完毕后会调用 stopSelf（startId） 来尝试结束服务，stopSelf（startId）会判断最近启动次数是否和 startId 一致，如果不一致则说明还有未处理的消息，那么就等待消息处理完毕。否则就立刻停止服务。所以，如果我们在同一时间 startService 一个 IntentService 它们仍是一个实例在处理，任务则是串行处理的。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池的好处：</p>\n<ol>\n<li>重用线程池中的线程，避免因为线程的创建和销毁所带的性能开销。</li>\n<li>能有效的控制线程的最大并发数量，避免大量线程之间因为互相抢占系统资源而导致的阻塞现象。</li>\n<li>能够对线程进行简单的管理，并提供定时执行以及间隔循环执行等功能。</li>\n</ol>\n<p>Android 的线程池的概念来源于 Java 的 Executor 接口，真正的实现类则是 ThreadPoolExecutor 。常听说的 Android 的四种类程池也都是通过直接或间接配置 ThreadPoolExecutor 来实现的。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>Thread 提供了一系列的参数来配置线程池，这些参数会直接影响线程池的功能特性：</p>\n<h4 id=\"corePoolSize\"><a href=\"#corePoolSize\" class=\"headerlink\" title=\"corePoolSize\"></a>corePoolSize</h4><p>线程池的核心线程数量，默认情况下，核心线程池会在线程池中一直存活，即使它们处于闲置状态。如果 ThreadPoolExcutor 的 allowCoreThreadTimeOut 属性设置为 true，那么闲置的核心线程在等待新人任务到来的时候会有超时策略，这个时间由 keepAliveTime 所指定。</p>\n<h4 id=\"maximumPoolSize\"><a href=\"#maximumPoolSize\" class=\"headerlink\" title=\"maximumPoolSize\"></a>maximumPoolSize</h4><p>线程池所能容纳的最大线程数量，达到这个数值后，新的任务会被阻塞。</p>\n<h4 id=\"keepAliveTime\"><a href=\"#keepAliveTime\" class=\"headerlink\" title=\"keepAliveTime\"></a>keepAliveTime</h4><p>非核心线程的超时时长，当超过这个时间后，非核心线程就会被回收，如果 allowCoreThreadTimeOut 为 true 的话，该限制同样作用于 核心线程。</p>\n<h4 id=\"unit\"><a href=\"#unit\" class=\"headerlink\" title=\"unit\"></a>unit</h4><p>指定 KeepAliveTime 的时间单位(SECONDS、MILLISECONDS….)</p>\n<h4 id=\"workQueue\"><a href=\"#workQueue\" class=\"headerlink\" title=\"workQueue\"></a>workQueue</h4><p>线程池中的任务队列,通过线程池的 execute 方法提交的 Runnable 对象会存储在这个队列中。</p>\n<h4 id=\"threadFactory\"><a href=\"#threadFactory\" class=\"headerlink\" title=\"threadFactory\"></a>threadFactory</h4><p>线程工厂，为线程提供创建新线程的功能。它是一个接口，只有 Thread newThread（Runnable a）方法</p>\n<h4 id=\"RejectedExecutionHandler\"><a href=\"#RejectedExecutionHandler\" class=\"headerlink\" title=\"RejectedExecutionHandler\"></a>RejectedExecutionHandler</h4><p>当线程池无法执行新任务时，可能由于队列已满或是无法成功执行任务，这时候 ThreadPoolExcutor 会调用 handler 的 RejectedExecutionHandler 方法来统治回调者，它提供了四种实现 CallerRunsPolicy、AbortPolicy、DiscardPolicy 和 DiscardOldestPolicy</p>\n<p>####ThreadPoolExecutor 的执行任务的步骤：</p>\n<ol>\n<li>如果线程池中的线程数量为达到核心线程的数量，那么会直接启动一个核心线程来执行任务。</li>\n<li>如果线程池种的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li>\n<li>如果在步骤 2 中无法将任务插入到任务队列中，这往往由于任务队列已满，这时候如果线程数量未达到线程池规定的最大值，那么立刻启动一个非核心线程来执行任务</li>\n<li>如果第 3 步执行的线程池数量已经达到线程池规定的最大值，那么就拒绝执行此任务，调用 RejectedExecutionHandler 通知回调者</li>\n</ol>\n<h3 id=\"线程池的分类\"><a href=\"#线程池的分类\" class=\"headerlink\" title=\"线程池的分类\"></a>线程池的分类</h3><p>Executors 提供大量的创建线程池的方法，使用它可以让我们快速的配置适合我们的 ThreadPoolExcutor，他们具有不同的功能特性大致分为四类，分别是 FixedThreadPool、CachedThreadPool、ScheduledThreadPool 以及 SingleThreadExecutor。</p>\n<h4 id=\"FiexdThreadPool\"><a href=\"#FiexdThreadPool\" class=\"headerlink\" title=\"FiexdThreadPool\"></a>FiexdThreadPool</h4><p>通过 Executors 的 newFixedThreadPool 方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们也不会被回收，除非线程池被关闭了。当所有线程都处于活动状态时，新任务会处于等待状态。队列的大小是没有任何限制的。同时也没有超时机制。</p>\n<h4 id=\"CachedThreadPool\"><a href=\"#CachedThreadPool\" class=\"headerlink\" title=\"CachedThreadPool\"></a>CachedThreadPool</h4><p>通过 Executors 的 newCachedThreadPool 方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大的线程池数量为 Integer.MAX_VALUE.它的线程等待时长为 60 秒，超过 60 秒限制线程就会被回收。CachedThreadPool 比较适合执行大量的耗时任务较少的任务。</p>\n<h4 id=\"ScheduledThreadPool\"><a href=\"#ScheduledThreadPool\" class=\"headerlink\" title=\"ScheduledThreadPool\"></a>ScheduledThreadPool</h4><p>它的核心线程数量是固定的，非核心线程数量没有限制，并且当非核心线程闲置的时候会被立刻回收。这类线程池主要执行定时任务和固定周期的重复任务。</p>\n<h4 id=\"SingleThreadExecutor\"><a href=\"#SingleThreadExecutor\" class=\"headerlink\" title=\"SingleThreadExecutor\"></a>SingleThreadExecutor</h4><p>这个线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行，使得任务不需要处理线程同步的问题。</p>\n<p>除了 Excutors 提供的线程实现，我们也可以根据实际需要灵活地配置线程池，比如之前的 AsyncTask 它内部的线程池实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">threadPoolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class=\"line\">                sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\">        threadPoolExecutor.allowCoreThreadTimeOut(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));  核心线程数量</span></span><br><span class=\"line\"><span class=\"comment\">// MAXIMUM_POOL_SIZE= CPU_COUNT * 2 + 1;  最大线程数量</span></span><br><span class=\"line\"><span class=\"comment\">// KEEP_ALIVE_SECONDS = 30 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">// sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128); 容量为 128 的队列</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章主要是复习 Android 开发艺术探索的第 10 章和 第 11 章，整理了 Android 中关于线程的知识点。</p>\n<h2 id=\"ThreadLoacal\"><a href=\"#ThreadLoacal\" class=\"headerlink\" title=\"ThreadLoacal\"></a>ThreadLoacal</h2><p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p>\n<p>ThreadLoacal 的另一个使用场景是复杂逻辑下的对象传递，例如监听器，有些时候一个线程中的任务过于复杂，这可能表现为函数调用栈比较深以及入口的多样性，在这种情况下使用 ThreadLocal 可以让监听器作为线程内的全局对象存在，只要在当前线程，就可以通过 get 方法获取到监听器。</p>\n<p>ThreadLocal 在不同的对象操作的都只是当前线程的容器对象，因此在不同线程访问同一个 ThreadLocal 的 set 和 get 方法，它们对于 ThreadLocal 所做的读&#x2F;写操作仅限于各自线程的内部。</p>\n<p>在 Handle 中是用 ThreadLocal 来存储 Lopper，使得各个线程的消息队列都是独立的。至于主线程， 单独使用了一个全局静态变量来存储，保证可以在子线程获取到主线程的 Lopper 从而能够将消息加入到主线程的消息队列中处理。</p>\n<h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><p>AsyncTask 是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后执行了的进度和最终传递给主线程并在主线程更新 UI。从实现上来说，AsyncTask 是 Thread 和 handle 的封装，通过 AsyncTask 可以更方便的更新 UI ，但是 AsyncTask 并不设和进行特别耗时的后台任务，对于特别耗时的任务来说，建议使用线程池。</p>\n<p>###AsyncTask 的工作原理</p>\n<p>从 <code>execute</code> 方法分析可以得出，在 AsyncTask 在执行的 <code>execute</code> 方法时，系统会把 Params 参数封装成一个 FutureTask 对象，FutureTask 是一个并发类，这里它充当了 Runnable 的作用。然后将 FutureTask 交给 SerialExecutor 的 excute 方法执行，它会将 FutureTask 放入 mTask 这个队列中，如果这个时候没有活动的 AsyncTask 任务，那么它就直接调用 scheduleNext() 方法把这个任务放入 threadPoolExecutor 这个线程池执行任务，任务执行完成后又会继续调用 scheduleNext 方法来执行下一个任务，直至所有的任务都执行完毕，所以 AsyncTask 默认是一个串行执行的（3.0 及以上），如果想要 3.0 以上执行，那么可以采用 AyncTask 的 excuteOnExecutor 方法，它接受一个线程池并将任务直接放入线程池中执行，可以跳过 excute 方法的排队步骤。</p>\n<p>当 任务执行完成后会调用 postResult 通过 InternalHandler 发送一个消息，将结果发送回主线程并回调 onPostEvexute 方法。这里的 Handle 是静态的，这也就意味着 AsyncTask 的实例 必须在主线程中创建。</p>\n<h2 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h2><p>我们平时想在子线程中创建使用 Handler 的时候，会在 Thread 的 run 方法使用 Looper.prepare() 来创建 Looper 并通过 Looper.loop() 开启消息循环，最后再创建和使用 Handler ，这样 Handler 就能正常工作了。而 Android 系统的 HandlerThread 本身就自己完成了这类工作， 并且更加的完善和规范，例如它获取 Looper 的时候考虑到了线程活跃:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Looper <span class=\"title function_\">getLooper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isAlive()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// If the thread has been started, wait until the looper has been created.</span></span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (isAlive() &amp;&amp; mLooper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  wait();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mLooper;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供了<code>quit</code> 和<code>quitSafely</code> 在任务执行的时候结束当前线程的执行，养成良好的编程习惯。 HandlerThread 的具体实践就是 IntentService 这个接下来讲。</p>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService 是一个特殊的 Service ，主要是用于执行后台的耗时任务，当任务执行完毕后它会自动停止，同时由于它是 Service 的原因 这导致它的优先级别普通的 Thread 要高很多，这让它不容易被系统杀死。</p>\n<p>IntentService 中封装了 HandlerThread 和 Handler ，会在 onCreate 时创建一个 HandlerThread 并使用 HandlerThread 的 looper 来创建 Handler 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">      <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">      <span class=\"type\">HandlerThread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HandlerThread</span>(<span class=\"string\">&quot;IntentService[&quot;</span> + mName + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">      thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">      mServiceLooper = thread.getLooper();</span><br><span class=\"line\">      mServiceHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceHandler</span>(mServiceLooper);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>IntentService 每次被启动的时候会调用 onStartCommand ，onStartCommand 有调用了 onStart ，onStart 方法会通过 mServiceHandler 发送一个消息，将 startId 和 启动 service 的 Intent 对象发送出去，由 onHandlerIntent 方法来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">       onStart(intent, startId);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Message</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> mServiceHandler.obtainMessage();</span><br><span class=\"line\">       msg.arg1 = startId;</span><br><span class=\"line\">       msg.obj = intent;</span><br><span class=\"line\">       mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"title function_\">ServiceHandler</span><span class=\"params\">(Looper looper)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>(looper);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">           stopSelf(msg.arg1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>onHandlerIntent 执行完毕后会调用 stopSelf（startId） 来尝试结束服务，stopSelf（startId）会判断最近启动次数是否和 startId 一致，如果不一致则说明还有未处理的消息，那么就等待消息处理完毕。否则就立刻停止服务。所以，如果我们在同一时间 startService 一个 IntentService 它们仍是一个实例在处理，任务则是串行处理的。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池的好处：</p>\n<ol>\n<li>重用线程池中的线程，避免因为线程的创建和销毁所带的性能开销。</li>\n<li>能有效的控制线程的最大并发数量，避免大量线程之间因为互相抢占系统资源而导致的阻塞现象。</li>\n<li>能够对线程进行简单的管理，并提供定时执行以及间隔循环执行等功能。</li>\n</ol>\n<p>Android 的线程池的概念来源于 Java 的 Executor 接口，真正的实现类则是 ThreadPoolExecutor 。常听说的 Android 的四种类程池也都是通过直接或间接配置 ThreadPoolExecutor 来实现的。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>Thread 提供了一系列的参数来配置线程池，这些参数会直接影响线程池的功能特性：</p>\n<h4 id=\"corePoolSize\"><a href=\"#corePoolSize\" class=\"headerlink\" title=\"corePoolSize\"></a>corePoolSize</h4><p>线程池的核心线程数量，默认情况下，核心线程池会在线程池中一直存活，即使它们处于闲置状态。如果 ThreadPoolExcutor 的 allowCoreThreadTimeOut 属性设置为 true，那么闲置的核心线程在等待新人任务到来的时候会有超时策略，这个时间由 keepAliveTime 所指定。</p>\n<h4 id=\"maximumPoolSize\"><a href=\"#maximumPoolSize\" class=\"headerlink\" title=\"maximumPoolSize\"></a>maximumPoolSize</h4><p>线程池所能容纳的最大线程数量，达到这个数值后，新的任务会被阻塞。</p>\n<h4 id=\"keepAliveTime\"><a href=\"#keepAliveTime\" class=\"headerlink\" title=\"keepAliveTime\"></a>keepAliveTime</h4><p>非核心线程的超时时长，当超过这个时间后，非核心线程就会被回收，如果 allowCoreThreadTimeOut 为 true 的话，该限制同样作用于 核心线程。</p>\n<h4 id=\"unit\"><a href=\"#unit\" class=\"headerlink\" title=\"unit\"></a>unit</h4><p>指定 KeepAliveTime 的时间单位(SECONDS、MILLISECONDS….)</p>\n<h4 id=\"workQueue\"><a href=\"#workQueue\" class=\"headerlink\" title=\"workQueue\"></a>workQueue</h4><p>线程池中的任务队列,通过线程池的 execute 方法提交的 Runnable 对象会存储在这个队列中。</p>\n<h4 id=\"threadFactory\"><a href=\"#threadFactory\" class=\"headerlink\" title=\"threadFactory\"></a>threadFactory</h4><p>线程工厂，为线程提供创建新线程的功能。它是一个接口，只有 Thread newThread（Runnable a）方法</p>\n<h4 id=\"RejectedExecutionHandler\"><a href=\"#RejectedExecutionHandler\" class=\"headerlink\" title=\"RejectedExecutionHandler\"></a>RejectedExecutionHandler</h4><p>当线程池无法执行新任务时，可能由于队列已满或是无法成功执行任务，这时候 ThreadPoolExcutor 会调用 handler 的 RejectedExecutionHandler 方法来统治回调者，它提供了四种实现 CallerRunsPolicy、AbortPolicy、DiscardPolicy 和 DiscardOldestPolicy</p>\n<p>####ThreadPoolExecutor 的执行任务的步骤：</p>\n<ol>\n<li>如果线程池中的线程数量为达到核心线程的数量，那么会直接启动一个核心线程来执行任务。</li>\n<li>如果线程池种的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li>\n<li>如果在步骤 2 中无法将任务插入到任务队列中，这往往由于任务队列已满，这时候如果线程数量未达到线程池规定的最大值，那么立刻启动一个非核心线程来执行任务</li>\n<li>如果第 3 步执行的线程池数量已经达到线程池规定的最大值，那么就拒绝执行此任务，调用 RejectedExecutionHandler 通知回调者</li>\n</ol>\n<h3 id=\"线程池的分类\"><a href=\"#线程池的分类\" class=\"headerlink\" title=\"线程池的分类\"></a>线程池的分类</h3><p>Executors 提供大量的创建线程池的方法，使用它可以让我们快速的配置适合我们的 ThreadPoolExcutor，他们具有不同的功能特性大致分为四类，分别是 FixedThreadPool、CachedThreadPool、ScheduledThreadPool 以及 SingleThreadExecutor。</p>\n<h4 id=\"FiexdThreadPool\"><a href=\"#FiexdThreadPool\" class=\"headerlink\" title=\"FiexdThreadPool\"></a>FiexdThreadPool</h4><p>通过 Executors 的 newFixedThreadPool 方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们也不会被回收，除非线程池被关闭了。当所有线程都处于活动状态时，新任务会处于等待状态。队列的大小是没有任何限制的。同时也没有超时机制。</p>\n<h4 id=\"CachedThreadPool\"><a href=\"#CachedThreadPool\" class=\"headerlink\" title=\"CachedThreadPool\"></a>CachedThreadPool</h4><p>通过 Executors 的 newCachedThreadPool 方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大的线程池数量为 Integer.MAX_VALUE.它的线程等待时长为 60 秒，超过 60 秒限制线程就会被回收。CachedThreadPool 比较适合执行大量的耗时任务较少的任务。</p>\n<h4 id=\"ScheduledThreadPool\"><a href=\"#ScheduledThreadPool\" class=\"headerlink\" title=\"ScheduledThreadPool\"></a>ScheduledThreadPool</h4><p>它的核心线程数量是固定的，非核心线程数量没有限制，并且当非核心线程闲置的时候会被立刻回收。这类线程池主要执行定时任务和固定周期的重复任务。</p>\n<h4 id=\"SingleThreadExecutor\"><a href=\"#SingleThreadExecutor\" class=\"headerlink\" title=\"SingleThreadExecutor\"></a>SingleThreadExecutor</h4><p>这个线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行，使得任务不需要处理线程同步的问题。</p>\n<p>除了 Excutors 提供的线程实现，我们也可以根据实际需要灵活地配置线程池，比如之前的 AsyncTask 它内部的线程池实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">threadPoolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class=\"line\">                sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\">        threadPoolExecutor.allowCoreThreadTimeOut(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));  核心线程数量</span></span><br><span class=\"line\"><span class=\"comment\">// MAXIMUM_POOL_SIZE= CPU_COUNT * 2 + 1;  最大线程数量</span></span><br><span class=\"line\"><span class=\"comment\">// KEEP_ALIVE_SECONDS = 30 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">// sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128); 容量为 128 的队列</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Gradle的基础概念","subtitle":"\"Gradle 学习笔记\"","date":"2018-04-28T02:00:10.000Z","author":"rank","header_image":"img/java.jpg","catalog":true,"_content":"\n## Gradle 实战(一)\n\nGradle 是继 Ant 、Maven 之后又一个优秀的 Java 项目构建工具.它同样实现了依赖管理、仓库、约定优于配置等优秀的概念.对 maven 和 Ant 项目与资源也有很好的兼容和支持.相比 Maven 和 Ant 来说 Gradle 的构件脚本是声明式的、可读的,可以清晰的表达意图.它使用一个 DSL 语言 Groovy (类似 java ) 来代替 XML 语言大大减少了构件代码的大小。在 Android Studio 中更是成为了构建 Android 项目的标准工具. 我们就来学习和了解它是如何工作和使用的。\n\n###Groovy\n\nGroovy 是一门 JVM 语言，它最终是要编译成 class 文件在 JVM 上执行的，所以 java 语言支持的 groovy 都支持，也可以混写。\n\n如果有学习过 Kotlin 那么看 Groovy 相关的语法就十分的亲切，Groovy 的语法和 kotlin 同样灵活且有很多相似性，而且也提供了大量的语法糖，实际上 gradle 目前已经支持使用 ktolin 来进行配置开发，这一改变可以让我们更多精力放置在 gradle 的特性上，但是目前 Android Studio 的支持还不是很好，所以还是了解一下 groovy 较好。Groovy 这里也不过多介绍，只是说明一些常用的语法，如果想要详细了解去[查询文档](http://link.zhihu.com/?target=http%3A//www.groovy-lang.org/api.html)无疑是最棒的解决方案。\n\n#### 变量和函数\n\ngroovy 通过 `def` 来声明变量和方法，虽然是 JVM 类型要求很严格语言但是 groovy 拥有强大的类型推导，所以我们编写的时候可以省略很多东西：\n\n```groovy\ndef a =1 // def int a =1\ndef b ='task'\n\ndef action(){\n    1;\t\t//最终 action 返回 1 可以省略返回类型和 return 语句\n}\n\n//忽略参数的类型声明\ndef action(str){\n    println str //忽略()号 以空格符来间隔声明调用\n}\n\n```\n\n#### 容器 List 和 map\n\ngroovy 加强了 list 和 map 等容器，从而让他们使用起来十分的方便：\n\n```groovy\n//list 可以存储不同的元素类型，并通过下标直接访问、修改\ndef list =[100,\"a\",false]\nlist [0]=20\nprintln list[0]\nprintln list[1]\npritln list.size\n\n//map 同样\ndef map =[\"name\":\"rank\",\"age\":23,\"sex\":true]\ndef value =map[\"name\"]\nmap.name=\"just\"\nmap[name]=\"rank\"\n```\n\n还有大量的语法糖，比如判断对象非空的时候不用在意它是数组还是对象亦或者字符串都可以直接使用`if(object){}`，和 kotlin 里的`when` 一样有很强表达范围的 switch:\n\n```groovy\ndef x = 1.23\ndef result = \"\"\nswitch (x) {\n   case \"foo\": result = \"found foo\"\n   // lets fall through\n   case \"bar\": result += \"bar\"\n   case [4, 5, 6, 'inList']: result = \"list\"\n   break\n   case 12..30: result = \"range\"\n   break\n   case Number: result = \"number\"\n   break\n   case { it > 3 }: result = \"number > 3\"\n   break\n   default: result = \"default\"\n}\nassert result == \"number\"\n```\n\n等等，这里就不过多具体介绍了。以后的文章里再涉及到在说不迟。\n\n### 搭建环境\n\n通过在[Gradle 仓库](http://services.gradle.org/distributions/)下载对应的安装包然后解压,配置系统环境变量安装就完成了,可以在终端使用 `gradle -v` 命令验证安装。\n\n```\ngradle -v\n\n------------------------------------------------------------\nGradle 4.5\n------------------------------------------------------------\n\nBuild time:   2018-01-24 17:04:52 UTC\nRevision:     77d0ec90636f43669dc794ca17ef80dd65457bec\n\nGroovy:       2.4.12\nAnt:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017\nJVM:          1.8.0_151 (Oracle Corporation 25.151-b12)\nOS:           Mac OS X 10.13.3 x86_64\n```\n\n### 简述\n\n#### Task\n\n我们新建一个 `Hello` 项目.在项目中创建一个 `build.gradle` 项目,它类似于 maven 的 `pom.xml` 文件,该文件可以定义一些任务(task)来完成构建工作.每个任务都是可配置的,任务之间可以互相依赖.用户也能直接配置缺省任务.我们构建两个简单的任务,任务 B 依赖于任务 A:\n\n```groovy\ntask taskA << {\n    println(\"i'm task A\")\n}\ntask(taskB){\n    println(\"i'm $taskB.name\")\n}\n\n```\n\n在项目目录下使用 `gradle taskA taskB` 命令来构建缺省任务,可以看到我们预期的输出:\n\n```\ni'm task A\ni'm taskB\n```\n\n#### 仓库\n\nGradle 不仅继承了 maven 的很多的优秀理念,仓库也是可以直接拿来使用的.我们在 `build.gradle`的`repositories` 节点中设置我们的仓库地址:\n\n```groovy\nrepositories{\n  maven()\n  jcenter()\n  mavenRepo urls: \"http://repository.sonatype.org/content/groups/forge/\"\n}\n```\n\n在上传的时候我们也可以使用 Gradle 的 maven Plugin 插件将 build.gradle 生成 Maven POM 文件.这样即使是一个基于 maven 的大环境使用 Gradle 也几乎不是一个问题.\n\n####约定优于配置\n\nGradle 给了用户足够的自由去定义自己的任务.我们可以自定义自己的项目布局:\n\n```groovy\nsourceSets{\n  main{\n    java{\n      srcDir 'src/java'\n    }\n    resources{\n      srdDir 'src/resources'\n    }\n  }\n}\n```\n\n也可以构建自己的生命周期,例如上例我们想每次执行`taskB`的时候先执行 `taskA` 但只想使用最简单的 `$gradle` 命令,那只需要加上默认的任务和任务依赖即可:\n\n```groovy\ndefaultTasks('taskB')\ntask taskA << {\n    println(\"i'm task A\")\n}\n....\ntaskB.dependsOn taskA\n```\n\n### 基础命令\n\n####命令行选项\n\n通过 Gradle 来执行一些特定的任务,我们可以在命令中增加一些命令行选项来辅助我们的构建命令,而且一些命令在我们可以使用缩写来快捷的执行，例如 `-build` 可以输入`-b`\n\n- `-i`:Gradle 默认不会输出很多信息，你可以使用-i 选项改变日志级别为 INFO\n- `-s`:如果运行时错误发生打印堆栈信息\n- `-q`:只打印错误信息\n- `-?;-h;--help`:打印所有的命令行选项\n- `-b；--buil fileName`:Gradle 默认执行 build.gradle 脚本，如果想执行其他脚本可以使用这个命令，比如`gradle -b test.gradle`\n- `--offline`:在离线模式运行 build,Gradle 只检查本地缓存中的依赖\n- `-D; --system-prop`:Gradle 作为 JVM 进程运行，你可以提供一个系统属性比如：-Dmyprop=myValue\n- `-P;--project -prop`:项目属性可以作为你构建脚本的一个变量，你可以传递一个属性值给 build 脚本，比如：`-Pmyprop=myValue`\n\n* `tasks`:显示项目中所有可运行的任务\n* `properties`:打印你项目中所有的属性值\n\n#### 检查构建脚本\n\n我们可以通过 Gradle 提供的辅助的任务 tasks 来检查你的构建脚本,然后显示所有的任务,包含一个描述性的信息 :\n\n```\n$gradle -q tasks\n```\n\n输出:\n\n```\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nDefault tasks: taskB\n\nBuild Setup tasks\n...\n```\n\n#### 任务执行\n\n要执行一个任务,只需要输入 gradle + 任务名称 ,Gradle 会保证这个任务和它依赖的任务都会执行,要执行多个任务只需要在后面添加多个任务名.\n\n```\n$gradle taskA\n```\n\n#### 任务名称缩写\n\nGradle 提高效率的一个办法就是能够在命令行输入任务名的驼峰简写，当你的任务名称非常长的时候这很有用，当然你要确保你的简写只匹配到一个任务，比如下面的情况：\n\n```\ntask taskAir <<{\n  ...\n}\ntask taskAction <<{\n  ...\n}\n```\n\n这时候你使用 `gradle tA` 就会报错.\n\n#### 运行时排除一个任务\n\n运行时你要排除某个任务和它的依赖的任务可以使用 `-x` 命令\n\n```\ngradle taskAction -x taskAir\n```\n","source":"_posts/2018-05-26-gradle_learning_notes_1.md","raw":"---\nlayout: post\ntitle: Gradle的基础概念\nsubtitle: '\"Gradle 学习笔记\"'\ndate: 2018-04-28 10:00:10\nauthor: \"rank\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - Gradle\n---\n\n## Gradle 实战(一)\n\nGradle 是继 Ant 、Maven 之后又一个优秀的 Java 项目构建工具.它同样实现了依赖管理、仓库、约定优于配置等优秀的概念.对 maven 和 Ant 项目与资源也有很好的兼容和支持.相比 Maven 和 Ant 来说 Gradle 的构件脚本是声明式的、可读的,可以清晰的表达意图.它使用一个 DSL 语言 Groovy (类似 java ) 来代替 XML 语言大大减少了构件代码的大小。在 Android Studio 中更是成为了构建 Android 项目的标准工具. 我们就来学习和了解它是如何工作和使用的。\n\n###Groovy\n\nGroovy 是一门 JVM 语言，它最终是要编译成 class 文件在 JVM 上执行的，所以 java 语言支持的 groovy 都支持，也可以混写。\n\n如果有学习过 Kotlin 那么看 Groovy 相关的语法就十分的亲切，Groovy 的语法和 kotlin 同样灵活且有很多相似性，而且也提供了大量的语法糖，实际上 gradle 目前已经支持使用 ktolin 来进行配置开发，这一改变可以让我们更多精力放置在 gradle 的特性上，但是目前 Android Studio 的支持还不是很好，所以还是了解一下 groovy 较好。Groovy 这里也不过多介绍，只是说明一些常用的语法，如果想要详细了解去[查询文档](http://link.zhihu.com/?target=http%3A//www.groovy-lang.org/api.html)无疑是最棒的解决方案。\n\n#### 变量和函数\n\ngroovy 通过 `def` 来声明变量和方法，虽然是 JVM 类型要求很严格语言但是 groovy 拥有强大的类型推导，所以我们编写的时候可以省略很多东西：\n\n```groovy\ndef a =1 // def int a =1\ndef b ='task'\n\ndef action(){\n    1;\t\t//最终 action 返回 1 可以省略返回类型和 return 语句\n}\n\n//忽略参数的类型声明\ndef action(str){\n    println str //忽略()号 以空格符来间隔声明调用\n}\n\n```\n\n#### 容器 List 和 map\n\ngroovy 加强了 list 和 map 等容器，从而让他们使用起来十分的方便：\n\n```groovy\n//list 可以存储不同的元素类型，并通过下标直接访问、修改\ndef list =[100,\"a\",false]\nlist [0]=20\nprintln list[0]\nprintln list[1]\npritln list.size\n\n//map 同样\ndef map =[\"name\":\"rank\",\"age\":23,\"sex\":true]\ndef value =map[\"name\"]\nmap.name=\"just\"\nmap[name]=\"rank\"\n```\n\n还有大量的语法糖，比如判断对象非空的时候不用在意它是数组还是对象亦或者字符串都可以直接使用`if(object){}`，和 kotlin 里的`when` 一样有很强表达范围的 switch:\n\n```groovy\ndef x = 1.23\ndef result = \"\"\nswitch (x) {\n   case \"foo\": result = \"found foo\"\n   // lets fall through\n   case \"bar\": result += \"bar\"\n   case [4, 5, 6, 'inList']: result = \"list\"\n   break\n   case 12..30: result = \"range\"\n   break\n   case Number: result = \"number\"\n   break\n   case { it > 3 }: result = \"number > 3\"\n   break\n   default: result = \"default\"\n}\nassert result == \"number\"\n```\n\n等等，这里就不过多具体介绍了。以后的文章里再涉及到在说不迟。\n\n### 搭建环境\n\n通过在[Gradle 仓库](http://services.gradle.org/distributions/)下载对应的安装包然后解压,配置系统环境变量安装就完成了,可以在终端使用 `gradle -v` 命令验证安装。\n\n```\ngradle -v\n\n------------------------------------------------------------\nGradle 4.5\n------------------------------------------------------------\n\nBuild time:   2018-01-24 17:04:52 UTC\nRevision:     77d0ec90636f43669dc794ca17ef80dd65457bec\n\nGroovy:       2.4.12\nAnt:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017\nJVM:          1.8.0_151 (Oracle Corporation 25.151-b12)\nOS:           Mac OS X 10.13.3 x86_64\n```\n\n### 简述\n\n#### Task\n\n我们新建一个 `Hello` 项目.在项目中创建一个 `build.gradle` 项目,它类似于 maven 的 `pom.xml` 文件,该文件可以定义一些任务(task)来完成构建工作.每个任务都是可配置的,任务之间可以互相依赖.用户也能直接配置缺省任务.我们构建两个简单的任务,任务 B 依赖于任务 A:\n\n```groovy\ntask taskA << {\n    println(\"i'm task A\")\n}\ntask(taskB){\n    println(\"i'm $taskB.name\")\n}\n\n```\n\n在项目目录下使用 `gradle taskA taskB` 命令来构建缺省任务,可以看到我们预期的输出:\n\n```\ni'm task A\ni'm taskB\n```\n\n#### 仓库\n\nGradle 不仅继承了 maven 的很多的优秀理念,仓库也是可以直接拿来使用的.我们在 `build.gradle`的`repositories` 节点中设置我们的仓库地址:\n\n```groovy\nrepositories{\n  maven()\n  jcenter()\n  mavenRepo urls: \"http://repository.sonatype.org/content/groups/forge/\"\n}\n```\n\n在上传的时候我们也可以使用 Gradle 的 maven Plugin 插件将 build.gradle 生成 Maven POM 文件.这样即使是一个基于 maven 的大环境使用 Gradle 也几乎不是一个问题.\n\n####约定优于配置\n\nGradle 给了用户足够的自由去定义自己的任务.我们可以自定义自己的项目布局:\n\n```groovy\nsourceSets{\n  main{\n    java{\n      srcDir 'src/java'\n    }\n    resources{\n      srdDir 'src/resources'\n    }\n  }\n}\n```\n\n也可以构建自己的生命周期,例如上例我们想每次执行`taskB`的时候先执行 `taskA` 但只想使用最简单的 `$gradle` 命令,那只需要加上默认的任务和任务依赖即可:\n\n```groovy\ndefaultTasks('taskB')\ntask taskA << {\n    println(\"i'm task A\")\n}\n....\ntaskB.dependsOn taskA\n```\n\n### 基础命令\n\n####命令行选项\n\n通过 Gradle 来执行一些特定的任务,我们可以在命令中增加一些命令行选项来辅助我们的构建命令,而且一些命令在我们可以使用缩写来快捷的执行，例如 `-build` 可以输入`-b`\n\n- `-i`:Gradle 默认不会输出很多信息，你可以使用-i 选项改变日志级别为 INFO\n- `-s`:如果运行时错误发生打印堆栈信息\n- `-q`:只打印错误信息\n- `-?;-h;--help`:打印所有的命令行选项\n- `-b；--buil fileName`:Gradle 默认执行 build.gradle 脚本，如果想执行其他脚本可以使用这个命令，比如`gradle -b test.gradle`\n- `--offline`:在离线模式运行 build,Gradle 只检查本地缓存中的依赖\n- `-D; --system-prop`:Gradle 作为 JVM 进程运行，你可以提供一个系统属性比如：-Dmyprop=myValue\n- `-P;--project -prop`:项目属性可以作为你构建脚本的一个变量，你可以传递一个属性值给 build 脚本，比如：`-Pmyprop=myValue`\n\n* `tasks`:显示项目中所有可运行的任务\n* `properties`:打印你项目中所有的属性值\n\n#### 检查构建脚本\n\n我们可以通过 Gradle 提供的辅助的任务 tasks 来检查你的构建脚本,然后显示所有的任务,包含一个描述性的信息 :\n\n```\n$gradle -q tasks\n```\n\n输出:\n\n```\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nDefault tasks: taskB\n\nBuild Setup tasks\n...\n```\n\n#### 任务执行\n\n要执行一个任务,只需要输入 gradle + 任务名称 ,Gradle 会保证这个任务和它依赖的任务都会执行,要执行多个任务只需要在后面添加多个任务名.\n\n```\n$gradle taskA\n```\n\n#### 任务名称缩写\n\nGradle 提高效率的一个办法就是能够在命令行输入任务名的驼峰简写，当你的任务名称非常长的时候这很有用，当然你要确保你的简写只匹配到一个任务，比如下面的情况：\n\n```\ntask taskAir <<{\n  ...\n}\ntask taskAction <<{\n  ...\n}\n```\n\n这时候你使用 `gradle tA` 就会报错.\n\n#### 运行时排除一个任务\n\n运行时你要排除某个任务和它的依赖的任务可以使用 `-x` 命令\n\n```\ngradle taskAction -x taskAir\n```\n","slug":"2018-05-26-gradle_learning_notes_1","published":1,"updated":"2024-09-13T03:38:13.728Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p7000os2y42tsgfdox","content":"<h2 id=\"Gradle-实战-一\"><a href=\"#Gradle-实战-一\" class=\"headerlink\" title=\"Gradle 实战(一)\"></a>Gradle 实战(一)</h2><p>Gradle 是继 Ant 、Maven 之后又一个优秀的 Java 项目构建工具.它同样实现了依赖管理、仓库、约定优于配置等优秀的概念.对 maven 和 Ant 项目与资源也有很好的兼容和支持.相比 Maven 和 Ant 来说 Gradle 的构件脚本是声明式的、可读的,可以清晰的表达意图.它使用一个 DSL 语言 Groovy (类似 java ) 来代替 XML 语言大大减少了构件代码的大小。在 Android Studio 中更是成为了构建 Android 项目的标准工具. 我们就来学习和了解它是如何工作和使用的。</p>\n<p>###Groovy</p>\n<p>Groovy 是一门 JVM 语言，它最终是要编译成 class 文件在 JVM 上执行的，所以 java 语言支持的 groovy 都支持，也可以混写。</p>\n<p>如果有学习过 Kotlin 那么看 Groovy 相关的语法就十分的亲切，Groovy 的语法和 kotlin 同样灵活且有很多相似性，而且也提供了大量的语法糖，实际上 gradle 目前已经支持使用 ktolin 来进行配置开发，这一改变可以让我们更多精力放置在 gradle 的特性上，但是目前 Android Studio 的支持还不是很好，所以还是了解一下 groovy 较好。Groovy 这里也不过多介绍，只是说明一些常用的语法，如果想要详细了解去<a href=\"http://link.zhihu.com/?target=http://www.groovy-lang.org/api.html\">查询文档</a>无疑是最棒的解决方案。</p>\n<h4 id=\"变量和函数\"><a href=\"#变量和函数\" class=\"headerlink\" title=\"变量和函数\"></a>变量和函数</h4><p>groovy 通过 <code>def</code> 来声明变量和方法，虽然是 JVM 类型要求很严格语言但是 groovy 拥有强大的类型推导，所以我们编写的时候可以省略很多东西：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> a =<span class=\"number\">1</span> <span class=\"comment\">// def int a =1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> b =<span class=\"string\">&#x27;task&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> action()&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>;\t\t<span class=\"comment\">//最终 action 返回 1 可以省略返回类型和 return 语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//忽略参数的类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> action(str)&#123;</span><br><span class=\"line\">    println str <span class=\"comment\">//忽略()号 以空格符来间隔声明调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"容器-List-和-map\"><a href=\"#容器-List-和-map\" class=\"headerlink\" title=\"容器 List 和 map\"></a>容器 List 和 map</h4><p>groovy 加强了 list 和 map 等容器，从而让他们使用起来十分的方便：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list 可以存储不同的元素类型，并通过下标直接访问、修改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> list =[<span class=\"number\">100</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"literal\">false</span>]</span><br><span class=\"line\">list [<span class=\"number\">0</span>]=<span class=\"number\">20</span></span><br><span class=\"line\">println list[<span class=\"number\">0</span>]</span><br><span class=\"line\">println list[<span class=\"number\">1</span>]</span><br><span class=\"line\">pritln list.size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//map 同样</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> map =[<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;rank&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">23</span>,<span class=\"string\">&quot;sex&quot;</span>:<span class=\"literal\">true</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> value =map[<span class=\"string\">&quot;name&quot;</span>]</span><br><span class=\"line\">map.name=<span class=\"string\">&quot;just&quot;</span></span><br><span class=\"line\">map[name]=<span class=\"string\">&quot;rank&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有大量的语法糖，比如判断对象非空的时候不用在意它是数组还是对象亦或者字符串都可以直接使用<code>if(object)&#123;&#125;</code>，和 kotlin 里的<code>when</code> 一样有很强表达范围的 switch:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> x = <span class=\"number\">1.23</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> result = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (x) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"string\">&quot;foo&quot;</span>: result = <span class=\"string\">&quot;found foo&quot;</span></span><br><span class=\"line\">   <span class=\"comment\">// lets fall through</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"string\">&quot;bar&quot;</span>: result += <span class=\"string\">&quot;bar&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"string\">&#x27;inList&#x27;</span>]: result = <span class=\"string\">&quot;list&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"number\">12.</span><span class=\"number\">.30</span>: result = <span class=\"string\">&quot;range&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"attr\">Number:</span> result = <span class=\"string\">&quot;number&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> &#123; it &gt; <span class=\"number\">3</span> &#125;: result = <span class=\"string\">&quot;number &gt; 3&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"symbol\">default:</span> result = <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> result == <span class=\"string\">&quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>等等，这里就不过多具体介绍了。以后的文章里再涉及到在说不迟。</p>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>通过在<a href=\"http://services.gradle.org/distributions/\">Gradle 仓库</a>下载对应的安装包然后解压,配置系统环境变量安装就完成了,可以在终端使用 <code>gradle -v</code> 命令验证安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -v</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.5</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-01-24 17:04:52 UTC</span><br><span class=\"line\">Revision:     77d0ec90636f43669dc794ca17ef80dd65457bec</span><br><span class=\"line\"></span><br><span class=\"line\">Groovy:       2.4.12</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017</span><br><span class=\"line\">JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)</span><br><span class=\"line\">OS:           Mac OS X 10.13.3 x86_64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>我们新建一个 <code>Hello</code> 项目.在项目中创建一个 <code>build.gradle</code> 项目,它类似于 maven 的 <code>pom.xml</code> 文件,该文件可以定义一些任务(task)来完成构建工作.每个任务都是可配置的,任务之间可以互相依赖.用户也能直接配置缺省任务.我们构建两个简单的任务,任务 B 依赖于任务 A:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task taskA &lt;&lt; &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m task A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task(taskB)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m $taskB.name&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在项目目录下使用 <code>gradle taskA taskB</code> 命令来构建缺省任务,可以看到我们预期的输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i&#x27;m task A</span><br><span class=\"line\">i&#x27;m taskB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><p>Gradle 不仅继承了 maven 的很多的优秀理念,仓库也是可以直接拿来使用的.我们在 <code>build.gradle</code>的<code>repositories</code> 节点中设置我们的仓库地址:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories&#123;</span><br><span class=\"line\">  maven()</span><br><span class=\"line\">  jcenter()</span><br><span class=\"line\">  mavenRepo <span class=\"attr\">urls:</span> <span class=\"string\">&quot;http://repository.sonatype.org/content/groups/forge/&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上传的时候我们也可以使用 Gradle 的 maven Plugin 插件将 build.gradle 生成 Maven POM 文件.这样即使是一个基于 maven 的大环境使用 Gradle 也几乎不是一个问题.</p>\n<p>####约定优于配置</p>\n<p>Gradle 给了用户足够的自由去定义自己的任务.我们可以自定义自己的项目布局:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets&#123;</span><br><span class=\"line\">  main&#123;</span><br><span class=\"line\">    java&#123;</span><br><span class=\"line\">      srcDir <span class=\"string\">&#x27;src/java&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resources&#123;</span><br><span class=\"line\">      srdDir <span class=\"string\">&#x27;src/resources&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以构建自己的生命周期,例如上例我们想每次执行<code>taskB</code>的时候先执行 <code>taskA</code> 但只想使用最简单的 <code>$gradle</code> 命令,那只需要加上默认的任务和任务依赖即可:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultTasks(<span class=\"string\">&#x27;taskB&#x27;</span>)</span><br><span class=\"line\">task taskA &lt;&lt; &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m task A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">taskB.dependsOn taskA</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h3><p>####命令行选项</p>\n<p>通过 Gradle 来执行一些特定的任务,我们可以在命令中增加一些命令行选项来辅助我们的构建命令,而且一些命令在我们可以使用缩写来快捷的执行，例如 <code>-build</code> 可以输入<code>-b</code></p>\n<ul>\n<li><code>-i</code>:Gradle 默认不会输出很多信息，你可以使用-i 选项改变日志级别为 INFO</li>\n<li><code>-s</code>:如果运行时错误发生打印堆栈信息</li>\n<li><code>-q</code>:只打印错误信息</li>\n<li><code>-?;-h;--help</code>:打印所有的命令行选项</li>\n<li><code>-b；--buil fileName</code>:Gradle 默认执行 build.gradle 脚本，如果想执行其他脚本可以使用这个命令，比如<code>gradle -b test.gradle</code></li>\n<li><code>--offline</code>:在离线模式运行 build,Gradle 只检查本地缓存中的依赖</li>\n<li><code>-D; --system-prop</code>:Gradle 作为 JVM 进程运行，你可以提供一个系统属性比如：-Dmyprop&#x3D;myValue</li>\n<li><code>-P;--project -prop</code>:项目属性可以作为你构建脚本的一个变量，你可以传递一个属性值给 build 脚本，比如：<code>-Pmyprop=myValue</code></li>\n</ul>\n<ul>\n<li><code>tasks</code>:显示项目中所有可运行的任务</li>\n<li><code>properties</code>:打印你项目中所有的属性值</li>\n</ul>\n<h4 id=\"检查构建脚本\"><a href=\"#检查构建脚本\" class=\"headerlink\" title=\"检查构建脚本\"></a>检查构建脚本</h4><p>我们可以通过 Gradle 提供的辅助的任务 tasks 来检查你的构建脚本,然后显示所有的任务,包含一个描述性的信息 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gradle -q tasks</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">All tasks runnable from root project</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Default tasks: taskB</span><br><span class=\"line\"></span><br><span class=\"line\">Build Setup tasks</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务执行\"><a href=\"#任务执行\" class=\"headerlink\" title=\"任务执行\"></a>任务执行</h4><p>要执行一个任务,只需要输入 gradle + 任务名称 ,Gradle 会保证这个任务和它依赖的任务都会执行,要执行多个任务只需要在后面添加多个任务名.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gradle taskA</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务名称缩写\"><a href=\"#任务名称缩写\" class=\"headerlink\" title=\"任务名称缩写\"></a>任务名称缩写</h4><p>Gradle 提高效率的一个办法就是能够在命令行输入任务名的驼峰简写，当你的任务名称非常长的时候这很有用，当然你要确保你的简写只匹配到一个任务，比如下面的情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task taskAir &lt;&lt;&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task taskAction &lt;&lt;&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候你使用 <code>gradle tA</code> 就会报错.</p>\n<h4 id=\"运行时排除一个任务\"><a href=\"#运行时排除一个任务\" class=\"headerlink\" title=\"运行时排除一个任务\"></a>运行时排除一个任务</h4><p>运行时你要排除某个任务和它的依赖的任务可以使用 <code>-x</code> 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle taskAction -x taskAir</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Gradle-实战-一\"><a href=\"#Gradle-实战-一\" class=\"headerlink\" title=\"Gradle 实战(一)\"></a>Gradle 实战(一)</h2><p>Gradle 是继 Ant 、Maven 之后又一个优秀的 Java 项目构建工具.它同样实现了依赖管理、仓库、约定优于配置等优秀的概念.对 maven 和 Ant 项目与资源也有很好的兼容和支持.相比 Maven 和 Ant 来说 Gradle 的构件脚本是声明式的、可读的,可以清晰的表达意图.它使用一个 DSL 语言 Groovy (类似 java ) 来代替 XML 语言大大减少了构件代码的大小。在 Android Studio 中更是成为了构建 Android 项目的标准工具. 我们就来学习和了解它是如何工作和使用的。</p>\n<p>###Groovy</p>\n<p>Groovy 是一门 JVM 语言，它最终是要编译成 class 文件在 JVM 上执行的，所以 java 语言支持的 groovy 都支持，也可以混写。</p>\n<p>如果有学习过 Kotlin 那么看 Groovy 相关的语法就十分的亲切，Groovy 的语法和 kotlin 同样灵活且有很多相似性，而且也提供了大量的语法糖，实际上 gradle 目前已经支持使用 ktolin 来进行配置开发，这一改变可以让我们更多精力放置在 gradle 的特性上，但是目前 Android Studio 的支持还不是很好，所以还是了解一下 groovy 较好。Groovy 这里也不过多介绍，只是说明一些常用的语法，如果想要详细了解去<a href=\"http://link.zhihu.com/?target=http://www.groovy-lang.org/api.html\">查询文档</a>无疑是最棒的解决方案。</p>\n<h4 id=\"变量和函数\"><a href=\"#变量和函数\" class=\"headerlink\" title=\"变量和函数\"></a>变量和函数</h4><p>groovy 通过 <code>def</code> 来声明变量和方法，虽然是 JVM 类型要求很严格语言但是 groovy 拥有强大的类型推导，所以我们编写的时候可以省略很多东西：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> a =<span class=\"number\">1</span> <span class=\"comment\">// def int a =1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> b =<span class=\"string\">&#x27;task&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> action()&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>;\t\t<span class=\"comment\">//最终 action 返回 1 可以省略返回类型和 return 语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//忽略参数的类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> action(str)&#123;</span><br><span class=\"line\">    println str <span class=\"comment\">//忽略()号 以空格符来间隔声明调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"容器-List-和-map\"><a href=\"#容器-List-和-map\" class=\"headerlink\" title=\"容器 List 和 map\"></a>容器 List 和 map</h4><p>groovy 加强了 list 和 map 等容器，从而让他们使用起来十分的方便：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list 可以存储不同的元素类型，并通过下标直接访问、修改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> list =[<span class=\"number\">100</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"literal\">false</span>]</span><br><span class=\"line\">list [<span class=\"number\">0</span>]=<span class=\"number\">20</span></span><br><span class=\"line\">println list[<span class=\"number\">0</span>]</span><br><span class=\"line\">println list[<span class=\"number\">1</span>]</span><br><span class=\"line\">pritln list.size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//map 同样</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> map =[<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;rank&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">23</span>,<span class=\"string\">&quot;sex&quot;</span>:<span class=\"literal\">true</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> value =map[<span class=\"string\">&quot;name&quot;</span>]</span><br><span class=\"line\">map.name=<span class=\"string\">&quot;just&quot;</span></span><br><span class=\"line\">map[name]=<span class=\"string\">&quot;rank&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有大量的语法糖，比如判断对象非空的时候不用在意它是数组还是对象亦或者字符串都可以直接使用<code>if(object)&#123;&#125;</code>，和 kotlin 里的<code>when</code> 一样有很强表达范围的 switch:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> x = <span class=\"number\">1.23</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> result = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (x) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"string\">&quot;foo&quot;</span>: result = <span class=\"string\">&quot;found foo&quot;</span></span><br><span class=\"line\">   <span class=\"comment\">// lets fall through</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"string\">&quot;bar&quot;</span>: result += <span class=\"string\">&quot;bar&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"string\">&#x27;inList&#x27;</span>]: result = <span class=\"string\">&quot;list&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"number\">12.</span><span class=\"number\">.30</span>: result = <span class=\"string\">&quot;range&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"attr\">Number:</span> result = <span class=\"string\">&quot;number&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">case</span> &#123; it &gt; <span class=\"number\">3</span> &#125;: result = <span class=\"string\">&quot;number &gt; 3&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"symbol\">default:</span> result = <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> result == <span class=\"string\">&quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>等等，这里就不过多具体介绍了。以后的文章里再涉及到在说不迟。</p>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>通过在<a href=\"http://services.gradle.org/distributions/\">Gradle 仓库</a>下载对应的安装包然后解压,配置系统环境变量安装就完成了,可以在终端使用 <code>gradle -v</code> 命令验证安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -v</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.5</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-01-24 17:04:52 UTC</span><br><span class=\"line\">Revision:     77d0ec90636f43669dc794ca17ef80dd65457bec</span><br><span class=\"line\"></span><br><span class=\"line\">Groovy:       2.4.12</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017</span><br><span class=\"line\">JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)</span><br><span class=\"line\">OS:           Mac OS X 10.13.3 x86_64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>我们新建一个 <code>Hello</code> 项目.在项目中创建一个 <code>build.gradle</code> 项目,它类似于 maven 的 <code>pom.xml</code> 文件,该文件可以定义一些任务(task)来完成构建工作.每个任务都是可配置的,任务之间可以互相依赖.用户也能直接配置缺省任务.我们构建两个简单的任务,任务 B 依赖于任务 A:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task taskA &lt;&lt; &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m task A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task(taskB)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m $taskB.name&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在项目目录下使用 <code>gradle taskA taskB</code> 命令来构建缺省任务,可以看到我们预期的输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i&#x27;m task A</span><br><span class=\"line\">i&#x27;m taskB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><p>Gradle 不仅继承了 maven 的很多的优秀理念,仓库也是可以直接拿来使用的.我们在 <code>build.gradle</code>的<code>repositories</code> 节点中设置我们的仓库地址:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories&#123;</span><br><span class=\"line\">  maven()</span><br><span class=\"line\">  jcenter()</span><br><span class=\"line\">  mavenRepo <span class=\"attr\">urls:</span> <span class=\"string\">&quot;http://repository.sonatype.org/content/groups/forge/&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上传的时候我们也可以使用 Gradle 的 maven Plugin 插件将 build.gradle 生成 Maven POM 文件.这样即使是一个基于 maven 的大环境使用 Gradle 也几乎不是一个问题.</p>\n<p>####约定优于配置</p>\n<p>Gradle 给了用户足够的自由去定义自己的任务.我们可以自定义自己的项目布局:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets&#123;</span><br><span class=\"line\">  main&#123;</span><br><span class=\"line\">    java&#123;</span><br><span class=\"line\">      srcDir <span class=\"string\">&#x27;src/java&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resources&#123;</span><br><span class=\"line\">      srdDir <span class=\"string\">&#x27;src/resources&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以构建自己的生命周期,例如上例我们想每次执行<code>taskB</code>的时候先执行 <code>taskA</code> 但只想使用最简单的 <code>$gradle</code> 命令,那只需要加上默认的任务和任务依赖即可:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultTasks(<span class=\"string\">&#x27;taskB&#x27;</span>)</span><br><span class=\"line\">task taskA &lt;&lt; &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;i&#x27;m task A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">taskB.dependsOn taskA</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h3><p>####命令行选项</p>\n<p>通过 Gradle 来执行一些特定的任务,我们可以在命令中增加一些命令行选项来辅助我们的构建命令,而且一些命令在我们可以使用缩写来快捷的执行，例如 <code>-build</code> 可以输入<code>-b</code></p>\n<ul>\n<li><code>-i</code>:Gradle 默认不会输出很多信息，你可以使用-i 选项改变日志级别为 INFO</li>\n<li><code>-s</code>:如果运行时错误发生打印堆栈信息</li>\n<li><code>-q</code>:只打印错误信息</li>\n<li><code>-?;-h;--help</code>:打印所有的命令行选项</li>\n<li><code>-b；--buil fileName</code>:Gradle 默认执行 build.gradle 脚本，如果想执行其他脚本可以使用这个命令，比如<code>gradle -b test.gradle</code></li>\n<li><code>--offline</code>:在离线模式运行 build,Gradle 只检查本地缓存中的依赖</li>\n<li><code>-D; --system-prop</code>:Gradle 作为 JVM 进程运行，你可以提供一个系统属性比如：-Dmyprop&#x3D;myValue</li>\n<li><code>-P;--project -prop</code>:项目属性可以作为你构建脚本的一个变量，你可以传递一个属性值给 build 脚本，比如：<code>-Pmyprop=myValue</code></li>\n</ul>\n<ul>\n<li><code>tasks</code>:显示项目中所有可运行的任务</li>\n<li><code>properties</code>:打印你项目中所有的属性值</li>\n</ul>\n<h4 id=\"检查构建脚本\"><a href=\"#检查构建脚本\" class=\"headerlink\" title=\"检查构建脚本\"></a>检查构建脚本</h4><p>我们可以通过 Gradle 提供的辅助的任务 tasks 来检查你的构建脚本,然后显示所有的任务,包含一个描述性的信息 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gradle -q tasks</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">All tasks runnable from root project</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Default tasks: taskB</span><br><span class=\"line\"></span><br><span class=\"line\">Build Setup tasks</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务执行\"><a href=\"#任务执行\" class=\"headerlink\" title=\"任务执行\"></a>任务执行</h4><p>要执行一个任务,只需要输入 gradle + 任务名称 ,Gradle 会保证这个任务和它依赖的任务都会执行,要执行多个任务只需要在后面添加多个任务名.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$gradle taskA</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务名称缩写\"><a href=\"#任务名称缩写\" class=\"headerlink\" title=\"任务名称缩写\"></a>任务名称缩写</h4><p>Gradle 提高效率的一个办法就是能够在命令行输入任务名的驼峰简写，当你的任务名称非常长的时候这很有用，当然你要确保你的简写只匹配到一个任务，比如下面的情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task taskAir &lt;&lt;&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task taskAction &lt;&lt;&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候你使用 <code>gradle tA</code> 就会报错.</p>\n<h4 id=\"运行时排除一个任务\"><a href=\"#运行时排除一个任务\" class=\"headerlink\" title=\"运行时排除一个任务\"></a>运行时排除一个任务</h4><p>运行时你要排除某个任务和它的依赖的任务可以使用 <code>-x</code> 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle taskAction -x taskAir</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Gradle的架构和api","subtitle":" \"Gradle 学习笔记\"","date":"2018-05-26T12:00:00.000Z","author":"rank","header_image":"img/java.jpg","catalog":true,"_content":"\n## 了解 Gradle 的架构\n\n> 每个 Gradle 构架都包括了三个基本的构建块:项目(Projects)、任务(tasks)、和属性(properties),每个构建至少包括一个项目,项目包括一个或多个任务,项目中有很多属性来控制构建过程.\n>\n> Gradle 运用了领域驱动的设计理念（DDD）来给自己的领域构建软件建模，因此 Gradle 的项目和任务都在 Gradle 的 API 中有一个直接的 class 来表示，接下来我们来深入了解每一个组件和它对应的 API。\n\n### Project\n\nProject 表示你想要构建的一个目标，对应具体的内容可以是一个项目、组件、jar 等。当开始构建的时候，Gradle 基于我们对项目的配置实例化 `org.gradle.api.Project` 这个类并让这个项目通过 `project` 变量来隐式的获得。下图列出了 API 接口和最重要的方法。\n\n![project](https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag24.png)\n\n一个项目可以创建新任务、添加依赖配置、应用插件和其他脚本。而 Project 实例允许你访问你项目中所有的 gradle 特性。当你使用项目的属性和方法时你并不需要显示的使用 project 变量——Gradle 假设你需要操作 project 实例，例如:\n\n```groovy\n//直接设置项目描述\nsetDescription(\"TestProject\")\n//通过 Groovy 语法来访问名字和描述\nprintln \"Description of project $name:\"+project.description\n```\n\n每个项目和任务都提供了 setter 和 getter 方法来访问属性,你可以读取和修改这些属性值.我们还可以自定义属性。例如我们常见的在`build.gradle`中通过 `ext` 命名空间来添加一些熟悉和配置:\n\n```groovy\next{\n  myOptions=123\n}\next.kotlin_version=\"1.2.12\"\next.version=[\n    \"supportVersion\":26\n    \"compileVersion\":26.0.1\n]\n```\n\n也可以在 /.gradle 路径或者项目根目录下的 gradle.properties 文件来定义属性,然后通过 project 实例来访问。\n\n```groovy\n//gradle.properties\nexampleProp = oneValue\n\n//build.gradle\nassert project.exampleProp == \"oneValue\"\n```\n\n### Task\n\nGradle 中的 Task 有两个基本概念——动作与依赖。一个动作就是任务需要执行的工作，可以简单到打印出 hello world，也可以复杂到编译整个项目输出 apk；而依赖则是一个任务的输入可能依赖于另一个任务的输出或者初始化时，这样就可以让一个 project 的构建工作分解成若干 task，分工明确。任务同样的有相对应的接口 `org.gradle.api.Task`:\n\n![task](https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag25.png)\n\n#### 声明一个 Task\n\n我们可以在`build.gradle` 中通过 `task` 声明一个 task :\n\n```groovy\ntask simpleTask{\n    println \"task action\"\n}\n```\n\n然后通过`gradle -q -tasks` 来查看当前项目定义的 task ，我们会发现我们的 simpleTask 。\n\n可以通过 `gradle simpleTask` 来执行这个任务 ：\n\n```\ngradle -q -tasks\nassemble\nbuild\n...\nsimpleTask\n\ngradle simpleTaskt\n\ntask action\n```\n\n定义 task 的时候其实可以指定很多参数，如下所示：\n\n| 参数        | 含义                    | 默认值             |\n| ----------- | ----------------------- | ------------------ |\n| name        | task 的名字             | 不能为空，必须指定 |\n| type        | task 的“父类”           | DefaultTask        |\n| overwrite   | 是否替换已经存在的 task | false              |\n| dependsOn   | 依赖的 task 集合        | []                 |\n| group       | 表示任务的逻辑分组      | null               |\n| description | task 的描述             | null               |\n\n```groovy\ntask(\"detailTask\",type:simpleTask,description:\"this is a task\")｛\n\tprintln \"orz\"\n｝\n```\n\n#### 声明任务的动作\n\n当我们将任务内容直接写在 task 内部的时候，task 的内容会在 Project 配置过程就直接被执行：\n\n```\ngradle clean\n\n> Configure project :\ntask action\n\n```\n\n我们有时候并不想在装配的时候被执行，而是想要指定的时候再被执行。gradle 提供了两个方法来声明任务的动作`doFirst`和`doLast`， 他们会指定 task 执行的时候才会被执行, 执行顺序如它们的名字一样会是 task 开始时第一个和最后一个操作。\n\n```groovy\ntask myTask {\n   println ' -> '\n    doLast{\n        println 'World!'\n    }\n    doFirst{\n        println 'Hello'\n    }\n}\n\n// gradle myTask\n-> Hello World!\n```\n\n我们还可以在已经创建的 task 中插入动作：\n\n```groovy\ntask oneTask{\n    def a =\"xxx\"\n    println(\"${a} bbb\")\n}\noneTask >> {\"action\"}\n```\n\n我们还经常在文档中看到 `oneTask << {}` 这样写法 `<<` 这个操作符其实是 `.letShift` 的缩写，它等同与 `doLast`操作符。\n\n#### 定义任务依赖\n\ntask 提供了`dependsOn`方法来声明一个任务依赖于一个或多个任务，被依赖的任务会先于 task 执行\n\n```groovy\ntask first << {println \"first\"}\ntask second << {println \"second\"}\n\n//在构造函数中声明依赖\ntask printVersion(dependsOn:[second,first])>>{\n    println \"version: $version\"\n}\ntask third << {println \"third\"}\n//通过方法调用来声明依赖\nthird.dependsOn(\"printlnVersion\")\n\n//output\nfirst\nsecond\nVersion: 0.1-SNAPSHOT\nthird\n```\n\n查看执行顺序会发现一个系列，那就是任务的执行顺序和我们方法中声明的顺序没有关系，`first` 是在 `second` 之后声明的但是却先执行了。《Gradle In Action》是这样描素任务的依赖执行顺序的：\n\n> Gradle 并不保证依赖的任务能够按顺序执行，dependsOn 方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如 ant）这可能会难以理解。在 Gradle 里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。\n\n重点就是 **gradle 本身并不保证任务的执行顺序，当一个任务的输出和是另一个任务的输入时，这是 gradle 才会确保它们之间的执行顺序。**具体我们在 gradle 的生命周期周期中再讨论。\n\n####终结者任务\n\n之前我们可以通过 `dependsOn` 来指定一些执行任务需要依赖的任务，当执行的任务执行完毕的时候，我们也可以通过 `finalizer` 来指定一个任务来进行收尾工作，例如清理，回收资源等等 :\n\n```groovy\ntask first << { println \"first\" }\ntask second << { println \"second\" }\n//声明first结束后执行second任务\nfirst.finalizedBy second\n\n//output:\nfirst\nsecond\n```\n\n到这里 Task 的常见的动作和依赖相关的 api 也都介绍完了。本次主要是介绍了 gradle 的两个重要概念 `project` 和 `task` 以及它们的一些常用 api。下一次准备着手 gradle 的生命周期。\n","source":"_posts/2018-05-06-gradle_learning_notes_2.md","raw":"---\nlayout: post\ntitle: \"Gradle的架构和api\"\nsubtitle: ' \"Gradle 学习笔记\"'\ndate: 2018-05-26 20:00:00\nauthor: \"rank\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - Gradle\n---\n\n## 了解 Gradle 的架构\n\n> 每个 Gradle 构架都包括了三个基本的构建块:项目(Projects)、任务(tasks)、和属性(properties),每个构建至少包括一个项目,项目包括一个或多个任务,项目中有很多属性来控制构建过程.\n>\n> Gradle 运用了领域驱动的设计理念（DDD）来给自己的领域构建软件建模，因此 Gradle 的项目和任务都在 Gradle 的 API 中有一个直接的 class 来表示，接下来我们来深入了解每一个组件和它对应的 API。\n\n### Project\n\nProject 表示你想要构建的一个目标，对应具体的内容可以是一个项目、组件、jar 等。当开始构建的时候，Gradle 基于我们对项目的配置实例化 `org.gradle.api.Project` 这个类并让这个项目通过 `project` 变量来隐式的获得。下图列出了 API 接口和最重要的方法。\n\n![project](https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag24.png)\n\n一个项目可以创建新任务、添加依赖配置、应用插件和其他脚本。而 Project 实例允许你访问你项目中所有的 gradle 特性。当你使用项目的属性和方法时你并不需要显示的使用 project 变量——Gradle 假设你需要操作 project 实例，例如:\n\n```groovy\n//直接设置项目描述\nsetDescription(\"TestProject\")\n//通过 Groovy 语法来访问名字和描述\nprintln \"Description of project $name:\"+project.description\n```\n\n每个项目和任务都提供了 setter 和 getter 方法来访问属性,你可以读取和修改这些属性值.我们还可以自定义属性。例如我们常见的在`build.gradle`中通过 `ext` 命名空间来添加一些熟悉和配置:\n\n```groovy\next{\n  myOptions=123\n}\next.kotlin_version=\"1.2.12\"\next.version=[\n    \"supportVersion\":26\n    \"compileVersion\":26.0.1\n]\n```\n\n也可以在 /.gradle 路径或者项目根目录下的 gradle.properties 文件来定义属性,然后通过 project 实例来访问。\n\n```groovy\n//gradle.properties\nexampleProp = oneValue\n\n//build.gradle\nassert project.exampleProp == \"oneValue\"\n```\n\n### Task\n\nGradle 中的 Task 有两个基本概念——动作与依赖。一个动作就是任务需要执行的工作，可以简单到打印出 hello world，也可以复杂到编译整个项目输出 apk；而依赖则是一个任务的输入可能依赖于另一个任务的输出或者初始化时，这样就可以让一个 project 的构建工作分解成若干 task，分工明确。任务同样的有相对应的接口 `org.gradle.api.Task`:\n\n![task](https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag25.png)\n\n#### 声明一个 Task\n\n我们可以在`build.gradle` 中通过 `task` 声明一个 task :\n\n```groovy\ntask simpleTask{\n    println \"task action\"\n}\n```\n\n然后通过`gradle -q -tasks` 来查看当前项目定义的 task ，我们会发现我们的 simpleTask 。\n\n可以通过 `gradle simpleTask` 来执行这个任务 ：\n\n```\ngradle -q -tasks\nassemble\nbuild\n...\nsimpleTask\n\ngradle simpleTaskt\n\ntask action\n```\n\n定义 task 的时候其实可以指定很多参数，如下所示：\n\n| 参数        | 含义                    | 默认值             |\n| ----------- | ----------------------- | ------------------ |\n| name        | task 的名字             | 不能为空，必须指定 |\n| type        | task 的“父类”           | DefaultTask        |\n| overwrite   | 是否替换已经存在的 task | false              |\n| dependsOn   | 依赖的 task 集合        | []                 |\n| group       | 表示任务的逻辑分组      | null               |\n| description | task 的描述             | null               |\n\n```groovy\ntask(\"detailTask\",type:simpleTask,description:\"this is a task\")｛\n\tprintln \"orz\"\n｝\n```\n\n#### 声明任务的动作\n\n当我们将任务内容直接写在 task 内部的时候，task 的内容会在 Project 配置过程就直接被执行：\n\n```\ngradle clean\n\n> Configure project :\ntask action\n\n```\n\n我们有时候并不想在装配的时候被执行，而是想要指定的时候再被执行。gradle 提供了两个方法来声明任务的动作`doFirst`和`doLast`， 他们会指定 task 执行的时候才会被执行, 执行顺序如它们的名字一样会是 task 开始时第一个和最后一个操作。\n\n```groovy\ntask myTask {\n   println ' -> '\n    doLast{\n        println 'World!'\n    }\n    doFirst{\n        println 'Hello'\n    }\n}\n\n// gradle myTask\n-> Hello World!\n```\n\n我们还可以在已经创建的 task 中插入动作：\n\n```groovy\ntask oneTask{\n    def a =\"xxx\"\n    println(\"${a} bbb\")\n}\noneTask >> {\"action\"}\n```\n\n我们还经常在文档中看到 `oneTask << {}` 这样写法 `<<` 这个操作符其实是 `.letShift` 的缩写，它等同与 `doLast`操作符。\n\n#### 定义任务依赖\n\ntask 提供了`dependsOn`方法来声明一个任务依赖于一个或多个任务，被依赖的任务会先于 task 执行\n\n```groovy\ntask first << {println \"first\"}\ntask second << {println \"second\"}\n\n//在构造函数中声明依赖\ntask printVersion(dependsOn:[second,first])>>{\n    println \"version: $version\"\n}\ntask third << {println \"third\"}\n//通过方法调用来声明依赖\nthird.dependsOn(\"printlnVersion\")\n\n//output\nfirst\nsecond\nVersion: 0.1-SNAPSHOT\nthird\n```\n\n查看执行顺序会发现一个系列，那就是任务的执行顺序和我们方法中声明的顺序没有关系，`first` 是在 `second` 之后声明的但是却先执行了。《Gradle In Action》是这样描素任务的依赖执行顺序的：\n\n> Gradle 并不保证依赖的任务能够按顺序执行，dependsOn 方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如 ant）这可能会难以理解。在 Gradle 里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。\n\n重点就是 **gradle 本身并不保证任务的执行顺序，当一个任务的输出和是另一个任务的输入时，这是 gradle 才会确保它们之间的执行顺序。**具体我们在 gradle 的生命周期周期中再讨论。\n\n####终结者任务\n\n之前我们可以通过 `dependsOn` 来指定一些执行任务需要依赖的任务，当执行的任务执行完毕的时候，我们也可以通过 `finalizer` 来指定一个任务来进行收尾工作，例如清理，回收资源等等 :\n\n```groovy\ntask first << { println \"first\" }\ntask second << { println \"second\" }\n//声明first结束后执行second任务\nfirst.finalizedBy second\n\n//output:\nfirst\nsecond\n```\n\n到这里 Task 的常见的动作和依赖相关的 api 也都介绍完了。本次主要是介绍了 gradle 的两个重要概念 `project` 和 `task` 以及它们的一些常用 api。下一次准备着手 gradle 的生命周期。\n","slug":"2018-05-06-gradle_learning_notes_2","published":1,"updated":"2024-09-13T03:38:13.728Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p8000rs2y4f4rbfy11","content":"<h2 id=\"了解-Gradle-的架构\"><a href=\"#了解-Gradle-的架构\" class=\"headerlink\" title=\"了解 Gradle 的架构\"></a>了解 Gradle 的架构</h2><blockquote>\n<p>每个 Gradle 构架都包括了三个基本的构建块:项目(Projects)、任务(tasks)、和属性(properties),每个构建至少包括一个项目,项目包括一个或多个任务,项目中有很多属性来控制构建过程.</p>\n<p>Gradle 运用了领域驱动的设计理念（DDD）来给自己的领域构建软件建模，因此 Gradle 的项目和任务都在 Gradle 的 API 中有一个直接的 class 来表示，接下来我们来深入了解每一个组件和它对应的 API。</p>\n</blockquote>\n<h3 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h3><p>Project 表示你想要构建的一个目标，对应具体的内容可以是一个项目、组件、jar 等。当开始构建的时候，Gradle 基于我们对项目的配置实例化 <code>org.gradle.api.Project</code> 这个类并让这个项目通过 <code>project</code> 变量来隐式的获得。下图列出了 API 接口和最重要的方法。</p>\n<p><img src=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag24.png\" alt=\"project\"></p>\n<p>一个项目可以创建新任务、添加依赖配置、应用插件和其他脚本。而 Project 实例允许你访问你项目中所有的 gradle 特性。当你使用项目的属性和方法时你并不需要显示的使用 project 变量——Gradle 假设你需要操作 project 实例，例如:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接设置项目描述</span></span><br><span class=\"line\">setDescription(<span class=\"string\">&quot;TestProject&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过 Groovy 语法来访问名字和描述</span></span><br><span class=\"line\">println <span class=\"string\">&quot;Description of project $name:&quot;</span>+project.description</span><br></pre></td></tr></table></figure>\n\n<p>每个项目和任务都提供了 setter 和 getter 方法来访问属性,你可以读取和修改这些属性值.我们还可以自定义属性。例如我们常见的在<code>build.gradle</code>中通过 <code>ext</code> 命名空间来添加一些熟悉和配置:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext&#123;</span><br><span class=\"line\">  myOptions=<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ext.kotlin_version=<span class=\"string\">&quot;1.2.12&quot;</span></span><br><span class=\"line\">ext.version=[</span><br><span class=\"line\">    <span class=\"string\">&quot;supportVersion&quot;</span>:<span class=\"number\">26</span></span><br><span class=\"line\">    <span class=\"string\">&quot;compileVersion&quot;</span>:<span class=\"number\">26.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>也可以在 &#x2F;.gradle 路径或者项目根目录下的 gradle.properties 文件来定义属性,然后通过 project 实例来访问。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gradle.properties</span></span><br><span class=\"line\">exampleProp = oneValue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> project.exampleProp == <span class=\"string\">&quot;oneValue&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><p>Gradle 中的 Task 有两个基本概念——动作与依赖。一个动作就是任务需要执行的工作，可以简单到打印出 hello world，也可以复杂到编译整个项目输出 apk；而依赖则是一个任务的输入可能依赖于另一个任务的输出或者初始化时，这样就可以让一个 project 的构建工作分解成若干 task，分工明确。任务同样的有相对应的接口 <code>org.gradle.api.Task</code>:</p>\n<p><img src=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag25.png\" alt=\"task\"></p>\n<h4 id=\"声明一个-Task\"><a href=\"#声明一个-Task\" class=\"headerlink\" title=\"声明一个 Task\"></a>声明一个 Task</h4><p>我们可以在<code>build.gradle</code> 中通过 <code>task</code> 声明一个 task :</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task simpleTask&#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;task action&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>gradle -q -tasks</code> 来查看当前项目定义的 task ，我们会发现我们的 simpleTask 。</p>\n<p>可以通过 <code>gradle simpleTask</code> 来执行这个任务 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q -tasks</span><br><span class=\"line\">assemble</span><br><span class=\"line\">build</span><br><span class=\"line\">...</span><br><span class=\"line\">simpleTask</span><br><span class=\"line\"></span><br><span class=\"line\">gradle simpleTaskt</span><br><span class=\"line\"></span><br><span class=\"line\">task action</span><br></pre></td></tr></table></figure>\n\n<p>定义 task 的时候其实可以指定很多参数，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>task 的名字</td>\n<td>不能为空，必须指定</td>\n</tr>\n<tr>\n<td>type</td>\n<td>task 的“父类”</td>\n<td>DefaultTask</td>\n</tr>\n<tr>\n<td>overwrite</td>\n<td>是否替换已经存在的 task</td>\n<td>false</td>\n</tr>\n<tr>\n<td>dependsOn</td>\n<td>依赖的 task 集合</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>group</td>\n<td>表示任务的逻辑分组</td>\n<td>null</td>\n</tr>\n<tr>\n<td>description</td>\n<td>task 的描述</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task(<span class=\"string\">&quot;detailTask&quot;</span>,<span class=\"attr\">type:</span>simpleTask,<span class=\"attr\">description:</span><span class=\"string\">&quot;this is a task&quot;</span>)｛</span><br><span class=\"line\">\tprintln <span class=\"string\">&quot;orz&quot;</span></span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明任务的动作\"><a href=\"#声明任务的动作\" class=\"headerlink\" title=\"声明任务的动作\"></a>声明任务的动作</h4><p>当我们将任务内容直接写在 task 内部的时候，task 的内容会在 Project 配置过程就直接被执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle clean</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Configure project :</span><br><span class=\"line\">task action</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们有时候并不想在装配的时候被执行，而是想要指定的时候再被执行。gradle 提供了两个方法来声明任务的动作<code>doFirst</code>和<code>doLast</code>， 他们会指定 task 执行的时候才会被执行, 执行顺序如它们的名字一样会是 task 开始时第一个和最后一个操作。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task myTask &#123;</span><br><span class=\"line\">   println <span class=\"string\">&#x27; -&gt; &#x27;</span></span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        println <span class=\"string\">&#x27;World!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doFirst&#123;</span><br><span class=\"line\">        println <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gradle myTask</span></span><br><span class=\"line\">-&gt; Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以在已经创建的 task 中插入动作：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task oneTask&#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> a =<span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;$&#123;a&#125; bbb&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oneTask &gt;&gt; &#123;<span class=\"string\">&quot;action&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们还经常在文档中看到 <code>oneTask &lt;&lt; &#123;&#125;</code> 这样写法 <code>&lt;&lt;</code> 这个操作符其实是 <code>.letShift</code> 的缩写，它等同与 <code>doLast</code>操作符。</p>\n<h4 id=\"定义任务依赖\"><a href=\"#定义任务依赖\" class=\"headerlink\" title=\"定义任务依赖\"></a>定义任务依赖</h4><p>task 提供了<code>dependsOn</code>方法来声明一个任务依赖于一个或多个任务，被依赖的任务会先于 task 执行</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &lt;&lt; &#123;println <span class=\"string\">&quot;first&quot;</span>&#125;</span><br><span class=\"line\">task second &lt;&lt; &#123;println <span class=\"string\">&quot;second&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在构造函数中声明依赖</span></span><br><span class=\"line\">task printVersion(<span class=\"attr\">dependsOn:</span>[second,first])&gt;&gt;&#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;version: $version&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task third &lt;&lt; &#123;println <span class=\"string\">&quot;third&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过方法调用来声明依赖</span></span><br><span class=\"line\">third.dependsOn(<span class=\"string\">&quot;printlnVersion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br><span class=\"line\"><span class=\"attr\">Version:</span> <span class=\"number\">0.1</span>-SNAPSHOT</span><br><span class=\"line\">third</span><br></pre></td></tr></table></figure>\n\n<p>查看执行顺序会发现一个系列，那就是任务的执行顺序和我们方法中声明的顺序没有关系，<code>first</code> 是在 <code>second</code> 之后声明的但是却先执行了。《Gradle In Action》是这样描素任务的依赖执行顺序的：</p>\n<blockquote>\n<p>Gradle 并不保证依赖的任务能够按顺序执行，dependsOn 方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如 ant）这可能会难以理解。在 Gradle 里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。</p>\n</blockquote>\n<p>重点就是 <strong>gradle 本身并不保证任务的执行顺序，当一个任务的输出和是另一个任务的输入时，这是 gradle 才会确保它们之间的执行顺序。</strong>具体我们在 gradle 的生命周期周期中再讨论。</p>\n<p>####终结者任务</p>\n<p>之前我们可以通过 <code>dependsOn</code> 来指定一些执行任务需要依赖的任务，当执行的任务执行完毕的时候，我们也可以通过 <code>finalizer</code> 来指定一个任务来进行收尾工作，例如清理，回收资源等等 :</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &lt;&lt; &#123; println <span class=\"string\">&quot;first&quot;</span> &#125;</span><br><span class=\"line\">task second &lt;&lt; &#123; println <span class=\"string\">&quot;second&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">//声明first结束后执行second任务</span></span><br><span class=\"line\">first.finalizedBy second</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br></pre></td></tr></table></figure>\n\n<p>到这里 Task 的常见的动作和依赖相关的 api 也都介绍完了。本次主要是介绍了 gradle 的两个重要概念 <code>project</code> 和 <code>task</code> 以及它们的一些常用 api。下一次准备着手 gradle 的生命周期。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"了解-Gradle-的架构\"><a href=\"#了解-Gradle-的架构\" class=\"headerlink\" title=\"了解 Gradle 的架构\"></a>了解 Gradle 的架构</h2><blockquote>\n<p>每个 Gradle 构架都包括了三个基本的构建块:项目(Projects)、任务(tasks)、和属性(properties),每个构建至少包括一个项目,项目包括一个或多个任务,项目中有很多属性来控制构建过程.</p>\n<p>Gradle 运用了领域驱动的设计理念（DDD）来给自己的领域构建软件建模，因此 Gradle 的项目和任务都在 Gradle 的 API 中有一个直接的 class 来表示，接下来我们来深入了解每一个组件和它对应的 API。</p>\n</blockquote>\n<h3 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h3><p>Project 表示你想要构建的一个目标，对应具体的内容可以是一个项目、组件、jar 等。当开始构建的时候，Gradle 基于我们对项目的配置实例化 <code>org.gradle.api.Project</code> 这个类并让这个项目通过 <code>project</code> 变量来隐式的获得。下图列出了 API 接口和最重要的方法。</p>\n<p><img src=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag24.png\" alt=\"project\"></p>\n<p>一个项目可以创建新任务、添加依赖配置、应用插件和其他脚本。而 Project 实例允许你访问你项目中所有的 gradle 特性。当你使用项目的属性和方法时你并不需要显示的使用 project 变量——Gradle 假设你需要操作 project 实例，例如:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接设置项目描述</span></span><br><span class=\"line\">setDescription(<span class=\"string\">&quot;TestProject&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过 Groovy 语法来访问名字和描述</span></span><br><span class=\"line\">println <span class=\"string\">&quot;Description of project $name:&quot;</span>+project.description</span><br></pre></td></tr></table></figure>\n\n<p>每个项目和任务都提供了 setter 和 getter 方法来访问属性,你可以读取和修改这些属性值.我们还可以自定义属性。例如我们常见的在<code>build.gradle</code>中通过 <code>ext</code> 命名空间来添加一些熟悉和配置:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext&#123;</span><br><span class=\"line\">  myOptions=<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ext.kotlin_version=<span class=\"string\">&quot;1.2.12&quot;</span></span><br><span class=\"line\">ext.version=[</span><br><span class=\"line\">    <span class=\"string\">&quot;supportVersion&quot;</span>:<span class=\"number\">26</span></span><br><span class=\"line\">    <span class=\"string\">&quot;compileVersion&quot;</span>:<span class=\"number\">26.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>也可以在 &#x2F;.gradle 路径或者项目根目录下的 gradle.properties 文件来定义属性,然后通过 project 实例来访问。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gradle.properties</span></span><br><span class=\"line\">exampleProp = oneValue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> project.exampleProp == <span class=\"string\">&quot;oneValue&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><p>Gradle 中的 Task 有两个基本概念——动作与依赖。一个动作就是任务需要执行的工作，可以简单到打印出 hello world，也可以复杂到编译整个项目输出 apk；而依赖则是一个任务的输入可能依赖于另一个任务的输出或者初始化时，这样就可以让一个 project 的构建工作分解成若干 task，分工明确。任务同样的有相对应的接口 <code>org.gradle.api.Task</code>:</p>\n<p><img src=\"https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag25.png\" alt=\"task\"></p>\n<h4 id=\"声明一个-Task\"><a href=\"#声明一个-Task\" class=\"headerlink\" title=\"声明一个 Task\"></a>声明一个 Task</h4><p>我们可以在<code>build.gradle</code> 中通过 <code>task</code> 声明一个 task :</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task simpleTask&#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;task action&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>gradle -q -tasks</code> 来查看当前项目定义的 task ，我们会发现我们的 simpleTask 。</p>\n<p>可以通过 <code>gradle simpleTask</code> 来执行这个任务 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q -tasks</span><br><span class=\"line\">assemble</span><br><span class=\"line\">build</span><br><span class=\"line\">...</span><br><span class=\"line\">simpleTask</span><br><span class=\"line\"></span><br><span class=\"line\">gradle simpleTaskt</span><br><span class=\"line\"></span><br><span class=\"line\">task action</span><br></pre></td></tr></table></figure>\n\n<p>定义 task 的时候其实可以指定很多参数，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>task 的名字</td>\n<td>不能为空，必须指定</td>\n</tr>\n<tr>\n<td>type</td>\n<td>task 的“父类”</td>\n<td>DefaultTask</td>\n</tr>\n<tr>\n<td>overwrite</td>\n<td>是否替换已经存在的 task</td>\n<td>false</td>\n</tr>\n<tr>\n<td>dependsOn</td>\n<td>依赖的 task 集合</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>group</td>\n<td>表示任务的逻辑分组</td>\n<td>null</td>\n</tr>\n<tr>\n<td>description</td>\n<td>task 的描述</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task(<span class=\"string\">&quot;detailTask&quot;</span>,<span class=\"attr\">type:</span>simpleTask,<span class=\"attr\">description:</span><span class=\"string\">&quot;this is a task&quot;</span>)｛</span><br><span class=\"line\">\tprintln <span class=\"string\">&quot;orz&quot;</span></span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明任务的动作\"><a href=\"#声明任务的动作\" class=\"headerlink\" title=\"声明任务的动作\"></a>声明任务的动作</h4><p>当我们将任务内容直接写在 task 内部的时候，task 的内容会在 Project 配置过程就直接被执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle clean</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Configure project :</span><br><span class=\"line\">task action</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们有时候并不想在装配的时候被执行，而是想要指定的时候再被执行。gradle 提供了两个方法来声明任务的动作<code>doFirst</code>和<code>doLast</code>， 他们会指定 task 执行的时候才会被执行, 执行顺序如它们的名字一样会是 task 开始时第一个和最后一个操作。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task myTask &#123;</span><br><span class=\"line\">   println <span class=\"string\">&#x27; -&gt; &#x27;</span></span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        println <span class=\"string\">&#x27;World!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doFirst&#123;</span><br><span class=\"line\">        println <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gradle myTask</span></span><br><span class=\"line\">-&gt; Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以在已经创建的 task 中插入动作：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task oneTask&#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> a =<span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;$&#123;a&#125; bbb&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oneTask &gt;&gt; &#123;<span class=\"string\">&quot;action&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们还经常在文档中看到 <code>oneTask &lt;&lt; &#123;&#125;</code> 这样写法 <code>&lt;&lt;</code> 这个操作符其实是 <code>.letShift</code> 的缩写，它等同与 <code>doLast</code>操作符。</p>\n<h4 id=\"定义任务依赖\"><a href=\"#定义任务依赖\" class=\"headerlink\" title=\"定义任务依赖\"></a>定义任务依赖</h4><p>task 提供了<code>dependsOn</code>方法来声明一个任务依赖于一个或多个任务，被依赖的任务会先于 task 执行</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &lt;&lt; &#123;println <span class=\"string\">&quot;first&quot;</span>&#125;</span><br><span class=\"line\">task second &lt;&lt; &#123;println <span class=\"string\">&quot;second&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在构造函数中声明依赖</span></span><br><span class=\"line\">task printVersion(<span class=\"attr\">dependsOn:</span>[second,first])&gt;&gt;&#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;version: $version&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task third &lt;&lt; &#123;println <span class=\"string\">&quot;third&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过方法调用来声明依赖</span></span><br><span class=\"line\">third.dependsOn(<span class=\"string\">&quot;printlnVersion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br><span class=\"line\"><span class=\"attr\">Version:</span> <span class=\"number\">0.1</span>-SNAPSHOT</span><br><span class=\"line\">third</span><br></pre></td></tr></table></figure>\n\n<p>查看执行顺序会发现一个系列，那就是任务的执行顺序和我们方法中声明的顺序没有关系，<code>first</code> 是在 <code>second</code> 之后声明的但是却先执行了。《Gradle In Action》是这样描素任务的依赖执行顺序的：</p>\n<blockquote>\n<p>Gradle 并不保证依赖的任务能够按顺序执行，dependsOn 方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如 ant）这可能会难以理解。在 Gradle 里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。</p>\n</blockquote>\n<p>重点就是 <strong>gradle 本身并不保证任务的执行顺序，当一个任务的输出和是另一个任务的输入时，这是 gradle 才会确保它们之间的执行顺序。</strong>具体我们在 gradle 的生命周期周期中再讨论。</p>\n<p>####终结者任务</p>\n<p>之前我们可以通过 <code>dependsOn</code> 来指定一些执行任务需要依赖的任务，当执行的任务执行完毕的时候，我们也可以通过 <code>finalizer</code> 来指定一个任务来进行收尾工作，例如清理，回收资源等等 :</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task first &lt;&lt; &#123; println <span class=\"string\">&quot;first&quot;</span> &#125;</span><br><span class=\"line\">task second &lt;&lt; &#123; println <span class=\"string\">&quot;second&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">//声明first结束后执行second任务</span></span><br><span class=\"line\">first.finalizedBy second</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//output:</span></span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br></pre></td></tr></table></figure>\n\n<p>到这里 Task 的常见的动作和依赖相关的 api 也都介绍完了。本次主要是介绍了 gradle 的两个重要概念 <code>project</code> 和 <code>task</code> 以及它们的一些常用 api。下一次准备着手 gradle 的生命周期。</p>\n"},{"layout":"post","title":"Android 内存管理机制","subtitle":"Android 内存管理机制","date":"2018-04-19T14:10:00.000Z","author":"rank","header_image":"img/post-bg-nextgen-web-pwa.jpg","catalog":true,"_content":"\n####基于 Linux 内存管理\n\nAndroid 系统虽然是基于 Linux 2.6 内核开发的开源操作系统，但是 Android 系统对 Linux 的内存管理系统进行了优化，Linux 系统会在进程活动停止后就结束该进程，而 Android 系统则将这些进程都保留在内存中（即使你是退出该程序而不是 Home 键，任然会保留空置进程），这些保留在内存里的进程通常不会影响整体系统的运行，并且当用户再次激活这些进程时，提升了进程的启动速度和保留了状态。\n\n#### 内存分配\n\nAndroid 系统会对每个进程的 Dalvik 设置了严格的 Heap 使用限制，如果应用达到内存限制容量后仍然继续申请内存就会触发内存溢出错误。你可以通过 `getMemoryClass()` 查询可以使用的 Heap 大小，它会以 M 为单位返回。在非常特殊的场景你可以通过设置 `largetHeap`属性为 `true` 到 Application 标签来申请大尺寸内存。但是系统不一定会调整分配。这种情况你更应该去解决内存使用过大的问题而不是依赖它\n\n> // 1、通过 ActivityManager 获取\n> ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n> activityManager.getMemoryClass();\n> activityManager.getLargeMemoryClass();\n>\n> // 2、通过 Runtime 获取\n> Runtime rt = Runtime.getRuntime();\n> rt.getFreeMemory();\n> rt.getMaxMemory();\n> rt.getTotalMemroy();\n>\n> // 注意：ActivityManager.getMemroyInfo()，这个方法不是用来获取 dalvik 内存的，这是获取系统总内存的，我们设置缓存大小时，一般不以它有依据；\n\n当系统需要更多内存时候，垃圾处理器会进行内存回收机制。Android 系统会根据进程的优先级和最少使用次数等因素来关闭进程回收内存。它们按优先级排序为：前台进程、可见进程、次要服务、后台进程、内容供应节点、和空进程。\n\n#### 管理内存\n\n1. **有节制的使用 service 在后台运行工作**。当一个程序在后台但有 service 在持续运行时，系统会保持该进程的工作状态，service 使用的内存资源不能被其他进程使用和移除，同时也减少了进程 LRU 可用的缓存大小，使得应用切换效率更低。\n   最好合理的使用 service，当任务的工作周期明确的时候应当使用 IntentService。\n2. **在界面被隐藏时释放内存资源**。当用户对此界面不可见的时候，开发人员应当主动释放该界面的大块内存资源。此时释放资源可以显著的提升系统的进程缓存容量，从而直接影响用户体验。\n3. **合理的使用多进程**。通过把应用的组件划分到多个进程可以帮助你增加应用的内存占用。但是多进程在大多数情况下都是弊大于利的，进程之间无法共享内存，静态成员和单例模式失效等等。\n4. **使用 zipalign 优化**。在应用的 build.gradle 文件中 将 `zipalignEnable` 属性设置为 true\n   系统会对应用进行优化，既对应用的资源、代码进行偏移 4 的整倍数达到 DSA 标准。减少应用的内存资源占用和加快整体执行效率。\n\n#### 代码内内存优化\n\n1. **合理的使用 Bitmap**。图片资源算是 Android 里的内存消耗大户了，3.0 以后虽然不用手动释放内存，但是在加载图片的时候应该按需加载来节省内存。裁剪至合适的尺寸，当图片是高分辨率且不需要时因尽可能的压缩它。\n2. **合理的创建使用 UI 布局**。减少页面的绘制层级（通过开发者工具来检测），避免在 onDraw 里创建对象。\n3. **使用优化过的容器类**。Android 提供了一系列的优化的容器，如 SparseArray、ArrayMap 等容器，它们在数据量较少的情况下（0~1000 数量级，SparseArray 使用二分查找来定位 index，且避免了对 key 的自动装箱）比 HashMap 更加高效和减少内存使用。\n4. **避免使用枚举**。单个枚举的内存占用是静态常量的 13 倍，使用注解库内的 StringDef/IntDef 或者静态常量来代替注解。\n5. **使用缓存**。对数据进行合理的缓存来避免短时间内大量创建对象造成内存抖动。\n\n#### 常见的内存泄露\n\n- 静态变量/容器持有 Activity 实例\n\n- Handler 内存泄露\n\n- 需要手动回收的资源没有回收\n\n#### 常见的内存检测工具\n\n- [Leak Canary](https://github.com/square/leakcanary)\n- Heap Viewer\n- Allocation Tracker\n- Memory Monitor\n\n### 参考文章\n\n[Android 内存优化容器](https://blog.csdn.net/u010687392/article/details/47809295)\n\n[Zipalign 工具详解](https://blog.csdn.net/ljchlx/article/details/52473297)\n\n[Android 内存管理开发](https://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&mid=401914785&idx=1&sn=73e28432b9b23a314247707a145c6bdd#rd)\n","source":"_posts/2018-04-19-memory_management.markdown","raw":"---\nlayout: post\ntitle: \"Android 内存管理机制\"\nsubtitle: \"Android 内存管理机制\"\ndate: 2018-04-19 22:10:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-nextgen-web-pwa.jpg\"\ncatalog: true\ntags:\n  - Android\n---\n\n####基于 Linux 内存管理\n\nAndroid 系统虽然是基于 Linux 2.6 内核开发的开源操作系统，但是 Android 系统对 Linux 的内存管理系统进行了优化，Linux 系统会在进程活动停止后就结束该进程，而 Android 系统则将这些进程都保留在内存中（即使你是退出该程序而不是 Home 键，任然会保留空置进程），这些保留在内存里的进程通常不会影响整体系统的运行，并且当用户再次激活这些进程时，提升了进程的启动速度和保留了状态。\n\n#### 内存分配\n\nAndroid 系统会对每个进程的 Dalvik 设置了严格的 Heap 使用限制，如果应用达到内存限制容量后仍然继续申请内存就会触发内存溢出错误。你可以通过 `getMemoryClass()` 查询可以使用的 Heap 大小，它会以 M 为单位返回。在非常特殊的场景你可以通过设置 `largetHeap`属性为 `true` 到 Application 标签来申请大尺寸内存。但是系统不一定会调整分配。这种情况你更应该去解决内存使用过大的问题而不是依赖它\n\n> // 1、通过 ActivityManager 获取\n> ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n> activityManager.getMemoryClass();\n> activityManager.getLargeMemoryClass();\n>\n> // 2、通过 Runtime 获取\n> Runtime rt = Runtime.getRuntime();\n> rt.getFreeMemory();\n> rt.getMaxMemory();\n> rt.getTotalMemroy();\n>\n> // 注意：ActivityManager.getMemroyInfo()，这个方法不是用来获取 dalvik 内存的，这是获取系统总内存的，我们设置缓存大小时，一般不以它有依据；\n\n当系统需要更多内存时候，垃圾处理器会进行内存回收机制。Android 系统会根据进程的优先级和最少使用次数等因素来关闭进程回收内存。它们按优先级排序为：前台进程、可见进程、次要服务、后台进程、内容供应节点、和空进程。\n\n#### 管理内存\n\n1. **有节制的使用 service 在后台运行工作**。当一个程序在后台但有 service 在持续运行时，系统会保持该进程的工作状态，service 使用的内存资源不能被其他进程使用和移除，同时也减少了进程 LRU 可用的缓存大小，使得应用切换效率更低。\n   最好合理的使用 service，当任务的工作周期明确的时候应当使用 IntentService。\n2. **在界面被隐藏时释放内存资源**。当用户对此界面不可见的时候，开发人员应当主动释放该界面的大块内存资源。此时释放资源可以显著的提升系统的进程缓存容量，从而直接影响用户体验。\n3. **合理的使用多进程**。通过把应用的组件划分到多个进程可以帮助你增加应用的内存占用。但是多进程在大多数情况下都是弊大于利的，进程之间无法共享内存，静态成员和单例模式失效等等。\n4. **使用 zipalign 优化**。在应用的 build.gradle 文件中 将 `zipalignEnable` 属性设置为 true\n   系统会对应用进行优化，既对应用的资源、代码进行偏移 4 的整倍数达到 DSA 标准。减少应用的内存资源占用和加快整体执行效率。\n\n#### 代码内内存优化\n\n1. **合理的使用 Bitmap**。图片资源算是 Android 里的内存消耗大户了，3.0 以后虽然不用手动释放内存，但是在加载图片的时候应该按需加载来节省内存。裁剪至合适的尺寸，当图片是高分辨率且不需要时因尽可能的压缩它。\n2. **合理的创建使用 UI 布局**。减少页面的绘制层级（通过开发者工具来检测），避免在 onDraw 里创建对象。\n3. **使用优化过的容器类**。Android 提供了一系列的优化的容器，如 SparseArray、ArrayMap 等容器，它们在数据量较少的情况下（0~1000 数量级，SparseArray 使用二分查找来定位 index，且避免了对 key 的自动装箱）比 HashMap 更加高效和减少内存使用。\n4. **避免使用枚举**。单个枚举的内存占用是静态常量的 13 倍，使用注解库内的 StringDef/IntDef 或者静态常量来代替注解。\n5. **使用缓存**。对数据进行合理的缓存来避免短时间内大量创建对象造成内存抖动。\n\n#### 常见的内存泄露\n\n- 静态变量/容器持有 Activity 实例\n\n- Handler 内存泄露\n\n- 需要手动回收的资源没有回收\n\n#### 常见的内存检测工具\n\n- [Leak Canary](https://github.com/square/leakcanary)\n- Heap Viewer\n- Allocation Tracker\n- Memory Monitor\n\n### 参考文章\n\n[Android 内存优化容器](https://blog.csdn.net/u010687392/article/details/47809295)\n\n[Zipalign 工具详解](https://blog.csdn.net/ljchlx/article/details/52473297)\n\n[Android 内存管理开发](https://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&mid=401914785&idx=1&sn=73e28432b9b23a314247707a145c6bdd#rd)\n","slug":"2018-04-19-memory_management","published":1,"updated":"2024-09-13T03:38:13.728Z","comments":1,"photos":[],"link":"","_id":"cm10dl6p9000ts2y46n19hcpr","content":"<p>####基于 Linux 内存管理</p>\n<p>Android 系统虽然是基于 Linux 2.6 内核开发的开源操作系统，但是 Android 系统对 Linux 的内存管理系统进行了优化，Linux 系统会在进程活动停止后就结束该进程，而 Android 系统则将这些进程都保留在内存中（即使你是退出该程序而不是 Home 键，任然会保留空置进程），这些保留在内存里的进程通常不会影响整体系统的运行，并且当用户再次激活这些进程时，提升了进程的启动速度和保留了状态。</p>\n<h4 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h4><p>Android 系统会对每个进程的 Dalvik 设置了严格的 Heap 使用限制，如果应用达到内存限制容量后仍然继续申请内存就会触发内存溢出错误。你可以通过 <code>getMemoryClass()</code> 查询可以使用的 Heap 大小，它会以 M 为单位返回。在非常特殊的场景你可以通过设置 <code>largetHeap</code>属性为 <code>true</code> 到 Application 标签来申请大尺寸内存。但是系统不一定会调整分配。这种情况你更应该去解决内存使用过大的问题而不是依赖它</p>\n<blockquote>\n<p>&#x2F;&#x2F; 1、通过 ActivityManager 获取<br>ActivityManager activityManager&#x3D;(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);<br>activityManager.getMemoryClass();<br>activityManager.getLargeMemoryClass();</p>\n<p>&#x2F;&#x2F; 2、通过 Runtime 获取<br>Runtime rt &#x3D; Runtime.getRuntime();<br>rt.getFreeMemory();<br>rt.getMaxMemory();<br>rt.getTotalMemroy();</p>\n<p>&#x2F;&#x2F; 注意：ActivityManager.getMemroyInfo()，这个方法不是用来获取 dalvik 内存的，这是获取系统总内存的，我们设置缓存大小时，一般不以它有依据；</p>\n</blockquote>\n<p>当系统需要更多内存时候，垃圾处理器会进行内存回收机制。Android 系统会根据进程的优先级和最少使用次数等因素来关闭进程回收内存。它们按优先级排序为：前台进程、可见进程、次要服务、后台进程、内容供应节点、和空进程。</p>\n<h4 id=\"管理内存\"><a href=\"#管理内存\" class=\"headerlink\" title=\"管理内存\"></a>管理内存</h4><ol>\n<li><strong>有节制的使用 service 在后台运行工作</strong>。当一个程序在后台但有 service 在持续运行时，系统会保持该进程的工作状态，service 使用的内存资源不能被其他进程使用和移除，同时也减少了进程 LRU 可用的缓存大小，使得应用切换效率更低。<br>最好合理的使用 service，当任务的工作周期明确的时候应当使用 IntentService。</li>\n<li><strong>在界面被隐藏时释放内存资源</strong>。当用户对此界面不可见的时候，开发人员应当主动释放该界面的大块内存资源。此时释放资源可以显著的提升系统的进程缓存容量，从而直接影响用户体验。</li>\n<li><strong>合理的使用多进程</strong>。通过把应用的组件划分到多个进程可以帮助你增加应用的内存占用。但是多进程在大多数情况下都是弊大于利的，进程之间无法共享内存，静态成员和单例模式失效等等。</li>\n<li><strong>使用 zipalign 优化</strong>。在应用的 build.gradle 文件中 将 <code>zipalignEnable</code> 属性设置为 true<br>系统会对应用进行优化，既对应用的资源、代码进行偏移 4 的整倍数达到 DSA 标准。减少应用的内存资源占用和加快整体执行效率。</li>\n</ol>\n<h4 id=\"代码内内存优化\"><a href=\"#代码内内存优化\" class=\"headerlink\" title=\"代码内内存优化\"></a>代码内内存优化</h4><ol>\n<li><strong>合理的使用 Bitmap</strong>。图片资源算是 Android 里的内存消耗大户了，3.0 以后虽然不用手动释放内存，但是在加载图片的时候应该按需加载来节省内存。裁剪至合适的尺寸，当图片是高分辨率且不需要时因尽可能的压缩它。</li>\n<li><strong>合理的创建使用 UI 布局</strong>。减少页面的绘制层级（通过开发者工具来检测），避免在 onDraw 里创建对象。</li>\n<li><strong>使用优化过的容器类</strong>。Android 提供了一系列的优化的容器，如 SparseArray、ArrayMap 等容器，它们在数据量较少的情况下（0~1000 数量级，SparseArray 使用二分查找来定位 index，且避免了对 key 的自动装箱）比 HashMap 更加高效和减少内存使用。</li>\n<li><strong>避免使用枚举</strong>。单个枚举的内存占用是静态常量的 13 倍，使用注解库内的 StringDef&#x2F;IntDef 或者静态常量来代替注解。</li>\n<li><strong>使用缓存</strong>。对数据进行合理的缓存来避免短时间内大量创建对象造成内存抖动。</li>\n</ol>\n<h4 id=\"常见的内存泄露\"><a href=\"#常见的内存泄露\" class=\"headerlink\" title=\"常见的内存泄露\"></a>常见的内存泄露</h4><ul>\n<li><p>静态变量&#x2F;容器持有 Activity 实例</p>\n</li>\n<li><p>Handler 内存泄露</p>\n</li>\n<li><p>需要手动回收的资源没有回收</p>\n</li>\n</ul>\n<h4 id=\"常见的内存检测工具\"><a href=\"#常见的内存检测工具\" class=\"headerlink\" title=\"常见的内存检测工具\"></a>常见的内存检测工具</h4><ul>\n<li><a href=\"https://github.com/square/leakcanary\">Leak Canary</a></li>\n<li>Heap Viewer</li>\n<li>Allocation Tracker</li>\n<li>Memory Monitor</li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/u010687392/article/details/47809295\">Android 内存优化容器</a></p>\n<p><a href=\"https://blog.csdn.net/ljchlx/article/details/52473297\">Zipalign 工具详解</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&mid=401914785&idx=1&sn=73e28432b9b23a314247707a145c6bdd#rd\">Android 内存管理开发</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####基于 Linux 内存管理</p>\n<p>Android 系统虽然是基于 Linux 2.6 内核开发的开源操作系统，但是 Android 系统对 Linux 的内存管理系统进行了优化，Linux 系统会在进程活动停止后就结束该进程，而 Android 系统则将这些进程都保留在内存中（即使你是退出该程序而不是 Home 键，任然会保留空置进程），这些保留在内存里的进程通常不会影响整体系统的运行，并且当用户再次激活这些进程时，提升了进程的启动速度和保留了状态。</p>\n<h4 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h4><p>Android 系统会对每个进程的 Dalvik 设置了严格的 Heap 使用限制，如果应用达到内存限制容量后仍然继续申请内存就会触发内存溢出错误。你可以通过 <code>getMemoryClass()</code> 查询可以使用的 Heap 大小，它会以 M 为单位返回。在非常特殊的场景你可以通过设置 <code>largetHeap</code>属性为 <code>true</code> 到 Application 标签来申请大尺寸内存。但是系统不一定会调整分配。这种情况你更应该去解决内存使用过大的问题而不是依赖它</p>\n<blockquote>\n<p>&#x2F;&#x2F; 1、通过 ActivityManager 获取<br>ActivityManager activityManager&#x3D;(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);<br>activityManager.getMemoryClass();<br>activityManager.getLargeMemoryClass();</p>\n<p>&#x2F;&#x2F; 2、通过 Runtime 获取<br>Runtime rt &#x3D; Runtime.getRuntime();<br>rt.getFreeMemory();<br>rt.getMaxMemory();<br>rt.getTotalMemroy();</p>\n<p>&#x2F;&#x2F; 注意：ActivityManager.getMemroyInfo()，这个方法不是用来获取 dalvik 内存的，这是获取系统总内存的，我们设置缓存大小时，一般不以它有依据；</p>\n</blockquote>\n<p>当系统需要更多内存时候，垃圾处理器会进行内存回收机制。Android 系统会根据进程的优先级和最少使用次数等因素来关闭进程回收内存。它们按优先级排序为：前台进程、可见进程、次要服务、后台进程、内容供应节点、和空进程。</p>\n<h4 id=\"管理内存\"><a href=\"#管理内存\" class=\"headerlink\" title=\"管理内存\"></a>管理内存</h4><ol>\n<li><strong>有节制的使用 service 在后台运行工作</strong>。当一个程序在后台但有 service 在持续运行时，系统会保持该进程的工作状态，service 使用的内存资源不能被其他进程使用和移除，同时也减少了进程 LRU 可用的缓存大小，使得应用切换效率更低。<br>最好合理的使用 service，当任务的工作周期明确的时候应当使用 IntentService。</li>\n<li><strong>在界面被隐藏时释放内存资源</strong>。当用户对此界面不可见的时候，开发人员应当主动释放该界面的大块内存资源。此时释放资源可以显著的提升系统的进程缓存容量，从而直接影响用户体验。</li>\n<li><strong>合理的使用多进程</strong>。通过把应用的组件划分到多个进程可以帮助你增加应用的内存占用。但是多进程在大多数情况下都是弊大于利的，进程之间无法共享内存，静态成员和单例模式失效等等。</li>\n<li><strong>使用 zipalign 优化</strong>。在应用的 build.gradle 文件中 将 <code>zipalignEnable</code> 属性设置为 true<br>系统会对应用进行优化，既对应用的资源、代码进行偏移 4 的整倍数达到 DSA 标准。减少应用的内存资源占用和加快整体执行效率。</li>\n</ol>\n<h4 id=\"代码内内存优化\"><a href=\"#代码内内存优化\" class=\"headerlink\" title=\"代码内内存优化\"></a>代码内内存优化</h4><ol>\n<li><strong>合理的使用 Bitmap</strong>。图片资源算是 Android 里的内存消耗大户了，3.0 以后虽然不用手动释放内存，但是在加载图片的时候应该按需加载来节省内存。裁剪至合适的尺寸，当图片是高分辨率且不需要时因尽可能的压缩它。</li>\n<li><strong>合理的创建使用 UI 布局</strong>。减少页面的绘制层级（通过开发者工具来检测），避免在 onDraw 里创建对象。</li>\n<li><strong>使用优化过的容器类</strong>。Android 提供了一系列的优化的容器，如 SparseArray、ArrayMap 等容器，它们在数据量较少的情况下（0~1000 数量级，SparseArray 使用二分查找来定位 index，且避免了对 key 的自动装箱）比 HashMap 更加高效和减少内存使用。</li>\n<li><strong>避免使用枚举</strong>。单个枚举的内存占用是静态常量的 13 倍，使用注解库内的 StringDef&#x2F;IntDef 或者静态常量来代替注解。</li>\n<li><strong>使用缓存</strong>。对数据进行合理的缓存来避免短时间内大量创建对象造成内存抖动。</li>\n</ol>\n<h4 id=\"常见的内存泄露\"><a href=\"#常见的内存泄露\" class=\"headerlink\" title=\"常见的内存泄露\"></a>常见的内存泄露</h4><ul>\n<li><p>静态变量&#x2F;容器持有 Activity 实例</p>\n</li>\n<li><p>Handler 内存泄露</p>\n</li>\n<li><p>需要手动回收的资源没有回收</p>\n</li>\n</ul>\n<h4 id=\"常见的内存检测工具\"><a href=\"#常见的内存检测工具\" class=\"headerlink\" title=\"常见的内存检测工具\"></a>常见的内存检测工具</h4><ul>\n<li><a href=\"https://github.com/square/leakcanary\">Leak Canary</a></li>\n<li>Heap Viewer</li>\n<li>Allocation Tracker</li>\n<li>Memory Monitor</li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/u010687392/article/details/47809295\">Android 内存优化容器</a></p>\n<p><a href=\"https://blog.csdn.net/ljchlx/article/details/52473297\">Zipalign 工具详解</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&mid=401914785&idx=1&sn=73e28432b9b23a314247707a145c6bdd#rd\">Android 内存管理开发</a></p>\n"},{"layout":"post","title":"Flutter 实践","subtitle":"gank.io flutter 版客户端开发有感","date":"2020-04-27T07:00:00.000Z","author":"rank","header_image":"img/post-bg-flutter.jpg","catalog":true,"_content":"\n## 前言\n\n4月公司客户端业务没有什么大的动向，我自己自然也就落得清闲了。打算按照年前指定的计划，这段时间用来实战和深入了解一些 `Flutter` 相关的知识。个人感觉，学到的知识如果不能转化成成果，那么价值和留存率都是级低的。敲定目标后，打算做什么就很重要了。毕竟 UI 什么的可以自己想，但是数据可不是无源之水，去买感觉又不大必要；苦恼之际，正巧浏览的时候看到 [gank](https://gank.io/) 翻修改版了，也就打算做一个 Flutter 版本客户端，虽然没什么特色，但也聊胜于无，而且 API 现在是越来越稀缺了，只能要求自己做的劲量精细点，不要制造垃圾。\n\n下面就是半个月的成果——[gank-flutter](https://github.com/Mr9527/GankClient-Flutter)：\n\n![演示图](https://s1.ax1x.com/2020/04/27/Jfooa8.gif)\n\n\n\n## 个人感触\n\n目前就只有这些功能了。之所以功能并不多，有两点原因：一是目前新版客户端提供的 API 并不多；二是之前预想的是与 `github ` 的部分 API 结合起来扩充个人中心的内容，但后来都胎死腹中了。因为目前 `gank` 的登录接口只提供了原始的 `github` OAuth 接口来直接登录授权，尝试了下合并无果就暂时搁置了这一部分的计划，等后续有接口了一起迭代，如果强行弄一起感觉就像缝合怪一样，并不想这样做。\n\n闲聊完，来说说这次开发完的感觉，不得不说 flutter 的跨平台在 UI 方面对开发者和用户的体验感觉是目前最好的。常规的应用完全可以迅速的开发并进行多端布置，现阶段提供的 `API`和开源社区的库扩展可以覆盖大部分常规的功能场景。平台特点的功能也可以通过 plugin 的方式使用。可能针对硬件方面的功能会有一些缺陷，这个没有了解过。缺点也有，项目中常用的 `webView ` 目前扩展性和功能都很单一，cookie 管理还是测试性功能，对国内 hybrid 生态比较重的环境来说并不是个好消息，不过因为 webView 的扩展库是官方管理的，可以相信其迭代的能力。总的来说，我觉得确实对得起这个正式的版号（1.x.x )。现阶段的 flutter 虽然各方面不一定是最好的，但是它未来的路线都画的很明确了,各大头部公司也在几级背书，身为一个客户端开发感觉还是很有学习的必要的。\n\n\n\n\n\n## 学习路线\n\n1. 先学习 `Dart`语言基础。现代编程语言的语法特性都类似，`Dart` 较为特殊的就是它的异步 `async await` 和类似多继承的 `mixinx` 机制。这两点要着重理解。还有就是较为常规的函数、集合、stream 等。\n2. 去 [flutter.cn](https://flutter.cn/) 跟着官方的[中文文档](https://flutter.cn/docs)从头到尾实践一遍，会对 flutter 开发有较为完整的认知。虽然较为碎片，但是后边实践会让迅速的将知识穿插起来。\n3. 看完官方文档基本还停留在写 demo 的阶段。这里我找了几个项目，编译和阅读了它们。[flutter-go](https://github.com/alibaba/flutter-go)、[flutterUnit](https://github.com/toly1994328/FlutterUnit) 是开源的 widget 合集，可以让你通过可视化以及代码修改编写来快速的熟悉官方的常用 widget。[gsy_github_app_flutter](https://github.com/CarGuo/gsy_github_app_flutter) 则可以让你对常用的开源库，自定义 widget 以及商业化的项目结构有一定的了解，读起来对我这种小白来说受益匪浅。\n4. 之后就打算将学习到的知识转化为实践，于是就花了半个月的时间开发了这款 [gank-flutter](https://github.com/Mr9527/GankClient-Flutter)\n\n一圈下来算是快速了解了 flutter 生态、开发环境以及商业项目的实践应用。当然也仅仅做到 T 型的 — ，对具体实现、运作机制、性能优化、复杂的功能应用知之甚少。如果想成为一个合格的 Flutter 开发者，我想这些都是必不可少的。之后我也打算对 flutter 的具体实现进行进一步的了解.:dog:\n\n\n\n## 挖坑\n\n后续计划：\n\n- 了解 Flutter framework 的运行原理\n- 了解 widget 具体的代码实现和工作原理\n- 继续迭代 gank-flutter 项目\n- 对 gank-flutter 做一篇技术性的总结\n\n\n\n2020 年的第一篇博客总算在五月之前发出来了，虽然灌水的既视感满满，但也对自己这段时间所做的事情有了一定的交代。希望之后的自己可以再接再厉，完成年初制定的一揽子计划。疫情的影响在国内也快逐渐淡去，希望之后国内的大环境也能尽快好起来:pizza:","source":"_posts/2020-04-27-flutter_application.markdown","raw":"---\nlayout: post\ntitle: \"Flutter 实践\"\nsubtitle: \"gank.io flutter 版客户端开发有感\"\ndate: 2020-04-27 15:00:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-flutter.jpg\"\ncatalog: true\ntags:\n  - Flutter\n---\n\n## 前言\n\n4月公司客户端业务没有什么大的动向，我自己自然也就落得清闲了。打算按照年前指定的计划，这段时间用来实战和深入了解一些 `Flutter` 相关的知识。个人感觉，学到的知识如果不能转化成成果，那么价值和留存率都是级低的。敲定目标后，打算做什么就很重要了。毕竟 UI 什么的可以自己想，但是数据可不是无源之水，去买感觉又不大必要；苦恼之际，正巧浏览的时候看到 [gank](https://gank.io/) 翻修改版了，也就打算做一个 Flutter 版本客户端，虽然没什么特色，但也聊胜于无，而且 API 现在是越来越稀缺了，只能要求自己做的劲量精细点，不要制造垃圾。\n\n下面就是半个月的成果——[gank-flutter](https://github.com/Mr9527/GankClient-Flutter)：\n\n![演示图](https://s1.ax1x.com/2020/04/27/Jfooa8.gif)\n\n\n\n## 个人感触\n\n目前就只有这些功能了。之所以功能并不多，有两点原因：一是目前新版客户端提供的 API 并不多；二是之前预想的是与 `github ` 的部分 API 结合起来扩充个人中心的内容，但后来都胎死腹中了。因为目前 `gank` 的登录接口只提供了原始的 `github` OAuth 接口来直接登录授权，尝试了下合并无果就暂时搁置了这一部分的计划，等后续有接口了一起迭代，如果强行弄一起感觉就像缝合怪一样，并不想这样做。\n\n闲聊完，来说说这次开发完的感觉，不得不说 flutter 的跨平台在 UI 方面对开发者和用户的体验感觉是目前最好的。常规的应用完全可以迅速的开发并进行多端布置，现阶段提供的 `API`和开源社区的库扩展可以覆盖大部分常规的功能场景。平台特点的功能也可以通过 plugin 的方式使用。可能针对硬件方面的功能会有一些缺陷，这个没有了解过。缺点也有，项目中常用的 `webView ` 目前扩展性和功能都很单一，cookie 管理还是测试性功能，对国内 hybrid 生态比较重的环境来说并不是个好消息，不过因为 webView 的扩展库是官方管理的，可以相信其迭代的能力。总的来说，我觉得确实对得起这个正式的版号（1.x.x )。现阶段的 flutter 虽然各方面不一定是最好的，但是它未来的路线都画的很明确了,各大头部公司也在几级背书，身为一个客户端开发感觉还是很有学习的必要的。\n\n\n\n\n\n## 学习路线\n\n1. 先学习 `Dart`语言基础。现代编程语言的语法特性都类似，`Dart` 较为特殊的就是它的异步 `async await` 和类似多继承的 `mixinx` 机制。这两点要着重理解。还有就是较为常规的函数、集合、stream 等。\n2. 去 [flutter.cn](https://flutter.cn/) 跟着官方的[中文文档](https://flutter.cn/docs)从头到尾实践一遍，会对 flutter 开发有较为完整的认知。虽然较为碎片，但是后边实践会让迅速的将知识穿插起来。\n3. 看完官方文档基本还停留在写 demo 的阶段。这里我找了几个项目，编译和阅读了它们。[flutter-go](https://github.com/alibaba/flutter-go)、[flutterUnit](https://github.com/toly1994328/FlutterUnit) 是开源的 widget 合集，可以让你通过可视化以及代码修改编写来快速的熟悉官方的常用 widget。[gsy_github_app_flutter](https://github.com/CarGuo/gsy_github_app_flutter) 则可以让你对常用的开源库，自定义 widget 以及商业化的项目结构有一定的了解，读起来对我这种小白来说受益匪浅。\n4. 之后就打算将学习到的知识转化为实践，于是就花了半个月的时间开发了这款 [gank-flutter](https://github.com/Mr9527/GankClient-Flutter)\n\n一圈下来算是快速了解了 flutter 生态、开发环境以及商业项目的实践应用。当然也仅仅做到 T 型的 — ，对具体实现、运作机制、性能优化、复杂的功能应用知之甚少。如果想成为一个合格的 Flutter 开发者，我想这些都是必不可少的。之后我也打算对 flutter 的具体实现进行进一步的了解.:dog:\n\n\n\n## 挖坑\n\n后续计划：\n\n- 了解 Flutter framework 的运行原理\n- 了解 widget 具体的代码实现和工作原理\n- 继续迭代 gank-flutter 项目\n- 对 gank-flutter 做一篇技术性的总结\n\n\n\n2020 年的第一篇博客总算在五月之前发出来了，虽然灌水的既视感满满，但也对自己这段时间所做的事情有了一定的交代。希望之后的自己可以再接再厉，完成年初制定的一揽子计划。疫情的影响在国内也快逐渐淡去，希望之后国内的大环境也能尽快好起来:pizza:","slug":"2020-04-27-flutter_application","published":1,"updated":"2024-09-13T03:38:13.729Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pa000vs2y4cxow9rh6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>4月公司客户端业务没有什么大的动向，我自己自然也就落得清闲了。打算按照年前指定的计划，这段时间用来实战和深入了解一些 <code>Flutter</code> 相关的知识。个人感觉，学到的知识如果不能转化成成果，那么价值和留存率都是级低的。敲定目标后，打算做什么就很重要了。毕竟 UI 什么的可以自己想，但是数据可不是无源之水，去买感觉又不大必要；苦恼之际，正巧浏览的时候看到 <a href=\"https://gank.io/\">gank</a> 翻修改版了，也就打算做一个 Flutter 版本客户端，虽然没什么特色，但也聊胜于无，而且 API 现在是越来越稀缺了，只能要求自己做的劲量精细点，不要制造垃圾。</p>\n<p>下面就是半个月的成果——<a href=\"https://github.com/Mr9527/GankClient-Flutter\">gank-flutter</a>：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/27/Jfooa8.gif\" alt=\"演示图\"></p>\n<h2 id=\"个人感触\"><a href=\"#个人感触\" class=\"headerlink\" title=\"个人感触\"></a>个人感触</h2><p>目前就只有这些功能了。之所以功能并不多，有两点原因：一是目前新版客户端提供的 API 并不多；二是之前预想的是与 <code>github </code> 的部分 API 结合起来扩充个人中心的内容，但后来都胎死腹中了。因为目前 <code>gank</code> 的登录接口只提供了原始的 <code>github</code> OAuth 接口来直接登录授权，尝试了下合并无果就暂时搁置了这一部分的计划，等后续有接口了一起迭代，如果强行弄一起感觉就像缝合怪一样，并不想这样做。</p>\n<p>闲聊完，来说说这次开发完的感觉，不得不说 flutter 的跨平台在 UI 方面对开发者和用户的体验感觉是目前最好的。常规的应用完全可以迅速的开发并进行多端布置，现阶段提供的 <code>API</code>和开源社区的库扩展可以覆盖大部分常规的功能场景。平台特点的功能也可以通过 plugin 的方式使用。可能针对硬件方面的功能会有一些缺陷，这个没有了解过。缺点也有，项目中常用的 <code>webView </code> 目前扩展性和功能都很单一，cookie 管理还是测试性功能，对国内 hybrid 生态比较重的环境来说并不是个好消息，不过因为 webView 的扩展库是官方管理的，可以相信其迭代的能力。总的来说，我觉得确实对得起这个正式的版号（1.x.x )。现阶段的 flutter 虽然各方面不一定是最好的，但是它未来的路线都画的很明确了,各大头部公司也在几级背书，身为一个客户端开发感觉还是很有学习的必要的。</p>\n<h2 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h2><ol>\n<li>先学习 <code>Dart</code>语言基础。现代编程语言的语法特性都类似，<code>Dart</code> 较为特殊的就是它的异步 <code>async await</code> 和类似多继承的 <code>mixinx</code> 机制。这两点要着重理解。还有就是较为常规的函数、集合、stream 等。</li>\n<li>去 <a href=\"https://flutter.cn/\">flutter.cn</a> 跟着官方的<a href=\"https://flutter.cn/docs\">中文文档</a>从头到尾实践一遍，会对 flutter 开发有较为完整的认知。虽然较为碎片，但是后边实践会让迅速的将知识穿插起来。</li>\n<li>看完官方文档基本还停留在写 demo 的阶段。这里我找了几个项目，编译和阅读了它们。<a href=\"https://github.com/alibaba/flutter-go\">flutter-go</a>、<a href=\"https://github.com/toly1994328/FlutterUnit\">flutterUnit</a> 是开源的 widget 合集，可以让你通过可视化以及代码修改编写来快速的熟悉官方的常用 widget。<a href=\"https://github.com/CarGuo/gsy_github_app_flutter\">gsy_github_app_flutter</a> 则可以让你对常用的开源库，自定义 widget 以及商业化的项目结构有一定的了解，读起来对我这种小白来说受益匪浅。</li>\n<li>之后就打算将学习到的知识转化为实践，于是就花了半个月的时间开发了这款 <a href=\"https://github.com/Mr9527/GankClient-Flutter\">gank-flutter</a></li>\n</ol>\n<p>一圈下来算是快速了解了 flutter 生态、开发环境以及商业项目的实践应用。当然也仅仅做到 T 型的 — ，对具体实现、运作机制、性能优化、复杂的功能应用知之甚少。如果想成为一个合格的 Flutter 开发者，我想这些都是必不可少的。之后我也打算对 flutter 的具体实现进行进一步的了解.:dog:</p>\n<h2 id=\"挖坑\"><a href=\"#挖坑\" class=\"headerlink\" title=\"挖坑\"></a>挖坑</h2><p>后续计划：</p>\n<ul>\n<li>了解 Flutter framework 的运行原理</li>\n<li>了解 widget 具体的代码实现和工作原理</li>\n<li>继续迭代 gank-flutter 项目</li>\n<li>对 gank-flutter 做一篇技术性的总结</li>\n</ul>\n<p>2020 年的第一篇博客总算在五月之前发出来了，虽然灌水的既视感满满，但也对自己这段时间所做的事情有了一定的交代。希望之后的自己可以再接再厉，完成年初制定的一揽子计划。疫情的影响在国内也快逐渐淡去，希望之后国内的大环境也能尽快好起来:pizza:</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>4月公司客户端业务没有什么大的动向，我自己自然也就落得清闲了。打算按照年前指定的计划，这段时间用来实战和深入了解一些 <code>Flutter</code> 相关的知识。个人感觉，学到的知识如果不能转化成成果，那么价值和留存率都是级低的。敲定目标后，打算做什么就很重要了。毕竟 UI 什么的可以自己想，但是数据可不是无源之水，去买感觉又不大必要；苦恼之际，正巧浏览的时候看到 <a href=\"https://gank.io/\">gank</a> 翻修改版了，也就打算做一个 Flutter 版本客户端，虽然没什么特色，但也聊胜于无，而且 API 现在是越来越稀缺了，只能要求自己做的劲量精细点，不要制造垃圾。</p>\n<p>下面就是半个月的成果——<a href=\"https://github.com/Mr9527/GankClient-Flutter\">gank-flutter</a>：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/27/Jfooa8.gif\" alt=\"演示图\"></p>\n<h2 id=\"个人感触\"><a href=\"#个人感触\" class=\"headerlink\" title=\"个人感触\"></a>个人感触</h2><p>目前就只有这些功能了。之所以功能并不多，有两点原因：一是目前新版客户端提供的 API 并不多；二是之前预想的是与 <code>github </code> 的部分 API 结合起来扩充个人中心的内容，但后来都胎死腹中了。因为目前 <code>gank</code> 的登录接口只提供了原始的 <code>github</code> OAuth 接口来直接登录授权，尝试了下合并无果就暂时搁置了这一部分的计划，等后续有接口了一起迭代，如果强行弄一起感觉就像缝合怪一样，并不想这样做。</p>\n<p>闲聊完，来说说这次开发完的感觉，不得不说 flutter 的跨平台在 UI 方面对开发者和用户的体验感觉是目前最好的。常规的应用完全可以迅速的开发并进行多端布置，现阶段提供的 <code>API</code>和开源社区的库扩展可以覆盖大部分常规的功能场景。平台特点的功能也可以通过 plugin 的方式使用。可能针对硬件方面的功能会有一些缺陷，这个没有了解过。缺点也有，项目中常用的 <code>webView </code> 目前扩展性和功能都很单一，cookie 管理还是测试性功能，对国内 hybrid 生态比较重的环境来说并不是个好消息，不过因为 webView 的扩展库是官方管理的，可以相信其迭代的能力。总的来说，我觉得确实对得起这个正式的版号（1.x.x )。现阶段的 flutter 虽然各方面不一定是最好的，但是它未来的路线都画的很明确了,各大头部公司也在几级背书，身为一个客户端开发感觉还是很有学习的必要的。</p>\n<h2 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h2><ol>\n<li>先学习 <code>Dart</code>语言基础。现代编程语言的语法特性都类似，<code>Dart</code> 较为特殊的就是它的异步 <code>async await</code> 和类似多继承的 <code>mixinx</code> 机制。这两点要着重理解。还有就是较为常规的函数、集合、stream 等。</li>\n<li>去 <a href=\"https://flutter.cn/\">flutter.cn</a> 跟着官方的<a href=\"https://flutter.cn/docs\">中文文档</a>从头到尾实践一遍，会对 flutter 开发有较为完整的认知。虽然较为碎片，但是后边实践会让迅速的将知识穿插起来。</li>\n<li>看完官方文档基本还停留在写 demo 的阶段。这里我找了几个项目，编译和阅读了它们。<a href=\"https://github.com/alibaba/flutter-go\">flutter-go</a>、<a href=\"https://github.com/toly1994328/FlutterUnit\">flutterUnit</a> 是开源的 widget 合集，可以让你通过可视化以及代码修改编写来快速的熟悉官方的常用 widget。<a href=\"https://github.com/CarGuo/gsy_github_app_flutter\">gsy_github_app_flutter</a> 则可以让你对常用的开源库，自定义 widget 以及商业化的项目结构有一定的了解，读起来对我这种小白来说受益匪浅。</li>\n<li>之后就打算将学习到的知识转化为实践，于是就花了半个月的时间开发了这款 <a href=\"https://github.com/Mr9527/GankClient-Flutter\">gank-flutter</a></li>\n</ol>\n<p>一圈下来算是快速了解了 flutter 生态、开发环境以及商业项目的实践应用。当然也仅仅做到 T 型的 — ，对具体实现、运作机制、性能优化、复杂的功能应用知之甚少。如果想成为一个合格的 Flutter 开发者，我想这些都是必不可少的。之后我也打算对 flutter 的具体实现进行进一步的了解.:dog:</p>\n<h2 id=\"挖坑\"><a href=\"#挖坑\" class=\"headerlink\" title=\"挖坑\"></a>挖坑</h2><p>后续计划：</p>\n<ul>\n<li>了解 Flutter framework 的运行原理</li>\n<li>了解 widget 具体的代码实现和工作原理</li>\n<li>继续迭代 gank-flutter 项目</li>\n<li>对 gank-flutter 做一篇技术性的总结</li>\n</ul>\n<p>2020 年的第一篇博客总算在五月之前发出来了，虽然灌水的既视感满满，但也对自己这段时间所做的事情有了一定的交代。希望之后的自己可以再接再厉，完成年初制定的一揽子计划。疫情的影响在国内也快逐渐淡去，希望之后国内的大环境也能尽快好起来:pizza:</p>\n"},{"layout":"post","title":"Dart 实践（一）","subtitle":"Dart 语法基础","date":"2020-04-30T03:13:00.000Z","author":"rank","header_image":"img/post-bg-dart.jpg","catalog":true,"_content":"\n##  数据类型\n\n**Dart 中一切都是对象，包含数字、布尔值、函数等，它们和 java 一样继承与 object，所以它们的默认值都是 Null**  这点尤为需要注意，在定义数据类型的时候如 布尔 、数字类型都需要我们手动去设定业务中所需要的默认值。\n\n### 常用数据类型\n\n#### **布尔类型（bool）**\n\n布尔类型与 C 语言一样，使用 `bool` 声明一个布尔类型的对象，拥有 `true` 和 `false` 两个值\n\n``` dart\nbool isOpened=true;\n```\n\n\n\n#### 数字类型（int、double）\n\n在 Dart 中的数字只有类型 `int`、`double` ，它们都继承于 `num` 类，`num` 类是一个抽象类，声明了整数和浮点数的抽象实现，而 `int`、`double` 就是它的具体实现类。\n\n```dart\ndouble size=2.3333;\nint width=10;\nvar height=23.3;\n```\n\n\n\n#### **字符串类型（string）**\n\nDart 中的字符串功能与 kotlin 类似，都是十分强大。支持单引号、双引号、三引号保留格式、以及字符串模板。\n\n```dart\nString title=\"App\"\nString desc=\"\"\"\nFlutter\n\t\tApplication;\n\"\"\";\nString value=\"application title = $title\";\n\n```\n\n\n\n\n#### **Runes 和 Symbols 类型**\n\nRunes 类型是 UTF-32 字节单元定义的 Unicode 字符串，Unicode 可以使用数字表示字母、数字和符号，然而在 Dart 中，String 是一系列的 UTF-16 的字节单元，所以想要表示 32 位的 Unicode 的值，就需要用到 Runes 类型。我们一般使用 `\\uxxxx` 这种形式来表示一个 Unicode 码，`xxxx` 表示 4 个十六进制值。当十六进制数据多余或者少于 4 位时，将十六进制数放入到花括号中，例如，微笑表情（😆）是 `\\u{1f600}`。而 Symbols 类型则用得很少，一般用于 Dart 中的反射，但是注意在 Flutter 中禁止使用反射。\n\n``` dart\n Runes input = new Runes(\n      '\\u2665  \\u{1f605}  \\u{1f60e}  \\u{1f47b}  \\u{1f596}  \\u{1f44d}');\n```\n\n\n\n#### **dynamic 类型**\n\n我们知道 Dart 的顶级对象是 Object ，但是像我们在使用 `var` 表示一个对象的时候，它的类型并不像 `kotlin` 那样直接类型推导出来，而是在编译才会进行检查，变量未赋值的时候是无法确定类型的，可能连 Object 也不是，这时候就用另一种类型来定义这个对象，这种类型就叫做 `dynamic` 类型，它也可以像 Object 一样改变类型。但是区别在于 Object 会在编译期间就进行类型检查，而 `dynamic`则不会。\n\n ``` dart\nMap<String,dynamic> config={\"a\":1,b:\"2\"};\n\n ```\n\n\n\n## 常用集合\n\n dart 的集合声明和使用的方式与 javaScript 更类似。对集合的使用和限制都十分的宽松。此外还提供了很多操作符使得处理结构化的数据更加简单明了。\n\n#### List\n\n```dart\nvar list = new list();\nlist.add(1);\nvar list2=[];\nlist2.addall(list);\n// 常用函数以及操作符\nlist.clear();\nlist.insert(0,2);\nlist.forEach((index)=>print(index));\n\nList<int> numbers = [0, 3, 1, 2, 7, 12, 2, 4];\nnumbers.sort((num1, num2) => num1 - num2); //升序排序\n//where、firstWhere、signleWhere\nnumbers.firstWhere((num) => num == 5, orElse: () => -1)); \n// take 设定区间，skip 跳过前 n 个元素\nnumbers.take(5).skip(2);\n```\n\n#### Map\n\nMap 与现代语言的 map 类型，key-value 形式存储数据。\n\n``` dart\nvar defaultMap={};\nMap<String,int> levelMap=  new Map();\n// 如果你使用 Map 构造函数创建一个 map ,默认情况下会创建一个 LinkedHashMap 实例\nlevelMap[\"a\"]=0;\nlevelMap[\"b\"]=2;\n\nlevelMap.forEach((key,value)=>{\n    print(\"key:$key value:$value\");\n})\n```\n\n除此之外，Dart 的 `collection` 包中还有很多我们耳熟能详的集合实现，例如 `Queue` 、`LinkedLIst`、`LinkedHashMap`、`SplayTreeMap ` 等等，这里就不一一介绍了。\n\n\n\n## 属性和类\n\n#### 属性访问器（setter 和 getter）\n\nDart 与 kotlin 的属性一样，每个元素始终有与之对应的 `setter`、`getter` 属性访问器函数（若用`final` 修饰属性时，对象就只提供 getter 函数）。我们再对实例属性赋值和获取值时，实际上内部都是对 `stter`、`getter` 函数的调用\n\n``` dart\nclass Rectangle {\n  num left, top, width, height;\n\n  Rectangle(this.left, this.top, this.width, this.height);\n  set right(num value) => left = value - width;\n  set bottom(num value) => top = value - height;\n}\n\nmain() {\n  var rect = Rectangle(3, 4, 20, 15);\n  rect.right = 15;\n  rect.bottom = 12;\n}\n```\n\n#### 私有变量\n\n在 Dart 中如果想将成员变量私有化禁止外部访问的话，就直接在属性名前面加下划线`_` 例如 `_amount`、`_age` 。这样名称对应的属性就会拒绝外部类通过访问器函数访问它的状态。\n\n#### top level \n\nDart 中也可以在类之外声明变量和函数，这种声明的变量和函数并不在某个具体的类中，而是处于整个代码文件中，我们一般叫它顶层变量和顶层函数。顶层变量相较类变量特殊的是，他们不依赖某个类，可以进行访问，且它们是延迟初始化的，在 `getter` 函数第一次被调用时类变量和顶层变量才执行初始化，也即是第一次应用类变量或顶层变量的时候。\n\n``` dart\nclass Animal {}\nclass Dog extends Animal {}\nclass Cat extends Animal {\n    Cat() {\n        print(\"I'm a Cat!\");\n    }\n}\n\n\nAnimal animal = Cat();\nmain() {\n    animal = Dog();\n}\n```\n\n按照上边所描述的顶层变量具有延迟触发的性质，所以 Cat 对象并没有被创建，因为整个代码并没有去访问 animal，所以无法触发 `getter` 函数，也就导致 Cat 并没有创建。\n\n#### 构造函数\n\nDart 中的函数不支持重载，构造函数也不例外，所以主构造函数有且只能有一个，如果没有指定主构造函数，那么会默认的自动分配一个无参的主构造函数。\n\n``` dart\nclass Point {\n  final double x, y;\n  Point(this.x, this.y);\n}\n```\n\n不过 Dart 中虽然抛弃了函数重载，但是在构造函数这里还引入了命名构造函数的概念。它可以指定任意参数来构建对象，但函数的命名需要符合特定的结构。而且命名构造函数还可以通过 `this` 重定向到主构造函数\n\n```dart\nclass Point {\n  final double x, y;\n   int color;\n  Point(this.x, this.y,this.color);\n  Point.size(this.x,this.y);\n  Point.defaultPoint():this(0,0,0xff333333);\n}\n```\n\n#### factory 工厂函数\n\n一般来说，构造函数每次总会创建一个新的实例对象。但是有时候并不需要每次都创建新的实例，我们可以通过自定义缓存来实现，但是实现较为复杂。 dart 内置了 `factory` 通过它来修饰构造函数，并且可以从缓存中返回已经创建实例或者返回一个新的实例。在 Dart 中任意构造函数都可以替换成工厂方法，修饰后的构造函数需要返回构造函数所对应的实例对象。\n\n```dart\nclass Logger {\n  \n  final String name;\n  bool mute = false;\n\n  \n  \n  static final Map<String, Logger> _cache =\n      <String, Logger>{};\n\n  factory Logger(String name) {\n    if (_cache.containsKey(name)) {\n      return _cache[name]\n    } else {\n      final logger = Logger._internal(name);\n      _cache[name] = logger;\n      return logger;\n    }\n  }\n\n  Logger._internal(this.name);\n\n  void log(String msg) {\n    if (!mute) print(msg);\n  }\n}\n```\n\n#### 抽象类与接口\n\n抽象方法就是“声明一个方法而不提供它的具体是显示”，通常我们通过抽象类与接口来定义这一行为，在 Dart 中抽象类与我们常接触 java、kotlin 一致，通过 `abstract` 修饰类来声明一个类单位抽象类。\n\n```dart\nabstract class Person {\n  String name();\n  get age;\n}\n\nclass Student extends Person {\n  @override\n  String name() {\n    \n    return null;\n  }\n\n  @override\n  \n  get age => null;\n}\n```\n\n接口则稍显不一样， Dart 中没有 `interface ` 之类的关键字来定义接口，因为 Dart 中的每个类都默认隐含的定义了一个接口。如果只想将类当作 `interface` 那么就在声明类的时候使用`implements ` 关键字\n\n```dart\nabstract class Person{\n    String speak();\n}\n\nclass XiaoMing implements Person{\n    String speak(){\n        print(\"hehe\");\n    }\n}\n```\n\n#### Mixins \n\nDart 的继承与现代语言类似——通过 `extends` 关键字来声明，子类构造函数会默认调用父类的无参构造函数，如果父类只有有参则需要显示的声明调用父类的构函数。但除此之外 Dart 还引入了 Mixins 的概念，它赋予了 Dart 额外的继承机制，让它能实现类似多继承的效果。要注意的是只是类似，他始终还是只能有一个超类。\n\n**Mixins 可以在不同的类层次结构中多个类之间共享相同的行为、或无法合适抽象出部分子类的共同行为到基类中。**\n\nMixin 的列子：\n\n```dart\nclass A {\n   void printMsg() => print('A'); \n}\nmixin B {\n    void printMsg() => print('B'); \n}\nmixin C {\n    void printMsg() => print('C'); \n}\n\nclass BC extends A with B, C {}\nclass CB extends A with C, B {}\n\nmain() {\n    var bc = BC();\n    bc.printMsg();\n\n    var cb = CB();\n    cb.printMsg();\n}\n```\n\n输出结果：\n\n```dart\nC\nB\n\nProcess finished with exit code 0\n```\n\n从上边的结果我们可以知道 Mixins 和我们第一意识到的多继承不一样，它实际上还是单继承；每次 mixin 都是会创建一个新的中间类。并且这个中间类总是在基类的上层。通过下边的结构图我们就可以清楚看到。\n\n![mixins](https://i.loli.net/2020/04/29/EYvUjXRHiNIrL7m.jpg)\n\n在上边的例子中,Mixins 生成了多个中间类，并且通过单继承(extends) 串联起来。所以我们在调用 `printMsg` 方法的时候是逐级调用了最上层的 `printMsg` 实现，所以每个类只有一个实现。\n\n这样我们就理解 Flutter 大量使用的 Mixins 是什么原理和性质。","source":"_posts/2020-04-30-dart_basic.md","raw":"---\nlayout: post\ntitle: \"Dart 实践（一）\"\nsubtitle: \"Dart 语法基础\"\ndate: 2020-04-30 11:13:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-dart.jpg\"\ncatalog: true\ntags:\n  - Flutter\n  - Dart\n  - 基础\n---\n\n##  数据类型\n\n**Dart 中一切都是对象，包含数字、布尔值、函数等，它们和 java 一样继承与 object，所以它们的默认值都是 Null**  这点尤为需要注意，在定义数据类型的时候如 布尔 、数字类型都需要我们手动去设定业务中所需要的默认值。\n\n### 常用数据类型\n\n#### **布尔类型（bool）**\n\n布尔类型与 C 语言一样，使用 `bool` 声明一个布尔类型的对象，拥有 `true` 和 `false` 两个值\n\n``` dart\nbool isOpened=true;\n```\n\n\n\n#### 数字类型（int、double）\n\n在 Dart 中的数字只有类型 `int`、`double` ，它们都继承于 `num` 类，`num` 类是一个抽象类，声明了整数和浮点数的抽象实现，而 `int`、`double` 就是它的具体实现类。\n\n```dart\ndouble size=2.3333;\nint width=10;\nvar height=23.3;\n```\n\n\n\n#### **字符串类型（string）**\n\nDart 中的字符串功能与 kotlin 类似，都是十分强大。支持单引号、双引号、三引号保留格式、以及字符串模板。\n\n```dart\nString title=\"App\"\nString desc=\"\"\"\nFlutter\n\t\tApplication;\n\"\"\";\nString value=\"application title = $title\";\n\n```\n\n\n\n\n#### **Runes 和 Symbols 类型**\n\nRunes 类型是 UTF-32 字节单元定义的 Unicode 字符串，Unicode 可以使用数字表示字母、数字和符号，然而在 Dart 中，String 是一系列的 UTF-16 的字节单元，所以想要表示 32 位的 Unicode 的值，就需要用到 Runes 类型。我们一般使用 `\\uxxxx` 这种形式来表示一个 Unicode 码，`xxxx` 表示 4 个十六进制值。当十六进制数据多余或者少于 4 位时，将十六进制数放入到花括号中，例如，微笑表情（😆）是 `\\u{1f600}`。而 Symbols 类型则用得很少，一般用于 Dart 中的反射，但是注意在 Flutter 中禁止使用反射。\n\n``` dart\n Runes input = new Runes(\n      '\\u2665  \\u{1f605}  \\u{1f60e}  \\u{1f47b}  \\u{1f596}  \\u{1f44d}');\n```\n\n\n\n#### **dynamic 类型**\n\n我们知道 Dart 的顶级对象是 Object ，但是像我们在使用 `var` 表示一个对象的时候，它的类型并不像 `kotlin` 那样直接类型推导出来，而是在编译才会进行检查，变量未赋值的时候是无法确定类型的，可能连 Object 也不是，这时候就用另一种类型来定义这个对象，这种类型就叫做 `dynamic` 类型，它也可以像 Object 一样改变类型。但是区别在于 Object 会在编译期间就进行类型检查，而 `dynamic`则不会。\n\n ``` dart\nMap<String,dynamic> config={\"a\":1,b:\"2\"};\n\n ```\n\n\n\n## 常用集合\n\n dart 的集合声明和使用的方式与 javaScript 更类似。对集合的使用和限制都十分的宽松。此外还提供了很多操作符使得处理结构化的数据更加简单明了。\n\n#### List\n\n```dart\nvar list = new list();\nlist.add(1);\nvar list2=[];\nlist2.addall(list);\n// 常用函数以及操作符\nlist.clear();\nlist.insert(0,2);\nlist.forEach((index)=>print(index));\n\nList<int> numbers = [0, 3, 1, 2, 7, 12, 2, 4];\nnumbers.sort((num1, num2) => num1 - num2); //升序排序\n//where、firstWhere、signleWhere\nnumbers.firstWhere((num) => num == 5, orElse: () => -1)); \n// take 设定区间，skip 跳过前 n 个元素\nnumbers.take(5).skip(2);\n```\n\n#### Map\n\nMap 与现代语言的 map 类型，key-value 形式存储数据。\n\n``` dart\nvar defaultMap={};\nMap<String,int> levelMap=  new Map();\n// 如果你使用 Map 构造函数创建一个 map ,默认情况下会创建一个 LinkedHashMap 实例\nlevelMap[\"a\"]=0;\nlevelMap[\"b\"]=2;\n\nlevelMap.forEach((key,value)=>{\n    print(\"key:$key value:$value\");\n})\n```\n\n除此之外，Dart 的 `collection` 包中还有很多我们耳熟能详的集合实现，例如 `Queue` 、`LinkedLIst`、`LinkedHashMap`、`SplayTreeMap ` 等等，这里就不一一介绍了。\n\n\n\n## 属性和类\n\n#### 属性访问器（setter 和 getter）\n\nDart 与 kotlin 的属性一样，每个元素始终有与之对应的 `setter`、`getter` 属性访问器函数（若用`final` 修饰属性时，对象就只提供 getter 函数）。我们再对实例属性赋值和获取值时，实际上内部都是对 `stter`、`getter` 函数的调用\n\n``` dart\nclass Rectangle {\n  num left, top, width, height;\n\n  Rectangle(this.left, this.top, this.width, this.height);\n  set right(num value) => left = value - width;\n  set bottom(num value) => top = value - height;\n}\n\nmain() {\n  var rect = Rectangle(3, 4, 20, 15);\n  rect.right = 15;\n  rect.bottom = 12;\n}\n```\n\n#### 私有变量\n\n在 Dart 中如果想将成员变量私有化禁止外部访问的话，就直接在属性名前面加下划线`_` 例如 `_amount`、`_age` 。这样名称对应的属性就会拒绝外部类通过访问器函数访问它的状态。\n\n#### top level \n\nDart 中也可以在类之外声明变量和函数，这种声明的变量和函数并不在某个具体的类中，而是处于整个代码文件中，我们一般叫它顶层变量和顶层函数。顶层变量相较类变量特殊的是，他们不依赖某个类，可以进行访问，且它们是延迟初始化的，在 `getter` 函数第一次被调用时类变量和顶层变量才执行初始化，也即是第一次应用类变量或顶层变量的时候。\n\n``` dart\nclass Animal {}\nclass Dog extends Animal {}\nclass Cat extends Animal {\n    Cat() {\n        print(\"I'm a Cat!\");\n    }\n}\n\n\nAnimal animal = Cat();\nmain() {\n    animal = Dog();\n}\n```\n\n按照上边所描述的顶层变量具有延迟触发的性质，所以 Cat 对象并没有被创建，因为整个代码并没有去访问 animal，所以无法触发 `getter` 函数，也就导致 Cat 并没有创建。\n\n#### 构造函数\n\nDart 中的函数不支持重载，构造函数也不例外，所以主构造函数有且只能有一个，如果没有指定主构造函数，那么会默认的自动分配一个无参的主构造函数。\n\n``` dart\nclass Point {\n  final double x, y;\n  Point(this.x, this.y);\n}\n```\n\n不过 Dart 中虽然抛弃了函数重载，但是在构造函数这里还引入了命名构造函数的概念。它可以指定任意参数来构建对象，但函数的命名需要符合特定的结构。而且命名构造函数还可以通过 `this` 重定向到主构造函数\n\n```dart\nclass Point {\n  final double x, y;\n   int color;\n  Point(this.x, this.y,this.color);\n  Point.size(this.x,this.y);\n  Point.defaultPoint():this(0,0,0xff333333);\n}\n```\n\n#### factory 工厂函数\n\n一般来说，构造函数每次总会创建一个新的实例对象。但是有时候并不需要每次都创建新的实例，我们可以通过自定义缓存来实现，但是实现较为复杂。 dart 内置了 `factory` 通过它来修饰构造函数，并且可以从缓存中返回已经创建实例或者返回一个新的实例。在 Dart 中任意构造函数都可以替换成工厂方法，修饰后的构造函数需要返回构造函数所对应的实例对象。\n\n```dart\nclass Logger {\n  \n  final String name;\n  bool mute = false;\n\n  \n  \n  static final Map<String, Logger> _cache =\n      <String, Logger>{};\n\n  factory Logger(String name) {\n    if (_cache.containsKey(name)) {\n      return _cache[name]\n    } else {\n      final logger = Logger._internal(name);\n      _cache[name] = logger;\n      return logger;\n    }\n  }\n\n  Logger._internal(this.name);\n\n  void log(String msg) {\n    if (!mute) print(msg);\n  }\n}\n```\n\n#### 抽象类与接口\n\n抽象方法就是“声明一个方法而不提供它的具体是显示”，通常我们通过抽象类与接口来定义这一行为，在 Dart 中抽象类与我们常接触 java、kotlin 一致，通过 `abstract` 修饰类来声明一个类单位抽象类。\n\n```dart\nabstract class Person {\n  String name();\n  get age;\n}\n\nclass Student extends Person {\n  @override\n  String name() {\n    \n    return null;\n  }\n\n  @override\n  \n  get age => null;\n}\n```\n\n接口则稍显不一样， Dart 中没有 `interface ` 之类的关键字来定义接口，因为 Dart 中的每个类都默认隐含的定义了一个接口。如果只想将类当作 `interface` 那么就在声明类的时候使用`implements ` 关键字\n\n```dart\nabstract class Person{\n    String speak();\n}\n\nclass XiaoMing implements Person{\n    String speak(){\n        print(\"hehe\");\n    }\n}\n```\n\n#### Mixins \n\nDart 的继承与现代语言类似——通过 `extends` 关键字来声明，子类构造函数会默认调用父类的无参构造函数，如果父类只有有参则需要显示的声明调用父类的构函数。但除此之外 Dart 还引入了 Mixins 的概念，它赋予了 Dart 额外的继承机制，让它能实现类似多继承的效果。要注意的是只是类似，他始终还是只能有一个超类。\n\n**Mixins 可以在不同的类层次结构中多个类之间共享相同的行为、或无法合适抽象出部分子类的共同行为到基类中。**\n\nMixin 的列子：\n\n```dart\nclass A {\n   void printMsg() => print('A'); \n}\nmixin B {\n    void printMsg() => print('B'); \n}\nmixin C {\n    void printMsg() => print('C'); \n}\n\nclass BC extends A with B, C {}\nclass CB extends A with C, B {}\n\nmain() {\n    var bc = BC();\n    bc.printMsg();\n\n    var cb = CB();\n    cb.printMsg();\n}\n```\n\n输出结果：\n\n```dart\nC\nB\n\nProcess finished with exit code 0\n```\n\n从上边的结果我们可以知道 Mixins 和我们第一意识到的多继承不一样，它实际上还是单继承；每次 mixin 都是会创建一个新的中间类。并且这个中间类总是在基类的上层。通过下边的结构图我们就可以清楚看到。\n\n![mixins](https://i.loli.net/2020/04/29/EYvUjXRHiNIrL7m.jpg)\n\n在上边的例子中,Mixins 生成了多个中间类，并且通过单继承(extends) 串联起来。所以我们在调用 `printMsg` 方法的时候是逐级调用了最上层的 `printMsg` 实现，所以每个类只有一个实现。\n\n这样我们就理解 Flutter 大量使用的 Mixins 是什么原理和性质。","slug":"2020-04-30-dart_basic","published":1,"updated":"2024-09-13T03:38:13.729Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pb000xs2y410qd9dkf","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>Dart 中一切都是对象，包含数字、布尔值、函数等，它们和 java 一样继承与 object，所以它们的默认值都是 Null</strong>  这点尤为需要注意，在定义数据类型的时候如 布尔 、数字类型都需要我们手动去设定业务中所需要的默认值。</p>\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><h4 id=\"布尔类型（bool）\"><a href=\"#布尔类型（bool）\" class=\"headerlink\" title=\"布尔类型（bool）\"></a><strong>布尔类型（bool）</strong></h4><p>布尔类型与 C 语言一样，使用 <code>bool</code> 声明一个布尔类型的对象，拥有 <code>true</code> 和 <code>false</code> 两个值</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isOpened=<span class=\"keyword\">true</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数字类型（int、double）\"><a href=\"#数字类型（int、double）\" class=\"headerlink\" title=\"数字类型（int、double）\"></a>数字类型（int、double）</h4><p>在 Dart 中的数字只有类型 <code>int</code>、<code>double</code> ，它们都继承于 <code>num</code> 类，<code>num</code> 类是一个抽象类，声明了整数和浮点数的抽象实现，而 <code>int</code>、<code>double</code> 就是它的具体实现类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> size=<span class=\"number\">2.3333</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> width=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height=<span class=\"number\">23.3</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"字符串类型（string）\"><a href=\"#字符串类型（string）\" class=\"headerlink\" title=\"字符串类型（string）\"></a><strong>字符串类型（string）</strong></h4><p>Dart 中的字符串功能与 kotlin 类似，都是十分强大。支持单引号、双引号、三引号保留格式、以及字符串模板。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> title=<span class=\"string\">&quot;App&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> desc=<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Flutter</span></span><br><span class=\"line\"><span class=\"string\">\t\tApplication;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> value=<span class=\"string\">&quot;application title = <span class=\"subst\">$title</span>&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"Runes-和-Symbols-类型\"><a href=\"#Runes-和-Symbols-类型\" class=\"headerlink\" title=\"Runes 和 Symbols 类型\"></a><strong>Runes 和 Symbols 类型</strong></h4><p>Runes 类型是 UTF-32 字节单元定义的 Unicode 字符串，Unicode 可以使用数字表示字母、数字和符号，然而在 Dart 中，String 是一系列的 UTF-16 的字节单元，所以想要表示 32 位的 Unicode 的值，就需要用到 Runes 类型。我们一般使用 <code>\\uxxxx</code> 这种形式来表示一个 Unicode 码，<code>xxxx</code> 表示 4 个十六进制值。当十六进制数据多余或者少于 4 位时，将十六进制数放入到花括号中，例如，微笑表情（😆）是 <code>\\u&#123;1f600&#125;</code>。而 Symbols 类型则用得很少，一般用于 Dart 中的反射，但是注意在 Flutter 中禁止使用反射。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runes input = <span class=\"keyword\">new</span> Runes(</span><br><span class=\"line\">     <span class=\"string\">&#x27;\\u2665  \\u&#123;1f605&#125;  \\u&#123;1f60e&#125;  \\u&#123;1f47b&#125;  \\u&#123;1f596&#125;  \\u&#123;1f44d&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"dynamic-类型\"><a href=\"#dynamic-类型\" class=\"headerlink\" title=\"dynamic 类型\"></a><strong>dynamic 类型</strong></h4><p>我们知道 Dart 的顶级对象是 Object ，但是像我们在使用 <code>var</code> 表示一个对象的时候，它的类型并不像 <code>kotlin</code> 那样直接类型推导出来，而是在编译才会进行检查，变量未赋值的时候是无法确定类型的，可能连 Object 也不是，这时候就用另一种类型来定义这个对象，这种类型就叫做 <code>dynamic</code> 类型，它也可以像 Object 一样改变类型。但是区别在于 Object 会在编译期间就进行类型检查，而 <code>dynamic</code>则不会。</p>\n <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; config=&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>,b:<span class=\"string\">&quot;2&quot;</span>&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h2><p> dart 的集合声明和使用的方式与 javaScript 更类似。对集合的使用和限制都十分的宽松。此外还提供了很多操作符使得处理结构化的数据更加简单明了。</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> list();</span><br><span class=\"line\">list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2=[];</span><br><span class=\"line\">list2.addall(list);</span><br><span class=\"line\"><span class=\"comment\">// 常用函数以及操作符</span></span><br><span class=\"line\">list.clear();</span><br><span class=\"line\">list.insert(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">list.forEach((index)=&gt;<span class=\"built_in\">print</span>(index));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; numbers = [<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">numbers.sort((num1, num2) =&gt; num1 - num2); <span class=\"comment\">//升序排序</span></span><br><span class=\"line\"><span class=\"comment\">//where、firstWhere、signleWhere</span></span><br><span class=\"line\">numbers.firstWhere((<span class=\"built_in\">num</span>) =&gt; <span class=\"built_in\">num</span> == <span class=\"number\">5</span>, orElse: () =&gt; <span class=\"number\">-1</span>)); </span><br><span class=\"line\"><span class=\"comment\">// take 设定区间，skip 跳过前 n 个元素</span></span><br><span class=\"line\">numbers.take(<span class=\"number\">5</span>).skip(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Map 与现代语言的 map 类型，key-value 形式存储数据。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> defaultMap=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">int</span>&gt; levelMap=  <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 如果你使用 Map 构造函数创建一个 map ,默认情况下会创建一个 LinkedHashMap 实例</span></span><br><span class=\"line\">levelMap[<span class=\"string\">&quot;a&quot;</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">levelMap[<span class=\"string\">&quot;b&quot;</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">levelMap.forEach((key,value)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;key:<span class=\"subst\">$key</span> value:<span class=\"subst\">$value</span>&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，Dart 的 <code>collection</code> 包中还有很多我们耳熟能详的集合实现，例如 <code>Queue</code> 、<code>LinkedLIst</code>、<code>LinkedHashMap</code>、<code>SplayTreeMap </code> 等等，这里就不一一介绍了。</p>\n<h2 id=\"属性和类\"><a href=\"#属性和类\" class=\"headerlink\" title=\"属性和类\"></a>属性和类</h2><h4 id=\"属性访问器（setter-和-getter）\"><a href=\"#属性访问器（setter-和-getter）\" class=\"headerlink\" title=\"属性访问器（setter 和 getter）\"></a>属性访问器（setter 和 getter）</h4><p>Dart 与 kotlin 的属性一样，每个元素始终有与之对应的 <code>setter</code>、<code>getter</code> 属性访问器函数（若用<code>final</code> 修饰属性时，对象就只提供 getter 函数）。我们再对实例属性赋值和获取值时，实际上内部都是对 <code>stter</code>、<code>getter</code> 函数的调用</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> left, top, width, height;</span><br><span class=\"line\"></span><br><span class=\"line\">  Rectangle(<span class=\"keyword\">this</span>.left, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">  <span class=\"keyword\">set</span> right(<span class=\"built_in\">num</span> value) =&gt; left = value - width;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> bottom(<span class=\"built_in\">num</span> value) =&gt; top = value - height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rect = Rectangle(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">  rect.right = <span class=\"number\">15</span>;</span><br><span class=\"line\">  rect.bottom = <span class=\"number\">12</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h4><p>在 Dart 中如果想将成员变量私有化禁止外部访问的话，就直接在属性名前面加下划线<code>_</code> 例如 <code>_amount</code>、<code>_age</code> 。这样名称对应的属性就会拒绝外部类通过访问器函数访问它的状态。</p>\n<h4 id=\"top-level\"><a href=\"#top-level\" class=\"headerlink\" title=\"top level\"></a>top level</h4><p>Dart 中也可以在类之外声明变量和函数，这种声明的变量和函数并不在某个具体的类中，而是处于整个代码文件中，我们一般叫它顶层变量和顶层函数。顶层变量相较类变量特殊的是，他们不依赖某个类，可以进行访问，且它们是延迟初始化的，在 <code>getter</code> 函数第一次被调用时类变量和顶层变量才执行初始化，也即是第一次应用类变量或顶层变量的时候。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    Cat() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I&#x27;m a Cat!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Animal animal = Cat();</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    animal = Dog();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照上边所描述的顶层变量具有延迟触发的性质，所以 Cat 对象并没有被创建，因为整个代码并没有去访问 animal，所以无法触发 <code>getter</code> 函数，也就导致 Cat 并没有创建。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>Dart 中的函数不支持重载，构造函数也不例外，所以主构造函数有且只能有一个，如果没有指定主构造函数，那么会默认的自动分配一个无参的主构造函数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过 Dart 中虽然抛弃了函数重载，但是在构造函数这里还引入了命名构造函数的概念。它可以指定任意参数来构建对象，但函数的命名需要符合特定的结构。而且命名构造函数还可以通过 <code>this</code> 重定向到主构造函数</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\">   <span class=\"built_in\">int</span> color;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y,<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">  Point.size(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">  Point.defaultPoint():<span class=\"keyword\">this</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0xff333333</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"factory-工厂函数\"><a href=\"#factory-工厂函数\" class=\"headerlink\" title=\"factory 工厂函数\"></a>factory 工厂函数</h4><p>一般来说，构造函数每次总会创建一个新的实例对象。但是有时候并不需要每次都创建新的实例，我们可以通过自定义缓存来实现，但是实现较为复杂。 dart 内置了 <code>factory</code> 通过它来修饰构造函数，并且可以从缓存中返回已经创建实例或者返回一个新的实例。在 Dart 中任意构造函数都可以替换成工厂方法，修饰后的构造函数需要返回构造函数所对应的实例对象。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> mute = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, Logger&gt; _cache =</span><br><span class=\"line\">      &lt;<span class=\"built_in\">String</span>, Logger&gt;&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Logger(<span class=\"built_in\">String</span> name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_cache.containsKey(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _cache[name]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> logger = Logger._internal(name);</span><br><span class=\"line\">      _cache[name] = logger;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Logger._internal(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> log(<span class=\"built_in\">String</span> msg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mute) <span class=\"built_in\">print</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象类与接口\"><a href=\"#抽象类与接口\" class=\"headerlink\" title=\"抽象类与接口\"></a>抽象类与接口</h4><p>抽象方法就是“声明一个方法而不提供它的具体是显示”，通常我们通过抽象类与接口来定义这一行为，在 Dart 中抽象类与我们常接触 java、kotlin 一致，通过 <code>abstract</code> 修饰类来声明一个类单位抽象类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name();</span><br><span class=\"line\">  <span class=\"keyword\">get</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> name() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">get</span> age =&gt; <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口则稍显不一样， Dart 中没有 <code>interface </code> 之类的关键字来定义接口，因为 Dart 中的每个类都默认隐含的定义了一个接口。如果只想将类当作 <code>interface</code> 那么就在声明类的时候使用<code>implements </code> 关键字</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> speak();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> speak()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hehe&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mixins\"><a href=\"#Mixins\" class=\"headerlink\" title=\"Mixins\"></a>Mixins</h4><p>Dart 的继承与现代语言类似——通过 <code>extends</code> 关键字来声明，子类构造函数会默认调用父类的无参构造函数，如果父类只有有参则需要显示的声明调用父类的构函数。但除此之外 Dart 还引入了 Mixins 的概念，它赋予了 Dart 额外的继承机制，让它能实现类似多继承的效果。要注意的是只是类似，他始终还是只能有一个超类。</p>\n<p><strong>Mixins 可以在不同的类层次结构中多个类之间共享相同的行为、或无法合适抽象出部分子类的共同行为到基类中。</strong></p>\n<p>Mixin 的列子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;A&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;B&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> C &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;C&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BC</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> <span class=\"title\">with</span> <span class=\"title\">B</span>, <span class=\"title\">C</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CB</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> <span class=\"title\">with</span> <span class=\"title\">C</span>, <span class=\"title\">B</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bc = BC();</span><br><span class=\"line\">    bc.printMsg();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = CB();</span><br><span class=\"line\">    cb.printMsg();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br><span class=\"line\">B</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished <span class=\"keyword\">with</span> exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>从上边的结果我们可以知道 Mixins 和我们第一意识到的多继承不一样，它实际上还是单继承；每次 mixin 都是会创建一个新的中间类。并且这个中间类总是在基类的上层。通过下边的结构图我们就可以清楚看到。</p>\n<p><img src=\"https://i.loli.net/2020/04/29/EYvUjXRHiNIrL7m.jpg\" alt=\"mixins\"></p>\n<p>在上边的例子中,Mixins 生成了多个中间类，并且通过单继承(extends) 串联起来。所以我们在调用 <code>printMsg</code> 方法的时候是逐级调用了最上层的 <code>printMsg</code> 实现，所以每个类只有一个实现。</p>\n<p>这样我们就理解 Flutter 大量使用的 Mixins 是什么原理和性质。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>Dart 中一切都是对象，包含数字、布尔值、函数等，它们和 java 一样继承与 object，所以它们的默认值都是 Null</strong>  这点尤为需要注意，在定义数据类型的时候如 布尔 、数字类型都需要我们手动去设定业务中所需要的默认值。</p>\n<h3 id=\"常用数据类型\"><a href=\"#常用数据类型\" class=\"headerlink\" title=\"常用数据类型\"></a>常用数据类型</h3><h4 id=\"布尔类型（bool）\"><a href=\"#布尔类型（bool）\" class=\"headerlink\" title=\"布尔类型（bool）\"></a><strong>布尔类型（bool）</strong></h4><p>布尔类型与 C 语言一样，使用 <code>bool</code> 声明一个布尔类型的对象，拥有 <code>true</code> 和 <code>false</code> 两个值</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isOpened=<span class=\"keyword\">true</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数字类型（int、double）\"><a href=\"#数字类型（int、double）\" class=\"headerlink\" title=\"数字类型（int、double）\"></a>数字类型（int、double）</h4><p>在 Dart 中的数字只有类型 <code>int</code>、<code>double</code> ，它们都继承于 <code>num</code> 类，<code>num</code> 类是一个抽象类，声明了整数和浮点数的抽象实现，而 <code>int</code>、<code>double</code> 就是它的具体实现类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> size=<span class=\"number\">2.3333</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> width=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height=<span class=\"number\">23.3</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"字符串类型（string）\"><a href=\"#字符串类型（string）\" class=\"headerlink\" title=\"字符串类型（string）\"></a><strong>字符串类型（string）</strong></h4><p>Dart 中的字符串功能与 kotlin 类似，都是十分强大。支持单引号、双引号、三引号保留格式、以及字符串模板。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> title=<span class=\"string\">&quot;App&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> desc=<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Flutter</span></span><br><span class=\"line\"><span class=\"string\">\t\tApplication;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> value=<span class=\"string\">&quot;application title = <span class=\"subst\">$title</span>&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"Runes-和-Symbols-类型\"><a href=\"#Runes-和-Symbols-类型\" class=\"headerlink\" title=\"Runes 和 Symbols 类型\"></a><strong>Runes 和 Symbols 类型</strong></h4><p>Runes 类型是 UTF-32 字节单元定义的 Unicode 字符串，Unicode 可以使用数字表示字母、数字和符号，然而在 Dart 中，String 是一系列的 UTF-16 的字节单元，所以想要表示 32 位的 Unicode 的值，就需要用到 Runes 类型。我们一般使用 <code>\\uxxxx</code> 这种形式来表示一个 Unicode 码，<code>xxxx</code> 表示 4 个十六进制值。当十六进制数据多余或者少于 4 位时，将十六进制数放入到花括号中，例如，微笑表情（😆）是 <code>\\u&#123;1f600&#125;</code>。而 Symbols 类型则用得很少，一般用于 Dart 中的反射，但是注意在 Flutter 中禁止使用反射。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runes input = <span class=\"keyword\">new</span> Runes(</span><br><span class=\"line\">     <span class=\"string\">&#x27;\\u2665  \\u&#123;1f605&#125;  \\u&#123;1f60e&#125;  \\u&#123;1f47b&#125;  \\u&#123;1f596&#125;  \\u&#123;1f44d&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"dynamic-类型\"><a href=\"#dynamic-类型\" class=\"headerlink\" title=\"dynamic 类型\"></a><strong>dynamic 类型</strong></h4><p>我们知道 Dart 的顶级对象是 Object ，但是像我们在使用 <code>var</code> 表示一个对象的时候，它的类型并不像 <code>kotlin</code> 那样直接类型推导出来，而是在编译才会进行检查，变量未赋值的时候是无法确定类型的，可能连 Object 也不是，这时候就用另一种类型来定义这个对象，这种类型就叫做 <code>dynamic</code> 类型，它也可以像 Object 一样改变类型。但是区别在于 Object 会在编译期间就进行类型检查，而 <code>dynamic</code>则不会。</p>\n <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; config=&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"number\">1</span>,b:<span class=\"string\">&quot;2&quot;</span>&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合\"></a>常用集合</h2><p> dart 的集合声明和使用的方式与 javaScript 更类似。对集合的使用和限制都十分的宽松。此外还提供了很多操作符使得处理结构化的数据更加简单明了。</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"keyword\">new</span> list();</span><br><span class=\"line\">list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2=[];</span><br><span class=\"line\">list2.addall(list);</span><br><span class=\"line\"><span class=\"comment\">// 常用函数以及操作符</span></span><br><span class=\"line\">list.clear();</span><br><span class=\"line\">list.insert(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">list.forEach((index)=&gt;<span class=\"built_in\">print</span>(index));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; numbers = [<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">numbers.sort((num1, num2) =&gt; num1 - num2); <span class=\"comment\">//升序排序</span></span><br><span class=\"line\"><span class=\"comment\">//where、firstWhere、signleWhere</span></span><br><span class=\"line\">numbers.firstWhere((<span class=\"built_in\">num</span>) =&gt; <span class=\"built_in\">num</span> == <span class=\"number\">5</span>, orElse: () =&gt; <span class=\"number\">-1</span>)); </span><br><span class=\"line\"><span class=\"comment\">// take 设定区间，skip 跳过前 n 个元素</span></span><br><span class=\"line\">numbers.take(<span class=\"number\">5</span>).skip(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Map 与现代语言的 map 类型，key-value 形式存储数据。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> defaultMap=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">int</span>&gt; levelMap=  <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 如果你使用 Map 构造函数创建一个 map ,默认情况下会创建一个 LinkedHashMap 实例</span></span><br><span class=\"line\">levelMap[<span class=\"string\">&quot;a&quot;</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">levelMap[<span class=\"string\">&quot;b&quot;</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">levelMap.forEach((key,value)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;key:<span class=\"subst\">$key</span> value:<span class=\"subst\">$value</span>&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，Dart 的 <code>collection</code> 包中还有很多我们耳熟能详的集合实现，例如 <code>Queue</code> 、<code>LinkedLIst</code>、<code>LinkedHashMap</code>、<code>SplayTreeMap </code> 等等，这里就不一一介绍了。</p>\n<h2 id=\"属性和类\"><a href=\"#属性和类\" class=\"headerlink\" title=\"属性和类\"></a>属性和类</h2><h4 id=\"属性访问器（setter-和-getter）\"><a href=\"#属性访问器（setter-和-getter）\" class=\"headerlink\" title=\"属性访问器（setter 和 getter）\"></a>属性访问器（setter 和 getter）</h4><p>Dart 与 kotlin 的属性一样，每个元素始终有与之对应的 <code>setter</code>、<code>getter</code> 属性访问器函数（若用<code>final</code> 修饰属性时，对象就只提供 getter 函数）。我们再对实例属性赋值和获取值时，实际上内部都是对 <code>stter</code>、<code>getter</code> 函数的调用</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> left, top, width, height;</span><br><span class=\"line\"></span><br><span class=\"line\">  Rectangle(<span class=\"keyword\">this</span>.left, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">  <span class=\"keyword\">set</span> right(<span class=\"built_in\">num</span> value) =&gt; left = value - width;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> bottom(<span class=\"built_in\">num</span> value) =&gt; top = value - height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rect = Rectangle(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">  rect.right = <span class=\"number\">15</span>;</span><br><span class=\"line\">  rect.bottom = <span class=\"number\">12</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h4><p>在 Dart 中如果想将成员变量私有化禁止外部访问的话，就直接在属性名前面加下划线<code>_</code> 例如 <code>_amount</code>、<code>_age</code> 。这样名称对应的属性就会拒绝外部类通过访问器函数访问它的状态。</p>\n<h4 id=\"top-level\"><a href=\"#top-level\" class=\"headerlink\" title=\"top level\"></a>top level</h4><p>Dart 中也可以在类之外声明变量和函数，这种声明的变量和函数并不在某个具体的类中，而是处于整个代码文件中，我们一般叫它顶层变量和顶层函数。顶层变量相较类变量特殊的是，他们不依赖某个类，可以进行访问，且它们是延迟初始化的，在 <code>getter</code> 函数第一次被调用时类变量和顶层变量才执行初始化，也即是第一次应用类变量或顶层变量的时候。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    Cat() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I&#x27;m a Cat!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Animal animal = Cat();</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    animal = Dog();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照上边所描述的顶层变量具有延迟触发的性质，所以 Cat 对象并没有被创建，因为整个代码并没有去访问 animal，所以无法触发 <code>getter</code> 函数，也就导致 Cat 并没有创建。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>Dart 中的函数不支持重载，构造函数也不例外，所以主构造函数有且只能有一个，如果没有指定主构造函数，那么会默认的自动分配一个无参的主构造函数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过 Dart 中虽然抛弃了函数重载，但是在构造函数这里还引入了命名构造函数的概念。它可以指定任意参数来构建对象，但函数的命名需要符合特定的结构。而且命名构造函数还可以通过 <code>this</code> 重定向到主构造函数</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\">   <span class=\"built_in\">int</span> color;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y,<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">  Point.size(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">  Point.defaultPoint():<span class=\"keyword\">this</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0xff333333</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"factory-工厂函数\"><a href=\"#factory-工厂函数\" class=\"headerlink\" title=\"factory 工厂函数\"></a>factory 工厂函数</h4><p>一般来说，构造函数每次总会创建一个新的实例对象。但是有时候并不需要每次都创建新的实例，我们可以通过自定义缓存来实现，但是实现较为复杂。 dart 内置了 <code>factory</code> 通过它来修饰构造函数，并且可以从缓存中返回已经创建实例或者返回一个新的实例。在 Dart 中任意构造函数都可以替换成工厂方法，修饰后的构造函数需要返回构造函数所对应的实例对象。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> mute = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, Logger&gt; _cache =</span><br><span class=\"line\">      &lt;<span class=\"built_in\">String</span>, Logger&gt;&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Logger(<span class=\"built_in\">String</span> name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_cache.containsKey(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _cache[name]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> logger = Logger._internal(name);</span><br><span class=\"line\">      _cache[name] = logger;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Logger._internal(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> log(<span class=\"built_in\">String</span> msg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mute) <span class=\"built_in\">print</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽象类与接口\"><a href=\"#抽象类与接口\" class=\"headerlink\" title=\"抽象类与接口\"></a>抽象类与接口</h4><p>抽象方法就是“声明一个方法而不提供它的具体是显示”，通常我们通过抽象类与接口来定义这一行为，在 Dart 中抽象类与我们常接触 java、kotlin 一致，通过 <code>abstract</code> 修饰类来声明一个类单位抽象类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name();</span><br><span class=\"line\">  <span class=\"keyword\">get</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> name() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">get</span> age =&gt; <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口则稍显不一样， Dart 中没有 <code>interface </code> 之类的关键字来定义接口，因为 Dart 中的每个类都默认隐含的定义了一个接口。如果只想将类当作 <code>interface</code> 那么就在声明类的时候使用<code>implements </code> 关键字</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> speak();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> speak()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hehe&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mixins\"><a href=\"#Mixins\" class=\"headerlink\" title=\"Mixins\"></a>Mixins</h4><p>Dart 的继承与现代语言类似——通过 <code>extends</code> 关键字来声明，子类构造函数会默认调用父类的无参构造函数，如果父类只有有参则需要显示的声明调用父类的构函数。但除此之外 Dart 还引入了 Mixins 的概念，它赋予了 Dart 额外的继承机制，让它能实现类似多继承的效果。要注意的是只是类似，他始终还是只能有一个超类。</p>\n<p><strong>Mixins 可以在不同的类层次结构中多个类之间共享相同的行为、或无法合适抽象出部分子类的共同行为到基类中。</strong></p>\n<p>Mixin 的列子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;A&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> B &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;B&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> C &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> printMsg() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;C&#x27;</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BC</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> <span class=\"title\">with</span> <span class=\"title\">B</span>, <span class=\"title\">C</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CB</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> <span class=\"title\">with</span> <span class=\"title\">C</span>, <span class=\"title\">B</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bc = BC();</span><br><span class=\"line\">    bc.printMsg();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = CB();</span><br><span class=\"line\">    cb.printMsg();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br><span class=\"line\">B</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished <span class=\"keyword\">with</span> exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>从上边的结果我们可以知道 Mixins 和我们第一意识到的多继承不一样，它实际上还是单继承；每次 mixin 都是会创建一个新的中间类。并且这个中间类总是在基类的上层。通过下边的结构图我们就可以清楚看到。</p>\n<p><img src=\"https://i.loli.net/2020/04/29/EYvUjXRHiNIrL7m.jpg\" alt=\"mixins\"></p>\n<p>在上边的例子中,Mixins 生成了多个中间类，并且通过单继承(extends) 串联起来。所以我们在调用 <code>printMsg</code> 方法的时候是逐级调用了最上层的 <code>printMsg</code> 实现，所以每个类只有一个实现。</p>\n<p>这样我们就理解 Flutter 大量使用的 Mixins 是什么原理和性质。</p>\n"},{"layout":"post","title":"《精进：如何成为一个很厉害的人》阅读笔记 01","subtitle":"第一章：时间","date":"2020-04-29T14:39:00.000Z","author":"rank","header_image":"img/home-bg-o.jpg","catalog":true,"_content":"\n\n\n## 如何对待时间\n\n\n\n> 瑞典心理学家林德沃(Lindvall)提出,具有平衡式时间视角的人，在内心具有一种“延伸的当下感（extended now ）,既可以“从当来审视过去”，也可以“视未来存于当下”，他应具有囊括“过去”和“未来的”包容性。\n>\n> 这种既不疏离也不漠视未来的当下感，显然与享乐主义视角差别明显，它显示了一个人对事件所应具有的责任感，既以更严肃（虽不一定是更迫切）的态度来对待时间。这与梁漱溟先生的“郑重”一说便不谋而合了。近百年前人文学者的自我审思与新近基于实证的科学观点实现了相会，这是件多么奇妙的事！\n\n林德沃提出的对待时间的十条建议：\n\n1. 生活在当下——不瞻前顾后，不左顾右盼，不患得患失；\n\n2. 严肃地对待时间——审慎、郑重地思考时间对我们的价值并用好它；\n\n3. 留意自己拥有的空间并享受它——找到自己的“独享时刻”，不要疲于奔命\n\n4. 反思自己与其他人的时间视角——认识到自己和他人时间视角的异同，换位思考；\n\n5. 从现在出发联结过去——过去并没有远去，它对今天仍具有意义；\n\n6. 并不完全沉浸于过去——比过去更重要的是现在\n\n7. 制定实现目标的计划——未来视角让我们行动更加有序\n\n8. 平衡计划和非计划时间——由于随机性和不可预见因素的影响，我们的生活不能完全被计划，平衡计划和非计划就是在未来视角和现在视角之间找到平衡点；\n\n9. 视未来于当下——未来并非遥不可及，它就出现在即将到来的每一分每一秒；\n\n10. 对未来保持积极的态度——既然未来难以预测，那么以积极的心态面对它们让我们在当下更有行动力。\n\n    \n\n## 制定合理的远期未来和近期未来\n\n> 远期未来的视角下，人们倾向用抽象、概括的方式去思考。这种思考视角常常缺乏细节，更多考虑的是这件事情对自己的价值和意义,从而导致缺乏可行性。\n>\n> 而在近期未来的视角下，人们更容易做到具体的情境中去考虑，想得到更多的不是“要不要做”而是“怎么去做”。这种思考视角虽然会考虑事情的可行性和实用性，但是它会让我们倾向于去做可行性更高、更容易实现的事情，而回避更有意义同时也更有挑战性的事。\n\n想要处理好 “远期未来”和“近期未来”，我们可以采用下面两个策略：\n\n1. 近期未来要为远期未来服务，使得远期未来的目标更加具体化、情景化和可实施。\n2. 降低近期未来中的 “非期望性行为” 的便利性，主动增加挑战的难度。例如人为的给自己的一些行为增设门槛，来达到增加获得目标成本。\n\n\n\n## 收益半衰期\n\n\n\n#### 什么是半衰期\n\n> 半衰期最早是物理学中的概念，指放射性元素中半数原子核发生衰变所需要的时间，半衰期越短，衰变越快；半衰期越长，衰变越慢。不同元素的半衰期差别非常大，短的不到0.01 秒，长的可达几亿年。后来，许多其他学科也沿用了半衰期的概念。医学中，药物的半衰期是指药物在生物体内浓度下降一半所需要的时间。元素的半衰期属于该元素的固有属性，不受个体影响，而药物的浓度半衰期则会因为个体体质不同而有所差异。\n>\n> 在生活中我们常常只关注到到一件事情在发生时带给我们的即刻的好处，而忽略了这一好处是否可以持续继续下去，产生长期的效果。\n\n#### 通过收益指和半衰期来指定计划\n\n通过引入收益值与半衰期相结合，我们可以将事情像四象限法则那样分为四个角度，分别是：\n\n- **高收益、长半衰期**\n- **高收益、短半衰期**\n- **低收益、长半衰期**\n- **低收益、短半衰期**\n\n相比四象限法则来说，通过收益和半衰期制定的计划矛盾更小，但是更为抽象。这就需要我们在具体实行的时候需要有行动规则：\n\n- 收益高地无关紧要，只要不是短半衰期的事情，只要这个收益可以被累加，就尽管去做\n- 不要只盯着那些“高大上”的事情。一些不重要、不紧急的事情，只要对你有长期的益处、仍旧可以用。\n\n  \n\n#### 通过收益指和半衰期来辨别事物\n\n**我们可以用半衰期看自己，也可以用来看他人、看历史。**\n\n> 时间自有偏爱。回首历史，一些杰出的人物在历史上留下了独特的印记。即便星移斗转，时移世易，他们以及他们各自的经典作品，仍被今天的人记起和谈论。\n\n所以那些经典的书籍读物,它们自己本身已经通过时间的发酵，散发出阵阵的书香，证明了自己具有超长半衰期且有较高的附加价值。\n\n而微博、朋友圈、碎片化阅读等等，很多明显无法通过时间值尺的筛选。通过半衰期的角度去筛选过滤信息，你就有更多富裕的时间、精力和头脑来主动寻找和吸收有价值的信息。\n\n\n\n> 如果我们多了解那些历史长河中的杰出人物，就会发现他们往往是不为潮流所动的人，升值常常带点偏执，而且他们都发下了自己独特的才能，并且努力地、义无反顾去把这个才能发挥至最大。“像那些伟大的先贤看齐”，并非是要亦步亦趋地重走那些先贤的道路，毕竟时代已全然不同，而是选择像他们一样，走一条自主选择并且可以一往无前的路。\n>\n> 当我们用“时间之尺”丈量历史中的自己，与那些杰出人士相遇、交谈，你就会发现，与同时代人做比较相比没那么重要，更没有必要在这种比较重自我怀疑、自怨自艾。人生那么短，路有那么长，你好好好走就是了。\n\n\n\n## 时间管理\n\n\n\n#### 起源\n\n> 时间如一套严苛的规则，规范着我们的生活：什么时候睡觉不仅取决于有没有睡意，也取决于时钟所标识的时间；什么时候吃饭不仅取决于有没有饿，也取决于有没有到 “饭点” 。这种情况可不是在人类早期文明便有的，据美国社会哲学家刘易斯 芒福德在《技术与文明》中所述，机械时钟的最早使用始于 13 世纪欧洲的寺院，用于帮助人们准时参加宗教活动。而直到公元 1345 年左右，欧洲人才开始普遍接受一小时分为 60 分钟，把一分钟分成 60 秒。也是从那时起，时间作为一种社会活动的参照框架，把人的生活从大自然的背景中分离出来。之后的几个世纪，时钟走出宗教领域，在人类的经济活动中扮演了关键角色。芒福德甚至认为，工业革命中最关键的机器不是蒸汽机，而是时钟。而到了现代社会，时间更是被推上了神坛。\n>\n> 在这种背景下，“时间管理”应运而生，还成了今天的一门显学。它教我们如何设定任务目标，如何将任务分解，如何区分重要和紧急，如何把事情列成清单并设定好时间，如何把控好自己的工作效率....这些方法无疑都有一定的作用，但不过都是\"技术层面的解决\"。\n>\n> 所谓 “技术层面的解决” ，是指对问题的表面部分实施干预，而忽视了问题深处的根源。其后果是，问题的表面部分在短暂消失后又再次出现，甚至愈演愈烈。时间管理中提倡的很多办法，并不是要让人们逃离现代境遇所构造的牢笼，反而是要对其进行技术性强化，教会我们更加精细更加严苛的分隔生命时间。\n>\n> 我们原本就是因为快而痛苦，可时间管理却教我们更快。\n\n#### 利弊\n\n时间管理并不是完全负面的，在一些情况下对于提升人们的效率和工作业绩有一定的帮助，但是人们的主观感受却常常于此并不一致，会依然觉得时间不够用，事情永远都做不完，甚至为为此心力交瘁。因为人们无法完全预估到未来会发生的事情，从而导致计划外的事情发生迫使原本的计划在既定期限难以完成或是勉强完成。这种计划即使能运行下去，心理负荷也会越来越大，到最后齿轮崩坏。 \n\n#### 平衡\n\n- **区分快慢** 做事情想清楚什么应该求 “快”，什么事情应该求 “慢”。\n- **分配深浅（时间块）** 如番茄时钟一样（类比不大准确，番茄时钟必须以 25 分钟为一个时间块显示在这套体系中是不大合理的），我们需要给求快的事件一个完整时间块，在沉浸式的模式中，我们的效率无疑是非常高的，而慢的事件我们也不应该过于苛责，从而获得高质量的休闲满足\n\n\n\n## Tips:\n\n- **用平衡的观点看待过去、现在和未来，用郑重的态度过好当下的生活，并联结起过去和未来。**\n- **明确工作和生活的界限，用未来视角工作，用享乐主义生活**\n- **使用 “时间之尺” ，审视时间的长期价值，尽可能的删减非必要事件**\n- **让“远期未来” 更加具体，为 “近期未来”挑战** \n- **把握好做事的节奏，区分“求快”的事件和“求慢”的事件。**\n- **提升时间使用的 “深度” ，减少被动式休闲的比例，保持至少一项长期的业余爱好**\n\n  \n","source":"_posts/2020-04-29-book_read_01.markdown","raw":"---\nlayout: post\ntitle: \"《精进：如何成为一个很厉害的人》阅读笔记 01\"\nsubtitle: \"第一章：时间\"\ndate: 2020-04-29 22:39:00\nauthor: \"rank\"\nheader_image: \"img/home-bg-o.jpg\"\ncatalog: true\ntags:\n  - Book\n---\n\n\n\n## 如何对待时间\n\n\n\n> 瑞典心理学家林德沃(Lindvall)提出,具有平衡式时间视角的人，在内心具有一种“延伸的当下感（extended now ）,既可以“从当来审视过去”，也可以“视未来存于当下”，他应具有囊括“过去”和“未来的”包容性。\n>\n> 这种既不疏离也不漠视未来的当下感，显然与享乐主义视角差别明显，它显示了一个人对事件所应具有的责任感，既以更严肃（虽不一定是更迫切）的态度来对待时间。这与梁漱溟先生的“郑重”一说便不谋而合了。近百年前人文学者的自我审思与新近基于实证的科学观点实现了相会，这是件多么奇妙的事！\n\n林德沃提出的对待时间的十条建议：\n\n1. 生活在当下——不瞻前顾后，不左顾右盼，不患得患失；\n\n2. 严肃地对待时间——审慎、郑重地思考时间对我们的价值并用好它；\n\n3. 留意自己拥有的空间并享受它——找到自己的“独享时刻”，不要疲于奔命\n\n4. 反思自己与其他人的时间视角——认识到自己和他人时间视角的异同，换位思考；\n\n5. 从现在出发联结过去——过去并没有远去，它对今天仍具有意义；\n\n6. 并不完全沉浸于过去——比过去更重要的是现在\n\n7. 制定实现目标的计划——未来视角让我们行动更加有序\n\n8. 平衡计划和非计划时间——由于随机性和不可预见因素的影响，我们的生活不能完全被计划，平衡计划和非计划就是在未来视角和现在视角之间找到平衡点；\n\n9. 视未来于当下——未来并非遥不可及，它就出现在即将到来的每一分每一秒；\n\n10. 对未来保持积极的态度——既然未来难以预测，那么以积极的心态面对它们让我们在当下更有行动力。\n\n    \n\n## 制定合理的远期未来和近期未来\n\n> 远期未来的视角下，人们倾向用抽象、概括的方式去思考。这种思考视角常常缺乏细节，更多考虑的是这件事情对自己的价值和意义,从而导致缺乏可行性。\n>\n> 而在近期未来的视角下，人们更容易做到具体的情境中去考虑，想得到更多的不是“要不要做”而是“怎么去做”。这种思考视角虽然会考虑事情的可行性和实用性，但是它会让我们倾向于去做可行性更高、更容易实现的事情，而回避更有意义同时也更有挑战性的事。\n\n想要处理好 “远期未来”和“近期未来”，我们可以采用下面两个策略：\n\n1. 近期未来要为远期未来服务，使得远期未来的目标更加具体化、情景化和可实施。\n2. 降低近期未来中的 “非期望性行为” 的便利性，主动增加挑战的难度。例如人为的给自己的一些行为增设门槛，来达到增加获得目标成本。\n\n\n\n## 收益半衰期\n\n\n\n#### 什么是半衰期\n\n> 半衰期最早是物理学中的概念，指放射性元素中半数原子核发生衰变所需要的时间，半衰期越短，衰变越快；半衰期越长，衰变越慢。不同元素的半衰期差别非常大，短的不到0.01 秒，长的可达几亿年。后来，许多其他学科也沿用了半衰期的概念。医学中，药物的半衰期是指药物在生物体内浓度下降一半所需要的时间。元素的半衰期属于该元素的固有属性，不受个体影响，而药物的浓度半衰期则会因为个体体质不同而有所差异。\n>\n> 在生活中我们常常只关注到到一件事情在发生时带给我们的即刻的好处，而忽略了这一好处是否可以持续继续下去，产生长期的效果。\n\n#### 通过收益指和半衰期来指定计划\n\n通过引入收益值与半衰期相结合，我们可以将事情像四象限法则那样分为四个角度，分别是：\n\n- **高收益、长半衰期**\n- **高收益、短半衰期**\n- **低收益、长半衰期**\n- **低收益、短半衰期**\n\n相比四象限法则来说，通过收益和半衰期制定的计划矛盾更小，但是更为抽象。这就需要我们在具体实行的时候需要有行动规则：\n\n- 收益高地无关紧要，只要不是短半衰期的事情，只要这个收益可以被累加，就尽管去做\n- 不要只盯着那些“高大上”的事情。一些不重要、不紧急的事情，只要对你有长期的益处、仍旧可以用。\n\n  \n\n#### 通过收益指和半衰期来辨别事物\n\n**我们可以用半衰期看自己，也可以用来看他人、看历史。**\n\n> 时间自有偏爱。回首历史，一些杰出的人物在历史上留下了独特的印记。即便星移斗转，时移世易，他们以及他们各自的经典作品，仍被今天的人记起和谈论。\n\n所以那些经典的书籍读物,它们自己本身已经通过时间的发酵，散发出阵阵的书香，证明了自己具有超长半衰期且有较高的附加价值。\n\n而微博、朋友圈、碎片化阅读等等，很多明显无法通过时间值尺的筛选。通过半衰期的角度去筛选过滤信息，你就有更多富裕的时间、精力和头脑来主动寻找和吸收有价值的信息。\n\n\n\n> 如果我们多了解那些历史长河中的杰出人物，就会发现他们往往是不为潮流所动的人，升值常常带点偏执，而且他们都发下了自己独特的才能，并且努力地、义无反顾去把这个才能发挥至最大。“像那些伟大的先贤看齐”，并非是要亦步亦趋地重走那些先贤的道路，毕竟时代已全然不同，而是选择像他们一样，走一条自主选择并且可以一往无前的路。\n>\n> 当我们用“时间之尺”丈量历史中的自己，与那些杰出人士相遇、交谈，你就会发现，与同时代人做比较相比没那么重要，更没有必要在这种比较重自我怀疑、自怨自艾。人生那么短，路有那么长，你好好好走就是了。\n\n\n\n## 时间管理\n\n\n\n#### 起源\n\n> 时间如一套严苛的规则，规范着我们的生活：什么时候睡觉不仅取决于有没有睡意，也取决于时钟所标识的时间；什么时候吃饭不仅取决于有没有饿，也取决于有没有到 “饭点” 。这种情况可不是在人类早期文明便有的，据美国社会哲学家刘易斯 芒福德在《技术与文明》中所述，机械时钟的最早使用始于 13 世纪欧洲的寺院，用于帮助人们准时参加宗教活动。而直到公元 1345 年左右，欧洲人才开始普遍接受一小时分为 60 分钟，把一分钟分成 60 秒。也是从那时起，时间作为一种社会活动的参照框架，把人的生活从大自然的背景中分离出来。之后的几个世纪，时钟走出宗教领域，在人类的经济活动中扮演了关键角色。芒福德甚至认为，工业革命中最关键的机器不是蒸汽机，而是时钟。而到了现代社会，时间更是被推上了神坛。\n>\n> 在这种背景下，“时间管理”应运而生，还成了今天的一门显学。它教我们如何设定任务目标，如何将任务分解，如何区分重要和紧急，如何把事情列成清单并设定好时间，如何把控好自己的工作效率....这些方法无疑都有一定的作用，但不过都是\"技术层面的解决\"。\n>\n> 所谓 “技术层面的解决” ，是指对问题的表面部分实施干预，而忽视了问题深处的根源。其后果是，问题的表面部分在短暂消失后又再次出现，甚至愈演愈烈。时间管理中提倡的很多办法，并不是要让人们逃离现代境遇所构造的牢笼，反而是要对其进行技术性强化，教会我们更加精细更加严苛的分隔生命时间。\n>\n> 我们原本就是因为快而痛苦，可时间管理却教我们更快。\n\n#### 利弊\n\n时间管理并不是完全负面的，在一些情况下对于提升人们的效率和工作业绩有一定的帮助，但是人们的主观感受却常常于此并不一致，会依然觉得时间不够用，事情永远都做不完，甚至为为此心力交瘁。因为人们无法完全预估到未来会发生的事情，从而导致计划外的事情发生迫使原本的计划在既定期限难以完成或是勉强完成。这种计划即使能运行下去，心理负荷也会越来越大，到最后齿轮崩坏。 \n\n#### 平衡\n\n- **区分快慢** 做事情想清楚什么应该求 “快”，什么事情应该求 “慢”。\n- **分配深浅（时间块）** 如番茄时钟一样（类比不大准确，番茄时钟必须以 25 分钟为一个时间块显示在这套体系中是不大合理的），我们需要给求快的事件一个完整时间块，在沉浸式的模式中，我们的效率无疑是非常高的，而慢的事件我们也不应该过于苛责，从而获得高质量的休闲满足\n\n\n\n## Tips:\n\n- **用平衡的观点看待过去、现在和未来，用郑重的态度过好当下的生活，并联结起过去和未来。**\n- **明确工作和生活的界限，用未来视角工作，用享乐主义生活**\n- **使用 “时间之尺” ，审视时间的长期价值，尽可能的删减非必要事件**\n- **让“远期未来” 更加具体，为 “近期未来”挑战** \n- **把握好做事的节奏，区分“求快”的事件和“求慢”的事件。**\n- **提升时间使用的 “深度” ，减少被动式休闲的比例，保持至少一项长期的业余爱好**\n\n  \n","slug":"2020-04-29-book_read_01","published":1,"updated":"2024-09-13T03:38:13.729Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pc0010s2y4c03t66n6","content":"<h2 id=\"如何对待时间\"><a href=\"#如何对待时间\" class=\"headerlink\" title=\"如何对待时间\"></a>如何对待时间</h2><blockquote>\n<p>瑞典心理学家林德沃(Lindvall)提出,具有平衡式时间视角的人，在内心具有一种“延伸的当下感（extended now ）,既可以“从当来审视过去”，也可以“视未来存于当下”，他应具有囊括“过去”和“未来的”包容性。</p>\n<p>这种既不疏离也不漠视未来的当下感，显然与享乐主义视角差别明显，它显示了一个人对事件所应具有的责任感，既以更严肃（虽不一定是更迫切）的态度来对待时间。这与梁漱溟先生的“郑重”一说便不谋而合了。近百年前人文学者的自我审思与新近基于实证的科学观点实现了相会，这是件多么奇妙的事！</p>\n</blockquote>\n<p>林德沃提出的对待时间的十条建议：</p>\n<ol>\n<li><p>生活在当下——不瞻前顾后，不左顾右盼，不患得患失；</p>\n</li>\n<li><p>严肃地对待时间——审慎、郑重地思考时间对我们的价值并用好它；</p>\n</li>\n<li><p>留意自己拥有的空间并享受它——找到自己的“独享时刻”，不要疲于奔命</p>\n</li>\n<li><p>反思自己与其他人的时间视角——认识到自己和他人时间视角的异同，换位思考；</p>\n</li>\n<li><p>从现在出发联结过去——过去并没有远去，它对今天仍具有意义；</p>\n</li>\n<li><p>并不完全沉浸于过去——比过去更重要的是现在</p>\n</li>\n<li><p>制定实现目标的计划——未来视角让我们行动更加有序</p>\n</li>\n<li><p>平衡计划和非计划时间——由于随机性和不可预见因素的影响，我们的生活不能完全被计划，平衡计划和非计划就是在未来视角和现在视角之间找到平衡点；</p>\n</li>\n<li><p>视未来于当下——未来并非遥不可及，它就出现在即将到来的每一分每一秒；</p>\n</li>\n<li><p>对未来保持积极的态度——既然未来难以预测，那么以积极的心态面对它们让我们在当下更有行动力。</p>\n</li>\n</ol>\n<h2 id=\"制定合理的远期未来和近期未来\"><a href=\"#制定合理的远期未来和近期未来\" class=\"headerlink\" title=\"制定合理的远期未来和近期未来\"></a>制定合理的远期未来和近期未来</h2><blockquote>\n<p>远期未来的视角下，人们倾向用抽象、概括的方式去思考。这种思考视角常常缺乏细节，更多考虑的是这件事情对自己的价值和意义,从而导致缺乏可行性。</p>\n<p>而在近期未来的视角下，人们更容易做到具体的情境中去考虑，想得到更多的不是“要不要做”而是“怎么去做”。这种思考视角虽然会考虑事情的可行性和实用性，但是它会让我们倾向于去做可行性更高、更容易实现的事情，而回避更有意义同时也更有挑战性的事。</p>\n</blockquote>\n<p>想要处理好 “远期未来”和“近期未来”，我们可以采用下面两个策略：</p>\n<ol>\n<li>近期未来要为远期未来服务，使得远期未来的目标更加具体化、情景化和可实施。</li>\n<li>降低近期未来中的 “非期望性行为” 的便利性，主动增加挑战的难度。例如人为的给自己的一些行为增设门槛，来达到增加获得目标成本。</li>\n</ol>\n<h2 id=\"收益半衰期\"><a href=\"#收益半衰期\" class=\"headerlink\" title=\"收益半衰期\"></a>收益半衰期</h2><h4 id=\"什么是半衰期\"><a href=\"#什么是半衰期\" class=\"headerlink\" title=\"什么是半衰期\"></a>什么是半衰期</h4><blockquote>\n<p>半衰期最早是物理学中的概念，指放射性元素中半数原子核发生衰变所需要的时间，半衰期越短，衰变越快；半衰期越长，衰变越慢。不同元素的半衰期差别非常大，短的不到0.01 秒，长的可达几亿年。后来，许多其他学科也沿用了半衰期的概念。医学中，药物的半衰期是指药物在生物体内浓度下降一半所需要的时间。元素的半衰期属于该元素的固有属性，不受个体影响，而药物的浓度半衰期则会因为个体体质不同而有所差异。</p>\n<p>在生活中我们常常只关注到到一件事情在发生时带给我们的即刻的好处，而忽略了这一好处是否可以持续继续下去，产生长期的效果。</p>\n</blockquote>\n<h4 id=\"通过收益指和半衰期来指定计划\"><a href=\"#通过收益指和半衰期来指定计划\" class=\"headerlink\" title=\"通过收益指和半衰期来指定计划\"></a>通过收益指和半衰期来指定计划</h4><p>通过引入收益值与半衰期相结合，我们可以将事情像四象限法则那样分为四个角度，分别是：</p>\n<ul>\n<li><strong>高收益、长半衰期</strong></li>\n<li><strong>高收益、短半衰期</strong></li>\n<li><strong>低收益、长半衰期</strong></li>\n<li><strong>低收益、短半衰期</strong></li>\n</ul>\n<p>相比四象限法则来说，通过收益和半衰期制定的计划矛盾更小，但是更为抽象。这就需要我们在具体实行的时候需要有行动规则：</p>\n<ul>\n<li>收益高地无关紧要，只要不是短半衰期的事情，只要这个收益可以被累加，就尽管去做</li>\n<li>不要只盯着那些“高大上”的事情。一些不重要、不紧急的事情，只要对你有长期的益处、仍旧可以用。</li>\n</ul>\n<h4 id=\"通过收益指和半衰期来辨别事物\"><a href=\"#通过收益指和半衰期来辨别事物\" class=\"headerlink\" title=\"通过收益指和半衰期来辨别事物\"></a>通过收益指和半衰期来辨别事物</h4><p><strong>我们可以用半衰期看自己，也可以用来看他人、看历史。</strong></p>\n<blockquote>\n<p>时间自有偏爱。回首历史，一些杰出的人物在历史上留下了独特的印记。即便星移斗转，时移世易，他们以及他们各自的经典作品，仍被今天的人记起和谈论。</p>\n</blockquote>\n<p>所以那些经典的书籍读物,它们自己本身已经通过时间的发酵，散发出阵阵的书香，证明了自己具有超长半衰期且有较高的附加价值。</p>\n<p>而微博、朋友圈、碎片化阅读等等，很多明显无法通过时间值尺的筛选。通过半衰期的角度去筛选过滤信息，你就有更多富裕的时间、精力和头脑来主动寻找和吸收有价值的信息。</p>\n<blockquote>\n<p>如果我们多了解那些历史长河中的杰出人物，就会发现他们往往是不为潮流所动的人，升值常常带点偏执，而且他们都发下了自己独特的才能，并且努力地、义无反顾去把这个才能发挥至最大。“像那些伟大的先贤看齐”，并非是要亦步亦趋地重走那些先贤的道路，毕竟时代已全然不同，而是选择像他们一样，走一条自主选择并且可以一往无前的路。</p>\n<p>当我们用“时间之尺”丈量历史中的自己，与那些杰出人士相遇、交谈，你就会发现，与同时代人做比较相比没那么重要，更没有必要在这种比较重自我怀疑、自怨自艾。人生那么短，路有那么长，你好好好走就是了。</p>\n</blockquote>\n<h2 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h2><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><blockquote>\n<p>时间如一套严苛的规则，规范着我们的生活：什么时候睡觉不仅取决于有没有睡意，也取决于时钟所标识的时间；什么时候吃饭不仅取决于有没有饿，也取决于有没有到 “饭点” 。这种情况可不是在人类早期文明便有的，据美国社会哲学家刘易斯 芒福德在《技术与文明》中所述，机械时钟的最早使用始于 13 世纪欧洲的寺院，用于帮助人们准时参加宗教活动。而直到公元 1345 年左右，欧洲人才开始普遍接受一小时分为 60 分钟，把一分钟分成 60 秒。也是从那时起，时间作为一种社会活动的参照框架，把人的生活从大自然的背景中分离出来。之后的几个世纪，时钟走出宗教领域，在人类的经济活动中扮演了关键角色。芒福德甚至认为，工业革命中最关键的机器不是蒸汽机，而是时钟。而到了现代社会，时间更是被推上了神坛。</p>\n<p>在这种背景下，“时间管理”应运而生，还成了今天的一门显学。它教我们如何设定任务目标，如何将任务分解，如何区分重要和紧急，如何把事情列成清单并设定好时间，如何把控好自己的工作效率….这些方法无疑都有一定的作用，但不过都是”技术层面的解决”。</p>\n<p>所谓 “技术层面的解决” ，是指对问题的表面部分实施干预，而忽视了问题深处的根源。其后果是，问题的表面部分在短暂消失后又再次出现，甚至愈演愈烈。时间管理中提倡的很多办法，并不是要让人们逃离现代境遇所构造的牢笼，反而是要对其进行技术性强化，教会我们更加精细更加严苛的分隔生命时间。</p>\n<p>我们原本就是因为快而痛苦，可时间管理却教我们更快。</p>\n</blockquote>\n<h4 id=\"利弊\"><a href=\"#利弊\" class=\"headerlink\" title=\"利弊\"></a>利弊</h4><p>时间管理并不是完全负面的，在一些情况下对于提升人们的效率和工作业绩有一定的帮助，但是人们的主观感受却常常于此并不一致，会依然觉得时间不够用，事情永远都做不完，甚至为为此心力交瘁。因为人们无法完全预估到未来会发生的事情，从而导致计划外的事情发生迫使原本的计划在既定期限难以完成或是勉强完成。这种计划即使能运行下去，心理负荷也会越来越大，到最后齿轮崩坏。 </p>\n<h4 id=\"平衡\"><a href=\"#平衡\" class=\"headerlink\" title=\"平衡\"></a>平衡</h4><ul>\n<li><strong>区分快慢</strong> 做事情想清楚什么应该求 “快”，什么事情应该求 “慢”。</li>\n<li><strong>分配深浅（时间块）</strong> 如番茄时钟一样（类比不大准确，番茄时钟必须以 25 分钟为一个时间块显示在这套体系中是不大合理的），我们需要给求快的事件一个完整时间块，在沉浸式的模式中，我们的效率无疑是非常高的，而慢的事件我们也不应该过于苛责，从而获得高质量的休闲满足</li>\n</ul>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h2><ul>\n<li><strong>用平衡的观点看待过去、现在和未来，用郑重的态度过好当下的生活，并联结起过去和未来。</strong></li>\n<li><strong>明确工作和生活的界限，用未来视角工作，用享乐主义生活</strong></li>\n<li><strong>使用 “时间之尺” ，审视时间的长期价值，尽可能的删减非必要事件</strong></li>\n<li><strong>让“远期未来” 更加具体，为 “近期未来”挑战</strong> </li>\n<li><strong>把握好做事的节奏，区分“求快”的事件和“求慢”的事件。</strong></li>\n<li><strong>提升时间使用的 “深度” ，减少被动式休闲的比例，保持至少一项长期的业余爱好</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何对待时间\"><a href=\"#如何对待时间\" class=\"headerlink\" title=\"如何对待时间\"></a>如何对待时间</h2><blockquote>\n<p>瑞典心理学家林德沃(Lindvall)提出,具有平衡式时间视角的人，在内心具有一种“延伸的当下感（extended now ）,既可以“从当来审视过去”，也可以“视未来存于当下”，他应具有囊括“过去”和“未来的”包容性。</p>\n<p>这种既不疏离也不漠视未来的当下感，显然与享乐主义视角差别明显，它显示了一个人对事件所应具有的责任感，既以更严肃（虽不一定是更迫切）的态度来对待时间。这与梁漱溟先生的“郑重”一说便不谋而合了。近百年前人文学者的自我审思与新近基于实证的科学观点实现了相会，这是件多么奇妙的事！</p>\n</blockquote>\n<p>林德沃提出的对待时间的十条建议：</p>\n<ol>\n<li><p>生活在当下——不瞻前顾后，不左顾右盼，不患得患失；</p>\n</li>\n<li><p>严肃地对待时间——审慎、郑重地思考时间对我们的价值并用好它；</p>\n</li>\n<li><p>留意自己拥有的空间并享受它——找到自己的“独享时刻”，不要疲于奔命</p>\n</li>\n<li><p>反思自己与其他人的时间视角——认识到自己和他人时间视角的异同，换位思考；</p>\n</li>\n<li><p>从现在出发联结过去——过去并没有远去，它对今天仍具有意义；</p>\n</li>\n<li><p>并不完全沉浸于过去——比过去更重要的是现在</p>\n</li>\n<li><p>制定实现目标的计划——未来视角让我们行动更加有序</p>\n</li>\n<li><p>平衡计划和非计划时间——由于随机性和不可预见因素的影响，我们的生活不能完全被计划，平衡计划和非计划就是在未来视角和现在视角之间找到平衡点；</p>\n</li>\n<li><p>视未来于当下——未来并非遥不可及，它就出现在即将到来的每一分每一秒；</p>\n</li>\n<li><p>对未来保持积极的态度——既然未来难以预测，那么以积极的心态面对它们让我们在当下更有行动力。</p>\n</li>\n</ol>\n<h2 id=\"制定合理的远期未来和近期未来\"><a href=\"#制定合理的远期未来和近期未来\" class=\"headerlink\" title=\"制定合理的远期未来和近期未来\"></a>制定合理的远期未来和近期未来</h2><blockquote>\n<p>远期未来的视角下，人们倾向用抽象、概括的方式去思考。这种思考视角常常缺乏细节，更多考虑的是这件事情对自己的价值和意义,从而导致缺乏可行性。</p>\n<p>而在近期未来的视角下，人们更容易做到具体的情境中去考虑，想得到更多的不是“要不要做”而是“怎么去做”。这种思考视角虽然会考虑事情的可行性和实用性，但是它会让我们倾向于去做可行性更高、更容易实现的事情，而回避更有意义同时也更有挑战性的事。</p>\n</blockquote>\n<p>想要处理好 “远期未来”和“近期未来”，我们可以采用下面两个策略：</p>\n<ol>\n<li>近期未来要为远期未来服务，使得远期未来的目标更加具体化、情景化和可实施。</li>\n<li>降低近期未来中的 “非期望性行为” 的便利性，主动增加挑战的难度。例如人为的给自己的一些行为增设门槛，来达到增加获得目标成本。</li>\n</ol>\n<h2 id=\"收益半衰期\"><a href=\"#收益半衰期\" class=\"headerlink\" title=\"收益半衰期\"></a>收益半衰期</h2><h4 id=\"什么是半衰期\"><a href=\"#什么是半衰期\" class=\"headerlink\" title=\"什么是半衰期\"></a>什么是半衰期</h4><blockquote>\n<p>半衰期最早是物理学中的概念，指放射性元素中半数原子核发生衰变所需要的时间，半衰期越短，衰变越快；半衰期越长，衰变越慢。不同元素的半衰期差别非常大，短的不到0.01 秒，长的可达几亿年。后来，许多其他学科也沿用了半衰期的概念。医学中，药物的半衰期是指药物在生物体内浓度下降一半所需要的时间。元素的半衰期属于该元素的固有属性，不受个体影响，而药物的浓度半衰期则会因为个体体质不同而有所差异。</p>\n<p>在生活中我们常常只关注到到一件事情在发生时带给我们的即刻的好处，而忽略了这一好处是否可以持续继续下去，产生长期的效果。</p>\n</blockquote>\n<h4 id=\"通过收益指和半衰期来指定计划\"><a href=\"#通过收益指和半衰期来指定计划\" class=\"headerlink\" title=\"通过收益指和半衰期来指定计划\"></a>通过收益指和半衰期来指定计划</h4><p>通过引入收益值与半衰期相结合，我们可以将事情像四象限法则那样分为四个角度，分别是：</p>\n<ul>\n<li><strong>高收益、长半衰期</strong></li>\n<li><strong>高收益、短半衰期</strong></li>\n<li><strong>低收益、长半衰期</strong></li>\n<li><strong>低收益、短半衰期</strong></li>\n</ul>\n<p>相比四象限法则来说，通过收益和半衰期制定的计划矛盾更小，但是更为抽象。这就需要我们在具体实行的时候需要有行动规则：</p>\n<ul>\n<li>收益高地无关紧要，只要不是短半衰期的事情，只要这个收益可以被累加，就尽管去做</li>\n<li>不要只盯着那些“高大上”的事情。一些不重要、不紧急的事情，只要对你有长期的益处、仍旧可以用。</li>\n</ul>\n<h4 id=\"通过收益指和半衰期来辨别事物\"><a href=\"#通过收益指和半衰期来辨别事物\" class=\"headerlink\" title=\"通过收益指和半衰期来辨别事物\"></a>通过收益指和半衰期来辨别事物</h4><p><strong>我们可以用半衰期看自己，也可以用来看他人、看历史。</strong></p>\n<blockquote>\n<p>时间自有偏爱。回首历史，一些杰出的人物在历史上留下了独特的印记。即便星移斗转，时移世易，他们以及他们各自的经典作品，仍被今天的人记起和谈论。</p>\n</blockquote>\n<p>所以那些经典的书籍读物,它们自己本身已经通过时间的发酵，散发出阵阵的书香，证明了自己具有超长半衰期且有较高的附加价值。</p>\n<p>而微博、朋友圈、碎片化阅读等等，很多明显无法通过时间值尺的筛选。通过半衰期的角度去筛选过滤信息，你就有更多富裕的时间、精力和头脑来主动寻找和吸收有价值的信息。</p>\n<blockquote>\n<p>如果我们多了解那些历史长河中的杰出人物，就会发现他们往往是不为潮流所动的人，升值常常带点偏执，而且他们都发下了自己独特的才能，并且努力地、义无反顾去把这个才能发挥至最大。“像那些伟大的先贤看齐”，并非是要亦步亦趋地重走那些先贤的道路，毕竟时代已全然不同，而是选择像他们一样，走一条自主选择并且可以一往无前的路。</p>\n<p>当我们用“时间之尺”丈量历史中的自己，与那些杰出人士相遇、交谈，你就会发现，与同时代人做比较相比没那么重要，更没有必要在这种比较重自我怀疑、自怨自艾。人生那么短，路有那么长，你好好好走就是了。</p>\n</blockquote>\n<h2 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h2><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><blockquote>\n<p>时间如一套严苛的规则，规范着我们的生活：什么时候睡觉不仅取决于有没有睡意，也取决于时钟所标识的时间；什么时候吃饭不仅取决于有没有饿，也取决于有没有到 “饭点” 。这种情况可不是在人类早期文明便有的，据美国社会哲学家刘易斯 芒福德在《技术与文明》中所述，机械时钟的最早使用始于 13 世纪欧洲的寺院，用于帮助人们准时参加宗教活动。而直到公元 1345 年左右，欧洲人才开始普遍接受一小时分为 60 分钟，把一分钟分成 60 秒。也是从那时起，时间作为一种社会活动的参照框架，把人的生活从大自然的背景中分离出来。之后的几个世纪，时钟走出宗教领域，在人类的经济活动中扮演了关键角色。芒福德甚至认为，工业革命中最关键的机器不是蒸汽机，而是时钟。而到了现代社会，时间更是被推上了神坛。</p>\n<p>在这种背景下，“时间管理”应运而生，还成了今天的一门显学。它教我们如何设定任务目标，如何将任务分解，如何区分重要和紧急，如何把事情列成清单并设定好时间，如何把控好自己的工作效率….这些方法无疑都有一定的作用，但不过都是”技术层面的解决”。</p>\n<p>所谓 “技术层面的解决” ，是指对问题的表面部分实施干预，而忽视了问题深处的根源。其后果是，问题的表面部分在短暂消失后又再次出现，甚至愈演愈烈。时间管理中提倡的很多办法，并不是要让人们逃离现代境遇所构造的牢笼，反而是要对其进行技术性强化，教会我们更加精细更加严苛的分隔生命时间。</p>\n<p>我们原本就是因为快而痛苦，可时间管理却教我们更快。</p>\n</blockquote>\n<h4 id=\"利弊\"><a href=\"#利弊\" class=\"headerlink\" title=\"利弊\"></a>利弊</h4><p>时间管理并不是完全负面的，在一些情况下对于提升人们的效率和工作业绩有一定的帮助，但是人们的主观感受却常常于此并不一致，会依然觉得时间不够用，事情永远都做不完，甚至为为此心力交瘁。因为人们无法完全预估到未来会发生的事情，从而导致计划外的事情发生迫使原本的计划在既定期限难以完成或是勉强完成。这种计划即使能运行下去，心理负荷也会越来越大，到最后齿轮崩坏。 </p>\n<h4 id=\"平衡\"><a href=\"#平衡\" class=\"headerlink\" title=\"平衡\"></a>平衡</h4><ul>\n<li><strong>区分快慢</strong> 做事情想清楚什么应该求 “快”，什么事情应该求 “慢”。</li>\n<li><strong>分配深浅（时间块）</strong> 如番茄时钟一样（类比不大准确，番茄时钟必须以 25 分钟为一个时间块显示在这套体系中是不大合理的），我们需要给求快的事件一个完整时间块，在沉浸式的模式中，我们的效率无疑是非常高的，而慢的事件我们也不应该过于苛责，从而获得高质量的休闲满足</li>\n</ul>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h2><ul>\n<li><strong>用平衡的观点看待过去、现在和未来，用郑重的态度过好当下的生活，并联结起过去和未来。</strong></li>\n<li><strong>明确工作和生活的界限，用未来视角工作，用享乐主义生活</strong></li>\n<li><strong>使用 “时间之尺” ，审视时间的长期价值，尽可能的删减非必要事件</strong></li>\n<li><strong>让“远期未来” 更加具体，为 “近期未来”挑战</strong> </li>\n<li><strong>把握好做事的节奏，区分“求快”的事件和“求慢”的事件。</strong></li>\n<li><strong>提升时间使用的 “深度” ，减少被动式休闲的比例，保持至少一项长期的业余爱好</strong></li>\n</ul>\n"},{"layout":"post","title":"庸碌","subtitle":"","date":"2021-03-24T07:56:00.000Z","author":"Nutcracker","header_image":"img/about-bg-walle.jpg","catalog":true,"_content":"\n\n\n# 庸碌\n\nCreated: Mar 23, 2021 5:28 PM\nTags: Life Lesson, Personal\n\n本来计划新年的第一篇文章输出一下 Flutter 列表的分析和功能优化,但是在陆续看过闲鱼技术和一些同行的文章后感觉要是还按照原来的思路写一篇就显得过于搪塞,这个理由马上就说服了我自己,从而心安理得拖延了起来.但是在相继整理了房间、单车、简历、甚至是 Chrome 的收藏夹后,我已经找不到能够继续让写博客这项事情往后拖延的理由,就想着先写一篇随笔吧 ,也算是对去年的自己一份回顾与交代.\n\n去年的疫情对在小公司工作的自己来说受影响还是蛮大的,前半年居家办公、薪资减少、年中在公司无所事事,第三季度跳槽、找工作,然后加入新公司,努力熟悉业务、代码,工作上完成也都是小事,琐事极多,没有什么值得拿出来说的.很难找到一个词来形容自己,也没有闲下来,但是很明显也没有什么成果.前几天在整理收藏夹的时候翻看了[谢大的博客](https://yihui.org/),发现了他 19 年的总结的标题《**庸碌**》, 觉得这个词真的非常符合当下的状况.随即盗用了标题.也期望今年能摆脱这种状态,即使不行,也做出一些小小的改变.\n\n## 职业的迷茫\n\n在工作上 , 本职 Android 感觉已近瓶颈,倒不是说自己已入化境,而是向性能优化这类高阶技能缺乏所需要的土壤和兴趣, 单纯的啃二手知识和背八股文显然很难让人真正的掌握这门技术.而且中牵扯的 native 知识自己也不甚了解,只能学些皮毛. 而 jetpack 和 compose 作为一名 Android 开发者早已了解和使用 ,框架本身对一名开发者来说是工具，而非技能，不值得拿出来吹嘘和专门大写特写.Flutter 虽然在去年年中的时候花费了时间和精力去学习和时间,但在去 Flutter 的飞速成长后,摆在高级 Android 开发者面前的不再是如何使用 Flutter 混合开发、如何使用 Flutter 开发一款应用.而是 Flutter 的跨端资源共享、性能优化、平台化这些话题.这也使得我头一次对自己的职业发展产生了些许焦虑(OS: 好像真的有点卷? ) .但是静下心来回顾自己去年一年的工作和学习进度,只能说还是标题中的庸碌二字,很多都是无效的努力,远远谈不上卷字.\n\n所以今年我打算真真切切的做出一些可以量化和长期使用的程序,并且已经有了较为靠谱的想法.一个是通过 Flutter for web 来维护和扩展自己的博客.另一个就是写一个全平台的记账应用来供自己使用和迭代.而 Android 方向 native 已经是高阶开发不可或缺的技能 , 也期望今年自己能做出一定的成果和进步.\n\n## 工作上的压力慢慢渗透进了生活\n\n我是对快餐文化嗤之以鼻的. 微博和抖音头条之类的一概不用.觉得碎片化信息就是在蚕食时间和精力. 而任由这些产品消费自己的时间的人无疑多是蠢货.但是在第一次体验大小周工作后,在半夜和凌晨收到问题和反馈时模糊了工作和生活的界限时,我虽然仍然不喜爱这些产品，但也逐渐理解大家在高压的工作下并不是都还有充分强大的心脏来打理自己的生活.\n\n> 实际生活中，我会采用自己所习惯的标准来看身边的事物；虽然我有时会对这些标准的来源感到困惑，对它们的合理性产生怀疑。一方面，人是有局限的，人评价万物的标准也有局限，局限配局限，刚好合适；另一方面，有些标准会在生活中被不断强化，这种强化有时来自于傲慢与偏见，这时，心中的困惑和怀疑正好将它松动松动，以免固化了我们看世界的视角                                   —张列弛\n\n而当我的生活被工作入侵后,我也如常人一样,下班后的业余活动越来越少;单车坏了就放那里数周改搭乘公交;晚上回去打开电脑游戏重复着一局又一局,到点后打开手机 B 站漫无目的的浏览.即使给手机设定了定时锁,在复数的解锁动作后,解锁功能已经没办法在内心掀起任何波澜了.正如张列驰在[《第一境与畏》](https://www.liechi.org/cn/2019/09/jinganfeel/)中对生活状态所描写的一样.\n\n> 他们对一起都感到兴趣盎然,除了自己的生活\n\n这一席话让我感觉如醍醐灌顶 , 这也是我写这篇博客的重要动力之一. 虽然看完后我仍然没有顿悟出自己的 \"生活\" 的方向是什么,但能让摆脱当下浑浑噩噩的状态已是足够.我决定开始阅读、大量的阅读.多去了解伟人的内心是如何想的;我决定继续捡起来半吊子的摄影.大量的拍摄,多去看看别人的生活是怎么样的.虽然这些话语较为空洞,但是现在的我显然没有什么资格来立起一些 Flag. 但是至少此刻的我这种心情无疑是非常强烈的,我觉得我找到了生活的方向,虽然它是那么刺眼和模糊,但它给予了我动力和希望.\n","source":"_posts/2021-03-25-thinking.markdown","raw":"---\nlayout: post\ntitle: \"庸碌\"\nsubtitle: \"\"\ndate: 2021-03-24 15:56:00\nauthor: \"Nutcracker\"\nheader_image: \"img/about-bg-walle.jpg\"\ncatalog: true\ntags:\n  - Note\n---\n\n\n\n# 庸碌\n\nCreated: Mar 23, 2021 5:28 PM\nTags: Life Lesson, Personal\n\n本来计划新年的第一篇文章输出一下 Flutter 列表的分析和功能优化,但是在陆续看过闲鱼技术和一些同行的文章后感觉要是还按照原来的思路写一篇就显得过于搪塞,这个理由马上就说服了我自己,从而心安理得拖延了起来.但是在相继整理了房间、单车、简历、甚至是 Chrome 的收藏夹后,我已经找不到能够继续让写博客这项事情往后拖延的理由,就想着先写一篇随笔吧 ,也算是对去年的自己一份回顾与交代.\n\n去年的疫情对在小公司工作的自己来说受影响还是蛮大的,前半年居家办公、薪资减少、年中在公司无所事事,第三季度跳槽、找工作,然后加入新公司,努力熟悉业务、代码,工作上完成也都是小事,琐事极多,没有什么值得拿出来说的.很难找到一个词来形容自己,也没有闲下来,但是很明显也没有什么成果.前几天在整理收藏夹的时候翻看了[谢大的博客](https://yihui.org/),发现了他 19 年的总结的标题《**庸碌**》, 觉得这个词真的非常符合当下的状况.随即盗用了标题.也期望今年能摆脱这种状态,即使不行,也做出一些小小的改变.\n\n## 职业的迷茫\n\n在工作上 , 本职 Android 感觉已近瓶颈,倒不是说自己已入化境,而是向性能优化这类高阶技能缺乏所需要的土壤和兴趣, 单纯的啃二手知识和背八股文显然很难让人真正的掌握这门技术.而且中牵扯的 native 知识自己也不甚了解,只能学些皮毛. 而 jetpack 和 compose 作为一名 Android 开发者早已了解和使用 ,框架本身对一名开发者来说是工具，而非技能，不值得拿出来吹嘘和专门大写特写.Flutter 虽然在去年年中的时候花费了时间和精力去学习和时间,但在去 Flutter 的飞速成长后,摆在高级 Android 开发者面前的不再是如何使用 Flutter 混合开发、如何使用 Flutter 开发一款应用.而是 Flutter 的跨端资源共享、性能优化、平台化这些话题.这也使得我头一次对自己的职业发展产生了些许焦虑(OS: 好像真的有点卷? ) .但是静下心来回顾自己去年一年的工作和学习进度,只能说还是标题中的庸碌二字,很多都是无效的努力,远远谈不上卷字.\n\n所以今年我打算真真切切的做出一些可以量化和长期使用的程序,并且已经有了较为靠谱的想法.一个是通过 Flutter for web 来维护和扩展自己的博客.另一个就是写一个全平台的记账应用来供自己使用和迭代.而 Android 方向 native 已经是高阶开发不可或缺的技能 , 也期望今年自己能做出一定的成果和进步.\n\n## 工作上的压力慢慢渗透进了生活\n\n我是对快餐文化嗤之以鼻的. 微博和抖音头条之类的一概不用.觉得碎片化信息就是在蚕食时间和精力. 而任由这些产品消费自己的时间的人无疑多是蠢货.但是在第一次体验大小周工作后,在半夜和凌晨收到问题和反馈时模糊了工作和生活的界限时,我虽然仍然不喜爱这些产品，但也逐渐理解大家在高压的工作下并不是都还有充分强大的心脏来打理自己的生活.\n\n> 实际生活中，我会采用自己所习惯的标准来看身边的事物；虽然我有时会对这些标准的来源感到困惑，对它们的合理性产生怀疑。一方面，人是有局限的，人评价万物的标准也有局限，局限配局限，刚好合适；另一方面，有些标准会在生活中被不断强化，这种强化有时来自于傲慢与偏见，这时，心中的困惑和怀疑正好将它松动松动，以免固化了我们看世界的视角                                   —张列弛\n\n而当我的生活被工作入侵后,我也如常人一样,下班后的业余活动越来越少;单车坏了就放那里数周改搭乘公交;晚上回去打开电脑游戏重复着一局又一局,到点后打开手机 B 站漫无目的的浏览.即使给手机设定了定时锁,在复数的解锁动作后,解锁功能已经没办法在内心掀起任何波澜了.正如张列驰在[《第一境与畏》](https://www.liechi.org/cn/2019/09/jinganfeel/)中对生活状态所描写的一样.\n\n> 他们对一起都感到兴趣盎然,除了自己的生活\n\n这一席话让我感觉如醍醐灌顶 , 这也是我写这篇博客的重要动力之一. 虽然看完后我仍然没有顿悟出自己的 \"生活\" 的方向是什么,但能让摆脱当下浑浑噩噩的状态已是足够.我决定开始阅读、大量的阅读.多去了解伟人的内心是如何想的;我决定继续捡起来半吊子的摄影.大量的拍摄,多去看看别人的生活是怎么样的.虽然这些话语较为空洞,但是现在的我显然没有什么资格来立起一些 Flag. 但是至少此刻的我这种心情无疑是非常强烈的,我觉得我找到了生活的方向,虽然它是那么刺眼和模糊,但它给予了我动力和希望.\n","slug":"2021-03-25-thinking","published":1,"updated":"2024-09-13T03:38:13.730Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pc0012s2y4fcq110hk","content":"<h1 id=\"庸碌\"><a href=\"#庸碌\" class=\"headerlink\" title=\"庸碌\"></a>庸碌</h1><p>Created: Mar 23, 2021 5:28 PM<br>Tags: Life Lesson, Personal</p>\n<p>本来计划新年的第一篇文章输出一下 Flutter 列表的分析和功能优化,但是在陆续看过闲鱼技术和一些同行的文章后感觉要是还按照原来的思路写一篇就显得过于搪塞,这个理由马上就说服了我自己,从而心安理得拖延了起来.但是在相继整理了房间、单车、简历、甚至是 Chrome 的收藏夹后,我已经找不到能够继续让写博客这项事情往后拖延的理由,就想着先写一篇随笔吧 ,也算是对去年的自己一份回顾与交代.</p>\n<p>去年的疫情对在小公司工作的自己来说受影响还是蛮大的,前半年居家办公、薪资减少、年中在公司无所事事,第三季度跳槽、找工作,然后加入新公司,努力熟悉业务、代码,工作上完成也都是小事,琐事极多,没有什么值得拿出来说的.很难找到一个词来形容自己,也没有闲下来,但是很明显也没有什么成果.前几天在整理收藏夹的时候翻看了<a href=\"https://yihui.org/\">谢大的博客</a>,发现了他 19 年的总结的标题《<strong>庸碌</strong>》, 觉得这个词真的非常符合当下的状况.随即盗用了标题.也期望今年能摆脱这种状态,即使不行,也做出一些小小的改变.</p>\n<h2 id=\"职业的迷茫\"><a href=\"#职业的迷茫\" class=\"headerlink\" title=\"职业的迷茫\"></a>职业的迷茫</h2><p>在工作上 , 本职 Android 感觉已近瓶颈,倒不是说自己已入化境,而是向性能优化这类高阶技能缺乏所需要的土壤和兴趣, 单纯的啃二手知识和背八股文显然很难让人真正的掌握这门技术.而且中牵扯的 native 知识自己也不甚了解,只能学些皮毛. 而 jetpack 和 compose 作为一名 Android 开发者早已了解和使用 ,框架本身对一名开发者来说是工具，而非技能，不值得拿出来吹嘘和专门大写特写.Flutter 虽然在去年年中的时候花费了时间和精力去学习和时间,但在去 Flutter 的飞速成长后,摆在高级 Android 开发者面前的不再是如何使用 Flutter 混合开发、如何使用 Flutter 开发一款应用.而是 Flutter 的跨端资源共享、性能优化、平台化这些话题.这也使得我头一次对自己的职业发展产生了些许焦虑(OS: 好像真的有点卷? ) .但是静下心来回顾自己去年一年的工作和学习进度,只能说还是标题中的庸碌二字,很多都是无效的努力,远远谈不上卷字.</p>\n<p>所以今年我打算真真切切的做出一些可以量化和长期使用的程序,并且已经有了较为靠谱的想法.一个是通过 Flutter for web 来维护和扩展自己的博客.另一个就是写一个全平台的记账应用来供自己使用和迭代.而 Android 方向 native 已经是高阶开发不可或缺的技能 , 也期望今年自己能做出一定的成果和进步.</p>\n<h2 id=\"工作上的压力慢慢渗透进了生活\"><a href=\"#工作上的压力慢慢渗透进了生活\" class=\"headerlink\" title=\"工作上的压力慢慢渗透进了生活\"></a>工作上的压力慢慢渗透进了生活</h2><p>我是对快餐文化嗤之以鼻的. 微博和抖音头条之类的一概不用.觉得碎片化信息就是在蚕食时间和精力. 而任由这些产品消费自己的时间的人无疑多是蠢货.但是在第一次体验大小周工作后,在半夜和凌晨收到问题和反馈时模糊了工作和生活的界限时,我虽然仍然不喜爱这些产品，但也逐渐理解大家在高压的工作下并不是都还有充分强大的心脏来打理自己的生活.</p>\n<blockquote>\n<p>实际生活中，我会采用自己所习惯的标准来看身边的事物；虽然我有时会对这些标准的来源感到困惑，对它们的合理性产生怀疑。一方面，人是有局限的，人评价万物的标准也有局限，局限配局限，刚好合适；另一方面，有些标准会在生活中被不断强化，这种强化有时来自于傲慢与偏见，这时，心中的困惑和怀疑正好将它松动松动，以免固化了我们看世界的视角                                   —张列弛</p>\n</blockquote>\n<p>而当我的生活被工作入侵后,我也如常人一样,下班后的业余活动越来越少;单车坏了就放那里数周改搭乘公交;晚上回去打开电脑游戏重复着一局又一局,到点后打开手机 B 站漫无目的的浏览.即使给手机设定了定时锁,在复数的解锁动作后,解锁功能已经没办法在内心掀起任何波澜了.正如张列驰在<a href=\"https://www.liechi.org/cn/2019/09/jinganfeel/\">《第一境与畏》</a>中对生活状态所描写的一样.</p>\n<blockquote>\n<p>他们对一起都感到兴趣盎然,除了自己的生活</p>\n</blockquote>\n<p>这一席话让我感觉如醍醐灌顶 , 这也是我写这篇博客的重要动力之一. 虽然看完后我仍然没有顿悟出自己的 “生活” 的方向是什么,但能让摆脱当下浑浑噩噩的状态已是足够.我决定开始阅读、大量的阅读.多去了解伟人的内心是如何想的;我决定继续捡起来半吊子的摄影.大量的拍摄,多去看看别人的生活是怎么样的.虽然这些话语较为空洞,但是现在的我显然没有什么资格来立起一些 Flag. 但是至少此刻的我这种心情无疑是非常强烈的,我觉得我找到了生活的方向,虽然它是那么刺眼和模糊,但它给予了我动力和希望.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"庸碌\"><a href=\"#庸碌\" class=\"headerlink\" title=\"庸碌\"></a>庸碌</h1><p>Created: Mar 23, 2021 5:28 PM<br>Tags: Life Lesson, Personal</p>\n<p>本来计划新年的第一篇文章输出一下 Flutter 列表的分析和功能优化,但是在陆续看过闲鱼技术和一些同行的文章后感觉要是还按照原来的思路写一篇就显得过于搪塞,这个理由马上就说服了我自己,从而心安理得拖延了起来.但是在相继整理了房间、单车、简历、甚至是 Chrome 的收藏夹后,我已经找不到能够继续让写博客这项事情往后拖延的理由,就想着先写一篇随笔吧 ,也算是对去年的自己一份回顾与交代.</p>\n<p>去年的疫情对在小公司工作的自己来说受影响还是蛮大的,前半年居家办公、薪资减少、年中在公司无所事事,第三季度跳槽、找工作,然后加入新公司,努力熟悉业务、代码,工作上完成也都是小事,琐事极多,没有什么值得拿出来说的.很难找到一个词来形容自己,也没有闲下来,但是很明显也没有什么成果.前几天在整理收藏夹的时候翻看了<a href=\"https://yihui.org/\">谢大的博客</a>,发现了他 19 年的总结的标题《<strong>庸碌</strong>》, 觉得这个词真的非常符合当下的状况.随即盗用了标题.也期望今年能摆脱这种状态,即使不行,也做出一些小小的改变.</p>\n<h2 id=\"职业的迷茫\"><a href=\"#职业的迷茫\" class=\"headerlink\" title=\"职业的迷茫\"></a>职业的迷茫</h2><p>在工作上 , 本职 Android 感觉已近瓶颈,倒不是说自己已入化境,而是向性能优化这类高阶技能缺乏所需要的土壤和兴趣, 单纯的啃二手知识和背八股文显然很难让人真正的掌握这门技术.而且中牵扯的 native 知识自己也不甚了解,只能学些皮毛. 而 jetpack 和 compose 作为一名 Android 开发者早已了解和使用 ,框架本身对一名开发者来说是工具，而非技能，不值得拿出来吹嘘和专门大写特写.Flutter 虽然在去年年中的时候花费了时间和精力去学习和时间,但在去 Flutter 的飞速成长后,摆在高级 Android 开发者面前的不再是如何使用 Flutter 混合开发、如何使用 Flutter 开发一款应用.而是 Flutter 的跨端资源共享、性能优化、平台化这些话题.这也使得我头一次对自己的职业发展产生了些许焦虑(OS: 好像真的有点卷? ) .但是静下心来回顾自己去年一年的工作和学习进度,只能说还是标题中的庸碌二字,很多都是无效的努力,远远谈不上卷字.</p>\n<p>所以今年我打算真真切切的做出一些可以量化和长期使用的程序,并且已经有了较为靠谱的想法.一个是通过 Flutter for web 来维护和扩展自己的博客.另一个就是写一个全平台的记账应用来供自己使用和迭代.而 Android 方向 native 已经是高阶开发不可或缺的技能 , 也期望今年自己能做出一定的成果和进步.</p>\n<h2 id=\"工作上的压力慢慢渗透进了生活\"><a href=\"#工作上的压力慢慢渗透进了生活\" class=\"headerlink\" title=\"工作上的压力慢慢渗透进了生活\"></a>工作上的压力慢慢渗透进了生活</h2><p>我是对快餐文化嗤之以鼻的. 微博和抖音头条之类的一概不用.觉得碎片化信息就是在蚕食时间和精力. 而任由这些产品消费自己的时间的人无疑多是蠢货.但是在第一次体验大小周工作后,在半夜和凌晨收到问题和反馈时模糊了工作和生活的界限时,我虽然仍然不喜爱这些产品，但也逐渐理解大家在高压的工作下并不是都还有充分强大的心脏来打理自己的生活.</p>\n<blockquote>\n<p>实际生活中，我会采用自己所习惯的标准来看身边的事物；虽然我有时会对这些标准的来源感到困惑，对它们的合理性产生怀疑。一方面，人是有局限的，人评价万物的标准也有局限，局限配局限，刚好合适；另一方面，有些标准会在生活中被不断强化，这种强化有时来自于傲慢与偏见，这时，心中的困惑和怀疑正好将它松动松动，以免固化了我们看世界的视角                                   —张列弛</p>\n</blockquote>\n<p>而当我的生活被工作入侵后,我也如常人一样,下班后的业余活动越来越少;单车坏了就放那里数周改搭乘公交;晚上回去打开电脑游戏重复着一局又一局,到点后打开手机 B 站漫无目的的浏览.即使给手机设定了定时锁,在复数的解锁动作后,解锁功能已经没办法在内心掀起任何波澜了.正如张列驰在<a href=\"https://www.liechi.org/cn/2019/09/jinganfeel/\">《第一境与畏》</a>中对生活状态所描写的一样.</p>\n<blockquote>\n<p>他们对一起都感到兴趣盎然,除了自己的生活</p>\n</blockquote>\n<p>这一席话让我感觉如醍醐灌顶 , 这也是我写这篇博客的重要动力之一. 虽然看完后我仍然没有顿悟出自己的 “生活” 的方向是什么,但能让摆脱当下浑浑噩噩的状态已是足够.我决定开始阅读、大量的阅读.多去了解伟人的内心是如何想的;我决定继续捡起来半吊子的摄影.大量的拍摄,多去看看别人的生活是怎么样的.虽然这些话语较为空洞,但是现在的我显然没有什么资格来立起一些 Flag. 但是至少此刻的我这种心情无疑是非常强烈的,我觉得我找到了生活的方向,虽然它是那么刺眼和模糊,但它给予了我动力和希望.</p>\n"},{"layout":"post","title":"官方文档的重要性","subtitle":"","date":"2020-05-22T03:56:00.000Z","author":"rank","header_image":"img/post-bg-alitrip.jpg","catalog":true,"_content":"\n\n\n今天发生了两件事情,解决方法倒是殊途同亏,都是通过官方文档来解决的.事后回想下来也有总结的必要,在这里聊两句.\n\n一是在看 elm 开源项目源码的时候发现了一个挺奇怪的语法\n\n``` javascript\nexport const USERINFO =“userInfo”;\n\nexport default{\n\n \t[USERINFO]({commit,state}){\n    commit(\"xxx\",xx);\n  }\n\n}\n\n```\n\n函数中间和逻辑倒是没什么好讨论的,但是函数面前加了一个数组变量,这倒是让我有点晕了,百思不得其解这是什么操作,函数不像函数 变量不像变量的.使用 `node` `babel` 去解释这个函数也无法解释,搜索也不知从何下手,最后求助于万能的群友.群友发来百度知道的链接(没想到呀,百度知道竟然有正儿八经的回答),发现这是一个 ES5 时将方法命名的操作,因为在 es6 之前属性的名称不能是一个变量,所以通过类似的包装方法达成目的,解构出来其实是这样的\n\n```javascript\n[USERINFO]:function({commit,staet}){\n  commit(\"xxx\",xxx);\n}\n```\n\n到这里其实还好,只能说不会表达导致搜索不到.但是可笑的这个在 vuex 的官方文档中是明明白白的写有例子的.\n\n\n\n第二个是朋友突然找我看郭霖大佬前不久写的一个权限框架中的 一个kotlin 语法糖,为了方便我写了伪代码如下:\n\n```kotlin\n\nclass Scope(params: Int) {\n\n    fun showDialog() {\n        //部分逻辑\n        print(\"this is dialog\")\n    }\n\n}\n\ntypealias Callback = Scope.(count: Int) -> Unit\n\nclass Permission() {\n\n\n    private val scope = Scope(0)\n\n    private var callback: Callback? = null\n\n    fun setCallback(callback: Callback): Permission {\n        this.callback = callback\n        return this\n    }\n\n    fun request() {\n\t\t\t\t//.... 业务逻辑\n       // 执行 callback\n        callback?.let {\n            scope.it(1)\n        }\n    }\n\n}\n\nclass MainActiivty {\n\n    fun onCreate() {\n        Permission()\n            .setCallback {\n                //....逻辑代码\n                // ... 匿名函数中直接调用了 showDialog 方法\n                showDialog()\n            }.request()\n    }\n}\n```\n\n库的名字叫做 [PermissionX](https://github.com/guolindev/PermissionX),想了解具体代码和设计的可以去看看,当时看了一下挺惊奇 `showDialog` 可以直接在一个匿名 Function 里可以调起.虽然大致思路可以根据经验略猜一二(别名方法申明的时候定义了一个扩展函数,然后调用的 callback 的时候是在 `scope` 的 `context` 中运作的).之后先根据 kotlin convert java 来看也确实如此:\n\n```java\n// Permission.java\n\npublic final class Permission {\n   private final Scope scope = new Scope(0);\n   private Function2 callback;\n\n   @NotNull\n   public final Permission setCallback(@NotNull Function2 callback) {\n      Intrinsics.checkParameterIsNotNull(callback, \"callback\");\n      this.callback = callback;\n      return this;\n   }\n\n   public final void request() {\n      Function2 var10000 = this.callback;\n      if (var10000 != null) {\n         Function2 var1 = var10000;\n         int var3 = false;\n         var1.invoke(this.scope, 1);\n      }\n\n   }\n}\n\n// MainActiivty.java\n\npublic final class MainActiivty {\n   public final void onCreate() {\n     // calback 部分无法转译\n      (new Permission()).setCallback((Function2)null.INSTANCE).request();\n   }\n}\n\n// Scope.java\npublic final class Scope {\n   public final void showDialog() {\n      String var1 = \"this is dialog\";\n      boolean var2 = false;\n      System.out.print(var1);\n   }\n\n   public Scope(int params) {\n   }\n}\n```\n\n可以看到别名创建的 callback 被转译成了  kotlin 库中 `Function2` 也就是该函数接受两个参数. 最后在 `request` 时 callback 通过 `invkoe` 操作符调用了自身,传递了 Context `Scope` 和 Param `1`  , 如果了解扩展函数的具体实现就会发现,这和扩展函数是一样的 , 扩展函数在编译后会转换为静态方法,被扩展的对象会被当作参数 `this` 传入静态函数,我们可以给 Permisson 增加一个扩展函数 `test` 它转译后如下 :\n\n```java\n// T.kt\n\nfun Permission.text(){\n  \n}\n\n// TKt.java\n\npublic final class TKt {\n   public static final void test(@NotNull Permission $this$test) {\n      Intrinsics.checkParameterIsNotNull($this$test, \"$this$test\");\n   }\n}\n```\n\n至于 invoke 内部具体是如何执行的,这里 java 代码虽然看不到,但是伪 bytecode 也可以让我们一探究竟\n\n```java\n// access flags 0x11\n  public final invoke(Lcom/xcar/basicres/ui/Scope;I)V\n    // annotable parameter count: 2 (visible)\n    // annotable parameter count: 2 (invisible)\n    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0\n   L0\n    ALOAD 1\n    LDC \"$receiver\"\n    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V\n   L1\n    LINENUMBER 47 L1\n    ALOAD 1\n    INVOKEVIRTUAL com/xcar/basicres/ui/Scope.showDialog ()V\n   L2\n    LINENUMBER 48 L2\n    RETURN\n   L3\n    LOCALVARIABLE this Lcom/basicres/ui/MainActiivty$onCreate$1; L0 L3 0\n    LOCALVARIABLE $this$setCallback Lcom/basicres/ui/Scope; L0 L3 1\n    LOCALVARIABLE it I L0 L3 2\n    MAXSTACK = 2\n    MAXLOCALS = 3\n```\n\n 我们只需要关注 `INVOKESTATIC` 也就是执行方法调用的指令,就不难发现, 最后确实是通过 Scope 调用了showDialog 方法,所以在 callback 中 this 已经转换为 Scope 了 .\n\n虽然一通分析差不多将过程捋清楚了,但是这个通过别名来创建扩展函数且能通过这种方式强化 callback 的语法还是不知道出处.最后抱着试试看的形态去找了官方文档,没想到还真找到了.... 下边是原文,我直接摘抄了方便查看\n\n> ### 函数类型实例调用\n>\n> 函数类型的值可以通过其 [`invoke(……)` 操作符](https://www.kotlincn.net/docs/reference/operator-overloading.html#invoke)调用：`f.invoke(x)` 或者直接 `f(x)`。\n>\n> 如果该值具有接收者类型，那么应该将接收者对象作为第一个参数传递。 调用带有接收者的函数类型值的另一个方式是在其前面加上接收者对象， 就好比该值是一个[扩展函数](https://www.kotlincn.net/docs/reference/extensions.html)：`1.foo(2)`，\n>\n> 例如:\n>\n> ```kotlin\n> val stringPlus: (String, String) -> String = String::plus\n> val intPlus: Int.(Int) -> Int = Int::plus\n> \n> println(stringPlus.invoke(\"<-\", \"->\"))\n> println(stringPlus(\"Hello, \", \"world!\")) \n> \n> println(intPlus.invoke(1, 1))\n> println(intPlus(1, 2))\n> println(2.intPlus(3)) // 类扩展调用\n> \n> ```\n\n可以看到官方文档中的函数类型调用的例子,之前也完整的阅读过官方文档,但这种操作符基本都是一掠而过,虽然网上都把官方文档是一手资料,但之前一直把各路文档当作入门资料罢了.经此事后需要对官方文档改变心态.\n\nps: 郭霖大佬对语言的理解确实是非常深奥, 别名和扩展调用虽然都是挺常用的使用手法, 但是通过别名加类扩展调用从而将放大扩展函数功能性(`Scope` 的创建是需要条件的,它并不适用于匿名创建)的手法,称得上十分精妙了.\n\n","source":"_posts/2020-05-22-note_wiki_widget.markdown","raw":"---\nlayout: post\ntitle: \"官方文档的重要性\"\nsubtitle: \"\"\ndate: 2020-05-22 11:56:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-alitrip.jpg\"\ncatalog: true\ntags:\n  - Note\n---\n\n\n\n今天发生了两件事情,解决方法倒是殊途同亏,都是通过官方文档来解决的.事后回想下来也有总结的必要,在这里聊两句.\n\n一是在看 elm 开源项目源码的时候发现了一个挺奇怪的语法\n\n``` javascript\nexport const USERINFO =“userInfo”;\n\nexport default{\n\n \t[USERINFO]({commit,state}){\n    commit(\"xxx\",xx);\n  }\n\n}\n\n```\n\n函数中间和逻辑倒是没什么好讨论的,但是函数面前加了一个数组变量,这倒是让我有点晕了,百思不得其解这是什么操作,函数不像函数 变量不像变量的.使用 `node` `babel` 去解释这个函数也无法解释,搜索也不知从何下手,最后求助于万能的群友.群友发来百度知道的链接(没想到呀,百度知道竟然有正儿八经的回答),发现这是一个 ES5 时将方法命名的操作,因为在 es6 之前属性的名称不能是一个变量,所以通过类似的包装方法达成目的,解构出来其实是这样的\n\n```javascript\n[USERINFO]:function({commit,staet}){\n  commit(\"xxx\",xxx);\n}\n```\n\n到这里其实还好,只能说不会表达导致搜索不到.但是可笑的这个在 vuex 的官方文档中是明明白白的写有例子的.\n\n\n\n第二个是朋友突然找我看郭霖大佬前不久写的一个权限框架中的 一个kotlin 语法糖,为了方便我写了伪代码如下:\n\n```kotlin\n\nclass Scope(params: Int) {\n\n    fun showDialog() {\n        //部分逻辑\n        print(\"this is dialog\")\n    }\n\n}\n\ntypealias Callback = Scope.(count: Int) -> Unit\n\nclass Permission() {\n\n\n    private val scope = Scope(0)\n\n    private var callback: Callback? = null\n\n    fun setCallback(callback: Callback): Permission {\n        this.callback = callback\n        return this\n    }\n\n    fun request() {\n\t\t\t\t//.... 业务逻辑\n       // 执行 callback\n        callback?.let {\n            scope.it(1)\n        }\n    }\n\n}\n\nclass MainActiivty {\n\n    fun onCreate() {\n        Permission()\n            .setCallback {\n                //....逻辑代码\n                // ... 匿名函数中直接调用了 showDialog 方法\n                showDialog()\n            }.request()\n    }\n}\n```\n\n库的名字叫做 [PermissionX](https://github.com/guolindev/PermissionX),想了解具体代码和设计的可以去看看,当时看了一下挺惊奇 `showDialog` 可以直接在一个匿名 Function 里可以调起.虽然大致思路可以根据经验略猜一二(别名方法申明的时候定义了一个扩展函数,然后调用的 callback 的时候是在 `scope` 的 `context` 中运作的).之后先根据 kotlin convert java 来看也确实如此:\n\n```java\n// Permission.java\n\npublic final class Permission {\n   private final Scope scope = new Scope(0);\n   private Function2 callback;\n\n   @NotNull\n   public final Permission setCallback(@NotNull Function2 callback) {\n      Intrinsics.checkParameterIsNotNull(callback, \"callback\");\n      this.callback = callback;\n      return this;\n   }\n\n   public final void request() {\n      Function2 var10000 = this.callback;\n      if (var10000 != null) {\n         Function2 var1 = var10000;\n         int var3 = false;\n         var1.invoke(this.scope, 1);\n      }\n\n   }\n}\n\n// MainActiivty.java\n\npublic final class MainActiivty {\n   public final void onCreate() {\n     // calback 部分无法转译\n      (new Permission()).setCallback((Function2)null.INSTANCE).request();\n   }\n}\n\n// Scope.java\npublic final class Scope {\n   public final void showDialog() {\n      String var1 = \"this is dialog\";\n      boolean var2 = false;\n      System.out.print(var1);\n   }\n\n   public Scope(int params) {\n   }\n}\n```\n\n可以看到别名创建的 callback 被转译成了  kotlin 库中 `Function2` 也就是该函数接受两个参数. 最后在 `request` 时 callback 通过 `invkoe` 操作符调用了自身,传递了 Context `Scope` 和 Param `1`  , 如果了解扩展函数的具体实现就会发现,这和扩展函数是一样的 , 扩展函数在编译后会转换为静态方法,被扩展的对象会被当作参数 `this` 传入静态函数,我们可以给 Permisson 增加一个扩展函数 `test` 它转译后如下 :\n\n```java\n// T.kt\n\nfun Permission.text(){\n  \n}\n\n// TKt.java\n\npublic final class TKt {\n   public static final void test(@NotNull Permission $this$test) {\n      Intrinsics.checkParameterIsNotNull($this$test, \"$this$test\");\n   }\n}\n```\n\n至于 invoke 内部具体是如何执行的,这里 java 代码虽然看不到,但是伪 bytecode 也可以让我们一探究竟\n\n```java\n// access flags 0x11\n  public final invoke(Lcom/xcar/basicres/ui/Scope;I)V\n    // annotable parameter count: 2 (visible)\n    // annotable parameter count: 2 (invisible)\n    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0\n   L0\n    ALOAD 1\n    LDC \"$receiver\"\n    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V\n   L1\n    LINENUMBER 47 L1\n    ALOAD 1\n    INVOKEVIRTUAL com/xcar/basicres/ui/Scope.showDialog ()V\n   L2\n    LINENUMBER 48 L2\n    RETURN\n   L3\n    LOCALVARIABLE this Lcom/basicres/ui/MainActiivty$onCreate$1; L0 L3 0\n    LOCALVARIABLE $this$setCallback Lcom/basicres/ui/Scope; L0 L3 1\n    LOCALVARIABLE it I L0 L3 2\n    MAXSTACK = 2\n    MAXLOCALS = 3\n```\n\n 我们只需要关注 `INVOKESTATIC` 也就是执行方法调用的指令,就不难发现, 最后确实是通过 Scope 调用了showDialog 方法,所以在 callback 中 this 已经转换为 Scope 了 .\n\n虽然一通分析差不多将过程捋清楚了,但是这个通过别名来创建扩展函数且能通过这种方式强化 callback 的语法还是不知道出处.最后抱着试试看的形态去找了官方文档,没想到还真找到了.... 下边是原文,我直接摘抄了方便查看\n\n> ### 函数类型实例调用\n>\n> 函数类型的值可以通过其 [`invoke(……)` 操作符](https://www.kotlincn.net/docs/reference/operator-overloading.html#invoke)调用：`f.invoke(x)` 或者直接 `f(x)`。\n>\n> 如果该值具有接收者类型，那么应该将接收者对象作为第一个参数传递。 调用带有接收者的函数类型值的另一个方式是在其前面加上接收者对象， 就好比该值是一个[扩展函数](https://www.kotlincn.net/docs/reference/extensions.html)：`1.foo(2)`，\n>\n> 例如:\n>\n> ```kotlin\n> val stringPlus: (String, String) -> String = String::plus\n> val intPlus: Int.(Int) -> Int = Int::plus\n> \n> println(stringPlus.invoke(\"<-\", \"->\"))\n> println(stringPlus(\"Hello, \", \"world!\")) \n> \n> println(intPlus.invoke(1, 1))\n> println(intPlus(1, 2))\n> println(2.intPlus(3)) // 类扩展调用\n> \n> ```\n\n可以看到官方文档中的函数类型调用的例子,之前也完整的阅读过官方文档,但这种操作符基本都是一掠而过,虽然网上都把官方文档是一手资料,但之前一直把各路文档当作入门资料罢了.经此事后需要对官方文档改变心态.\n\nps: 郭霖大佬对语言的理解确实是非常深奥, 别名和扩展调用虽然都是挺常用的使用手法, 但是通过别名加类扩展调用从而将放大扩展函数功能性(`Scope` 的创建是需要条件的,它并不适用于匿名创建)的手法,称得上十分精妙了.\n\n","slug":"2020-05-22-note_wiki_widget","published":1,"updated":"2024-09-13T03:38:13.730Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pf0014s2y43mnm630y","content":"<p>今天发生了两件事情,解决方法倒是殊途同亏,都是通过官方文档来解决的.事后回想下来也有总结的必要,在这里聊两句.</p>\n<p>一是在看 elm 开源项目源码的时候发现了一个挺奇怪的语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">USERINFO</span> =“userInfo”;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t[<span class=\"variable constant_\">USERINFO</span>](&#123;commit,state&#125;)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;xxx&quot;</span>,xx);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>函数中间和逻辑倒是没什么好讨论的,但是函数面前加了一个数组变量,这倒是让我有点晕了,百思不得其解这是什么操作,函数不像函数 变量不像变量的.使用 <code>node</code> <code>babel</code> 去解释这个函数也无法解释,搜索也不知从何下手,最后求助于万能的群友.群友发来百度知道的链接(没想到呀,百度知道竟然有正儿八经的回答),发现这是一个 ES5 时将方法命名的操作,因为在 es6 之前属性的名称不能是一个变量,所以通过类似的包装方法达成目的,解构出来其实是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"variable constant_\">USERINFO</span>]:<span class=\"keyword\">function</span>(<span class=\"params\">&#123;commit,staet&#125;</span>)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;xxx&quot;</span>,xxx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里其实还好,只能说不会表达导致搜索不到.但是可笑的这个在 vuex 的官方文档中是明明白白的写有例子的.</p>\n<p>第二个是朋友突然找我看郭霖大佬前不久写的一个权限框架中的 一个kotlin 语法糖,为了方便我写了伪代码如下:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Scope</span>(params: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showDialog</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//部分逻辑</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;this is dialog&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> Callback = Scope.(count: <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Permission</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> scope = Scope(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> callback: Callback? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setCallback</span><span class=\"params\">(callback: <span class=\"type\">Callback</span>)</span></span>: Permission &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callback = callback</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">request</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//.... 业务逻辑</span></span><br><span class=\"line\">       <span class=\"comment\">// 执行 callback</span></span><br><span class=\"line\">        callback?.let &#123;</span><br><span class=\"line\">            scope.it(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActiivty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Permission()</span><br><span class=\"line\">            .setCallback &#123;</span><br><span class=\"line\">                <span class=\"comment\">//....逻辑代码</span></span><br><span class=\"line\">                <span class=\"comment\">// ... 匿名函数中直接调用了 showDialog 方法</span></span><br><span class=\"line\">                showDialog()</span><br><span class=\"line\">            &#125;.request()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>库的名字叫做 <a href=\"https://github.com/guolindev/PermissionX\">PermissionX</a>,想了解具体代码和设计的可以去看看,当时看了一下挺惊奇 <code>showDialog</code> 可以直接在一个匿名 Function 里可以调起.虽然大致思路可以根据经验略猜一二(别名方法申明的时候定义了一个扩展函数,然后调用的 callback 的时候是在 <code>scope</code> 的 <code>context</code> 中运作的).之后先根据 kotlin convert java 来看也确实如此:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Permission.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Permission</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Scope</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scope</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Function2 callback;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Permission <span class=\"title function_\">setCallback</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Function2 callback)</span> &#123;</span><br><span class=\"line\">      Intrinsics.checkParameterIsNotNull(callback, <span class=\"string\">&quot;callback&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callback = callback;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Function2</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.callback;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"type\">Function2</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> var10000;</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">var3</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">         var1.invoke(<span class=\"built_in\">this</span>.scope, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MainActiivty.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActiivty</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// calback 部分无法转译</span></span><br><span class=\"line\">      (<span class=\"keyword\">new</span> <span class=\"title class_\">Permission</span>()).setCallback((Function2)<span class=\"literal\">null</span>.INSTANCE).request();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scope.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scope</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDialog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;this is dialog&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      System.out.print(var1);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Scope</span><span class=\"params\">(<span class=\"type\">int</span> params)</span> &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到别名创建的 callback 被转译成了  kotlin 库中 <code>Function2</code> 也就是该函数接受两个参数. 最后在 <code>request</code> 时 callback 通过 <code>invkoe</code> 操作符调用了自身,传递了 Context <code>Scope</code> 和 Param <code>1</code>  , 如果了解扩展函数的具体实现就会发现,这和扩展函数是一样的 , 扩展函数在编译后会转换为静态方法,被扩展的对象会被当作参数 <code>this</code> 传入静态函数,我们可以给 Permisson 增加一个扩展函数 <code>test</code> 它转译后如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T.kt</span></span><br><span class=\"line\"></span><br><span class=\"line\">fun Permission.text()&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TKt.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TKt</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Permission $<span class=\"built_in\">this</span>$test)</span> &#123;</span><br><span class=\"line\">      Intrinsics.checkParameterIsNotNull($<span class=\"built_in\">this</span>$test, <span class=\"string\">&quot;$this$test&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于 invoke 内部具体是如何执行的,这里 java 代码虽然看不到,但是伪 bytecode 也可以让我们一探究竟</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// access flags 0x11</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"title function_\">invoke</span><span class=\"params\">(Lcom/xcar/basicres/ui/Scope;I)</span>V</span><br><span class=\"line\">    <span class=\"comment\">// annotable parameter count: 2 (visible)</span></span><br><span class=\"line\">    <span class=\"comment\">// annotable parameter count: 2 (invisible)</span></span><br><span class=\"line\">    <span class=\"meta\">@Lorg</span>/jetbrains/annotations/NotNull;() <span class=\"comment\">// invisible, parameter 0</span></span><br><span class=\"line\">   L0</span><br><span class=\"line\">    ALOAD <span class=\"number\">1</span></span><br><span class=\"line\">    LDC <span class=\"string\">&quot;$receiver&quot;</span></span><br><span class=\"line\">    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V</span><br><span class=\"line\">   L1</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">47</span> L1</span><br><span class=\"line\">    ALOAD <span class=\"number\">1</span></span><br><span class=\"line\">    INVOKEVIRTUAL com/xcar/basicres/ui/Scope.showDialog ()V</span><br><span class=\"line\">   L2</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">48</span> L2</span><br><span class=\"line\">    RETURN</span><br><span class=\"line\">   L3</span><br><span class=\"line\">    LOCALVARIABLE <span class=\"built_in\">this</span> Lcom/basicres/ui/MainActiivty$onCreate$<span class=\"number\">1</span>; L0 L3 <span class=\"number\">0</span></span><br><span class=\"line\">    LOCALVARIABLE $<span class=\"built_in\">this</span>$setCallback Lcom/basicres/ui/Scope; L0 L3 <span class=\"number\">1</span></span><br><span class=\"line\">    LOCALVARIABLE it I L0 L3 <span class=\"number\">2</span></span><br><span class=\"line\">    MAXSTACK = <span class=\"number\">2</span></span><br><span class=\"line\">    MAXLOCALS = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p> 我们只需要关注 <code>INVOKESTATIC</code> 也就是执行方法调用的指令,就不难发现, 最后确实是通过 Scope 调用了showDialog 方法,所以在 callback 中 this 已经转换为 Scope 了 .</p>\n<p>虽然一通分析差不多将过程捋清楚了,但是这个通过别名来创建扩展函数且能通过这种方式强化 callback 的语法还是不知道出处.最后抱着试试看的形态去找了官方文档,没想到还真找到了…. 下边是原文,我直接摘抄了方便查看</p>\n<blockquote>\n<h3 id=\"函数类型实例调用\"><a href=\"#函数类型实例调用\" class=\"headerlink\" title=\"函数类型实例调用\"></a>函数类型实例调用</h3><p>函数类型的值可以通过其 <a href=\"https://www.kotlincn.net/docs/reference/operator-overloading.html#invoke\"><code>invoke(……)</code> 操作符</a>调用：<code>f.invoke(x)</code> 或者直接 <code>f(x)</code>。</p>\n<p>如果该值具有接收者类型，那么应该将接收者对象作为第一个参数传递。 调用带有接收者的函数类型值的另一个方式是在其前面加上接收者对象， 就好比该值是一个<a href=\"https://www.kotlincn.net/docs/reference/extensions.html\">扩展函数</a>：<code>1.foo(2)</code>，</p>\n<p>例如:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> stringPlus: (String, String) -&gt; String = String::plus</span><br><span class=\"line\"><span class=\"keyword\">val</span> intPlus: <span class=\"built_in\">Int</span>.(<span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = <span class=\"built_in\">Int</span>::plus</span><br><span class=\"line\"></span><br><span class=\"line\">println(stringPlus.invoke(<span class=\"string\">&quot;&lt;-&quot;</span>, <span class=\"string\">&quot;-&gt;&quot;</span>))</span><br><span class=\"line\">println(stringPlus(<span class=\"string\">&quot;Hello, &quot;</span>, <span class=\"string\">&quot;world!&quot;</span>)) </span><br><span class=\"line\"></span><br><span class=\"line\">println(intPlus.invoke(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">println(intPlus(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">println(<span class=\"number\">2.</span>intPlus(<span class=\"number\">3</span>)) <span class=\"comment\">// 类扩展调用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>可以看到官方文档中的函数类型调用的例子,之前也完整的阅读过官方文档,但这种操作符基本都是一掠而过,虽然网上都把官方文档是一手资料,但之前一直把各路文档当作入门资料罢了.经此事后需要对官方文档改变心态.</p>\n<p>ps: 郭霖大佬对语言的理解确实是非常深奥, 别名和扩展调用虽然都是挺常用的使用手法, 但是通过别名加类扩展调用从而将放大扩展函数功能性(<code>Scope</code> 的创建是需要条件的,它并不适用于匿名创建)的手法,称得上十分精妙了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天发生了两件事情,解决方法倒是殊途同亏,都是通过官方文档来解决的.事后回想下来也有总结的必要,在这里聊两句.</p>\n<p>一是在看 elm 开源项目源码的时候发现了一个挺奇怪的语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">USERINFO</span> =“userInfo”;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t[<span class=\"variable constant_\">USERINFO</span>](&#123;commit,state&#125;)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;xxx&quot;</span>,xx);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>函数中间和逻辑倒是没什么好讨论的,但是函数面前加了一个数组变量,这倒是让我有点晕了,百思不得其解这是什么操作,函数不像函数 变量不像变量的.使用 <code>node</code> <code>babel</code> 去解释这个函数也无法解释,搜索也不知从何下手,最后求助于万能的群友.群友发来百度知道的链接(没想到呀,百度知道竟然有正儿八经的回答),发现这是一个 ES5 时将方法命名的操作,因为在 es6 之前属性的名称不能是一个变量,所以通过类似的包装方法达成目的,解构出来其实是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"variable constant_\">USERINFO</span>]:<span class=\"keyword\">function</span>(<span class=\"params\">&#123;commit,staet&#125;</span>)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;xxx&quot;</span>,xxx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里其实还好,只能说不会表达导致搜索不到.但是可笑的这个在 vuex 的官方文档中是明明白白的写有例子的.</p>\n<p>第二个是朋友突然找我看郭霖大佬前不久写的一个权限框架中的 一个kotlin 语法糖,为了方便我写了伪代码如下:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Scope</span>(params: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showDialog</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//部分逻辑</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;this is dialog&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> Callback = Scope.(count: <span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Permission</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> scope = Scope(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> callback: Callback? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setCallback</span><span class=\"params\">(callback: <span class=\"type\">Callback</span>)</span></span>: Permission &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callback = callback</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">request</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//.... 业务逻辑</span></span><br><span class=\"line\">       <span class=\"comment\">// 执行 callback</span></span><br><span class=\"line\">        callback?.let &#123;</span><br><span class=\"line\">            scope.it(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActiivty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Permission()</span><br><span class=\"line\">            .setCallback &#123;</span><br><span class=\"line\">                <span class=\"comment\">//....逻辑代码</span></span><br><span class=\"line\">                <span class=\"comment\">// ... 匿名函数中直接调用了 showDialog 方法</span></span><br><span class=\"line\">                showDialog()</span><br><span class=\"line\">            &#125;.request()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>库的名字叫做 <a href=\"https://github.com/guolindev/PermissionX\">PermissionX</a>,想了解具体代码和设计的可以去看看,当时看了一下挺惊奇 <code>showDialog</code> 可以直接在一个匿名 Function 里可以调起.虽然大致思路可以根据经验略猜一二(别名方法申明的时候定义了一个扩展函数,然后调用的 callback 的时候是在 <code>scope</code> 的 <code>context</code> 中运作的).之后先根据 kotlin convert java 来看也确实如此:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Permission.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Permission</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Scope</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scope</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Function2 callback;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Permission <span class=\"title function_\">setCallback</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Function2 callback)</span> &#123;</span><br><span class=\"line\">      Intrinsics.checkParameterIsNotNull(callback, <span class=\"string\">&quot;callback&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callback = callback;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Function2</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.callback;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"type\">Function2</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> var10000;</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">var3</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">         var1.invoke(<span class=\"built_in\">this</span>.scope, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MainActiivty.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActiivty</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// calback 部分无法转译</span></span><br><span class=\"line\">      (<span class=\"keyword\">new</span> <span class=\"title class_\">Permission</span>()).setCallback((Function2)<span class=\"literal\">null</span>.INSTANCE).request();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Scope.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scope</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDialog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;this is dialog&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      System.out.print(var1);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Scope</span><span class=\"params\">(<span class=\"type\">int</span> params)</span> &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到别名创建的 callback 被转译成了  kotlin 库中 <code>Function2</code> 也就是该函数接受两个参数. 最后在 <code>request</code> 时 callback 通过 <code>invkoe</code> 操作符调用了自身,传递了 Context <code>Scope</code> 和 Param <code>1</code>  , 如果了解扩展函数的具体实现就会发现,这和扩展函数是一样的 , 扩展函数在编译后会转换为静态方法,被扩展的对象会被当作参数 <code>this</code> 传入静态函数,我们可以给 Permisson 增加一个扩展函数 <code>test</code> 它转译后如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T.kt</span></span><br><span class=\"line\"></span><br><span class=\"line\">fun Permission.text()&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TKt.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TKt</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Permission $<span class=\"built_in\">this</span>$test)</span> &#123;</span><br><span class=\"line\">      Intrinsics.checkParameterIsNotNull($<span class=\"built_in\">this</span>$test, <span class=\"string\">&quot;$this$test&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于 invoke 内部具体是如何执行的,这里 java 代码虽然看不到,但是伪 bytecode 也可以让我们一探究竟</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// access flags 0x11</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"title function_\">invoke</span><span class=\"params\">(Lcom/xcar/basicres/ui/Scope;I)</span>V</span><br><span class=\"line\">    <span class=\"comment\">// annotable parameter count: 2 (visible)</span></span><br><span class=\"line\">    <span class=\"comment\">// annotable parameter count: 2 (invisible)</span></span><br><span class=\"line\">    <span class=\"meta\">@Lorg</span>/jetbrains/annotations/NotNull;() <span class=\"comment\">// invisible, parameter 0</span></span><br><span class=\"line\">   L0</span><br><span class=\"line\">    ALOAD <span class=\"number\">1</span></span><br><span class=\"line\">    LDC <span class=\"string\">&quot;$receiver&quot;</span></span><br><span class=\"line\">    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V</span><br><span class=\"line\">   L1</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">47</span> L1</span><br><span class=\"line\">    ALOAD <span class=\"number\">1</span></span><br><span class=\"line\">    INVOKEVIRTUAL com/xcar/basicres/ui/Scope.showDialog ()V</span><br><span class=\"line\">   L2</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">48</span> L2</span><br><span class=\"line\">    RETURN</span><br><span class=\"line\">   L3</span><br><span class=\"line\">    LOCALVARIABLE <span class=\"built_in\">this</span> Lcom/basicres/ui/MainActiivty$onCreate$<span class=\"number\">1</span>; L0 L3 <span class=\"number\">0</span></span><br><span class=\"line\">    LOCALVARIABLE $<span class=\"built_in\">this</span>$setCallback Lcom/basicres/ui/Scope; L0 L3 <span class=\"number\">1</span></span><br><span class=\"line\">    LOCALVARIABLE it I L0 L3 <span class=\"number\">2</span></span><br><span class=\"line\">    MAXSTACK = <span class=\"number\">2</span></span><br><span class=\"line\">    MAXLOCALS = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p> 我们只需要关注 <code>INVOKESTATIC</code> 也就是执行方法调用的指令,就不难发现, 最后确实是通过 Scope 调用了showDialog 方法,所以在 callback 中 this 已经转换为 Scope 了 .</p>\n<p>虽然一通分析差不多将过程捋清楚了,但是这个通过别名来创建扩展函数且能通过这种方式强化 callback 的语法还是不知道出处.最后抱着试试看的形态去找了官方文档,没想到还真找到了…. 下边是原文,我直接摘抄了方便查看</p>\n<blockquote>\n<h3 id=\"函数类型实例调用\"><a href=\"#函数类型实例调用\" class=\"headerlink\" title=\"函数类型实例调用\"></a>函数类型实例调用</h3><p>函数类型的值可以通过其 <a href=\"https://www.kotlincn.net/docs/reference/operator-overloading.html#invoke\"><code>invoke(……)</code> 操作符</a>调用：<code>f.invoke(x)</code> 或者直接 <code>f(x)</code>。</p>\n<p>如果该值具有接收者类型，那么应该将接收者对象作为第一个参数传递。 调用带有接收者的函数类型值的另一个方式是在其前面加上接收者对象， 就好比该值是一个<a href=\"https://www.kotlincn.net/docs/reference/extensions.html\">扩展函数</a>：<code>1.foo(2)</code>，</p>\n<p>例如:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> stringPlus: (String, String) -&gt; String = String::plus</span><br><span class=\"line\"><span class=\"keyword\">val</span> intPlus: <span class=\"built_in\">Int</span>.(<span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span> = <span class=\"built_in\">Int</span>::plus</span><br><span class=\"line\"></span><br><span class=\"line\">println(stringPlus.invoke(<span class=\"string\">&quot;&lt;-&quot;</span>, <span class=\"string\">&quot;-&gt;&quot;</span>))</span><br><span class=\"line\">println(stringPlus(<span class=\"string\">&quot;Hello, &quot;</span>, <span class=\"string\">&quot;world!&quot;</span>)) </span><br><span class=\"line\"></span><br><span class=\"line\">println(intPlus.invoke(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">println(intPlus(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">println(<span class=\"number\">2.</span>intPlus(<span class=\"number\">3</span>)) <span class=\"comment\">// 类扩展调用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>可以看到官方文档中的函数类型调用的例子,之前也完整的阅读过官方文档,但这种操作符基本都是一掠而过,虽然网上都把官方文档是一手资料,但之前一直把各路文档当作入门资料罢了.经此事后需要对官方文档改变心态.</p>\n<p>ps: 郭霖大佬对语言的理解确实是非常深奥, 别名和扩展调用虽然都是挺常用的使用手法, 但是通过别名加类扩展调用从而将放大扩展函数功能性(<code>Scope</code> 的创建是需要条件的,它并不适用于匿名创建)的手法,称得上十分精妙了.</p>\n"},{"layout":"post","title":"Android自定义注解","subtitle":"\"day day up\"","date":"2017-02-06T08:14:12.000Z","atuhor":"chenzhaojun","header_image":"img/home-bg-o.jpg","_content":"\n\n\n[TOC]\n\n## 原注解\n\n原注解的作用就是负责注解其他注解，Java5.0提供了四种meta-annotation,用来提供annotation类型的说明。\n\n**java.lang.annotation**\n\n- @Target\n- @Retention\n- @Document\n- @inhrited\n\n### @Target\n\n作用 :  **用于描述注解的使用范围**\n\n**ElementType**取值 :  \n\n1. **CONSTRUCTOR** :  用于描述构造器\n2. **FIELD** : 用于描述域\n3. **LOCAL_VARIABLE**  :  用于描述局部变量\n4. **METHOD** :  用于描述方法\n5. **PACKAGE** :  用于描述包\n6. **PARAMETER** :  用于描述参数\n7. **TYPE** :  用于描述类、接口（包括注解类型）或enum类型声明\n\n像现在我们声明一个`Name`注解，声明的`Target`范围是`TYPE`，也就是说该注解只能在类、接口以及枚举中声明,当我们在其他场景如方法、变量中声明该注解,IDE就会报错。\n\n```java\n@Target(ElementType.TYPE)\npublic @interface Name {\n    String value() default \"\";\n}\n```\n\n\n\n### @Retention\n\n作用 :  **用于描述注解的生命周期**\n\n表明该注解在程序哪一阶段还保留在代码中,**RetentionPoicy**的取值范围 :  \n\n- **SOURCE** :  在源文件中保留，即生成.class后该注解就已经没有在文件中了。\n- **CLASS** :  在Class文件中保留。\n- **RUNTIME** :  在编译阶段也保留。\n\n我们使用自定义注解时一般使用`RUNTIME`，这样在运行阶段注解处理器就可以通过反射拿到该注解的属性，从而做一些操作。\n\n### @Document\n\n作用 :  **用于给Javadoc工具标记**\n\n`@Documented` 注解表明这个注解应该被 javadoc工具记录. 默认情况下,`javadoc`是不包括注解的. 但如果声明注解时指定了 `@Documented`,则它会被 `javadoc` 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中。\n\n\n\n### @Inherited\n\n作用 :  使用此注解声明出来的自定义注解，在使用此自定义注解时，如果注解在类上面时，子类会自动继承此注解，否则的话，子类不会继承此注解。这里一定要记住，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效。\n\n\n\n## 自定义注解\n\n### 使用规范\n\n- **成员参数** :  自定义注解的成员参数只能使用byte,short,char,int,long,float,double,boolean 八种基本数据类型 和 String,Enum,Class,annotations 等数据类型,以及这一些类型的数组。\n- **访问权限 **:  注解的成员变量只能使用`public`和默认的权限访问符来修饰。\n- **value** :  如果只有一个参数最好是将key的名称设置为`value`,这样我们使用注解时候`Annotation(key=Params)`和`Annotation(Params)`是等价的，而且后者更加的方便简介。\n- **注解元素的默认值** :  注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。\n\n\n\n### 注解处理类库(运行时注解)\n\n我们定义了注解，并且在给定了属性。肯定要在合适的环境去获取注解的属性来做一些操作。不然就是注释而不是注解了。\n\njava提供了`java.lang.reflect.AnnotatedElement`来帮助我们获取注解的信息，需要注意的是当我们想要读取一个注解时只有设置它的`@Retention`为`RUNTIME`时候我们才可以拿到，因为只有当`Class`被虚拟机装载的时候才其中的`Annotation`才可以被虚拟机拿到，这是阶段已经属于`RUNTIME`。\n\nAnnotatedElement主要的实现类 :  \n\n- **Class：**类定义\n- **Constructor：**构造器定义\n- **Field：**累的成员变量定义\n- **Method：**类的方法定义\n- **Package：**类的包定义\n\n**AnnotatedElement **接口提供了四个方法来访问`Annotation`的信息\n\n1. `<T extends Annotation> T getAnnotation(Class<?> annotationClass) `  :  返回程序元素中存在的、指定类型的注解，如果该注解不存在则返回`null`。\n2. `Annotation getAnnotation()` :  返回程序元素中所有存在的注解。\n3. `boolean is AnnotationPresent(Class<? extends Annotation> annotationClass)` :  判断程序元素中是否包含该注解。\n4. `Annotation[] getDeclaredAnnotations()` :  返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。\n\n### 实践\n\n我们通过一个小`demo`来实现注解的声明和使用。\n\n声明一个注解`@Name` :  \n\n```java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Name {\n    String value() default \"name\";\n}\n```\n\n定义一个加载名称的方法 :  \n\n```java\n    public static void loadName(Class<?> classz) {\n      //拿到类中的所有元素\n        Field[] fields = classz.getDeclaredFields();\n        for (Field field : fields) {\n          //判断是否有该注解\n            if (field.isAnnotationPresent(Name.class)) {\n              //获取该注解的属性\n                Name annotation = field.getAnnotation(Name.class);\n                System.err.println(annotation.value());\n            }\n        }\n    }\n```\n\n创建一个Human来测试 :  \n\n```java\npublic class Human {\n\n    @Name(\"小明\")\n    String FirstHuman;\n    @Name()\n    String SecondHuman;\n\n    public static void main(String[] args) {\n        Human.loadName(Human.class);\n    }\n\n    public static void loadName(Class<?> classz) {\n        Field[] fields = classz.getDeclaredFields();\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(Name.class)) {\n                Name annotation = field.getAnnotation(Name.class);\n                System.err.println(annotation.value());\n            }\n        }\n    }\n}\n\n```\n\n输出结果 :  \n\n```java\n小明\nname\n```\n\n可以看到和预期的一样，第二个元素没有指定vlue输出了default。这里我们就完成了简单的自定义注解。\n\n## 编译时注解\n\n自定义注解很常用的一个方式就是通过编译时注解来生产一些工具代码，提升开发效率。有很多第三方框架都使用了编译时注解，例如：\n\n- butterknife 自动生成View初始化和事件绑定的代码\n- EventBus3.0+ 方便实现通讯，通过注解自动把需要通讯的方法标识配置和注册\n- fragmenttargs 通过注解轻松的配置 Fragment\n\n除了第三方库之外，我们也可以自己通过编译时注解来帮助我们完成一些日常重复编码的工作。\n\n我们通过实现一个简单版本的 ButterKinfe 来学习和了解编译时注解。\n\n###定义自定义注解\n\n创建一个 java-library 来放置我们定义的自定义注解\n\n创建一个注解类 BindView ,声明它的生命周期：\n\n```java\n@Target(ElementType.FIELD) //修饰成员变量\n@Retention(RetentionPolicy.CLASS) //在编译时保留\npublic @interface BindView {\n    @IdRes int value(); //通过annotation 库的 @IdRes 限定Value只能为资源ID\n}\n\n```\n\n这样一个自定义注解就完成了\n\n###处理注解\n\n####注解处理器环境搭建\n\n创建一个 java-library 来放置注解处理器。\n\n编译时注解需要用到注解处理器`processer`，使用它我们需要依赖`auto-service`这个类库\n\n```groovy\napi 'com.google.auto.service:auto-service:1.0-rc4'\n```\n\n其次我们需要通过注解处理生成中间类，来完成将 View 和成员变量绑定的操作。我们通过 `javapoet`这个库来方便完成，当然也可以通过手写代码的方式来完成。\n\n```groovy\napi 'com.squareup:javapoet:1.10.0'\n```\n\n创建一个类继承`AbstractProcessor`类并通过`@AutoService`声明实现的接口,之后我们需要实现具体的`process`方法，这里也是我们处理注解的核心部分，需要的注意的是这个方法可能会被多次调用，需要做好去重的准备。\n\n```java\n@AutoService(Processor.class)\npublic class ViewAnnotationProcessor extends AbstractProcessor {\n       @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        \n    }\n}\n```\n\n在处理注解前还有一些小工作要做，我们需要配置声明这个注解处理器的所需要处理的注解和支持的源码版本。有两种方式实现：\n\n- 注解，可以通过注解`SupportAnnotationTypes`配置我们需要处理的注解，`SupportSourceVersion ` 配置需要处理的 Java 源版本：\n\n  ```java\n  @AutoService(Processor.class)\n  @SupportAnnotationTypes({\"com.example.annotation_compiler.BindView\"})\n  @SupportSourceVersion(SourceVersion.RELEASE_7)\n  public class ViewAnnotationProcessor extends AbstractProcessor {\n      ...\n  }\n  ```\n\n- 重写 `getSupportedAnnotationTypes()`和`getSupportedSourceVersion方法`：\n\n  ```java\n      @Override\n      public Set<String> getSupportedAnnotationTypes() {\n          /*\n            tips: getCanonicalName 和 Name 、SimpleName 的区别\n            SimpleName 只会返回该类的简称\n            getName和getCanonicalName在大多情况下没有区别 它们都都返回 Class 的全类名，\n            但在内部类和数组的时候 返回的 Name 形式则不同。\n           */\n          Set<String> set = new HashSet<>(1);\n          set.add(BindView.class.getCanonicalName());\n          return set;\n      }\n\n      @Override\n      public SourceVersion getSupportedSourceVersion() {\n          return SourceVersion.latestSupported();\n      }\n  ```\n\n最后我们重写 `init`  方法，它会在注解处理器被初始化的时候调用，它的参数 ProcessingEnvironment 提供了一系列的帮助类来帮助我们处理注解\n\n```java\n /**\n     * 初始化注解类方法\n     *\n     * @param processingEnvironment environment 提供了一系列帮助类\n     *                              Filer 文件相关的辅助类\n     *                              Elements 元素相关的辅助类\n     *                              Message 日志相关的辅助类\n     */\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        mFileUtils = processingEnvironment.getFiler();\n        mElementUtils = processingEnvironment.getElementUtils();\n        mMessager = processingEnvironment.getMessager();\n    }\n```\n\n#### 处理注解\n\n到此，我们的环境就搭建完成了。开始正式的处理注解，`prosser`方法大致分为两步骤：\n\n1. 收集信息，通过 element 获得我们注解的 value、class、variable 等信息存储起来\n2. 收集信息完毕后就可以开始我们的工作，这里我们就开始生成中间类。\n\n#### 收集信息\n\n这里先说明一下 Elment 。注解取得的元素都以 Element 等待处理，它的具体类型与我们通过@Targe 来标记的具有一定的联系，它有以下几个子类：\n\n- VariableElement 表示一个局部变量、枚举、方法或构造函数、\n- ExecutableElement 表示某个类或接口的方法、构造方法和注释类型元素\n- TypeElement 表示一个类或者接口\n- PackageElement 表示一个包元素\n\n可以通过 ElementKind.XXX 来判断元素的具体类型。\n\n通过一个 map 来存放收集到的信息，ProxyInfo 为存放信息的集合和处理 elment 的地方，稍后再讲解。\n\n```java\nprivate Map<String, ProxyInfo> mProxyMap = new HashMap<>();\n public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        mProxyMap.clear();\n        //拿到注解的元素\n        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);\n\n        for (Element element : elements) {\n            if (!checkAnnotationUseValid(element, BindView.class)) {\n                return false;\n            }\n            //代表被注解的元素成员变量\n            VariableElement variableElement = (VariableElement) element;\n            //代表被注解的元素所在的class\n            TypeElement typeElement = (TypeElement) variableElement.getEnclosingElement();\n            //拿到class的完整路径\n            String qualifiedName = typeElement.getQualifiedName().toString();\n            //装载信息\n            ProxyInfo info = mProxyMap.get(qualifiedName);\n            if (info == null) {\n                info = new ProxyInfo(mElementUtils, typeElement);\n                mProxyMap.put(qualifiedName, info);\n            }\n            int id = variableElement.getAnnotation(BindView.class).value();\n            info.injectVariables.put(id, variableElement);\n        }\n        ...\n        return true;\n    }\n```\n\n通过`getElementsAnnotatedWith`方法拿到注解的元素合集，然后循环遍历通过 element 获得相关的信息装载 ProxyInfo 。\n\n#### 生成代理类\n\n```java\n\n    private void writeToFile() {\n        for (String className : mProxyMap.keySet()) {\n            ProxyInfo proxyInfo = mProxyMap.get(className);\n            //生成成员变量的复制语句 view=findViewById(id)\n            MethodSpec.Builder elementStatement = proxyInfo.markElementStatement();\n            //构建 class\n            TypeSpec typeSpec = TypeSpec.classBuilder(proxyInfo.typeElement.getSimpleName() + \"_ViewBinding\")\n                    .addModifiers(Modifier.PUBLIC)\n                    .addMethod(elementStatement.build())\n                    .build();\n            //将 class 文件放置在目标class同一个包下，解决访问性的问题\n            String packageFullName = mElementUtils.getPackageOf(proxyInfo.typeElement).getQualifiedName().toString();\n            JavaFile javaFile = JavaFile.builder(packageFullName, typeSpec).build();\n            try {\n                javaFile.writeTo(mFileUtils);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n```\n\n这里我们主要通过 遍历所有的元素集来生成代理类。\n\n通过`proxyInfo.markElementStatement()` 方法来生成具体的赋值语句然后打包成一个方法。\n\n通过 `javapoet` 声明一个代理类，将方法放置在类中。\n\n最后通过将代理类生成在和目标文件同一个包下，到这里就完成了所有的操作。\n\n`markElementStatement()`的具体实现：\n\n```java\npublic MethodSpec.Builder markElementStatement() {\n        ParameterSpec.Builder paramsBuilder = ParameterSpec.builder(TypeName.get(typeElement.asType()), \"target\");\n        MethodSpec.Builder methodBuilder = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(paramsBuilder.build());\n        for (Integer id : injectVariables.keySet()) {\n            VariableElement variableElement = injectVariables.get(id);\n            //变量名称\n            String variableName = variableElement.getSimpleName().toString();\n            //变量的完整名称\n            String canonicalName = variableElement.asType().toString();\n            //在构造方法中添加赋值语句\n            methodBuilder.addStatement(\"target.$L=($L) activity.findViewById($L)\", variableName, canonicalName, id);\n        }\n        return methodBuilder;\n    }\n```\n\n#### Api编写\n\n注解处理完后，我们就需要 api 来调用这个代理类，将 View 通过代理类赋值。就像 `ButterKinfe.bind(target)`这样。\n\n同样我们再声明一个 Android-module 来声明编写 api。api  的实现很简单，我们通过反射调用生成的代理类，将 Activity 当做参数传递进去即可。当然如果要实际应用肯定需要要考虑更多，例如缓存之类的，这里就只是简单的使用一下。\n\n```Java\npublic class InjectHelper {\n\n    public static void inject(Activity target) {\n        String classFullName = target.getClass().getName() + \"_ViewBinding\";\n        try {\n            Class proxy = Class.forName(classFullName);\n            Constructor constructor = proxy.getConstructor(target.getClass());\n            constructor.newInstance(target);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\t\t\t\n```\n\n最后我们的 demo 依赖这三个库，通过使用@BindView 注解然后 biuld app.就可以在 build/gennerated/source/apt/debug/com.xxx/ 目录下看到我们生成的代理类了。\n\n```java\npublic class MainActivity_ViewBinding {\n  public MainActivity_ViewBinding(MainActivity activity) {\n    activity.textView=(android.widget.TextView) activity.findViewById(2131165309);\n  }\n}\n```\n\n## 总结\n\n通过这篇文章，整理的自定义注解和编译时注解框架所需要的常用知识点，它们都有广泛的应用场景，这里只是介绍最简单明了的，主要是为了了解基于编译时注解框架的原理和实现方式。如果有机会，自己根据场景设计使用编译时注解框架是最好不过的了。","source":"_posts/2017-02-06-annotation.markdown","raw":"---\nlayout: post\ntitle: \"Android自定义注解\"\nsubtitle: \"\\\"day day up\\\"\"\ndate: 2017-02-06 16:14:12\natuhor: \"chenzhaojun\"\nheader_image: \"img/home-bg-o.jpg\"\ntags:\n    - Android\n---\n\n\n\n[TOC]\n\n## 原注解\n\n原注解的作用就是负责注解其他注解，Java5.0提供了四种meta-annotation,用来提供annotation类型的说明。\n\n**java.lang.annotation**\n\n- @Target\n- @Retention\n- @Document\n- @inhrited\n\n### @Target\n\n作用 :  **用于描述注解的使用范围**\n\n**ElementType**取值 :  \n\n1. **CONSTRUCTOR** :  用于描述构造器\n2. **FIELD** : 用于描述域\n3. **LOCAL_VARIABLE**  :  用于描述局部变量\n4. **METHOD** :  用于描述方法\n5. **PACKAGE** :  用于描述包\n6. **PARAMETER** :  用于描述参数\n7. **TYPE** :  用于描述类、接口（包括注解类型）或enum类型声明\n\n像现在我们声明一个`Name`注解，声明的`Target`范围是`TYPE`，也就是说该注解只能在类、接口以及枚举中声明,当我们在其他场景如方法、变量中声明该注解,IDE就会报错。\n\n```java\n@Target(ElementType.TYPE)\npublic @interface Name {\n    String value() default \"\";\n}\n```\n\n\n\n### @Retention\n\n作用 :  **用于描述注解的生命周期**\n\n表明该注解在程序哪一阶段还保留在代码中,**RetentionPoicy**的取值范围 :  \n\n- **SOURCE** :  在源文件中保留，即生成.class后该注解就已经没有在文件中了。\n- **CLASS** :  在Class文件中保留。\n- **RUNTIME** :  在编译阶段也保留。\n\n我们使用自定义注解时一般使用`RUNTIME`，这样在运行阶段注解处理器就可以通过反射拿到该注解的属性，从而做一些操作。\n\n### @Document\n\n作用 :  **用于给Javadoc工具标记**\n\n`@Documented` 注解表明这个注解应该被 javadoc工具记录. 默认情况下,`javadoc`是不包括注解的. 但如果声明注解时指定了 `@Documented`,则它会被 `javadoc` 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中。\n\n\n\n### @Inherited\n\n作用 :  使用此注解声明出来的自定义注解，在使用此自定义注解时，如果注解在类上面时，子类会自动继承此注解，否则的话，子类不会继承此注解。这里一定要记住，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效。\n\n\n\n## 自定义注解\n\n### 使用规范\n\n- **成员参数** :  自定义注解的成员参数只能使用byte,short,char,int,long,float,double,boolean 八种基本数据类型 和 String,Enum,Class,annotations 等数据类型,以及这一些类型的数组。\n- **访问权限 **:  注解的成员变量只能使用`public`和默认的权限访问符来修饰。\n- **value** :  如果只有一个参数最好是将key的名称设置为`value`,这样我们使用注解时候`Annotation(key=Params)`和`Annotation(Params)`是等价的，而且后者更加的方便简介。\n- **注解元素的默认值** :  注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。\n\n\n\n### 注解处理类库(运行时注解)\n\n我们定义了注解，并且在给定了属性。肯定要在合适的环境去获取注解的属性来做一些操作。不然就是注释而不是注解了。\n\njava提供了`java.lang.reflect.AnnotatedElement`来帮助我们获取注解的信息，需要注意的是当我们想要读取一个注解时只有设置它的`@Retention`为`RUNTIME`时候我们才可以拿到，因为只有当`Class`被虚拟机装载的时候才其中的`Annotation`才可以被虚拟机拿到，这是阶段已经属于`RUNTIME`。\n\nAnnotatedElement主要的实现类 :  \n\n- **Class：**类定义\n- **Constructor：**构造器定义\n- **Field：**累的成员变量定义\n- **Method：**类的方法定义\n- **Package：**类的包定义\n\n**AnnotatedElement **接口提供了四个方法来访问`Annotation`的信息\n\n1. `<T extends Annotation> T getAnnotation(Class<?> annotationClass) `  :  返回程序元素中存在的、指定类型的注解，如果该注解不存在则返回`null`。\n2. `Annotation getAnnotation()` :  返回程序元素中所有存在的注解。\n3. `boolean is AnnotationPresent(Class<? extends Annotation> annotationClass)` :  判断程序元素中是否包含该注解。\n4. `Annotation[] getDeclaredAnnotations()` :  返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。\n\n### 实践\n\n我们通过一个小`demo`来实现注解的声明和使用。\n\n声明一个注解`@Name` :  \n\n```java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Name {\n    String value() default \"name\";\n}\n```\n\n定义一个加载名称的方法 :  \n\n```java\n    public static void loadName(Class<?> classz) {\n      //拿到类中的所有元素\n        Field[] fields = classz.getDeclaredFields();\n        for (Field field : fields) {\n          //判断是否有该注解\n            if (field.isAnnotationPresent(Name.class)) {\n              //获取该注解的属性\n                Name annotation = field.getAnnotation(Name.class);\n                System.err.println(annotation.value());\n            }\n        }\n    }\n```\n\n创建一个Human来测试 :  \n\n```java\npublic class Human {\n\n    @Name(\"小明\")\n    String FirstHuman;\n    @Name()\n    String SecondHuman;\n\n    public static void main(String[] args) {\n        Human.loadName(Human.class);\n    }\n\n    public static void loadName(Class<?> classz) {\n        Field[] fields = classz.getDeclaredFields();\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(Name.class)) {\n                Name annotation = field.getAnnotation(Name.class);\n                System.err.println(annotation.value());\n            }\n        }\n    }\n}\n\n```\n\n输出结果 :  \n\n```java\n小明\nname\n```\n\n可以看到和预期的一样，第二个元素没有指定vlue输出了default。这里我们就完成了简单的自定义注解。\n\n## 编译时注解\n\n自定义注解很常用的一个方式就是通过编译时注解来生产一些工具代码，提升开发效率。有很多第三方框架都使用了编译时注解，例如：\n\n- butterknife 自动生成View初始化和事件绑定的代码\n- EventBus3.0+ 方便实现通讯，通过注解自动把需要通讯的方法标识配置和注册\n- fragmenttargs 通过注解轻松的配置 Fragment\n\n除了第三方库之外，我们也可以自己通过编译时注解来帮助我们完成一些日常重复编码的工作。\n\n我们通过实现一个简单版本的 ButterKinfe 来学习和了解编译时注解。\n\n###定义自定义注解\n\n创建一个 java-library 来放置我们定义的自定义注解\n\n创建一个注解类 BindView ,声明它的生命周期：\n\n```java\n@Target(ElementType.FIELD) //修饰成员变量\n@Retention(RetentionPolicy.CLASS) //在编译时保留\npublic @interface BindView {\n    @IdRes int value(); //通过annotation 库的 @IdRes 限定Value只能为资源ID\n}\n\n```\n\n这样一个自定义注解就完成了\n\n###处理注解\n\n####注解处理器环境搭建\n\n创建一个 java-library 来放置注解处理器。\n\n编译时注解需要用到注解处理器`processer`，使用它我们需要依赖`auto-service`这个类库\n\n```groovy\napi 'com.google.auto.service:auto-service:1.0-rc4'\n```\n\n其次我们需要通过注解处理生成中间类，来完成将 View 和成员变量绑定的操作。我们通过 `javapoet`这个库来方便完成，当然也可以通过手写代码的方式来完成。\n\n```groovy\napi 'com.squareup:javapoet:1.10.0'\n```\n\n创建一个类继承`AbstractProcessor`类并通过`@AutoService`声明实现的接口,之后我们需要实现具体的`process`方法，这里也是我们处理注解的核心部分，需要的注意的是这个方法可能会被多次调用，需要做好去重的准备。\n\n```java\n@AutoService(Processor.class)\npublic class ViewAnnotationProcessor extends AbstractProcessor {\n       @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        \n    }\n}\n```\n\n在处理注解前还有一些小工作要做，我们需要配置声明这个注解处理器的所需要处理的注解和支持的源码版本。有两种方式实现：\n\n- 注解，可以通过注解`SupportAnnotationTypes`配置我们需要处理的注解，`SupportSourceVersion ` 配置需要处理的 Java 源版本：\n\n  ```java\n  @AutoService(Processor.class)\n  @SupportAnnotationTypes({\"com.example.annotation_compiler.BindView\"})\n  @SupportSourceVersion(SourceVersion.RELEASE_7)\n  public class ViewAnnotationProcessor extends AbstractProcessor {\n      ...\n  }\n  ```\n\n- 重写 `getSupportedAnnotationTypes()`和`getSupportedSourceVersion方法`：\n\n  ```java\n      @Override\n      public Set<String> getSupportedAnnotationTypes() {\n          /*\n            tips: getCanonicalName 和 Name 、SimpleName 的区别\n            SimpleName 只会返回该类的简称\n            getName和getCanonicalName在大多情况下没有区别 它们都都返回 Class 的全类名，\n            但在内部类和数组的时候 返回的 Name 形式则不同。\n           */\n          Set<String> set = new HashSet<>(1);\n          set.add(BindView.class.getCanonicalName());\n          return set;\n      }\n\n      @Override\n      public SourceVersion getSupportedSourceVersion() {\n          return SourceVersion.latestSupported();\n      }\n  ```\n\n最后我们重写 `init`  方法，它会在注解处理器被初始化的时候调用，它的参数 ProcessingEnvironment 提供了一系列的帮助类来帮助我们处理注解\n\n```java\n /**\n     * 初始化注解类方法\n     *\n     * @param processingEnvironment environment 提供了一系列帮助类\n     *                              Filer 文件相关的辅助类\n     *                              Elements 元素相关的辅助类\n     *                              Message 日志相关的辅助类\n     */\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        mFileUtils = processingEnvironment.getFiler();\n        mElementUtils = processingEnvironment.getElementUtils();\n        mMessager = processingEnvironment.getMessager();\n    }\n```\n\n#### 处理注解\n\n到此，我们的环境就搭建完成了。开始正式的处理注解，`prosser`方法大致分为两步骤：\n\n1. 收集信息，通过 element 获得我们注解的 value、class、variable 等信息存储起来\n2. 收集信息完毕后就可以开始我们的工作，这里我们就开始生成中间类。\n\n#### 收集信息\n\n这里先说明一下 Elment 。注解取得的元素都以 Element 等待处理，它的具体类型与我们通过@Targe 来标记的具有一定的联系，它有以下几个子类：\n\n- VariableElement 表示一个局部变量、枚举、方法或构造函数、\n- ExecutableElement 表示某个类或接口的方法、构造方法和注释类型元素\n- TypeElement 表示一个类或者接口\n- PackageElement 表示一个包元素\n\n可以通过 ElementKind.XXX 来判断元素的具体类型。\n\n通过一个 map 来存放收集到的信息，ProxyInfo 为存放信息的集合和处理 elment 的地方，稍后再讲解。\n\n```java\nprivate Map<String, ProxyInfo> mProxyMap = new HashMap<>();\n public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        mProxyMap.clear();\n        //拿到注解的元素\n        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);\n\n        for (Element element : elements) {\n            if (!checkAnnotationUseValid(element, BindView.class)) {\n                return false;\n            }\n            //代表被注解的元素成员变量\n            VariableElement variableElement = (VariableElement) element;\n            //代表被注解的元素所在的class\n            TypeElement typeElement = (TypeElement) variableElement.getEnclosingElement();\n            //拿到class的完整路径\n            String qualifiedName = typeElement.getQualifiedName().toString();\n            //装载信息\n            ProxyInfo info = mProxyMap.get(qualifiedName);\n            if (info == null) {\n                info = new ProxyInfo(mElementUtils, typeElement);\n                mProxyMap.put(qualifiedName, info);\n            }\n            int id = variableElement.getAnnotation(BindView.class).value();\n            info.injectVariables.put(id, variableElement);\n        }\n        ...\n        return true;\n    }\n```\n\n通过`getElementsAnnotatedWith`方法拿到注解的元素合集，然后循环遍历通过 element 获得相关的信息装载 ProxyInfo 。\n\n#### 生成代理类\n\n```java\n\n    private void writeToFile() {\n        for (String className : mProxyMap.keySet()) {\n            ProxyInfo proxyInfo = mProxyMap.get(className);\n            //生成成员变量的复制语句 view=findViewById(id)\n            MethodSpec.Builder elementStatement = proxyInfo.markElementStatement();\n            //构建 class\n            TypeSpec typeSpec = TypeSpec.classBuilder(proxyInfo.typeElement.getSimpleName() + \"_ViewBinding\")\n                    .addModifiers(Modifier.PUBLIC)\n                    .addMethod(elementStatement.build())\n                    .build();\n            //将 class 文件放置在目标class同一个包下，解决访问性的问题\n            String packageFullName = mElementUtils.getPackageOf(proxyInfo.typeElement).getQualifiedName().toString();\n            JavaFile javaFile = JavaFile.builder(packageFullName, typeSpec).build();\n            try {\n                javaFile.writeTo(mFileUtils);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n```\n\n这里我们主要通过 遍历所有的元素集来生成代理类。\n\n通过`proxyInfo.markElementStatement()` 方法来生成具体的赋值语句然后打包成一个方法。\n\n通过 `javapoet` 声明一个代理类，将方法放置在类中。\n\n最后通过将代理类生成在和目标文件同一个包下，到这里就完成了所有的操作。\n\n`markElementStatement()`的具体实现：\n\n```java\npublic MethodSpec.Builder markElementStatement() {\n        ParameterSpec.Builder paramsBuilder = ParameterSpec.builder(TypeName.get(typeElement.asType()), \"target\");\n        MethodSpec.Builder methodBuilder = MethodSpec.constructorBuilder()\n                .addModifiers(Modifier.PUBLIC)\n                .addParameter(paramsBuilder.build());\n        for (Integer id : injectVariables.keySet()) {\n            VariableElement variableElement = injectVariables.get(id);\n            //变量名称\n            String variableName = variableElement.getSimpleName().toString();\n            //变量的完整名称\n            String canonicalName = variableElement.asType().toString();\n            //在构造方法中添加赋值语句\n            methodBuilder.addStatement(\"target.$L=($L) activity.findViewById($L)\", variableName, canonicalName, id);\n        }\n        return methodBuilder;\n    }\n```\n\n#### Api编写\n\n注解处理完后，我们就需要 api 来调用这个代理类，将 View 通过代理类赋值。就像 `ButterKinfe.bind(target)`这样。\n\n同样我们再声明一个 Android-module 来声明编写 api。api  的实现很简单，我们通过反射调用生成的代理类，将 Activity 当做参数传递进去即可。当然如果要实际应用肯定需要要考虑更多，例如缓存之类的，这里就只是简单的使用一下。\n\n```Java\npublic class InjectHelper {\n\n    public static void inject(Activity target) {\n        String classFullName = target.getClass().getName() + \"_ViewBinding\";\n        try {\n            Class proxy = Class.forName(classFullName);\n            Constructor constructor = proxy.getConstructor(target.getClass());\n            constructor.newInstance(target);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\t\t\t\n```\n\n最后我们的 demo 依赖这三个库，通过使用@BindView 注解然后 biuld app.就可以在 build/gennerated/source/apt/debug/com.xxx/ 目录下看到我们生成的代理类了。\n\n```java\npublic class MainActivity_ViewBinding {\n  public MainActivity_ViewBinding(MainActivity activity) {\n    activity.textView=(android.widget.TextView) activity.findViewById(2131165309);\n  }\n}\n```\n\n## 总结\n\n通过这篇文章，整理的自定义注解和编译时注解框架所需要的常用知识点，它们都有广泛的应用场景，这里只是介绍最简单明了的，主要是为了了解基于编译时注解框架的原理和实现方式。如果有机会，自己根据场景设计使用编译时注解框架是最好不过的了。","slug":"2017-02-06-annotation","published":1,"updated":"2024-09-13T03:38:13.726Z","comments":1,"photos":[],"link":"","_id":"cm10dl6po001xs2y4ecv12sor","content":"<p>[TOC]</p>\n<h2 id=\"原注解\"><a href=\"#原注解\" class=\"headerlink\" title=\"原注解\"></a>原注解</h2><p>原注解的作用就是负责注解其他注解，Java5.0提供了四种meta-annotation,用来提供annotation类型的说明。</p>\n<p><strong>java.lang.annotation</strong></p>\n<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Document</li>\n<li>@inhrited</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>作用 :  <strong>用于描述注解的使用范围</strong></p>\n<p><strong>ElementType</strong>取值 :  </p>\n<ol>\n<li><strong>CONSTRUCTOR</strong> :  用于描述构造器</li>\n<li><strong>FIELD</strong> : 用于描述域</li>\n<li><strong>LOCAL_VARIABLE</strong>  :  用于描述局部变量</li>\n<li><strong>METHOD</strong> :  用于描述方法</li>\n<li><strong>PACKAGE</strong> :  用于描述包</li>\n<li><strong>PARAMETER</strong> :  用于描述参数</li>\n<li><strong>TYPE</strong> :  用于描述类、接口（包括注解类型）或enum类型声明</li>\n</ol>\n<p>像现在我们声明一个<code>Name</code>注解，声明的<code>Target</code>范围是<code>TYPE</code>，也就是说该注解只能在类、接口以及枚举中声明,当我们在其他场景如方法、变量中声明该注解,IDE就会报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Name &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><p>作用 :  <strong>用于描述注解的生命周期</strong></p>\n<p>表明该注解在程序哪一阶段还保留在代码中,<strong>RetentionPoicy</strong>的取值范围 :  </p>\n<ul>\n<li><strong>SOURCE</strong> :  在源文件中保留，即生成.class后该注解就已经没有在文件中了。</li>\n<li><strong>CLASS</strong> :  在Class文件中保留。</li>\n<li><strong>RUNTIME</strong> :  在编译阶段也保留。</li>\n</ul>\n<p>我们使用自定义注解时一般使用<code>RUNTIME</code>，这样在运行阶段注解处理器就可以通过反射拿到该注解的属性，从而做一些操作。</p>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"@Document\"></a>@Document</h3><p>作用 :  <strong>用于给Javadoc工具标记</strong></p>\n<p><code>@Documented</code> 注解表明这个注解应该被 javadoc工具记录. 默认情况下,<code>javadoc</code>是不包括注解的. 但如果声明注解时指定了 <code>@Documented</code>,则它会被 <code>javadoc</code> 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中。</p>\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>作用 :  使用此注解声明出来的自定义注解，在使用此自定义注解时，如果注解在类上面时，子类会自动继承此注解，否则的话，子类不会继承此注解。这里一定要记住，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效。</p>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><h3 id=\"使用规范\"><a href=\"#使用规范\" class=\"headerlink\" title=\"使用规范\"></a>使用规范</h3><ul>\n<li><strong>成员参数</strong> :  自定义注解的成员参数只能使用byte,short,char,int,long,float,double,boolean 八种基本数据类型 和 String,Enum,Class,annotations 等数据类型,以及这一些类型的数组。</li>\n<li>**访问权限 **:  注解的成员变量只能使用<code>public</code>和默认的权限访问符来修饰。</li>\n<li><strong>value</strong> :  如果只有一个参数最好是将key的名称设置为<code>value</code>,这样我们使用注解时候<code>Annotation(key=Params)</code>和<code>Annotation(Params)</code>是等价的，而且后者更加的方便简介。</li>\n<li><strong>注解元素的默认值</strong> :  注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。</li>\n</ul>\n<h3 id=\"注解处理类库-运行时注解\"><a href=\"#注解处理类库-运行时注解\" class=\"headerlink\" title=\"注解处理类库(运行时注解)\"></a>注解处理类库(运行时注解)</h3><p>我们定义了注解，并且在给定了属性。肯定要在合适的环境去获取注解的属性来做一些操作。不然就是注释而不是注解了。</p>\n<p>java提供了<code>java.lang.reflect.AnnotatedElement</code>来帮助我们获取注解的信息，需要注意的是当我们想要读取一个注解时只有设置它的<code>@Retention</code>为<code>RUNTIME</code>时候我们才可以拿到，因为只有当<code>Class</code>被虚拟机装载的时候才其中的<code>Annotation</code>才可以被虚拟机拿到，这是阶段已经属于<code>RUNTIME</code>。</p>\n<p>AnnotatedElement主要的实现类 :  </p>\n<ul>\n<li><strong>Class：</strong>类定义</li>\n<li><strong>Constructor：</strong>构造器定义</li>\n<li><strong>Field：</strong>累的成员变量定义</li>\n<li><strong>Method：</strong>类的方法定义</li>\n<li><strong>Package：</strong>类的包定义</li>\n</ul>\n<p>**AnnotatedElement **接口提供了四个方法来访问<code>Annotation</code>的信息</p>\n<ol>\n<li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;?&gt; annotationClass) </code>  :  返回程序元素中存在的、指定类型的注解，如果该注解不存在则返回<code>null</code>。</li>\n<li><code>Annotation getAnnotation()</code> :  返回程序元素中所有存在的注解。</li>\n<li><code>boolean is AnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code> :  判断程序元素中是否包含该注解。</li>\n<li><code>Annotation[] getDeclaredAnnotations()</code> :  返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。</li>\n</ol>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>我们通过一个小<code>demo</code>来实现注解的声明和使用。</p>\n<p>声明一个注解<code>@Name</code> :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Name &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个加载名称的方法 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadName</span><span class=\"params\">(Class&lt;?&gt; classz)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//拿到类中的所有元素</span></span><br><span class=\"line\">    Field[] fields = classz.getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//判断是否有该注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取该注解的属性</span></span><br><span class=\"line\">            <span class=\"type\">Name</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> field.getAnnotation(Name.class);</span><br><span class=\"line\">            System.err.println(annotation.value());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个Human来测试 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Name(&quot;小明&quot;)</span></span><br><span class=\"line\">    String FirstHuman;</span><br><span class=\"line\">    <span class=\"meta\">@Name()</span></span><br><span class=\"line\">    String SecondHuman;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Human.loadName(Human.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadName</span><span class=\"params\">(Class&lt;?&gt; classz)</span> &#123;</span><br><span class=\"line\">        Field[] fields = classz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class)) &#123;</span><br><span class=\"line\">                <span class=\"type\">Name</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> field.getAnnotation(Name.class);</span><br><span class=\"line\">                System.err.println(annotation.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br><span class=\"line\">name</span><br></pre></td></tr></table></figure>\n\n<p>可以看到和预期的一样，第二个元素没有指定vlue输出了default。这里我们就完成了简单的自定义注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>自定义注解很常用的一个方式就是通过编译时注解来生产一些工具代码，提升开发效率。有很多第三方框架都使用了编译时注解，例如：</p>\n<ul>\n<li>butterknife 自动生成View初始化和事件绑定的代码</li>\n<li>EventBus3.0+ 方便实现通讯，通过注解自动把需要通讯的方法标识配置和注册</li>\n<li>fragmenttargs 通过注解轻松的配置 Fragment</li>\n</ul>\n<p>除了第三方库之外，我们也可以自己通过编译时注解来帮助我们完成一些日常重复编码的工作。</p>\n<p>我们通过实现一个简单版本的 ButterKinfe 来学习和了解编译时注解。</p>\n<p>###定义自定义注解</p>\n<p>创建一个 java-library 来放置我们定义的自定义注解</p>\n<p>创建一个注解类 BindView ,声明它的生命周期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span> <span class=\"comment\">//修饰成员变量</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.CLASS)</span> <span class=\"comment\">//在编译时保留</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> BindView &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IdRes</span> <span class=\"type\">int</span> <span class=\"title function_\">value</span><span class=\"params\">()</span>; <span class=\"comment\">//通过annotation 库的 @IdRes 限定Value只能为资源ID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样一个自定义注解就完成了</p>\n<p>###处理注解</p>\n<p>####注解处理器环境搭建</p>\n<p>创建一个 java-library 来放置注解处理器。</p>\n<p>编译时注解需要用到注解处理器<code>processer</code>，使用它我们需要依赖<code>auto-service</code>这个类库</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api <span class=\"string\">&#x27;com.google.auto.service:auto-service:1.0-rc4&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>其次我们需要通过注解处理生成中间类，来完成将 View 和成员变量绑定的操作。我们通过 <code>javapoet</code>这个库来方便完成，当然也可以通过手写代码的方式来完成。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api <span class=\"string\">&#x27;com.squareup:javapoet:1.10.0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个类继承<code>AbstractProcessor</code>类并通过<code>@AutoService</code>声明实现的接口,之后我们需要实现具体的<code>process</code>方法，这里也是我们处理注解的核心部分，需要的注意的是这个方法可能会被多次调用，需要做好去重的准备。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoService(Processor.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProcessor</span> &#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在处理注解前还有一些小工作要做，我们需要配置声明这个注解处理器的所需要处理的注解和支持的源码版本。有两种方式实现：</p>\n<ul>\n<li><p>注解，可以通过注解<code>SupportAnnotationTypes</code>配置我们需要处理的注解，<code>SupportSourceVersion </code> 配置需要处理的 Java 源版本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoService(Processor.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SupportAnnotationTypes(&#123;&quot;com.example.annotation_compiler.BindView&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SupportSourceVersion(SourceVersion.RELEASE_7)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProcessor</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写 <code>getSupportedAnnotationTypes()</code>和<code>getSupportedSourceVersion方法</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title function_\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      tips: getCanonicalName 和 Name 、SimpleName 的区别</span></span><br><span class=\"line\"><span class=\"comment\">      SimpleName 只会返回该类的简称</span></span><br><span class=\"line\"><span class=\"comment\">      getName和getCanonicalName在大多情况下没有区别 它们都都返回 Class 的全类名，</span></span><br><span class=\"line\"><span class=\"comment\">      但在内部类和数组的时候 返回的 Name 形式则不同。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">    set.add(BindView.class.getCanonicalName());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> set;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title function_\">getSupportedSourceVersion</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SourceVersion.latestSupported();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>最后我们重写 <code>init</code>  方法，它会在注解处理器被初始化的时候调用，它的参数 ProcessingEnvironment 提供了一系列的帮助类来帮助我们处理注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 初始化注解类方法</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> processingEnvironment environment 提供了一系列帮助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Filer 文件相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Elements 元素相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Message 日志相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ProcessingEnvironment processingEnvironment)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.init(processingEnvironment);</span><br><span class=\"line\">       mFileUtils = processingEnvironment.getFiler();</span><br><span class=\"line\">       mElementUtils = processingEnvironment.getElementUtils();</span><br><span class=\"line\">       mMessager = processingEnvironment.getMessager();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理注解\"><a href=\"#处理注解\" class=\"headerlink\" title=\"处理注解\"></a>处理注解</h4><p>到此，我们的环境就搭建完成了。开始正式的处理注解，<code>prosser</code>方法大致分为两步骤：</p>\n<ol>\n<li>收集信息，通过 element 获得我们注解的 value、class、variable 等信息存储起来</li>\n<li>收集信息完毕后就可以开始我们的工作，这里我们就开始生成中间类。</li>\n</ol>\n<h4 id=\"收集信息\"><a href=\"#收集信息\" class=\"headerlink\" title=\"收集信息\"></a>收集信息</h4><p>这里先说明一下 Elment 。注解取得的元素都以 Element 等待处理，它的具体类型与我们通过@Targe 来标记的具有一定的联系，它有以下几个子类：</p>\n<ul>\n<li>VariableElement 表示一个局部变量、枚举、方法或构造函数、</li>\n<li>ExecutableElement 表示某个类或接口的方法、构造方法和注释类型元素</li>\n<li>TypeElement 表示一个类或者接口</li>\n<li>PackageElement 表示一个包元素</li>\n</ul>\n<p>可以通过 ElementKind.XXX 来判断元素的具体类型。</p>\n<p>通过一个 map 来存放收集到的信息，ProxyInfo 为存放信息的集合和处理 elment 的地方，稍后再讲解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, ProxyInfo&gt; mProxyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> &#123;</span><br><span class=\"line\">        mProxyMap.clear();</span><br><span class=\"line\">        <span class=\"comment\">//拿到注解的元素</span></span><br><span class=\"line\">        Set&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Element</span>&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!checkAnnotationUseValid(element, BindView.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//代表被注解的元素成员变量</span></span><br><span class=\"line\">            <span class=\"type\">VariableElement</span> <span class=\"variable\">variableElement</span> <span class=\"operator\">=</span> (VariableElement) element;</span><br><span class=\"line\">            <span class=\"comment\">//代表被注解的元素所在的class</span></span><br><span class=\"line\">            <span class=\"type\">TypeElement</span> <span class=\"variable\">typeElement</span> <span class=\"operator\">=</span> (TypeElement) variableElement.getEnclosingElement();</span><br><span class=\"line\">            <span class=\"comment\">//拿到class的完整路径</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">qualifiedName</span> <span class=\"operator\">=</span> typeElement.getQualifiedName().toString();</span><br><span class=\"line\">            <span class=\"comment\">//装载信息</span></span><br><span class=\"line\">            <span class=\"type\">ProxyInfo</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> mProxyMap.get(qualifiedName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (info == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                info = <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyInfo</span>(mElementUtils, typeElement);</span><br><span class=\"line\">                mProxyMap.put(qualifiedName, info);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> variableElement.getAnnotation(BindView.class).value();</span><br><span class=\"line\">            info.injectVariables.put(id, variableElement);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>getElementsAnnotatedWith</code>方法拿到注解的元素合集，然后循环遍历通过 element 获得相关的信息装载 ProxyInfo 。</p>\n<h4 id=\"生成代理类\"><a href=\"#生成代理类\" class=\"headerlink\" title=\"生成代理类\"></a>生成代理类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeToFile</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String className : mProxyMap.keySet()) &#123;</span><br><span class=\"line\">        <span class=\"type\">ProxyInfo</span> <span class=\"variable\">proxyInfo</span> <span class=\"operator\">=</span> mProxyMap.get(className);</span><br><span class=\"line\">        <span class=\"comment\">//生成成员变量的复制语句 view=findViewById(id)</span></span><br><span class=\"line\">        MethodSpec.<span class=\"type\">Builder</span> <span class=\"variable\">elementStatement</span> <span class=\"operator\">=</span> proxyInfo.markElementStatement();</span><br><span class=\"line\">        <span class=\"comment\">//构建 class</span></span><br><span class=\"line\">        <span class=\"type\">TypeSpec</span> <span class=\"variable\">typeSpec</span> <span class=\"operator\">=</span> TypeSpec.classBuilder(proxyInfo.typeElement.getSimpleName() + <span class=\"string\">&quot;_ViewBinding&quot;</span>)</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addMethod(elementStatement.build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">//将 class 文件放置在目标class同一个包下，解决访问性的问题</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">packageFullName</span> <span class=\"operator\">=</span> mElementUtils.getPackageOf(proxyInfo.typeElement).getQualifiedName().toString();</span><br><span class=\"line\">        <span class=\"type\">JavaFile</span> <span class=\"variable\">javaFile</span> <span class=\"operator\">=</span> JavaFile.builder(packageFullName, typeSpec).build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            javaFile.writeTo(mFileUtils);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们主要通过 遍历所有的元素集来生成代理类。</p>\n<p>通过<code>proxyInfo.markElementStatement()</code> 方法来生成具体的赋值语句然后打包成一个方法。</p>\n<p>通过 <code>javapoet</code> 声明一个代理类，将方法放置在类中。</p>\n<p>最后通过将代理类生成在和目标文件同一个包下，到这里就完成了所有的操作。</p>\n<p><code>markElementStatement()</code>的具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> MethodSpec.Builder <span class=\"title function_\">markElementStatement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ParameterSpec.<span class=\"type\">Builder</span> <span class=\"variable\">paramsBuilder</span> <span class=\"operator\">=</span> ParameterSpec.builder(TypeName.get(typeElement.asType()), <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">        MethodSpec.<span class=\"type\">Builder</span> <span class=\"variable\">methodBuilder</span> <span class=\"operator\">=</span> MethodSpec.constructorBuilder()</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addParameter(paramsBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer id : injectVariables.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"type\">VariableElement</span> <span class=\"variable\">variableElement</span> <span class=\"operator\">=</span> injectVariables.get(id);</span><br><span class=\"line\">            <span class=\"comment\">//变量名称</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">variableName</span> <span class=\"operator\">=</span> variableElement.getSimpleName().toString();</span><br><span class=\"line\">            <span class=\"comment\">//变量的完整名称</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">canonicalName</span> <span class=\"operator\">=</span> variableElement.asType().toString();</span><br><span class=\"line\">            <span class=\"comment\">//在构造方法中添加赋值语句</span></span><br><span class=\"line\">            methodBuilder.addStatement(<span class=\"string\">&quot;target.$L=($L) activity.findViewById($L)&quot;</span>, variableName, canonicalName, id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodBuilder;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Api编写\"><a href=\"#Api编写\" class=\"headerlink\" title=\"Api编写\"></a>Api编写</h4><p>注解处理完后，我们就需要 api 来调用这个代理类，将 View 通过代理类赋值。就像 <code>ButterKinfe.bind(target)</code>这样。</p>\n<p>同样我们再声明一个 Android-module 来声明编写 api。api  的实现很简单，我们通过反射调用生成的代理类，将 Activity 当做参数传递进去即可。当然如果要实际应用肯定需要要考虑更多，例如缓存之类的，这里就只是简单的使用一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InjectHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">(Activity target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">classFullName</span> <span class=\"operator\">=</span> target.getClass().getName() + <span class=\"string\">&quot;_ViewBinding&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Class</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> Class.forName(classFullName);</span><br><span class=\"line\">            <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> proxy.getConstructor(target.getClass());</span><br><span class=\"line\">            constructor.newInstance(target);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>最后我们的 demo 依赖这三个库，通过使用@BindView 注解然后 biuld app.就可以在 build&#x2F;gennerated&#x2F;source&#x2F;apt&#x2F;debug&#x2F;com.xxx&#x2F; 目录下看到我们生成的代理类了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity_ViewBinding</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MainActivity_ViewBinding</span><span class=\"params\">(MainActivity activity)</span> &#123;</span><br><span class=\"line\">    activity.textView=(android.widget.TextView) activity.findViewById(<span class=\"number\">2131165309</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，整理的自定义注解和编译时注解框架所需要的常用知识点，它们都有广泛的应用场景，这里只是介绍最简单明了的，主要是为了了解基于编译时注解框架的原理和实现方式。如果有机会，自己根据场景设计使用编译时注解框架是最好不过的了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"原注解\"><a href=\"#原注解\" class=\"headerlink\" title=\"原注解\"></a>原注解</h2><p>原注解的作用就是负责注解其他注解，Java5.0提供了四种meta-annotation,用来提供annotation类型的说明。</p>\n<p><strong>java.lang.annotation</strong></p>\n<ul>\n<li>@Target</li>\n<li>@Retention</li>\n<li>@Document</li>\n<li>@inhrited</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>作用 :  <strong>用于描述注解的使用范围</strong></p>\n<p><strong>ElementType</strong>取值 :  </p>\n<ol>\n<li><strong>CONSTRUCTOR</strong> :  用于描述构造器</li>\n<li><strong>FIELD</strong> : 用于描述域</li>\n<li><strong>LOCAL_VARIABLE</strong>  :  用于描述局部变量</li>\n<li><strong>METHOD</strong> :  用于描述方法</li>\n<li><strong>PACKAGE</strong> :  用于描述包</li>\n<li><strong>PARAMETER</strong> :  用于描述参数</li>\n<li><strong>TYPE</strong> :  用于描述类、接口（包括注解类型）或enum类型声明</li>\n</ol>\n<p>像现在我们声明一个<code>Name</code>注解，声明的<code>Target</code>范围是<code>TYPE</code>，也就是说该注解只能在类、接口以及枚举中声明,当我们在其他场景如方法、变量中声明该注解,IDE就会报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Name &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><p>作用 :  <strong>用于描述注解的生命周期</strong></p>\n<p>表明该注解在程序哪一阶段还保留在代码中,<strong>RetentionPoicy</strong>的取值范围 :  </p>\n<ul>\n<li><strong>SOURCE</strong> :  在源文件中保留，即生成.class后该注解就已经没有在文件中了。</li>\n<li><strong>CLASS</strong> :  在Class文件中保留。</li>\n<li><strong>RUNTIME</strong> :  在编译阶段也保留。</li>\n</ul>\n<p>我们使用自定义注解时一般使用<code>RUNTIME</code>，这样在运行阶段注解处理器就可以通过反射拿到该注解的属性，从而做一些操作。</p>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"@Document\"></a>@Document</h3><p>作用 :  <strong>用于给Javadoc工具标记</strong></p>\n<p><code>@Documented</code> 注解表明这个注解应该被 javadoc工具记录. 默认情况下,<code>javadoc</code>是不包括注解的. 但如果声明注解时指定了 <code>@Documented</code>,则它会被 <code>javadoc</code> 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中。</p>\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>作用 :  使用此注解声明出来的自定义注解，在使用此自定义注解时，如果注解在类上面时，子类会自动继承此注解，否则的话，子类不会继承此注解。这里一定要记住，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效。</p>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><h3 id=\"使用规范\"><a href=\"#使用规范\" class=\"headerlink\" title=\"使用规范\"></a>使用规范</h3><ul>\n<li><strong>成员参数</strong> :  自定义注解的成员参数只能使用byte,short,char,int,long,float,double,boolean 八种基本数据类型 和 String,Enum,Class,annotations 等数据类型,以及这一些类型的数组。</li>\n<li>**访问权限 **:  注解的成员变量只能使用<code>public</code>和默认的权限访问符来修饰。</li>\n<li><strong>value</strong> :  如果只有一个参数最好是将key的名称设置为<code>value</code>,这样我们使用注解时候<code>Annotation(key=Params)</code>和<code>Annotation(Params)</code>是等价的，而且后者更加的方便简介。</li>\n<li><strong>注解元素的默认值</strong> :  注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。</li>\n</ul>\n<h3 id=\"注解处理类库-运行时注解\"><a href=\"#注解处理类库-运行时注解\" class=\"headerlink\" title=\"注解处理类库(运行时注解)\"></a>注解处理类库(运行时注解)</h3><p>我们定义了注解，并且在给定了属性。肯定要在合适的环境去获取注解的属性来做一些操作。不然就是注释而不是注解了。</p>\n<p>java提供了<code>java.lang.reflect.AnnotatedElement</code>来帮助我们获取注解的信息，需要注意的是当我们想要读取一个注解时只有设置它的<code>@Retention</code>为<code>RUNTIME</code>时候我们才可以拿到，因为只有当<code>Class</code>被虚拟机装载的时候才其中的<code>Annotation</code>才可以被虚拟机拿到，这是阶段已经属于<code>RUNTIME</code>。</p>\n<p>AnnotatedElement主要的实现类 :  </p>\n<ul>\n<li><strong>Class：</strong>类定义</li>\n<li><strong>Constructor：</strong>构造器定义</li>\n<li><strong>Field：</strong>累的成员变量定义</li>\n<li><strong>Method：</strong>类的方法定义</li>\n<li><strong>Package：</strong>类的包定义</li>\n</ul>\n<p>**AnnotatedElement **接口提供了四个方法来访问<code>Annotation</code>的信息</p>\n<ol>\n<li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;?&gt; annotationClass) </code>  :  返回程序元素中存在的、指定类型的注解，如果该注解不存在则返回<code>null</code>。</li>\n<li><code>Annotation getAnnotation()</code> :  返回程序元素中所有存在的注解。</li>\n<li><code>boolean is AnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code> :  判断程序元素中是否包含该注解。</li>\n<li><code>Annotation[] getDeclaredAnnotations()</code> :  返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。</li>\n</ol>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>我们通过一个小<code>demo</code>来实现注解的声明和使用。</p>\n<p>声明一个注解<code>@Name</code> :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Name &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个加载名称的方法 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadName</span><span class=\"params\">(Class&lt;?&gt; classz)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//拿到类中的所有元素</span></span><br><span class=\"line\">    Field[] fields = classz.getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//判断是否有该注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取该注解的属性</span></span><br><span class=\"line\">            <span class=\"type\">Name</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> field.getAnnotation(Name.class);</span><br><span class=\"line\">            System.err.println(annotation.value());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个Human来测试 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Human</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Name(&quot;小明&quot;)</span></span><br><span class=\"line\">    String FirstHuman;</span><br><span class=\"line\">    <span class=\"meta\">@Name()</span></span><br><span class=\"line\">    String SecondHuman;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Human.loadName(Human.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadName</span><span class=\"params\">(Class&lt;?&gt; classz)</span> &#123;</span><br><span class=\"line\">        Field[] fields = classz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(Name.class)) &#123;</span><br><span class=\"line\">                <span class=\"type\">Name</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> field.getAnnotation(Name.class);</span><br><span class=\"line\">                System.err.println(annotation.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 :  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br><span class=\"line\">name</span><br></pre></td></tr></table></figure>\n\n<p>可以看到和预期的一样，第二个元素没有指定vlue输出了default。这里我们就完成了简单的自定义注解。</p>\n<h2 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h2><p>自定义注解很常用的一个方式就是通过编译时注解来生产一些工具代码，提升开发效率。有很多第三方框架都使用了编译时注解，例如：</p>\n<ul>\n<li>butterknife 自动生成View初始化和事件绑定的代码</li>\n<li>EventBus3.0+ 方便实现通讯，通过注解自动把需要通讯的方法标识配置和注册</li>\n<li>fragmenttargs 通过注解轻松的配置 Fragment</li>\n</ul>\n<p>除了第三方库之外，我们也可以自己通过编译时注解来帮助我们完成一些日常重复编码的工作。</p>\n<p>我们通过实现一个简单版本的 ButterKinfe 来学习和了解编译时注解。</p>\n<p>###定义自定义注解</p>\n<p>创建一个 java-library 来放置我们定义的自定义注解</p>\n<p>创建一个注解类 BindView ,声明它的生命周期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span> <span class=\"comment\">//修饰成员变量</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.CLASS)</span> <span class=\"comment\">//在编译时保留</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> BindView &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IdRes</span> <span class=\"type\">int</span> <span class=\"title function_\">value</span><span class=\"params\">()</span>; <span class=\"comment\">//通过annotation 库的 @IdRes 限定Value只能为资源ID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样一个自定义注解就完成了</p>\n<p>###处理注解</p>\n<p>####注解处理器环境搭建</p>\n<p>创建一个 java-library 来放置注解处理器。</p>\n<p>编译时注解需要用到注解处理器<code>processer</code>，使用它我们需要依赖<code>auto-service</code>这个类库</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api <span class=\"string\">&#x27;com.google.auto.service:auto-service:1.0-rc4&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>其次我们需要通过注解处理生成中间类，来完成将 View 和成员变量绑定的操作。我们通过 <code>javapoet</code>这个库来方便完成，当然也可以通过手写代码的方式来完成。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api <span class=\"string\">&#x27;com.squareup:javapoet:1.10.0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个类继承<code>AbstractProcessor</code>类并通过<code>@AutoService</code>声明实现的接口,之后我们需要实现具体的<code>process</code>方法，这里也是我们处理注解的核心部分，需要的注意的是这个方法可能会被多次调用，需要做好去重的准备。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoService(Processor.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProcessor</span> &#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在处理注解前还有一些小工作要做，我们需要配置声明这个注解处理器的所需要处理的注解和支持的源码版本。有两种方式实现：</p>\n<ul>\n<li><p>注解，可以通过注解<code>SupportAnnotationTypes</code>配置我们需要处理的注解，<code>SupportSourceVersion </code> 配置需要处理的 Java 源版本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoService(Processor.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SupportAnnotationTypes(&#123;&quot;com.example.annotation_compiler.BindView&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SupportSourceVersion(SourceVersion.RELEASE_7)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProcessor</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写 <code>getSupportedAnnotationTypes()</code>和<code>getSupportedSourceVersion方法</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title function_\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      tips: getCanonicalName 和 Name 、SimpleName 的区别</span></span><br><span class=\"line\"><span class=\"comment\">      SimpleName 只会返回该类的简称</span></span><br><span class=\"line\"><span class=\"comment\">      getName和getCanonicalName在大多情况下没有区别 它们都都返回 Class 的全类名，</span></span><br><span class=\"line\"><span class=\"comment\">      但在内部类和数组的时候 返回的 Name 形式则不同。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(<span class=\"number\">1</span>);</span><br><span class=\"line\">    set.add(BindView.class.getCanonicalName());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> set;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title function_\">getSupportedSourceVersion</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SourceVersion.latestSupported();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>最后我们重写 <code>init</code>  方法，它会在注解处理器被初始化的时候调用，它的参数 ProcessingEnvironment 提供了一系列的帮助类来帮助我们处理注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 初始化注解类方法</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> processingEnvironment environment 提供了一系列帮助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Filer 文件相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Elements 元素相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    *                              Message 日志相关的辅助类</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ProcessingEnvironment processingEnvironment)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.init(processingEnvironment);</span><br><span class=\"line\">       mFileUtils = processingEnvironment.getFiler();</span><br><span class=\"line\">       mElementUtils = processingEnvironment.getElementUtils();</span><br><span class=\"line\">       mMessager = processingEnvironment.getMessager();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理注解\"><a href=\"#处理注解\" class=\"headerlink\" title=\"处理注解\"></a>处理注解</h4><p>到此，我们的环境就搭建完成了。开始正式的处理注解，<code>prosser</code>方法大致分为两步骤：</p>\n<ol>\n<li>收集信息，通过 element 获得我们注解的 value、class、variable 等信息存储起来</li>\n<li>收集信息完毕后就可以开始我们的工作，这里我们就开始生成中间类。</li>\n</ol>\n<h4 id=\"收集信息\"><a href=\"#收集信息\" class=\"headerlink\" title=\"收集信息\"></a>收集信息</h4><p>这里先说明一下 Elment 。注解取得的元素都以 Element 等待处理，它的具体类型与我们通过@Targe 来标记的具有一定的联系，它有以下几个子类：</p>\n<ul>\n<li>VariableElement 表示一个局部变量、枚举、方法或构造函数、</li>\n<li>ExecutableElement 表示某个类或接口的方法、构造方法和注释类型元素</li>\n<li>TypeElement 表示一个类或者接口</li>\n<li>PackageElement 表示一个包元素</li>\n</ul>\n<p>可以通过 ElementKind.XXX 来判断元素的具体类型。</p>\n<p>通过一个 map 来存放收集到的信息，ProxyInfo 为存放信息的集合和处理 elment 的地方，稍后再讲解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, ProxyInfo&gt; mProxyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> &#123;</span><br><span class=\"line\">        mProxyMap.clear();</span><br><span class=\"line\">        <span class=\"comment\">//拿到注解的元素</span></span><br><span class=\"line\">        Set&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Element</span>&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!checkAnnotationUseValid(element, BindView.class)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//代表被注解的元素成员变量</span></span><br><span class=\"line\">            <span class=\"type\">VariableElement</span> <span class=\"variable\">variableElement</span> <span class=\"operator\">=</span> (VariableElement) element;</span><br><span class=\"line\">            <span class=\"comment\">//代表被注解的元素所在的class</span></span><br><span class=\"line\">            <span class=\"type\">TypeElement</span> <span class=\"variable\">typeElement</span> <span class=\"operator\">=</span> (TypeElement) variableElement.getEnclosingElement();</span><br><span class=\"line\">            <span class=\"comment\">//拿到class的完整路径</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">qualifiedName</span> <span class=\"operator\">=</span> typeElement.getQualifiedName().toString();</span><br><span class=\"line\">            <span class=\"comment\">//装载信息</span></span><br><span class=\"line\">            <span class=\"type\">ProxyInfo</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> mProxyMap.get(qualifiedName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (info == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                info = <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyInfo</span>(mElementUtils, typeElement);</span><br><span class=\"line\">                mProxyMap.put(qualifiedName, info);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> variableElement.getAnnotation(BindView.class).value();</span><br><span class=\"line\">            info.injectVariables.put(id, variableElement);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>getElementsAnnotatedWith</code>方法拿到注解的元素合集，然后循环遍历通过 element 获得相关的信息装载 ProxyInfo 。</p>\n<h4 id=\"生成代理类\"><a href=\"#生成代理类\" class=\"headerlink\" title=\"生成代理类\"></a>生成代理类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeToFile</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String className : mProxyMap.keySet()) &#123;</span><br><span class=\"line\">        <span class=\"type\">ProxyInfo</span> <span class=\"variable\">proxyInfo</span> <span class=\"operator\">=</span> mProxyMap.get(className);</span><br><span class=\"line\">        <span class=\"comment\">//生成成员变量的复制语句 view=findViewById(id)</span></span><br><span class=\"line\">        MethodSpec.<span class=\"type\">Builder</span> <span class=\"variable\">elementStatement</span> <span class=\"operator\">=</span> proxyInfo.markElementStatement();</span><br><span class=\"line\">        <span class=\"comment\">//构建 class</span></span><br><span class=\"line\">        <span class=\"type\">TypeSpec</span> <span class=\"variable\">typeSpec</span> <span class=\"operator\">=</span> TypeSpec.classBuilder(proxyInfo.typeElement.getSimpleName() + <span class=\"string\">&quot;_ViewBinding&quot;</span>)</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addMethod(elementStatement.build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">//将 class 文件放置在目标class同一个包下，解决访问性的问题</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">packageFullName</span> <span class=\"operator\">=</span> mElementUtils.getPackageOf(proxyInfo.typeElement).getQualifiedName().toString();</span><br><span class=\"line\">        <span class=\"type\">JavaFile</span> <span class=\"variable\">javaFile</span> <span class=\"operator\">=</span> JavaFile.builder(packageFullName, typeSpec).build();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            javaFile.writeTo(mFileUtils);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们主要通过 遍历所有的元素集来生成代理类。</p>\n<p>通过<code>proxyInfo.markElementStatement()</code> 方法来生成具体的赋值语句然后打包成一个方法。</p>\n<p>通过 <code>javapoet</code> 声明一个代理类，将方法放置在类中。</p>\n<p>最后通过将代理类生成在和目标文件同一个包下，到这里就完成了所有的操作。</p>\n<p><code>markElementStatement()</code>的具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> MethodSpec.Builder <span class=\"title function_\">markElementStatement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ParameterSpec.<span class=\"type\">Builder</span> <span class=\"variable\">paramsBuilder</span> <span class=\"operator\">=</span> ParameterSpec.builder(TypeName.get(typeElement.asType()), <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">        MethodSpec.<span class=\"type\">Builder</span> <span class=\"variable\">methodBuilder</span> <span class=\"operator\">=</span> MethodSpec.constructorBuilder()</span><br><span class=\"line\">                .addModifiers(Modifier.PUBLIC)</span><br><span class=\"line\">                .addParameter(paramsBuilder.build());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer id : injectVariables.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"type\">VariableElement</span> <span class=\"variable\">variableElement</span> <span class=\"operator\">=</span> injectVariables.get(id);</span><br><span class=\"line\">            <span class=\"comment\">//变量名称</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">variableName</span> <span class=\"operator\">=</span> variableElement.getSimpleName().toString();</span><br><span class=\"line\">            <span class=\"comment\">//变量的完整名称</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">canonicalName</span> <span class=\"operator\">=</span> variableElement.asType().toString();</span><br><span class=\"line\">            <span class=\"comment\">//在构造方法中添加赋值语句</span></span><br><span class=\"line\">            methodBuilder.addStatement(<span class=\"string\">&quot;target.$L=($L) activity.findViewById($L)&quot;</span>, variableName, canonicalName, id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodBuilder;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Api编写\"><a href=\"#Api编写\" class=\"headerlink\" title=\"Api编写\"></a>Api编写</h4><p>注解处理完后，我们就需要 api 来调用这个代理类，将 View 通过代理类赋值。就像 <code>ButterKinfe.bind(target)</code>这样。</p>\n<p>同样我们再声明一个 Android-module 来声明编写 api。api  的实现很简单，我们通过反射调用生成的代理类，将 Activity 当做参数传递进去即可。当然如果要实际应用肯定需要要考虑更多，例如缓存之类的，这里就只是简单的使用一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InjectHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">(Activity target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">classFullName</span> <span class=\"operator\">=</span> target.getClass().getName() + <span class=\"string\">&quot;_ViewBinding&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Class</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> Class.forName(classFullName);</span><br><span class=\"line\">            <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> proxy.getConstructor(target.getClass());</span><br><span class=\"line\">            constructor.newInstance(target);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>最后我们的 demo 依赖这三个库，通过使用@BindView 注解然后 biuld app.就可以在 build&#x2F;gennerated&#x2F;source&#x2F;apt&#x2F;debug&#x2F;com.xxx&#x2F; 目录下看到我们生成的代理类了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity_ViewBinding</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MainActivity_ViewBinding</span><span class=\"params\">(MainActivity activity)</span> &#123;</span><br><span class=\"line\">    activity.textView=(android.widget.TextView) activity.findViewById(<span class=\"number\">2131165309</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，整理的自定义注解和编译时注解框架所需要的常用知识点，它们都有广泛的应用场景，这里只是介绍最简单明了的，主要是为了了解基于编译时注解框架的原理和实现方式。如果有机会，自己根据场景设计使用编译时注解框架是最好不过的了。</p>\n"},{"layout":"post","title":"Android IPC 机制","subtitle":"Android 艺术开发探索笔记","date":"2018-03-18T12:55:00.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n\n\nIPC 是 Inter-Process Communication 的缩写，含义为进程间通信或跨进程通信，是指两个进程之间进行数据交换的过程。那么什么是进程？什么是线程？按照操作系统的概念，线程是 CPU 调度的最小单元，同时线程是一种有限的系统资源。二进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者应用。一个进程可以包含多个线程，也可以只有一个线程即主线程，在Android 也叫 UI 线程。\n\n### 为什么需要多进程通信，使用场景\n\n前面也有说在操作系统中一个进程对应的指一个程序或者应用，当两个应用需要数据交互的时候就必须要采取夸进程的通信方式来获取所需要的数据。**在 Android 中每一个应用或进程都分配了一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这会导致不同虚拟机访问同一个类会产生多份副本。这时候通过内存来共享数据，都会共享失败**，不仅如此还会造成很多问题，例如：\n\n1. 静态成员和单例模式完全失效\n2. 线程同步机制完全失效\n3. SharedPreferences 的可靠性下降\n4. Application 会多次创建\n\n所以任何一个操作系统都需要相应的 IPC 机制，比如 Windows 上可以通过剪贴板、管道和邮槽等来进行进程间通信；Linux 上可以通过命名管道、共享内容、信号量等来进行进程通信。对于 Android来说，它是一种基于 Linux 内核的移动操作系统，但它有自己的进程通信方式 Binder，除此之外还支持 Socket。\n\n### Android 中的多进程模式\n\n#### 开启多进程\n\n在一个应用开启多进程只有一种方法，那就是给四大组件在 AndroidMenifest 中指定 android:process 属性，除此之外没有其他方法。还有一种非常规的多进程方法，那就是通过 JNI 在native 层去 fork 一个新的进程，这里不做阐述。\n\n```java\n  <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".SecondActivity\"\n            android:process=\":remote\" />\n        <activity\n            android:name=\".ThirdActivity\"\n            android:process=\"com.czj.adapter.remote\" />\n```\n\n通过 process 属性值指定其运行的进程，假设当前应用的进程为 `com.czj.adapte` 那么当 SecondActivity 启动时 系统会为它创建一个新的进程，名为`com.czj.adpater:remote` ，当ThirdActiivty 启动时候系统也会为它新建一个进程，名为`com.czj.adpater.remote`。新建的两个进程其实是有区别的，\" : \" 的含义是指要在当前的进程名前面附加上当前的包名，这是一种简写的方法，对于 SecondActivity 它完整的进程是 `com.czj.adpate:remote` 它属于当前应用的私有进程，而不适用 “ ：” 开头的属于全局进程，其他应用通过 ShareUID 方式可以和它跑在同一个进程中。\n\nAndroid 系统为每个应用分配了一个唯一的 UID，具有相同 UID 应用才能共享数据。这里要说明的是，两个应用只有拥有相同的ShareUID并且签名相同才可以跑在统一进程。在这种情况下它们可以互相访问对方的私有数据，比如 data 目录、组件信息等，不管它们是否泡在同一个进程中。\n\n### IPC基础概念介绍\n\n#### Binder\n\n> 直观来讲，Binder 是 Android 中的一个类，它实现了 IBinder 接口。从 IPC 角度来讲，Binder 是 Android 系统的一种夸进程通信方式，BInder 还可以理解为一种虚拟的物理设备，它的设备驱动是 `/dev/binder`，该通信方式在 Linux 中没有；从 Android Framework 层角度来说，Binder 是 ServiceManager 连接各种 Manger (ActivityMnager、WindowManger，等等)和相应 ManagerService 的桥梁；从 Android 应用层来说，Binder 是客户端和服务端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder 对象，通过这个 Binder 对象，客户端就可以获得服务端提供的服务或者数据，这里的服务包括普通服务和机遇 AIDL 的服务。\n\n#### Android 中的 IPC 方式\n\n##### 使用Bundle\n\nActivity、Service、Receiver 都是支持在 Intent 中传递 Bundle 数据的，由于 Bundle 时间了 Parcelable 接口，所以它可以方便地在不同的进程间传输。除了直接传递数据这种经典的使用场景，它还有一种特殊的使用场景。比如 A 进程在进行一个计算，计算完成后它要启动 B 进程的一个组件并把计算结果传递给 B 进程，并且遗憾的是这个计算结果不支持放入 Bundle 中，因此无法通过 Intent 来传输，这个时候使用 其他 IPC 就略显复杂。我们可以考虑将通过 Intent 启动 B 进程的一个 Service 组件，让 Service 在后台进行计算，计算完毕再启动 B 进程真正想要启动的目标组件，由于 Service 也运行在 B 进程中，所以目标组件就可以直接获取计算结果，这样一来就轻松解决了夸进程的问题。\n\n#### 使用文件共享\n\n共享文件也是一种不错的进程间通信，两个进程通过读/写同一个文件来交换数据。通过文件共享数据对文件格式是没有具体要求的，比如可以是文本共享、也是是 XML 只要双方约定数据格式即可。通过文件共享的方式也是有局限性的，比如并发读/写的问题，如果有并发的情况，那么我们读的内容可不能不是最新的，如果是并发写的话就更严重了。文件共享方式比较适合在对同步数据要求不高的进程间通信，并且妥善处理并发/读写的问题。\n\n系统的 SharedPreferences 是 Android 提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层上使用 xml 文件来保存。从本质上 SharedPreferences 也是文件的一种，但是由于系统对它的读/写做了一定的缓存策略，即在内存中会有一份 SharedPreferences 文件的缓存，因此在多进程模式下，系统对它的读写就变得很不可靠，当面对高并发的读/写访问，SharedPreferences 有很大几率丢失数据。\n\n#### 使用 Messenger\n\nMessenger 可以在不同进程传递 Message 对象，它是一种基于 AIDL 的轻量级 IPC 方案，对 AIDL 做了封装从而使我们可以更简便地进行进程间通信。且由于它一次只处理一种请求，因此服务端我们不用考虑线程同步的问题，这是因为在服务端中不存在并发执行的情况。\n\n#### 使用AIDL\n\nMesseneger 是以串行的方式来处理客户端发送的消息，如果大量的消息同时发送到到服务端，而服务端只能一个一个处理，那么用 Messenger 就不大合适了。同时，Messenger 的作用主要是为了传递消息，很多时候我们可能需要夸进程的调用服务端的方法，这种情况 Messenger 就无法做到了，但是我们可以使用 AIDL 来实现。\n\n###### 创建 AIDL \n\n```Java\n//创建 AIDL 文件Build后生成相应的类\n// AIDL 支持 基本类型和 String、CharSequence、List、Map、Parcelable、AIDL\n//当我们使用Parcelable时，我们要单独创建一个同名使用 parcelable 声明。\n//Book.aidl\npackage com.example.nutcracker.myapplication;\nparcelable Book;\n//IBookManager.aidl\npackage com.example.nutcracker.myapplication;\n\nimport com.example.nutcracker.myapplication.Book;\ninterface IBookManger{\n    List<Book> getBook();\n    void addBook(Book book);\n}\n```\n\n###### 服务端实现\n\n```kotlin\npublic class AIDLService extends Service {\n\n    private List<Book> bookList = new ArrayList<>();\n\n    private IBookManager.Stub mBookManager = new IBookManager.Stub() {\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            Log.i(\"service\", \"读取书籍\");\n            return bookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            Log.i(\"service\", \"添加书籍\");\n            bookList.add(book);\n        }\n    };\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBookManager;\n    }\n}\n```\n\n###### 客户端实现\n\n```kotlin\n//我们实现了一个定时向服务端添加书籍并查询书籍的组件\nclass ThirdActivity : AppCompatActivity() {\n\n    lateinit var promptView: TextView\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_third)\n        promptView = findViewById(R.id.textView2)\n        val intent = Intent(this, AIDLService::class.java)\n        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)\n    }\n\n    private val handle: Handler = @SuppressLint(\"HandlerLeak\")\n    object : Handler() {\n        override fun handleMessage(msg: Message?) {\n            super.handleMessage(msg)\n            val book = manager.bookList.last()\n            promptView.text = book.bookName\n        }\n    }\n    var sum: Int = 0\n\n    inner class MyThread : Runnable {\n        override fun run() {\n            while (true) {\n                try {\n                    manager.addBook(Book(1, \"book$sum\"))\n                    sum++\n                    Thread.sleep(1000)// 线程暂停1秒\n                    val message = Message()\n                    message.what = 1\n                    handle.sendMessage(message)// 发送消息\n                } catch (e: InterruptedException) {\n                    e.printStackTrace()\n                }\n\n            }\n        }\n    }\n\n    private var isConnection = false\n    private lateinit var manager: IBookManager\n\n    private val serviceConnection = object : ServiceConnection {\n        override fun onServiceConnected(p0: ComponentName?, p1: IBinder?) {\n            manager = IBookManager.Stub.asInterface(p1)\n            isConnection = true\n            Log.i(\"client\", \" 连接上客户端\")\n            Thread(MyThread()).start()\n        }\n\n        override fun onServiceDisconnected(p0: ComponentName?) {\n            isConnection = false\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        unbindService(serviceConnection)\n    }\n}\n```\n\n#### 使用ContentProvider\n\nContentProvider 是 Android 中提供的专门用于不同应用之间共享数据的方式，从这一点来看，它天生就适合进程间通信。和 Messenger 一样，ContentProvider 的底层实现同样为 Binder。\n\n###### 创建数据源\n\n我们先创建一个数据库为ContentProvider提供数据\n\n```kotlin\nclass DbOpenHelper(context: Context) : SQLiteOpenHelper(context, DB_NAME, null, DB_VERSION) {\n\n    companion object {\n        const val DB_VERSION = 1\n        const val DB_NAME = \"book_provider\"\n        public const val BOOK_TABLE_NAME = \"book\"\n        public const val USER_TABLE_NAME = \"user\"\n\n        const val CREATE_BOOK_TABLE = \"CREATE TABLE  IF NOT EXISTS $BOOK_TABLE_NAME (_id INTEGER PRIMARY KEY,name TEXT)\"\n        const val CREATE_USER_TABLE = \"CREATE TABLE  IF NOT EXISTS $USER_TABLE_NAME (_id INTEGER PRIMARY KEY,name TEXT,sex INT)\"\n    }\n\n    override fun onCreate(db: SQLiteDatabase?) {\n        db?.execSQL(CREATE_BOOK_TABLE)\n        db?.execSQL(CREATE_USER_TABLE)\n\n    }\n\n    override fun onUpgrade(p0: SQLiteDatabase?, p1: Int, p2: Int) {\n    }\n\n}\n```\n\n\n\n###### 创建一个 ContentProvider\n\n> 创建一个自定义的ContentProvider 只需要集成 ContentProvider 并实现六个抽象方法即可：onCreate、query、update、insert、delte、和  getType。这六个抽象方法都很好理解，onCreate 代表 ContentProvider 的创建，一般来说我们要做一些初始化的工作；getType 用来返回一个 Uri 请求所对应的 MIME 类型（媒体类型），比如图片、视频等，如果我们不关注这个类型可以直接返回 null 或 `*/*` ;剩下的四个方法对应 CRUD 操作，即实现对数据表的增删改查工作。根据 Binder 的工作原理，我们知道这六个方法均在 ContentProvider 的进程中，除了 onCreate 由系统回调并运行在主线程中，其他五个方法均由外界回调并运行在 Binder 线程池中。\n\n我们来自定义一个 ContentProvider 并使用之前定义的DbOpenHelper 来作为操作的数据\n\n```kotlin\nclass BookProvider : ContentProvider() {\n\n    companion object {\n        private const val TAG: String = \"BookProvider\"\n        private const val AUTHORITIES = \"com.example.nutcracker.myapplication.BookProvider\"\n        val BOOK_CONTENT_URI = Uri.parse(\"content://$AUTHORITIES/book\")\n        private const val BOOK_URI_CODE = 0\n        val USER_CONTENT_URI = Uri.parse(\"content://$AUTHORITIES/user\")\n        private const val USER_URI_CODE = 1\n        private val uriMather = UriMatcher(UriMatcher.NO_MATCH)\n    }\n\n    init {\n        uriMather.addURI(AUTHORITIES, \"book\", BOOK_URI_CODE)\n        uriMather.addURI(AUTHORITIES, \"user\", USER_URI_CODE)\n    }\n\n    lateinit var db: SQLiteDatabase\n\n\n    override fun onCreate(): Boolean {\n        Log.i(TAG, \"onCreate,current thread:${Thread.currentThread()}\")\n        val openHelper = DbOpenHelper(context)\n        db = openHelper.writableDatabase\n        db.execSQL(\"delete from \" + DbOpenHelper.BOOK_TABLE_NAME)\n        db.execSQL(\"delete from \" + DbOpenHelper.USER_TABLE_NAME)\n        db.execSQL(\"insert into book values(3,'android');\")\n        db.execSQL(\"insert into book values(4,'iOS');\")\n        db.execSQL(\"insert into book values(5,'html');\")\n        db.execSQL(\"insert into user values(1,'jon',11);\")\n        return false\n    }\n\n    override fun query(uri: Uri, strings: Array<String>?, s: String?, strings1: Array<String>?, s1: String?): Cursor? {\n        Log.i(TAG, \"query,current thread:${Thread.currentThread()}\")\n        val tableName: String = getTableName(uri)\n        return db.query(tableName, strings, s, strings1, null, null, s1, null)\n    }\n\n    override fun getType(uri: Uri): String? {\n        return null\n    }\n\n    override fun insert(uri: Uri, contentValues: ContentValues?): Uri? {\n        val tableName: String = getTableName(uri)\n        db.insert(tableName, null, contentValues)\n        context.contentResolver.notifyChange(uri, null)\n        return uri\n    }\n\n    override fun delete(uri: Uri, s: String?, strings: Array<String>?): Int {\n        val count = db.delete(getTableName(uri), s, strings)\n        if (count > 0) {\n            context.contentResolver.notifyChange(uri, null)\n        }\n        return count\n    }\n\n    override fun update(uri: Uri, contentValues: ContentValues?, s: String?, strings: Array<String>?): Int {\n        val row = db.update(getTableName(uri), contentValues, s, strings)\n        if (row > 0) {\n            context.contentResolver.notifyChange(uri, null)\n        }\n        return row\n    }\n\n    private fun getTableName(uri: Uri): String {\n        return when (uriMather.match(uri)) {\n            BOOK_URI_CODE -> DbOpenHelper.BOOK_TABLE_NAME\n            USER_URI_CODE -> DbOpenHelper.USER_TABLE_NAME\n            else -> throw IllegalAccessException(\"Unsupported URI:$uri\")\n        }\n    }\n}\n\n```\n\n然后在清单文件申明它\n\n```xml\n       <provider\n            android:name=\".BookProvider\"\n       android:authorities=\"com.example.nutcracker.myapplication.BookProvider\"\n            android:permission=\"com.example.provider\"\n            android:process=\":provider\"\n            />\n```\n\n其中 authorities 是Content-Provider 的唯一标示，通过这个属性外部应用就可以访问我们的 ContentProvider ，所以这个值必须是唯一的。为了演示进程间通信，我们让 BookProvider 运行在独立的进程并给它添加了权限，这样如果外部应用想访问它就必须申明对应的权限（这里指“\"com.example.provider”）,否则外部应用就会异常终止。\n\n###### 最后我们在Activity中测试使用我们的ContentProvider\n\n```kotlin\nclass SecondActivity : AppCompatActivity() {\n\n    companion object {\n        const val TAG = \"Application Provider\"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_second)\n\n        val values = ContentValues()\n        values.put(\"_id\", 6)\n        values.put(\"name\", \"编程之美\")\n        contentResolver.insert(BookProvider.BOOK_CONTENT_URI, values)\n\n        val cursor = contentResolver.query(BookProvider.BOOK_CONTENT_URI, arrayOf(\"_id\", \"name\"), null, null, null)\n        while (cursor.moveToNext()) {\n            Log.i(TAG, \"id:${cursor.getInt(0)} name :${cursor.getString(1)}\")\n        }\n        cursor.close()\n    }\n}\n\n----------------- 输出\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:3 name :android\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:4 name :iOS\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:5 name :html\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:6 name :编程之美\n```\n\n#### 使用Socket\n\n我们也开始使用 Socket 来进行夸进程通信，除了使用 TCP  还可以使用 UDP 套接字。在性能上 UDP 具有更好的效率，其缺点是不保证数据一定能够正确传输，尤其是网络堵塞的情况下。\n\n#### Binder 连接池\n\n\n\n#### 选择合适的 IPC 方式\n\n|      名称       |                             优点                             |                             缺点                             |                           适用场景                           |\n| :-------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|     Bundle      |                           简单易用                           |                  只能传输 Bundle 支持的数据                  |                     四大组件间的进程通信                     |\n|    文件共享     |                           简单易用                           |        不适合高并发场景，并且无法做到进程间的即时通信        |        无并发访问情况，交换简单的数据实时性不高的场景        |\n|      AIDL       |          功能强大，支持一对多并发通信，支持实时通信          |                使用稍复杂，需要处理好线程同步                |                  一对多通信并且有 RPC 需求                   |\n|    Messenger    |          功能一般，支持一对多串行通信，支持实时通信          | 不能很好的处理高并发场景，不支持 RPC，数据通过 Message 传输，因此只支持 Bundle 支持的数据类型 | 低并发的一对多即使通信，无 RPC需求，或者无需返回结果的 PRC 需求 |\n| ContentProvider | 在数据源访问功能强大，支持一对多并发数据共享，可通过 call 方法扩展其他操作 |    可以理解为，受约束的 AIDL，主要提供数据源的 CURD 操作     |                   一对多的进程间的数据共享                   |\n|     Socket      |   功能强大，可以通过网络传输套接字，支持一对多并发实时通信   |            实现细节稍微有点繁琐，不支持直接的RPC             |                         网络数据交换                         |\n\n","source":"_posts/2018-03-18-andorid_ipc.md","raw":"---\nlayout: post\ntitle: \"Android IPC 机制\"\nsubtitle: \"Android 艺术开发探索笔记\"\ndate: 2018-03-18 20:55:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n  - Note\n---\n\n\n\nIPC 是 Inter-Process Communication 的缩写，含义为进程间通信或跨进程通信，是指两个进程之间进行数据交换的过程。那么什么是进程？什么是线程？按照操作系统的概念，线程是 CPU 调度的最小单元，同时线程是一种有限的系统资源。二进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者应用。一个进程可以包含多个线程，也可以只有一个线程即主线程，在Android 也叫 UI 线程。\n\n### 为什么需要多进程通信，使用场景\n\n前面也有说在操作系统中一个进程对应的指一个程序或者应用，当两个应用需要数据交互的时候就必须要采取夸进程的通信方式来获取所需要的数据。**在 Android 中每一个应用或进程都分配了一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这会导致不同虚拟机访问同一个类会产生多份副本。这时候通过内存来共享数据，都会共享失败**，不仅如此还会造成很多问题，例如：\n\n1. 静态成员和单例模式完全失效\n2. 线程同步机制完全失效\n3. SharedPreferences 的可靠性下降\n4. Application 会多次创建\n\n所以任何一个操作系统都需要相应的 IPC 机制，比如 Windows 上可以通过剪贴板、管道和邮槽等来进行进程间通信；Linux 上可以通过命名管道、共享内容、信号量等来进行进程通信。对于 Android来说，它是一种基于 Linux 内核的移动操作系统，但它有自己的进程通信方式 Binder，除此之外还支持 Socket。\n\n### Android 中的多进程模式\n\n#### 开启多进程\n\n在一个应用开启多进程只有一种方法，那就是给四大组件在 AndroidMenifest 中指定 android:process 属性，除此之外没有其他方法。还有一种非常规的多进程方法，那就是通过 JNI 在native 层去 fork 一个新的进程，这里不做阐述。\n\n```java\n  <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".SecondActivity\"\n            android:process=\":remote\" />\n        <activity\n            android:name=\".ThirdActivity\"\n            android:process=\"com.czj.adapter.remote\" />\n```\n\n通过 process 属性值指定其运行的进程，假设当前应用的进程为 `com.czj.adapte` 那么当 SecondActivity 启动时 系统会为它创建一个新的进程，名为`com.czj.adpater:remote` ，当ThirdActiivty 启动时候系统也会为它新建一个进程，名为`com.czj.adpater.remote`。新建的两个进程其实是有区别的，\" : \" 的含义是指要在当前的进程名前面附加上当前的包名，这是一种简写的方法，对于 SecondActivity 它完整的进程是 `com.czj.adpate:remote` 它属于当前应用的私有进程，而不适用 “ ：” 开头的属于全局进程，其他应用通过 ShareUID 方式可以和它跑在同一个进程中。\n\nAndroid 系统为每个应用分配了一个唯一的 UID，具有相同 UID 应用才能共享数据。这里要说明的是，两个应用只有拥有相同的ShareUID并且签名相同才可以跑在统一进程。在这种情况下它们可以互相访问对方的私有数据，比如 data 目录、组件信息等，不管它们是否泡在同一个进程中。\n\n### IPC基础概念介绍\n\n#### Binder\n\n> 直观来讲，Binder 是 Android 中的一个类，它实现了 IBinder 接口。从 IPC 角度来讲，Binder 是 Android 系统的一种夸进程通信方式，BInder 还可以理解为一种虚拟的物理设备，它的设备驱动是 `/dev/binder`，该通信方式在 Linux 中没有；从 Android Framework 层角度来说，Binder 是 ServiceManager 连接各种 Manger (ActivityMnager、WindowManger，等等)和相应 ManagerService 的桥梁；从 Android 应用层来说，Binder 是客户端和服务端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder 对象，通过这个 Binder 对象，客户端就可以获得服务端提供的服务或者数据，这里的服务包括普通服务和机遇 AIDL 的服务。\n\n#### Android 中的 IPC 方式\n\n##### 使用Bundle\n\nActivity、Service、Receiver 都是支持在 Intent 中传递 Bundle 数据的，由于 Bundle 时间了 Parcelable 接口，所以它可以方便地在不同的进程间传输。除了直接传递数据这种经典的使用场景，它还有一种特殊的使用场景。比如 A 进程在进行一个计算，计算完成后它要启动 B 进程的一个组件并把计算结果传递给 B 进程，并且遗憾的是这个计算结果不支持放入 Bundle 中，因此无法通过 Intent 来传输，这个时候使用 其他 IPC 就略显复杂。我们可以考虑将通过 Intent 启动 B 进程的一个 Service 组件，让 Service 在后台进行计算，计算完毕再启动 B 进程真正想要启动的目标组件，由于 Service 也运行在 B 进程中，所以目标组件就可以直接获取计算结果，这样一来就轻松解决了夸进程的问题。\n\n#### 使用文件共享\n\n共享文件也是一种不错的进程间通信，两个进程通过读/写同一个文件来交换数据。通过文件共享数据对文件格式是没有具体要求的，比如可以是文本共享、也是是 XML 只要双方约定数据格式即可。通过文件共享的方式也是有局限性的，比如并发读/写的问题，如果有并发的情况，那么我们读的内容可不能不是最新的，如果是并发写的话就更严重了。文件共享方式比较适合在对同步数据要求不高的进程间通信，并且妥善处理并发/读写的问题。\n\n系统的 SharedPreferences 是 Android 提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层上使用 xml 文件来保存。从本质上 SharedPreferences 也是文件的一种，但是由于系统对它的读/写做了一定的缓存策略，即在内存中会有一份 SharedPreferences 文件的缓存，因此在多进程模式下，系统对它的读写就变得很不可靠，当面对高并发的读/写访问，SharedPreferences 有很大几率丢失数据。\n\n#### 使用 Messenger\n\nMessenger 可以在不同进程传递 Message 对象，它是一种基于 AIDL 的轻量级 IPC 方案，对 AIDL 做了封装从而使我们可以更简便地进行进程间通信。且由于它一次只处理一种请求，因此服务端我们不用考虑线程同步的问题，这是因为在服务端中不存在并发执行的情况。\n\n#### 使用AIDL\n\nMesseneger 是以串行的方式来处理客户端发送的消息，如果大量的消息同时发送到到服务端，而服务端只能一个一个处理，那么用 Messenger 就不大合适了。同时，Messenger 的作用主要是为了传递消息，很多时候我们可能需要夸进程的调用服务端的方法，这种情况 Messenger 就无法做到了，但是我们可以使用 AIDL 来实现。\n\n###### 创建 AIDL \n\n```Java\n//创建 AIDL 文件Build后生成相应的类\n// AIDL 支持 基本类型和 String、CharSequence、List、Map、Parcelable、AIDL\n//当我们使用Parcelable时，我们要单独创建一个同名使用 parcelable 声明。\n//Book.aidl\npackage com.example.nutcracker.myapplication;\nparcelable Book;\n//IBookManager.aidl\npackage com.example.nutcracker.myapplication;\n\nimport com.example.nutcracker.myapplication.Book;\ninterface IBookManger{\n    List<Book> getBook();\n    void addBook(Book book);\n}\n```\n\n###### 服务端实现\n\n```kotlin\npublic class AIDLService extends Service {\n\n    private List<Book> bookList = new ArrayList<>();\n\n    private IBookManager.Stub mBookManager = new IBookManager.Stub() {\n        @Override\n        public List<Book> getBookList() throws RemoteException {\n            Log.i(\"service\", \"读取书籍\");\n            return bookList;\n        }\n\n        @Override\n        public void addBook(Book book) throws RemoteException {\n            Log.i(\"service\", \"添加书籍\");\n            bookList.add(book);\n        }\n    };\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBookManager;\n    }\n}\n```\n\n###### 客户端实现\n\n```kotlin\n//我们实现了一个定时向服务端添加书籍并查询书籍的组件\nclass ThirdActivity : AppCompatActivity() {\n\n    lateinit var promptView: TextView\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_third)\n        promptView = findViewById(R.id.textView2)\n        val intent = Intent(this, AIDLService::class.java)\n        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)\n    }\n\n    private val handle: Handler = @SuppressLint(\"HandlerLeak\")\n    object : Handler() {\n        override fun handleMessage(msg: Message?) {\n            super.handleMessage(msg)\n            val book = manager.bookList.last()\n            promptView.text = book.bookName\n        }\n    }\n    var sum: Int = 0\n\n    inner class MyThread : Runnable {\n        override fun run() {\n            while (true) {\n                try {\n                    manager.addBook(Book(1, \"book$sum\"))\n                    sum++\n                    Thread.sleep(1000)// 线程暂停1秒\n                    val message = Message()\n                    message.what = 1\n                    handle.sendMessage(message)// 发送消息\n                } catch (e: InterruptedException) {\n                    e.printStackTrace()\n                }\n\n            }\n        }\n    }\n\n    private var isConnection = false\n    private lateinit var manager: IBookManager\n\n    private val serviceConnection = object : ServiceConnection {\n        override fun onServiceConnected(p0: ComponentName?, p1: IBinder?) {\n            manager = IBookManager.Stub.asInterface(p1)\n            isConnection = true\n            Log.i(\"client\", \" 连接上客户端\")\n            Thread(MyThread()).start()\n        }\n\n        override fun onServiceDisconnected(p0: ComponentName?) {\n            isConnection = false\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        unbindService(serviceConnection)\n    }\n}\n```\n\n#### 使用ContentProvider\n\nContentProvider 是 Android 中提供的专门用于不同应用之间共享数据的方式，从这一点来看，它天生就适合进程间通信。和 Messenger 一样，ContentProvider 的底层实现同样为 Binder。\n\n###### 创建数据源\n\n我们先创建一个数据库为ContentProvider提供数据\n\n```kotlin\nclass DbOpenHelper(context: Context) : SQLiteOpenHelper(context, DB_NAME, null, DB_VERSION) {\n\n    companion object {\n        const val DB_VERSION = 1\n        const val DB_NAME = \"book_provider\"\n        public const val BOOK_TABLE_NAME = \"book\"\n        public const val USER_TABLE_NAME = \"user\"\n\n        const val CREATE_BOOK_TABLE = \"CREATE TABLE  IF NOT EXISTS $BOOK_TABLE_NAME (_id INTEGER PRIMARY KEY,name TEXT)\"\n        const val CREATE_USER_TABLE = \"CREATE TABLE  IF NOT EXISTS $USER_TABLE_NAME (_id INTEGER PRIMARY KEY,name TEXT,sex INT)\"\n    }\n\n    override fun onCreate(db: SQLiteDatabase?) {\n        db?.execSQL(CREATE_BOOK_TABLE)\n        db?.execSQL(CREATE_USER_TABLE)\n\n    }\n\n    override fun onUpgrade(p0: SQLiteDatabase?, p1: Int, p2: Int) {\n    }\n\n}\n```\n\n\n\n###### 创建一个 ContentProvider\n\n> 创建一个自定义的ContentProvider 只需要集成 ContentProvider 并实现六个抽象方法即可：onCreate、query、update、insert、delte、和  getType。这六个抽象方法都很好理解，onCreate 代表 ContentProvider 的创建，一般来说我们要做一些初始化的工作；getType 用来返回一个 Uri 请求所对应的 MIME 类型（媒体类型），比如图片、视频等，如果我们不关注这个类型可以直接返回 null 或 `*/*` ;剩下的四个方法对应 CRUD 操作，即实现对数据表的增删改查工作。根据 Binder 的工作原理，我们知道这六个方法均在 ContentProvider 的进程中，除了 onCreate 由系统回调并运行在主线程中，其他五个方法均由外界回调并运行在 Binder 线程池中。\n\n我们来自定义一个 ContentProvider 并使用之前定义的DbOpenHelper 来作为操作的数据\n\n```kotlin\nclass BookProvider : ContentProvider() {\n\n    companion object {\n        private const val TAG: String = \"BookProvider\"\n        private const val AUTHORITIES = \"com.example.nutcracker.myapplication.BookProvider\"\n        val BOOK_CONTENT_URI = Uri.parse(\"content://$AUTHORITIES/book\")\n        private const val BOOK_URI_CODE = 0\n        val USER_CONTENT_URI = Uri.parse(\"content://$AUTHORITIES/user\")\n        private const val USER_URI_CODE = 1\n        private val uriMather = UriMatcher(UriMatcher.NO_MATCH)\n    }\n\n    init {\n        uriMather.addURI(AUTHORITIES, \"book\", BOOK_URI_CODE)\n        uriMather.addURI(AUTHORITIES, \"user\", USER_URI_CODE)\n    }\n\n    lateinit var db: SQLiteDatabase\n\n\n    override fun onCreate(): Boolean {\n        Log.i(TAG, \"onCreate,current thread:${Thread.currentThread()}\")\n        val openHelper = DbOpenHelper(context)\n        db = openHelper.writableDatabase\n        db.execSQL(\"delete from \" + DbOpenHelper.BOOK_TABLE_NAME)\n        db.execSQL(\"delete from \" + DbOpenHelper.USER_TABLE_NAME)\n        db.execSQL(\"insert into book values(3,'android');\")\n        db.execSQL(\"insert into book values(4,'iOS');\")\n        db.execSQL(\"insert into book values(5,'html');\")\n        db.execSQL(\"insert into user values(1,'jon',11);\")\n        return false\n    }\n\n    override fun query(uri: Uri, strings: Array<String>?, s: String?, strings1: Array<String>?, s1: String?): Cursor? {\n        Log.i(TAG, \"query,current thread:${Thread.currentThread()}\")\n        val tableName: String = getTableName(uri)\n        return db.query(tableName, strings, s, strings1, null, null, s1, null)\n    }\n\n    override fun getType(uri: Uri): String? {\n        return null\n    }\n\n    override fun insert(uri: Uri, contentValues: ContentValues?): Uri? {\n        val tableName: String = getTableName(uri)\n        db.insert(tableName, null, contentValues)\n        context.contentResolver.notifyChange(uri, null)\n        return uri\n    }\n\n    override fun delete(uri: Uri, s: String?, strings: Array<String>?): Int {\n        val count = db.delete(getTableName(uri), s, strings)\n        if (count > 0) {\n            context.contentResolver.notifyChange(uri, null)\n        }\n        return count\n    }\n\n    override fun update(uri: Uri, contentValues: ContentValues?, s: String?, strings: Array<String>?): Int {\n        val row = db.update(getTableName(uri), contentValues, s, strings)\n        if (row > 0) {\n            context.contentResolver.notifyChange(uri, null)\n        }\n        return row\n    }\n\n    private fun getTableName(uri: Uri): String {\n        return when (uriMather.match(uri)) {\n            BOOK_URI_CODE -> DbOpenHelper.BOOK_TABLE_NAME\n            USER_URI_CODE -> DbOpenHelper.USER_TABLE_NAME\n            else -> throw IllegalAccessException(\"Unsupported URI:$uri\")\n        }\n    }\n}\n\n```\n\n然后在清单文件申明它\n\n```xml\n       <provider\n            android:name=\".BookProvider\"\n       android:authorities=\"com.example.nutcracker.myapplication.BookProvider\"\n            android:permission=\"com.example.provider\"\n            android:process=\":provider\"\n            />\n```\n\n其中 authorities 是Content-Provider 的唯一标示，通过这个属性外部应用就可以访问我们的 ContentProvider ，所以这个值必须是唯一的。为了演示进程间通信，我们让 BookProvider 运行在独立的进程并给它添加了权限，这样如果外部应用想访问它就必须申明对应的权限（这里指“\"com.example.provider”）,否则外部应用就会异常终止。\n\n###### 最后我们在Activity中测试使用我们的ContentProvider\n\n```kotlin\nclass SecondActivity : AppCompatActivity() {\n\n    companion object {\n        const val TAG = \"Application Provider\"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_second)\n\n        val values = ContentValues()\n        values.put(\"_id\", 6)\n        values.put(\"name\", \"编程之美\")\n        contentResolver.insert(BookProvider.BOOK_CONTENT_URI, values)\n\n        val cursor = contentResolver.query(BookProvider.BOOK_CONTENT_URI, arrayOf(\"_id\", \"name\"), null, null, null)\n        while (cursor.moveToNext()) {\n            Log.i(TAG, \"id:${cursor.getInt(0)} name :${cursor.getString(1)}\")\n        }\n        cursor.close()\n    }\n}\n\n----------------- 输出\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:3 name :android\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:4 name :iOS\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:5 name :html\n03-18 22:54:42.415 1935-1935/com.example.nutcracker.myapplication:remote I/Application Provider: id:6 name :编程之美\n```\n\n#### 使用Socket\n\n我们也开始使用 Socket 来进行夸进程通信，除了使用 TCP  还可以使用 UDP 套接字。在性能上 UDP 具有更好的效率，其缺点是不保证数据一定能够正确传输，尤其是网络堵塞的情况下。\n\n#### Binder 连接池\n\n\n\n#### 选择合适的 IPC 方式\n\n|      名称       |                             优点                             |                             缺点                             |                           适用场景                           |\n| :-------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|     Bundle      |                           简单易用                           |                  只能传输 Bundle 支持的数据                  |                     四大组件间的进程通信                     |\n|    文件共享     |                           简单易用                           |        不适合高并发场景，并且无法做到进程间的即时通信        |        无并发访问情况，交换简单的数据实时性不高的场景        |\n|      AIDL       |          功能强大，支持一对多并发通信，支持实时通信          |                使用稍复杂，需要处理好线程同步                |                  一对多通信并且有 RPC 需求                   |\n|    Messenger    |          功能一般，支持一对多串行通信，支持实时通信          | 不能很好的处理高并发场景，不支持 RPC，数据通过 Message 传输，因此只支持 Bundle 支持的数据类型 | 低并发的一对多即使通信，无 RPC需求，或者无需返回结果的 PRC 需求 |\n| ContentProvider | 在数据源访问功能强大，支持一对多并发数据共享，可通过 call 方法扩展其他操作 |    可以理解为，受约束的 AIDL，主要提供数据源的 CURD 操作     |                   一对多的进程间的数据共享                   |\n|     Socket      |   功能强大，可以通过网络传输套接字，支持一对多并发实时通信   |            实现细节稍微有点繁琐，不支持直接的RPC             |                         网络数据交换                         |\n\n","slug":"2018-03-18-andorid_ipc","published":1,"updated":"2024-09-13T03:38:13.727Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pp001zs2y42qm40ira","content":"<p>IPC 是 Inter-Process Communication 的缩写，含义为进程间通信或跨进程通信，是指两个进程之间进行数据交换的过程。那么什么是进程？什么是线程？按照操作系统的概念，线程是 CPU 调度的最小单元，同时线程是一种有限的系统资源。二进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者应用。一个进程可以包含多个线程，也可以只有一个线程即主线程，在Android 也叫 UI 线程。</p>\n<h3 id=\"为什么需要多进程通信，使用场景\"><a href=\"#为什么需要多进程通信，使用场景\" class=\"headerlink\" title=\"为什么需要多进程通信，使用场景\"></a>为什么需要多进程通信，使用场景</h3><p>前面也有说在操作系统中一个进程对应的指一个程序或者应用，当两个应用需要数据交互的时候就必须要采取夸进程的通信方式来获取所需要的数据。<strong>在 Android 中每一个应用或进程都分配了一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这会导致不同虚拟机访问同一个类会产生多份副本。这时候通过内存来共享数据，都会共享失败</strong>，不仅如此还会造成很多问题，例如：</p>\n<ol>\n<li>静态成员和单例模式完全失效</li>\n<li>线程同步机制完全失效</li>\n<li>SharedPreferences 的可靠性下降</li>\n<li>Application 会多次创建</li>\n</ol>\n<p>所以任何一个操作系统都需要相应的 IPC 机制，比如 Windows 上可以通过剪贴板、管道和邮槽等来进行进程间通信；Linux 上可以通过命名管道、共享内容、信号量等来进行进程通信。对于 Android来说，它是一种基于 Linux 内核的移动操作系统，但它有自己的进程通信方式 Binder，除此之外还支持 Socket。</p>\n<h3 id=\"Android-中的多进程模式\"><a href=\"#Android-中的多进程模式\" class=\"headerlink\" title=\"Android 中的多进程模式\"></a>Android 中的多进程模式</h3><h4 id=\"开启多进程\"><a href=\"#开启多进程\" class=\"headerlink\" title=\"开启多进程\"></a>开启多进程</h4><p>在一个应用开启多进程只有一种方法，那就是给四大组件在 AndroidMenifest 中指定 android:process 属性，除此之外没有其他方法。还有一种非常规的多进程方法，那就是通过 JNI 在native 层去 fork 一个新的进程，这里不做阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=<span class=\"string\">&quot;.MainActivity&quot;</span>&gt;</span><br><span class=\"line\">          &lt;intent-filter&gt;</span><br><span class=\"line\">              &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class=\"line\">              &lt;category android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br><span class=\"line\">          &lt;/intent-filter&gt;</span><br><span class=\"line\">      &lt;/activity&gt;</span><br><span class=\"line\">      &lt;activity</span><br><span class=\"line\">          android:name=<span class=\"string\">&quot;.SecondActivity&quot;</span></span><br><span class=\"line\">          android:process=<span class=\"string\">&quot;:remote&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;activity</span><br><span class=\"line\">          android:name=<span class=\"string\">&quot;.ThirdActivity&quot;</span></span><br><span class=\"line\">          android:process=<span class=\"string\">&quot;com.czj.adapter.remote&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过 process 属性值指定其运行的进程，假设当前应用的进程为 <code>com.czj.adapte</code> 那么当 SecondActivity 启动时 系统会为它创建一个新的进程，名为<code>com.czj.adpater:remote</code> ，当ThirdActiivty 启动时候系统也会为它新建一个进程，名为<code>com.czj.adpater.remote</code>。新建的两个进程其实是有区别的，” : “ 的含义是指要在当前的进程名前面附加上当前的包名，这是一种简写的方法，对于 SecondActivity 它完整的进程是 <code>com.czj.adpate:remote</code> 它属于当前应用的私有进程，而不适用 “ ：” 开头的属于全局进程，其他应用通过 ShareUID 方式可以和它跑在同一个进程中。</p>\n<p>Android 系统为每个应用分配了一个唯一的 UID，具有相同 UID 应用才能共享数据。这里要说明的是，两个应用只有拥有相同的ShareUID并且签名相同才可以跑在统一进程。在这种情况下它们可以互相访问对方的私有数据，比如 data 目录、组件信息等，不管它们是否泡在同一个进程中。</p>\n<h3 id=\"IPC基础概念介绍\"><a href=\"#IPC基础概念介绍\" class=\"headerlink\" title=\"IPC基础概念介绍\"></a>IPC基础概念介绍</h3><h4 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h4><blockquote>\n<p>直观来讲，Binder 是 Android 中的一个类，它实现了 IBinder 接口。从 IPC 角度来讲，Binder 是 Android 系统的一种夸进程通信方式，BInder 还可以理解为一种虚拟的物理设备，它的设备驱动是 <code>/dev/binder</code>，该通信方式在 Linux 中没有；从 Android Framework 层角度来说，Binder 是 ServiceManager 连接各种 Manger (ActivityMnager、WindowManger，等等)和相应 ManagerService 的桥梁；从 Android 应用层来说，Binder 是客户端和服务端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder 对象，通过这个 Binder 对象，客户端就可以获得服务端提供的服务或者数据，这里的服务包括普通服务和机遇 AIDL 的服务。</p>\n</blockquote>\n<h4 id=\"Android-中的-IPC-方式\"><a href=\"#Android-中的-IPC-方式\" class=\"headerlink\" title=\"Android 中的 IPC 方式\"></a>Android 中的 IPC 方式</h4><h5 id=\"使用Bundle\"><a href=\"#使用Bundle\" class=\"headerlink\" title=\"使用Bundle\"></a>使用Bundle</h5><p>Activity、Service、Receiver 都是支持在 Intent 中传递 Bundle 数据的，由于 Bundle 时间了 Parcelable 接口，所以它可以方便地在不同的进程间传输。除了直接传递数据这种经典的使用场景，它还有一种特殊的使用场景。比如 A 进程在进行一个计算，计算完成后它要启动 B 进程的一个组件并把计算结果传递给 B 进程，并且遗憾的是这个计算结果不支持放入 Bundle 中，因此无法通过 Intent 来传输，这个时候使用 其他 IPC 就略显复杂。我们可以考虑将通过 Intent 启动 B 进程的一个 Service 组件，让 Service 在后台进行计算，计算完毕再启动 B 进程真正想要启动的目标组件，由于 Service 也运行在 B 进程中，所以目标组件就可以直接获取计算结果，这样一来就轻松解决了夸进程的问题。</p>\n<h4 id=\"使用文件共享\"><a href=\"#使用文件共享\" class=\"headerlink\" title=\"使用文件共享\"></a>使用文件共享</h4><p>共享文件也是一种不错的进程间通信，两个进程通过读&#x2F;写同一个文件来交换数据。通过文件共享数据对文件格式是没有具体要求的，比如可以是文本共享、也是是 XML 只要双方约定数据格式即可。通过文件共享的方式也是有局限性的，比如并发读&#x2F;写的问题，如果有并发的情况，那么我们读的内容可不能不是最新的，如果是并发写的话就更严重了。文件共享方式比较适合在对同步数据要求不高的进程间通信，并且妥善处理并发&#x2F;读写的问题。</p>\n<p>系统的 SharedPreferences 是 Android 提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层上使用 xml 文件来保存。从本质上 SharedPreferences 也是文件的一种，但是由于系统对它的读&#x2F;写做了一定的缓存策略，即在内存中会有一份 SharedPreferences 文件的缓存，因此在多进程模式下，系统对它的读写就变得很不可靠，当面对高并发的读&#x2F;写访问，SharedPreferences 有很大几率丢失数据。</p>\n<h4 id=\"使用-Messenger\"><a href=\"#使用-Messenger\" class=\"headerlink\" title=\"使用 Messenger\"></a>使用 Messenger</h4><p>Messenger 可以在不同进程传递 Message 对象，它是一种基于 AIDL 的轻量级 IPC 方案，对 AIDL 做了封装从而使我们可以更简便地进行进程间通信。且由于它一次只处理一种请求，因此服务端我们不用考虑线程同步的问题，这是因为在服务端中不存在并发执行的情况。</p>\n<h4 id=\"使用AIDL\"><a href=\"#使用AIDL\" class=\"headerlink\" title=\"使用AIDL\"></a>使用AIDL</h4><p>Messeneger 是以串行的方式来处理客户端发送的消息，如果大量的消息同时发送到到服务端，而服务端只能一个一个处理，那么用 Messenger 就不大合适了。同时，Messenger 的作用主要是为了传递消息，很多时候我们可能需要夸进程的调用服务端的方法，这种情况 Messenger 就无法做到了，但是我们可以使用 AIDL 来实现。</p>\n<h6 id=\"创建-AIDL\"><a href=\"#创建-AIDL\" class=\"headerlink\" title=\"创建 AIDL\"></a>创建 AIDL</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建 AIDL 文件Build后生成相应的类</span></span><br><span class=\"line\"><span class=\"comment\">// AIDL 支持 基本类型和 String、CharSequence、List、Map、Parcelable、AIDL</span></span><br><span class=\"line\"><span class=\"comment\">//当我们使用Parcelable时，我们要单独创建一个同名使用 parcelable 声明。</span></span><br><span class=\"line\"><span class=\"comment\">//Book.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.nutcracker.myapplication;</span><br><span class=\"line\">parcelable Book;</span><br><span class=\"line\"><span class=\"comment\">//IBookManager.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.nutcracker.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.nutcracker.myapplication.Book;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IBookManger</span>&#123;</span><br><span class=\"line\">    List&lt;Book&gt; <span class=\"title function_\">getBook</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addBook</span><span class=\"params\">(Book book)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AIDLService</span> <span class=\"title\">extends</span> <span class=\"title\">Service</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Book&gt; bookList = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBookManager.Stub mBookManager = new IBookManager.Stub() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Book&gt; getBookList() throws RemoteException &#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;service&quot;</span>, <span class=\"string\">&quot;读取书籍&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bookList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> void addBook(Book book) throws RemoteException &#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;service&quot;</span>, <span class=\"string\">&quot;添加书籍&quot;</span>);</span><br><span class=\"line\">            bookList.add(book);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBookManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们实现了一个定时向服务端添加书籍并查询书籍的组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThirdActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> promptView: TextView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_third)</span><br><span class=\"line\">        promptView = findViewById(R.id.textView2)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, AIDLService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> handle: Handler = <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;HandlerLeak&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> : Handler() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleMessage</span><span class=\"params\">(msg: <span class=\"type\">Message</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> book = manager.bookList.last()</span><br><span class=\"line\">            promptView.text = book.bookName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> : <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    manager.addBook(Book(<span class=\"number\">1</span>, <span class=\"string\">&quot;book<span class=\"variable\">$sum</span>&quot;</span>))</span><br><span class=\"line\">                    sum++</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>)<span class=\"comment\">// 线程暂停1秒</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> message = Message()</span><br><span class=\"line\">                    message.what = <span class=\"number\">1</span></span><br><span class=\"line\">                    handle.sendMessage(message)<span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: InterruptedException) &#123;</span><br><span class=\"line\">                    e.printStackTrace()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isConnection = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> manager: IBookManager</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> serviceConnection = <span class=\"keyword\">object</span> : ServiceConnection &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(p0: <span class=\"type\">ComponentName</span>?, p1: <span class=\"type\">IBinder</span>?)</span></span> &#123;</span><br><span class=\"line\">            manager = IBookManager.Stub.asInterface(p1)</span><br><span class=\"line\">            isConnection = <span class=\"literal\">true</span></span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;client&quot;</span>, <span class=\"string\">&quot; 连接上客户端&quot;</span>)</span><br><span class=\"line\">            Thread(MyThread()).start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(p0: <span class=\"type\">ComponentName</span>?)</span></span> &#123;</span><br><span class=\"line\">            isConnection = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        unbindService(serviceConnection)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用ContentProvider\"><a href=\"#使用ContentProvider\" class=\"headerlink\" title=\"使用ContentProvider\"></a>使用ContentProvider</h4><p>ContentProvider 是 Android 中提供的专门用于不同应用之间共享数据的方式，从这一点来看，它天生就适合进程间通信。和 Messenger 一样，ContentProvider 的底层实现同样为 Binder。</p>\n<h6 id=\"创建数据源\"><a href=\"#创建数据源\" class=\"headerlink\" title=\"创建数据源\"></a>创建数据源</h6><p>我们先创建一个数据库为ContentProvider提供数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DbOpenHelper</span>(context: Context) : SQLiteOpenHelper(context, DB_NAME, <span class=\"literal\">null</span>, DB_VERSION) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DB_VERSION = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DB_NAME = <span class=\"string\">&quot;book_provider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BOOK_TABLE_NAME = <span class=\"string\">&quot;book&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_TABLE_NAME = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> CREATE_BOOK_TABLE = <span class=\"string\">&quot;CREATE TABLE  IF NOT EXISTS <span class=\"variable\">$BOOK_TABLE_NAME</span> (_id INTEGER PRIMARY KEY,name TEXT)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> CREATE_USER_TABLE = <span class=\"string\">&quot;CREATE TABLE  IF NOT EXISTS <span class=\"variable\">$USER_TABLE_NAME</span> (_id INTEGER PRIMARY KEY,name TEXT,sex INT)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>?)</span></span> &#123;</span><br><span class=\"line\">        db?.execSQL(CREATE_BOOK_TABLE)</span><br><span class=\"line\">        db?.execSQL(CREATE_USER_TABLE)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(p0: <span class=\"type\">SQLiteDatabase</span>?, p1: <span class=\"type\">Int</span>, p2: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"创建一个-ContentProvider\"><a href=\"#创建一个-ContentProvider\" class=\"headerlink\" title=\"创建一个 ContentProvider\"></a>创建一个 ContentProvider</h6><blockquote>\n<p>创建一个自定义的ContentProvider 只需要集成 ContentProvider 并实现六个抽象方法即可：onCreate、query、update、insert、delte、和  getType。这六个抽象方法都很好理解，onCreate 代表 ContentProvider 的创建，一般来说我们要做一些初始化的工作；getType 用来返回一个 Uri 请求所对应的 MIME 类型（媒体类型），比如图片、视频等，如果我们不关注这个类型可以直接返回 null 或 <code>*/*</code> ;剩下的四个方法对应 CRUD 操作，即实现对数据表的增删改查工作。根据 Binder 的工作原理，我们知道这六个方法均在 ContentProvider 的进程中，除了 onCreate 由系统回调并运行在主线程中，其他五个方法均由外界回调并运行在 Binder 线程池中。</p>\n</blockquote>\n<p>我们来自定义一个 ContentProvider 并使用之前定义的DbOpenHelper 来作为操作的数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BookProvider</span> : <span class=\"type\">ContentProvider</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG: String = <span class=\"string\">&quot;BookProvider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> AUTHORITIES = <span class=\"string\">&quot;com.example.nutcracker.myapplication.BookProvider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> BOOK_CONTENT_URI = Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$AUTHORITIES</span>/book&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BOOK_URI_CODE = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> USER_CONTENT_URI = Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$AUTHORITIES</span>/user&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_URI_CODE = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> uriMather = UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        uriMather.addURI(AUTHORITIES, <span class=\"string\">&quot;book&quot;</span>, BOOK_URI_CODE)</span><br><span class=\"line\">        uriMather.addURI(AUTHORITIES, <span class=\"string\">&quot;user&quot;</span>, USER_URI_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;onCreate,current thread:<span class=\"subst\">$&#123;Thread.currentThread()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> openHelper = DbOpenHelper(context)</span><br><span class=\"line\">        db = openHelper.writableDatabase</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;delete from &quot;</span> + DbOpenHelper.BOOK_TABLE_NAME)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;delete from &quot;</span> + DbOpenHelper.USER_TABLE_NAME)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(3,&#x27;android&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(4,&#x27;iOS&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(5,&#x27;html&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into user values(1,&#x27;jon&#x27;,11);&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">query</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, s: <span class=\"type\">String</span>?, strings1: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, s1: <span class=\"type\">String</span>?)</span></span>: Cursor? &#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;query,current thread:<span class=\"subst\">$&#123;Thread.currentThread()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tableName: String = getTableName(uri)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.query(tableName, strings, s, strings1, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, s1, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getType</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span>: String? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, contentValues: <span class=\"type\">ContentValues</span>?)</span></span>: Uri? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tableName: String = getTableName(uri)</span><br><span class=\"line\">        db.insert(tableName, <span class=\"literal\">null</span>, contentValues)</span><br><span class=\"line\">        context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uri</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, s: <span class=\"type\">String</span>?, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> count = db.delete(getTableName(uri), s, strings)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, contentValues: <span class=\"type\">ContentValues</span>?, s: <span class=\"type\">String</span>?, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> row = db.update(getTableName(uri), contentValues, s, strings)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTableName</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (uriMather.match(uri)) &#123;</span><br><span class=\"line\">            BOOK_URI_CODE -&gt; DbOpenHelper.BOOK_TABLE_NAME</span><br><span class=\"line\">            USER_URI_CODE -&gt; DbOpenHelper.USER_TABLE_NAME</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">&quot;Unsupported URI:<span class=\"variable\">$uri</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后在清单文件申明它</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.BookProvider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:authorities</span>=<span class=\"string\">&quot;com.example.nutcracker.myapplication.BookProvider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:permission</span>=<span class=\"string\">&quot;com.example.provider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:process</span>=<span class=\"string\">&quot;:provider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 authorities 是Content-Provider 的唯一标示，通过这个属性外部应用就可以访问我们的 ContentProvider ，所以这个值必须是唯一的。为了演示进程间通信，我们让 BookProvider 运行在独立的进程并给它添加了权限，这样如果外部应用想访问它就必须申明对应的权限（这里指“”com.example.provider”）,否则外部应用就会异常终止。</p>\n<h6 id=\"最后我们在Activity中测试使用我们的ContentProvider\"><a href=\"#最后我们在Activity中测试使用我们的ContentProvider\" class=\"headerlink\" title=\"最后我们在Activity中测试使用我们的ContentProvider\"></a>最后我们在Activity中测试使用我们的ContentProvider</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SecondActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;Application Provider&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_second)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> values = ContentValues()</span><br><span class=\"line\">        values.put(<span class=\"string\">&quot;_id&quot;</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">        values.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;编程之美&quot;</span>)</span><br><span class=\"line\">        contentResolver.insert(BookProvider.BOOK_CONTENT_URI, values)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = contentResolver.query(BookProvider.BOOK_CONTENT_URI, arrayOf(<span class=\"string\">&quot;_id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">&quot;id:<span class=\"subst\">$&#123;cursor.getInt(<span class=\"number\">0</span>)&#125;</span> name :<span class=\"subst\">$&#123;cursor.getString(<span class=\"number\">1</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------------- 输出</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">3</span> name :android</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">4</span> name :iOS</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">5</span> name :html</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">6</span> name :编程之美</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Socket\"><a href=\"#使用Socket\" class=\"headerlink\" title=\"使用Socket\"></a>使用Socket</h4><p>我们也开始使用 Socket 来进行夸进程通信，除了使用 TCP  还可以使用 UDP 套接字。在性能上 UDP 具有更好的效率，其缺点是不保证数据一定能够正确传输，尤其是网络堵塞的情况下。</p>\n<h4 id=\"Binder-连接池\"><a href=\"#Binder-连接池\" class=\"headerlink\" title=\"Binder 连接池\"></a>Binder 连接池</h4><h4 id=\"选择合适的-IPC-方式\"><a href=\"#选择合适的-IPC-方式\" class=\"headerlink\" title=\"选择合适的 IPC 方式\"></a>选择合适的 IPC 方式</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">优点</th>\n<th align=\"center\">缺点</th>\n<th align=\"center\">适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Bundle</td>\n<td align=\"center\">简单易用</td>\n<td align=\"center\">只能传输 Bundle 支持的数据</td>\n<td align=\"center\">四大组件间的进程通信</td>\n</tr>\n<tr>\n<td align=\"center\">文件共享</td>\n<td align=\"center\">简单易用</td>\n<td align=\"center\">不适合高并发场景，并且无法做到进程间的即时通信</td>\n<td align=\"center\">无并发访问情况，交换简单的数据实时性不高的场景</td>\n</tr>\n<tr>\n<td align=\"center\">AIDL</td>\n<td align=\"center\">功能强大，支持一对多并发通信，支持实时通信</td>\n<td align=\"center\">使用稍复杂，需要处理好线程同步</td>\n<td align=\"center\">一对多通信并且有 RPC 需求</td>\n</tr>\n<tr>\n<td align=\"center\">Messenger</td>\n<td align=\"center\">功能一般，支持一对多串行通信，支持实时通信</td>\n<td align=\"center\">不能很好的处理高并发场景，不支持 RPC，数据通过 Message 传输，因此只支持 Bundle 支持的数据类型</td>\n<td align=\"center\">低并发的一对多即使通信，无 RPC需求，或者无需返回结果的 PRC 需求</td>\n</tr>\n<tr>\n<td align=\"center\">ContentProvider</td>\n<td align=\"center\">在数据源访问功能强大，支持一对多并发数据共享，可通过 call 方法扩展其他操作</td>\n<td align=\"center\">可以理解为，受约束的 AIDL，主要提供数据源的 CURD 操作</td>\n<td align=\"center\">一对多的进程间的数据共享</td>\n</tr>\n<tr>\n<td align=\"center\">Socket</td>\n<td align=\"center\">功能强大，可以通过网络传输套接字，支持一对多并发实时通信</td>\n<td align=\"center\">实现细节稍微有点繁琐，不支持直接的RPC</td>\n<td align=\"center\">网络数据交换</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>IPC 是 Inter-Process Communication 的缩写，含义为进程间通信或跨进程通信，是指两个进程之间进行数据交换的过程。那么什么是进程？什么是线程？按照操作系统的概念，线程是 CPU 调度的最小单元，同时线程是一种有限的系统资源。二进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者应用。一个进程可以包含多个线程，也可以只有一个线程即主线程，在Android 也叫 UI 线程。</p>\n<h3 id=\"为什么需要多进程通信，使用场景\"><a href=\"#为什么需要多进程通信，使用场景\" class=\"headerlink\" title=\"为什么需要多进程通信，使用场景\"></a>为什么需要多进程通信，使用场景</h3><p>前面也有说在操作系统中一个进程对应的指一个程序或者应用，当两个应用需要数据交互的时候就必须要采取夸进程的通信方式来获取所需要的数据。<strong>在 Android 中每一个应用或进程都分配了一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这会导致不同虚拟机访问同一个类会产生多份副本。这时候通过内存来共享数据，都会共享失败</strong>，不仅如此还会造成很多问题，例如：</p>\n<ol>\n<li>静态成员和单例模式完全失效</li>\n<li>线程同步机制完全失效</li>\n<li>SharedPreferences 的可靠性下降</li>\n<li>Application 会多次创建</li>\n</ol>\n<p>所以任何一个操作系统都需要相应的 IPC 机制，比如 Windows 上可以通过剪贴板、管道和邮槽等来进行进程间通信；Linux 上可以通过命名管道、共享内容、信号量等来进行进程通信。对于 Android来说，它是一种基于 Linux 内核的移动操作系统，但它有自己的进程通信方式 Binder，除此之外还支持 Socket。</p>\n<h3 id=\"Android-中的多进程模式\"><a href=\"#Android-中的多进程模式\" class=\"headerlink\" title=\"Android 中的多进程模式\"></a>Android 中的多进程模式</h3><h4 id=\"开启多进程\"><a href=\"#开启多进程\" class=\"headerlink\" title=\"开启多进程\"></a>开启多进程</h4><p>在一个应用开启多进程只有一种方法，那就是给四大组件在 AndroidMenifest 中指定 android:process 属性，除此之外没有其他方法。还有一种非常规的多进程方法，那就是通过 JNI 在native 层去 fork 一个新的进程，这里不做阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=<span class=\"string\">&quot;.MainActivity&quot;</span>&gt;</span><br><span class=\"line\">          &lt;intent-filter&gt;</span><br><span class=\"line\">              &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class=\"line\">              &lt;category android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br><span class=\"line\">          &lt;/intent-filter&gt;</span><br><span class=\"line\">      &lt;/activity&gt;</span><br><span class=\"line\">      &lt;activity</span><br><span class=\"line\">          android:name=<span class=\"string\">&quot;.SecondActivity&quot;</span></span><br><span class=\"line\">          android:process=<span class=\"string\">&quot;:remote&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;activity</span><br><span class=\"line\">          android:name=<span class=\"string\">&quot;.ThirdActivity&quot;</span></span><br><span class=\"line\">          android:process=<span class=\"string\">&quot;com.czj.adapter.remote&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过 process 属性值指定其运行的进程，假设当前应用的进程为 <code>com.czj.adapte</code> 那么当 SecondActivity 启动时 系统会为它创建一个新的进程，名为<code>com.czj.adpater:remote</code> ，当ThirdActiivty 启动时候系统也会为它新建一个进程，名为<code>com.czj.adpater.remote</code>。新建的两个进程其实是有区别的，” : “ 的含义是指要在当前的进程名前面附加上当前的包名，这是一种简写的方法，对于 SecondActivity 它完整的进程是 <code>com.czj.adpate:remote</code> 它属于当前应用的私有进程，而不适用 “ ：” 开头的属于全局进程，其他应用通过 ShareUID 方式可以和它跑在同一个进程中。</p>\n<p>Android 系统为每个应用分配了一个唯一的 UID，具有相同 UID 应用才能共享数据。这里要说明的是，两个应用只有拥有相同的ShareUID并且签名相同才可以跑在统一进程。在这种情况下它们可以互相访问对方的私有数据，比如 data 目录、组件信息等，不管它们是否泡在同一个进程中。</p>\n<h3 id=\"IPC基础概念介绍\"><a href=\"#IPC基础概念介绍\" class=\"headerlink\" title=\"IPC基础概念介绍\"></a>IPC基础概念介绍</h3><h4 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h4><blockquote>\n<p>直观来讲，Binder 是 Android 中的一个类，它实现了 IBinder 接口。从 IPC 角度来讲，Binder 是 Android 系统的一种夸进程通信方式，BInder 还可以理解为一种虚拟的物理设备，它的设备驱动是 <code>/dev/binder</code>，该通信方式在 Linux 中没有；从 Android Framework 层角度来说，Binder 是 ServiceManager 连接各种 Manger (ActivityMnager、WindowManger，等等)和相应 ManagerService 的桥梁；从 Android 应用层来说，Binder 是客户端和服务端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder 对象，通过这个 Binder 对象，客户端就可以获得服务端提供的服务或者数据，这里的服务包括普通服务和机遇 AIDL 的服务。</p>\n</blockquote>\n<h4 id=\"Android-中的-IPC-方式\"><a href=\"#Android-中的-IPC-方式\" class=\"headerlink\" title=\"Android 中的 IPC 方式\"></a>Android 中的 IPC 方式</h4><h5 id=\"使用Bundle\"><a href=\"#使用Bundle\" class=\"headerlink\" title=\"使用Bundle\"></a>使用Bundle</h5><p>Activity、Service、Receiver 都是支持在 Intent 中传递 Bundle 数据的，由于 Bundle 时间了 Parcelable 接口，所以它可以方便地在不同的进程间传输。除了直接传递数据这种经典的使用场景，它还有一种特殊的使用场景。比如 A 进程在进行一个计算，计算完成后它要启动 B 进程的一个组件并把计算结果传递给 B 进程，并且遗憾的是这个计算结果不支持放入 Bundle 中，因此无法通过 Intent 来传输，这个时候使用 其他 IPC 就略显复杂。我们可以考虑将通过 Intent 启动 B 进程的一个 Service 组件，让 Service 在后台进行计算，计算完毕再启动 B 进程真正想要启动的目标组件，由于 Service 也运行在 B 进程中，所以目标组件就可以直接获取计算结果，这样一来就轻松解决了夸进程的问题。</p>\n<h4 id=\"使用文件共享\"><a href=\"#使用文件共享\" class=\"headerlink\" title=\"使用文件共享\"></a>使用文件共享</h4><p>共享文件也是一种不错的进程间通信，两个进程通过读&#x2F;写同一个文件来交换数据。通过文件共享数据对文件格式是没有具体要求的，比如可以是文本共享、也是是 XML 只要双方约定数据格式即可。通过文件共享的方式也是有局限性的，比如并发读&#x2F;写的问题，如果有并发的情况，那么我们读的内容可不能不是最新的，如果是并发写的话就更严重了。文件共享方式比较适合在对同步数据要求不高的进程间通信，并且妥善处理并发&#x2F;读写的问题。</p>\n<p>系统的 SharedPreferences 是 Android 提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层上使用 xml 文件来保存。从本质上 SharedPreferences 也是文件的一种，但是由于系统对它的读&#x2F;写做了一定的缓存策略，即在内存中会有一份 SharedPreferences 文件的缓存，因此在多进程模式下，系统对它的读写就变得很不可靠，当面对高并发的读&#x2F;写访问，SharedPreferences 有很大几率丢失数据。</p>\n<h4 id=\"使用-Messenger\"><a href=\"#使用-Messenger\" class=\"headerlink\" title=\"使用 Messenger\"></a>使用 Messenger</h4><p>Messenger 可以在不同进程传递 Message 对象，它是一种基于 AIDL 的轻量级 IPC 方案，对 AIDL 做了封装从而使我们可以更简便地进行进程间通信。且由于它一次只处理一种请求，因此服务端我们不用考虑线程同步的问题，这是因为在服务端中不存在并发执行的情况。</p>\n<h4 id=\"使用AIDL\"><a href=\"#使用AIDL\" class=\"headerlink\" title=\"使用AIDL\"></a>使用AIDL</h4><p>Messeneger 是以串行的方式来处理客户端发送的消息，如果大量的消息同时发送到到服务端，而服务端只能一个一个处理，那么用 Messenger 就不大合适了。同时，Messenger 的作用主要是为了传递消息，很多时候我们可能需要夸进程的调用服务端的方法，这种情况 Messenger 就无法做到了，但是我们可以使用 AIDL 来实现。</p>\n<h6 id=\"创建-AIDL\"><a href=\"#创建-AIDL\" class=\"headerlink\" title=\"创建 AIDL\"></a>创建 AIDL</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建 AIDL 文件Build后生成相应的类</span></span><br><span class=\"line\"><span class=\"comment\">// AIDL 支持 基本类型和 String、CharSequence、List、Map、Parcelable、AIDL</span></span><br><span class=\"line\"><span class=\"comment\">//当我们使用Parcelable时，我们要单独创建一个同名使用 parcelable 声明。</span></span><br><span class=\"line\"><span class=\"comment\">//Book.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.nutcracker.myapplication;</span><br><span class=\"line\">parcelable Book;</span><br><span class=\"line\"><span class=\"comment\">//IBookManager.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.nutcracker.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.nutcracker.myapplication.Book;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IBookManger</span>&#123;</span><br><span class=\"line\">    List&lt;Book&gt; <span class=\"title function_\">getBook</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addBook</span><span class=\"params\">(Book book)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AIDLService</span> <span class=\"title\">extends</span> <span class=\"title\">Service</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Book&gt; bookList = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBookManager.Stub mBookManager = new IBookManager.Stub() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Book&gt; getBookList() throws RemoteException &#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;service&quot;</span>, <span class=\"string\">&quot;读取书籍&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bookList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> void addBook(Book book) throws RemoteException &#123;</span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;service&quot;</span>, <span class=\"string\">&quot;添加书籍&quot;</span>);</span><br><span class=\"line\">            bookList.add(book);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBookManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们实现了一个定时向服务端添加书籍并查询书籍的组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThirdActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> promptView: TextView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_third)</span><br><span class=\"line\">        promptView = findViewById(R.id.textView2)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, AIDLService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> handle: Handler = <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;HandlerLeak&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> : Handler() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleMessage</span><span class=\"params\">(msg: <span class=\"type\">Message</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> book = manager.bookList.last()</span><br><span class=\"line\">            promptView.text = book.bookName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> : <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    manager.addBook(Book(<span class=\"number\">1</span>, <span class=\"string\">&quot;book<span class=\"variable\">$sum</span>&quot;</span>))</span><br><span class=\"line\">                    sum++</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>)<span class=\"comment\">// 线程暂停1秒</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> message = Message()</span><br><span class=\"line\">                    message.what = <span class=\"number\">1</span></span><br><span class=\"line\">                    handle.sendMessage(message)<span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e: InterruptedException) &#123;</span><br><span class=\"line\">                    e.printStackTrace()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isConnection = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> manager: IBookManager</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> serviceConnection = <span class=\"keyword\">object</span> : ServiceConnection &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(p0: <span class=\"type\">ComponentName</span>?, p1: <span class=\"type\">IBinder</span>?)</span></span> &#123;</span><br><span class=\"line\">            manager = IBookManager.Stub.asInterface(p1)</span><br><span class=\"line\">            isConnection = <span class=\"literal\">true</span></span><br><span class=\"line\">            Log.i(<span class=\"string\">&quot;client&quot;</span>, <span class=\"string\">&quot; 连接上客户端&quot;</span>)</span><br><span class=\"line\">            Thread(MyThread()).start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(p0: <span class=\"type\">ComponentName</span>?)</span></span> &#123;</span><br><span class=\"line\">            isConnection = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        unbindService(serviceConnection)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用ContentProvider\"><a href=\"#使用ContentProvider\" class=\"headerlink\" title=\"使用ContentProvider\"></a>使用ContentProvider</h4><p>ContentProvider 是 Android 中提供的专门用于不同应用之间共享数据的方式，从这一点来看，它天生就适合进程间通信。和 Messenger 一样，ContentProvider 的底层实现同样为 Binder。</p>\n<h6 id=\"创建数据源\"><a href=\"#创建数据源\" class=\"headerlink\" title=\"创建数据源\"></a>创建数据源</h6><p>我们先创建一个数据库为ContentProvider提供数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DbOpenHelper</span>(context: Context) : SQLiteOpenHelper(context, DB_NAME, <span class=\"literal\">null</span>, DB_VERSION) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DB_VERSION = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DB_NAME = <span class=\"string\">&quot;book_provider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BOOK_TABLE_NAME = <span class=\"string\">&quot;book&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_TABLE_NAME = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> CREATE_BOOK_TABLE = <span class=\"string\">&quot;CREATE TABLE  IF NOT EXISTS <span class=\"variable\">$BOOK_TABLE_NAME</span> (_id INTEGER PRIMARY KEY,name TEXT)&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> CREATE_USER_TABLE = <span class=\"string\">&quot;CREATE TABLE  IF NOT EXISTS <span class=\"variable\">$USER_TABLE_NAME</span> (_id INTEGER PRIMARY KEY,name TEXT,sex INT)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>?)</span></span> &#123;</span><br><span class=\"line\">        db?.execSQL(CREATE_BOOK_TABLE)</span><br><span class=\"line\">        db?.execSQL(CREATE_USER_TABLE)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(p0: <span class=\"type\">SQLiteDatabase</span>?, p1: <span class=\"type\">Int</span>, p2: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"创建一个-ContentProvider\"><a href=\"#创建一个-ContentProvider\" class=\"headerlink\" title=\"创建一个 ContentProvider\"></a>创建一个 ContentProvider</h6><blockquote>\n<p>创建一个自定义的ContentProvider 只需要集成 ContentProvider 并实现六个抽象方法即可：onCreate、query、update、insert、delte、和  getType。这六个抽象方法都很好理解，onCreate 代表 ContentProvider 的创建，一般来说我们要做一些初始化的工作；getType 用来返回一个 Uri 请求所对应的 MIME 类型（媒体类型），比如图片、视频等，如果我们不关注这个类型可以直接返回 null 或 <code>*/*</code> ;剩下的四个方法对应 CRUD 操作，即实现对数据表的增删改查工作。根据 Binder 的工作原理，我们知道这六个方法均在 ContentProvider 的进程中，除了 onCreate 由系统回调并运行在主线程中，其他五个方法均由外界回调并运行在 Binder 线程池中。</p>\n</blockquote>\n<p>我们来自定义一个 ContentProvider 并使用之前定义的DbOpenHelper 来作为操作的数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BookProvider</span> : <span class=\"type\">ContentProvider</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG: String = <span class=\"string\">&quot;BookProvider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> AUTHORITIES = <span class=\"string\">&quot;com.example.nutcracker.myapplication.BookProvider&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> BOOK_CONTENT_URI = Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$AUTHORITIES</span>/book&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BOOK_URI_CODE = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> USER_CONTENT_URI = Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$AUTHORITIES</span>/user&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> USER_URI_CODE = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> uriMather = UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        uriMather.addURI(AUTHORITIES, <span class=\"string\">&quot;book&quot;</span>, BOOK_URI_CODE)</span><br><span class=\"line\">        uriMather.addURI(AUTHORITIES, <span class=\"string\">&quot;user&quot;</span>, USER_URI_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;onCreate,current thread:<span class=\"subst\">$&#123;Thread.currentThread()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> openHelper = DbOpenHelper(context)</span><br><span class=\"line\">        db = openHelper.writableDatabase</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;delete from &quot;</span> + DbOpenHelper.BOOK_TABLE_NAME)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;delete from &quot;</span> + DbOpenHelper.USER_TABLE_NAME)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(3,&#x27;android&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(4,&#x27;iOS&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into book values(5,&#x27;html&#x27;);&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;insert into user values(1,&#x27;jon&#x27;,11);&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">query</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, s: <span class=\"type\">String</span>?, strings1: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, s1: <span class=\"type\">String</span>?)</span></span>: Cursor? &#123;</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;query,current thread:<span class=\"subst\">$&#123;Thread.currentThread()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tableName: String = getTableName(uri)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.query(tableName, strings, s, strings1, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, s1, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getType</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span>: String? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, contentValues: <span class=\"type\">ContentValues</span>?)</span></span>: Uri? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tableName: String = getTableName(uri)</span><br><span class=\"line\">        db.insert(tableName, <span class=\"literal\">null</span>, contentValues)</span><br><span class=\"line\">        context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uri</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, s: <span class=\"type\">String</span>?, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> count = db.delete(getTableName(uri), s, strings)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, contentValues: <span class=\"type\">ContentValues</span>?, s: <span class=\"type\">String</span>?, strings: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> row = db.update(getTableName(uri), contentValues, s, strings)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            context.contentResolver.notifyChange(uri, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTableName</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (uriMather.match(uri)) &#123;</span><br><span class=\"line\">            BOOK_URI_CODE -&gt; DbOpenHelper.BOOK_TABLE_NAME</span><br><span class=\"line\">            USER_URI_CODE -&gt; DbOpenHelper.USER_TABLE_NAME</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">&quot;Unsupported URI:<span class=\"variable\">$uri</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后在清单文件申明它</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.BookProvider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:authorities</span>=<span class=\"string\">&quot;com.example.nutcracker.myapplication.BookProvider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:permission</span>=<span class=\"string\">&quot;com.example.provider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:process</span>=<span class=\"string\">&quot;:provider&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 authorities 是Content-Provider 的唯一标示，通过这个属性外部应用就可以访问我们的 ContentProvider ，所以这个值必须是唯一的。为了演示进程间通信，我们让 BookProvider 运行在独立的进程并给它添加了权限，这样如果外部应用想访问它就必须申明对应的权限（这里指“”com.example.provider”）,否则外部应用就会异常终止。</p>\n<h6 id=\"最后我们在Activity中测试使用我们的ContentProvider\"><a href=\"#最后我们在Activity中测试使用我们的ContentProvider\" class=\"headerlink\" title=\"最后我们在Activity中测试使用我们的ContentProvider\"></a>最后我们在Activity中测试使用我们的ContentProvider</h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SecondActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG = <span class=\"string\">&quot;Application Provider&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_second)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> values = ContentValues()</span><br><span class=\"line\">        values.put(<span class=\"string\">&quot;_id&quot;</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">        values.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;编程之美&quot;</span>)</span><br><span class=\"line\">        contentResolver.insert(BookProvider.BOOK_CONTENT_URI, values)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = contentResolver.query(BookProvider.BOOK_CONTENT_URI, arrayOf(<span class=\"string\">&quot;_id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">&quot;id:<span class=\"subst\">$&#123;cursor.getInt(<span class=\"number\">0</span>)&#125;</span> name :<span class=\"subst\">$&#123;cursor.getString(<span class=\"number\">1</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------------- 输出</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">3</span> name :android</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">4</span> name :iOS</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">5</span> name :html</span><br><span class=\"line\"><span class=\"number\">03</span>-<span class=\"number\">18</span> <span class=\"number\">22</span>:<span class=\"number\">54</span>:<span class=\"number\">42.415</span> <span class=\"number\">1935</span>-<span class=\"number\">1935</span>/com.example.nutcracker.myapplication:remote I/Application Provider: id:<span class=\"number\">6</span> name :编程之美</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Socket\"><a href=\"#使用Socket\" class=\"headerlink\" title=\"使用Socket\"></a>使用Socket</h4><p>我们也开始使用 Socket 来进行夸进程通信，除了使用 TCP  还可以使用 UDP 套接字。在性能上 UDP 具有更好的效率，其缺点是不保证数据一定能够正确传输，尤其是网络堵塞的情况下。</p>\n<h4 id=\"Binder-连接池\"><a href=\"#Binder-连接池\" class=\"headerlink\" title=\"Binder 连接池\"></a>Binder 连接池</h4><h4 id=\"选择合适的-IPC-方式\"><a href=\"#选择合适的-IPC-方式\" class=\"headerlink\" title=\"选择合适的 IPC 方式\"></a>选择合适的 IPC 方式</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">优点</th>\n<th align=\"center\">缺点</th>\n<th align=\"center\">适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Bundle</td>\n<td align=\"center\">简单易用</td>\n<td align=\"center\">只能传输 Bundle 支持的数据</td>\n<td align=\"center\">四大组件间的进程通信</td>\n</tr>\n<tr>\n<td align=\"center\">文件共享</td>\n<td align=\"center\">简单易用</td>\n<td align=\"center\">不适合高并发场景，并且无法做到进程间的即时通信</td>\n<td align=\"center\">无并发访问情况，交换简单的数据实时性不高的场景</td>\n</tr>\n<tr>\n<td align=\"center\">AIDL</td>\n<td align=\"center\">功能强大，支持一对多并发通信，支持实时通信</td>\n<td align=\"center\">使用稍复杂，需要处理好线程同步</td>\n<td align=\"center\">一对多通信并且有 RPC 需求</td>\n</tr>\n<tr>\n<td align=\"center\">Messenger</td>\n<td align=\"center\">功能一般，支持一对多串行通信，支持实时通信</td>\n<td align=\"center\">不能很好的处理高并发场景，不支持 RPC，数据通过 Message 传输，因此只支持 Bundle 支持的数据类型</td>\n<td align=\"center\">低并发的一对多即使通信，无 RPC需求，或者无需返回结果的 PRC 需求</td>\n</tr>\n<tr>\n<td align=\"center\">ContentProvider</td>\n<td align=\"center\">在数据源访问功能强大，支持一对多并发数据共享，可通过 call 方法扩展其他操作</td>\n<td align=\"center\">可以理解为，受约束的 AIDL，主要提供数据源的 CURD 操作</td>\n<td align=\"center\">一对多的进程间的数据共享</td>\n</tr>\n<tr>\n<td align=\"center\">Socket</td>\n<td align=\"center\">功能强大，可以通过网络传输套接字，支持一对多并发实时通信</td>\n<td align=\"center\">实现细节稍微有点繁琐，不支持直接的RPC</td>\n<td align=\"center\">网络数据交换</td>\n</tr>\n</tbody></table>\n"},{"layout":"post","title":"Retrofit与OkHttp源码解析","subtitle":"源码解析","date":"2019-10-15T05:49:22.000Z","author":"rank","header_image":"img/post-bg-android.jpg","catalog":true,"_content":"\n### Android 网络框架解析\n\n从 2016 Retrofit 开源以来，Retrofit 以它优雅的设计，方便的使用迅速征服了很多开发者，Retrofit+OkHttp 成了 Android 网络开发开源解决方案的佼佼者。 Retrofit 已经在实际项目使用很久了，也对 Retorfit 和 OkHttp 实现原理有一定的了解，但却一直没有书面的记录，网上已经有很多相关的优秀文章，但本着思前想后千万遍,*不如动笔*写下来的道理，还是打算写一整篇 Retrofit、OkHttp 以及 Okio 的解析，整理和完善相关的知识，总结和归纳比阅读更重要。\n\nRetrofit、OkHttp、Okio 三者本身都是非常优秀的开源框架，它们组合在一起汇聚成了一套在 Android 完善的网络解决框架，它们的网络 IO 流程如下：\n\n<img src=\"https://blog.piasy.com/img/201608/okio_okhttp_retrofit.png\" alt=\"网络数据传输流程\" style=\"zoom:38%;\" />\n\nRetrofit 通过很多精妙的设计，可以让开发者在方便快捷的实现网络操作的请求和响应，而 OkHttp 则是网络具体实现的核心，它负责网络的具体请求，连接池复用、网络拦截， Http1、http2 的兼容等，Okio 则处理所有的 IO 问题，磁盘缓存、网络 IO 等都可以看到它的身影，下面我们就来逐个介绍它们。\n\n### Retrofit\n\n#### 1.0.0 Create\n\n本文的 Retrofit 版本为 `2.3.0` ,我们先从 Retrofit 的入口 `create` 函数来了解 :\n\n![create](https://s2.ax1x.com/2019/10/12/uOovh4.md.png)\n\n在解析入口之前，我们先回顾一下我们是如何使用 Retrofit 的，通常我们会先声明一个 ServiceInterface\n\n![AccountApiService](https://s2.ax1x.com/2019/10/12/uO7DsI.png)\n\n然后通过 Rerofit 的实例调用 `create` 方法，我们可以获得 `AccountApiService` 的实例并且可以使用 `login(username,password)` 来发起网络请求了。但其实 `AccountApiService`并没有什么具体的实现类，我们调用其内部的某个方法时都被我们 `create` 中`Proxy.newProxyInstance()`创建的动态代理所拦截了。这就是 Retrofit 设计的第一个巧妙的点——所有业务层面的具体实现都会汇聚到 `create` 里的 Proxy 中，上层组件对这一过程是没有感知的，这也是设计模式中的`动态代理`模式。\n\n接下来短短的几句代码也是整个 Retrofit 的思路与核心，通过 **ServiceMethod** 来将 Interface 中声明的抽象方法给处理为真正的 `request` ，**OkHttpCall** 则对 okHttp 进行包装扩展，负责实际的网络请求，而 serviceMethod 中的 **callAdapter** 则负责处理响应的数据的解析、格式化、转换等。\n\n看似简单，但是 Retrofit 以漂亮的解耦扩展了强大的功能和留下了很多插槽以供扩展，我们可以看下 [Stay](http://notes.stay4it.com/2016/04/05/read-the-fcking-code-of-retrofit/retrofit01.png) 画的流程图\n\n![retrofit](https://s2.ax1x.com/2019/10/12/uOL4hT.png)\n\n#### 2.0.0 ServiceMethod\n\n![ServiceMethod](https://s2.ax1x.com/2019/10/14/uzwZEn.md.png)\n\nServiceMethod 就是通过动态代理得到的我们所调用的方法所代表的对象—— `Method` ， 解析对象获得方法的参数、注解来拼接生成网络请求所需要的 url、header、httpMethod 等参数，除此之外 ServiceMethod 还存储了`callFactory`、`callAdapter`、`converter` 等为下一步的网络请求做准备。 `CallAdapter`、`converter` 我们之后再做详细解释。`callFactory` 就是我们通过 Builder 模式构建 Retrofit 时所传递的 `OkHttpClient` 实例，如果没有传递则会默认创建一个。除此之外，ServiceMethod 还做了缓存处理，同一个 API 的同一个方法，只会创建一次。之后会直接从缓存池中获取。可以看下边的代码：\n\n![ServiceMethod](https://s2.ax1x.com/2019/10/12/uXkIXt.md.png)\n\n#### 3.0.0 OkHttpCall\n\nOkHttpCall 对 `OkHttp` 的同步请求 `execute` 异步请求 `enqueue` 做了简单的包装，让其可以使用之前准备好的`callfactory` 以及 ServiceMethod 处理好的参数，同时也对基本的网络成功和失败可以直接进行判断 。我们对 OkHttpCall 的同步请求做简单的分析 :\n\n![okHttpCall 同步请求](https://s2.ax1x.com/2019/10/14/uzrqw4.md.png)\n\n异步响应增加了 `callback` 的机制，但是处理模式类似，这里就不做赘述了，感兴趣的同学可以自己去翻看源码。虽然 rertrofit 没有提供网络请求库的更换，但是得益于 Retrofit 漂亮的设计我们也可以用别的网络框架实现 `Call<T>` 接口然后修改源码很轻松的替换网络请求源。\n\n#### 4.0.0 CallAdapter\n\n从上面的流程图我们可以看到 retrofit 提供了非常多适配器（Adapter）来处理响应数据，Retrofit 本身只内置了`DefaultCallAdapterFactory` 和 `ExcuterCallAdapterFactory` 它们适用于网络请求的返回值为 `Retrofit.Call<T>` 的情况下，而如果需要其它的响应类型则是需要额外扩充的，Retrofit 预留了 `CallAdaptter.Facotry` 的接口，让开发者可以自己实现相应的适配器工厂。\n\n#### 4.1.0 Converter\n\nconverter 的功能是将网络响应的主体内容部分的 json、xml、String 等特定的数据格式转换成我们更容易处理的实体对象，Retrofit 本身只提供了 `BuildInConverters`（提供一些基础的数据转换 steam string 等 ） 的实现，来提供基本功能。但是和 `CallAdapter` 一样提供了`Converter.Factory` 来让开发者扩展使用。\n\n至此，Retrofit 的核心的解析就完了，这里没有长篇大论剖析代码，主要是秉着知道轮子怎么造以及如何更好地造，找到框架中真正值得学习的思路和设计。接下来我们就看看 OkHttp 的魅力所在吧\n\n### OkHttp\n\n#### 概览\n\n<img src=\"https://s2.ax1x.com/2019/10/14/uzf1W4.md.jpg\" alt=\"okHttp架构\" style=\"zoom:80%;\" />\n\n在剖析之前 我们先来了解一下 OkHttp 的架构，从下图我们可以看到 OKHttp 分为\n\n- **应用层** 应用层的核心类都是由开发者直接使用的，`OkHttpClient` 用来构造我们需要的网络请求所对应的实例对象 `Call`，`Call` 用来发送接收网络请求，而 `Dispatcher` 则用来管理网络请求的队列。\n- **协议层** 协议层用来具体化 Http1、Http2、Https 以及 WebSocket 等协议在网络通信中具体实现和交互，让开发者只需要关注网络请求和响应本身\n- **连接层** 连接层用来管理网络请求的线程池连接池复用，任务调度\n- **缓存处理** 对支持的 HTTP 响应和请求做缓存和复用，优化网络质量\n- **I/O 处理** 磁盘缓存、网络 IO 的具体操作都是依赖于此，它的具体工作是由 `Okio` 框架来完成的\n- **拦截器** 从图中也可以看出`Interceptor` 是贯穿整个 OkHttp 的核心，它以责任链的模式将整个流程优雅的分发处理，是整个 OkHttp 的重中之重。\n\n接下来我们按照一个网络请求在 OkHttp 中的流程来解析了解 OkHttp 的内部设计是怎么样的\n\n<img src=\"https://blog.piasy.com/img/201607/okhttp_full_process.png\" alt=\"网络请求经过\" style=\"zoom:60%;\" />\n\n`OkHttpClient` 即 OkHttp 框架的使用入口，本身通过 `Builrder` 模式可以灵活配置非常多的参数, 具体的内部我们就不做赘述了，我们直接来看一个网络请求是怎么发起的：\n\n```java\nString run(String url) throws IOException {\n  OkHttpClient client = new OkHttpClient();\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  Response response = client.newCall(request).execute();\n  return response.body().string();\n}\n```\n\n我们通过 `reuqest` 构建一个 HTTP 请求，通过 client 的 `newCall` 去创建一个 `call` 然后直接 `execute` 发起一个同步的网络请求。这也与我们上边的流程图所展示的一致，接下里我们就看看 `newCall` 里面有什么东西吧。\n\n#### RealCall\n\n![RealCall constructor](https://s2.ax1x.com/2019/10/14/KSeaHH.png)\n\n`newCall` 创建了 `RealCall`， 由`RealCall` 来负责实际的网络请求，它实现了 `Call` 的相关接口 `execute` 与 `enqueue` 来处理同步和异步请求。\n\n我们先从同步请求的具体实现来看看 :\n\n![execute()](https://s2.ax1x.com/2019/10/15/K9yJte.md.png)\n\n`execute()` 中先把当前的 `RealCall` 添加到了调度器 `Dispatcher` 中，等待结束 `Finally` 后再被调度器移出。**Dispatcher** 的具体实现的我们之后再单独讲解。从图中我们发现 `execute ()`用寥寥几行的代码就拿到了网络请求的响应 `Response` 。很显然这里并不是真正处理的网络请求的地方，要解决心中的疑惑还是继续往下看`getResponseWithInterceptorChain()` 里究竟实现了什么\n\n![getResponseWithInterceptorChain()](https://s2.ax1x.com/2019/10/14/KSKuxx.md.png)\n\n`getResponseWithInterceptorChain` 显示添加了需要拦截器 `Interceptor` 然后在方法的最后构建了一个 `RealInterceptorChain` 调用 `proceed` 开始进行网络请求，它会逐层的触发拦截器，激活它们的 `intercept` 方法，将整个网络请求包装调用起来。\n\n#### Interceptor\n\n初看可能觉得莫名其妙，这里为什么会添加一大堆的的拦截器。其实结合 OkHttp 架构图和流程图你就不难发现，`Interceptor` 是 OkHttp 最核心的一个东西，不要误以为它只负责拦截请求一些进行额外的处理（例如 Auth、NetworkListener），实际上它贯穿了整个 OkHttp ，把实际的网络请求，缓存，压缩等功能都统一了起来，每一个功能只是一个 `Interceptor` ,它们再连接成一个 `Interceptor.Chain` ，环环相扣，最终圆满完成了一次网络请求\n\n从 `getResopnseWithInterceptorChain` 函数我们可以看到，`Interceptor.Chain` 的分部依次是：\n\n1. 在 OkHttpClient 中配置的 `Interceptor`\n\n2. 负责失败重试以及重定向的 `RetryAndFollowUpInterceptor`\n\n3. 负责把用户的构造请求转换为发送到服务器的请求、把服务器的请求返回的响应转换为用户友好的响应 `BridgeInterceptor`\n\n4. 负责读取缓存直接返回、更新缓存的 `CacheInterceptor`\n\n5. 负责创建分配 HTTP 连接的 `ConnectInterceptor`\n\n6. 配置 OkHttpClient 时设置的 `NetworkInterceptor`\n\n7. 负责向服务器发送请求数据、从服务器读取响应数据的 `CallServerInterceptor`\n\n它们的显示层级也对应了当一个 HTTP 请求发生的时候它们的调用顺序，我们逐个的去了解它们具体的工作职责与原理。\n\n##### **RetryAndFollowUpInterceptor**\n\nRetryAndFolllowUpInterceptor 主要职责是如它的名字一样，将网络重试或者转发。具体情况就是遇到如服务器返回 HTTP 状态码 300、301、302 之类的自动重定向，遇到 401（需要认证） 调用 client.authenticator() (如果开发者有实现的话) 自动去认证，除此之外还有代理认证等等，因为逻辑代码较多就不贴出来了，感兴趣的可以自己去看看源码实现\n\n##### **BridgeInterceptor**\n\nBridgeInterceptor 具体主要是处理请求和响应中的 `header `部分，如果数据有压缩步骤，例如 `gzip` 等处理，那么它还负责将数据解压缩完成，涉及 `Content-Type`、`Content-Length`、`Transfer-Encoding` 等`header` 的处理\n\n##### **CacheInterceptor**\n\nCacheInterceptor 会将符合要求的 `request`和与之对应的 `Response` 缓存起来，如果下次 `request` 没有超过缓存时效，这一步会拦截器会直接返回 `Response`，不会再触发之后的拦截器经行网络请求了 ；而如果没有找到对应的 `response` 则会先继续向下获取网络响应然后尝试缓存。值得一提的是 CacheInterceptor 的缓存机制是非常严格的，必须符合 Http 对缓存制定的标准且是 GET 请求。\n\n##### **ConnectInterceptor**\n\nConnectIntercetpor 则是负责 HTTP 连接创建、复用与分配。算是我们需要了解的重难点了，~~敲黑板，记笔记~~。\n\n![connectIntercetpor](https://s2.ax1x.com/2019/10/14/KSfZuR.png)\n\n从上图中我们得知几个关键的对象 `StreamAllocation`、`HttpCodec`、`RealConnection` 。\n\nStreamAllocation 是 `HttpCodec` 和 `RealConnection` 的载体，它在 RetryAndFollowUpIntercetpor 中创建，通过 `newStream` 方法中去申请分配一个 `RealConnection` ，`RealConnection` 代表的就是一个可用的 TCP/IP 连接。那么连接池是如何运作的，又是如何拿到一条可用的连接呢，我们从 `newStream` 去看:\n\n![newStream](https://s2.ax1x.com/2019/10/14/KSqEFA.md.png)\n\n`newStream` 整个流程的实际代码还是挺长的，我们节选了部分并只关注高亮部分来讲解。\n\n- `newStream` 通过`findHealthyConnection`从连接池内取出可用的连接，如果没取到就重复`findConnection` 的过程。\n- `findHealthyConnection()` 负责确认取出的连接是可用的，而 `findConnection()` 用来从连接池中取出连接和创建连接。\n- `findConnection()` 先尝试 44 行的 `Internal.instance.get(connectionPool,address,this,null)` 取出连接， `Internal.instance` 的实例是在 OkHttpClient 创建的匿名类对象，`get()` 方法只是调用 `ConnectionPool` 的`get` 方法。`ConnectionPool` 顾名思义就是我们的连接池的实现了，这个稍后再细讲。\n- 如果连接池里没有可用的连接。那么就会重新创建一个 `RealConnection` 并去执行 TCP 握手，然后将它加入到 `connectionPool` 中。至此一个寻找可用的 `conncetion` 的步骤就完成了。\n\n找到可用的连接后，接下来通过`newCodec` 创建一个 `HttpCode` 实例， `HttpCode`是对 HTTP 协议操作的抽象，有两个实现：`Http1Codec` 和 `Http2Codec`，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。\n\n管道连接、协议实现这些都准备完毕后，`ConnectInterceptor` 的职责也就完成了。下面先回过头来看看 Connection 的核心 `ConnectionPool` ，它负责了对连接池的复用维护管理。对外它只暴露的简单的 `get`、`put` 方法，内里的实现机制又是如何的呢\n\n**ConnectionPool**\n\n![connectionPool](https://s2.ax1x.com/2019/10/14/Kp9rDI.png)\n\n从代码中我们可以看出\n\n- ConnectionPool 维护了一个线程池`Executor` 用于执行清理空闲、超时以及超过数量的 `Connection` 连接\n- connections 是一个双向队列（Deque），用来管理 `RealConnection` 连接，最大的保持数量是 `5` 最长的`keepAlive` 持续时间为 `5 minutes`。`RealConnection` 是 `socket` 物理连接的包装\n- routerDatabase 用来记录连接失败的线路名单\n- 向连接池添加新的连接时会触发清理空闲连接的任务。`excutor.execute(clearRunnable);`\n\n`ConnectionPool` 的职责很清晰，它负责维护真实的 socket 连接复用，并清理空闲的连接。\n\n##### **CallServerInterceptor**\n\n接下来就到流程的最后一个拦截器——`CallServerIntercaptor`，前边的拦截器已经将我们的请求给包装好， 网络请求所需要的 connection、httpCodec 也都已经初始化完毕，这里就开始正式的网络通讯：\n\n![callServerInterceptor](https://s2.ax1x.com/2019/10/15/K9wjnU.md.png)\n\n我们看 `intercept` 方法高亮的实现部分来看看 `CallServerIntercptor` 做了哪些事情\n\n1. 拿到之前配置好的 `HttpCode`、`conncetion`、`streamAllocation` 以及 `request` 开始进行请求\n2. 通过 `HttpCode` 发送`reuqest` 的 `header` 部分。\n3. 发送完毕后如果`request` 还有 `body`（服务器返回 `Except:100-continue`），那么就继续发送信息主体部分\n4. 开始接受 `Response` 的`Header` ，并创建一个 `response` 承载\n5. 判断 `Response` 的 `header` ，判断`Response` 是否有 `body` ，如果有就重新创建一个 `response` 然后开始接收 `Response` 的信息主体\n6. 进行一些 `header` 和状态码判断没有问题后就返回 `response` ，网络请求完成。\n\n到这里整个网络请求就完成了，可以看到整个流程和物理的网络模型一样，层层递进，分层简化了每层的逻辑、共同完成复杂的任务。\n\n#### Dispatcher\n\n前面我们跟着同步网络请求 `execute` 基本摸清楚了整个 OkHttp 的脉络和流程。但是有一点我们略过了那就是 `Dispatcher` ，它也是同步和异步调用的最大区别。\n\n![execute 和 enqueue](https://s2.ax1x.com/2019/10/15/K9cHyR.md.png)\n\n我们可以看到两者在使用调度器上有些许差别。\n\n-  `execute()` 在调用`Dispatcher` 时使用的是 `Dispatcher .executed()` 来执行然后在 `finally` 后调用`finished` 结束流程。\n- 而 `enqueue()` 则调用了 `enqueue` 将自己添加进入调度器，且包装了一个 `AsyncCall` ，`AsyncCall` 继承了 `NamedRunnable` 它是一个`Runnable` 在`run()` 方法被执行后会触发 `execute()` 方法，而另一个主要方法 `executeOn` 则是将自己添加到传入的线程池执行，两者环环相扣。`AsyncCall` 中 `execute()` 的方法操作与同步请求 `execute()`内的代码逻辑大同小异。具体原因我们去看看 `Dispatcher` 的具体实现 ：\n\n![Dispatcher](https://s2.ax1x.com/2019/10/15/K9202Q.md.png)\n\n可以看到 `Dispatcher`维护着三个双向队列\n\n1.  预备异步队列 `readyAsyncCalls` 一些还没有被放入线程池执行的任务会先放到之类\n2.  运行异步队列 `runningAsyncCalls` 一些已经在执行中的任务在这里管理\n3.  运行同步队列 `runningSyncCalls` 已经执行的同步网络任务在这里管理\n\n**Dispatcher维护了一个懒加载的线程池 `executorService`，线程池没有核心线程，非核心线程最大数量很大，比较适合执行大量的耗时较少的任务。最大的并发请求数量限制为了 60。每个主机的最大请求数量限制为 5。所有的异步任务都是在这个线程池中执行的.**\n\n同步请求 `execute` 的入口也是 `excute` 方法，出口则是 `finished`。我们观察它仅仅只是运行的收扔进队列，结束后被 remove 移出，起到管理作用。没有放入线程池总，也就是说 **`execute` 的执行环境为发起同步请求的线程，这也是为什么我们在 UI 线程中调用同步请求会触发 `NetworkOnMainThread` 的根本原因**\n\n异步请求 `enqueue` 会将方法放入 `readyAsyncCalls` 然后执行 `PromoteAndExcute` 方法，它会将`readyAsyncCalls` 中的任务放到 `runningAsyncCalls` 中，然后调用每个任务的 `executeOn` 将线程池 `excutorServier` 传递给他们调用。线程池会执行开始执行任务而后又触发每个 `AsyncCall` 的 `execute` 方法执行网络请求，这时网络请求运行的环境就位于线程池内了，之后结果会通过`enqueue` 传递的 `responseCallback` 回调到发起线程。\n\n到这里整个 OkHttp 的请求流程我们就解析完毕了。其中一些例如缓存策略并没有细致的展开，还有 HttpCode 的具体实现，它是如何对 TCP/IP 网络请求的抽象的。但已经对 OkHttp 建立了一个大致的脉络，由 0 跨越到了 1 ，对整个请求流程有了一定了解。再次不由得再次佩服框架的开发者，设计了如此精美强大的网络请求开源方案。\n\n### 总结\n\n从 Retorfit 分析到 OkHttp ，我们了解调用的 Api 是如何循序渐进的从一两行的代码变为一整个完整 HTTP 请求，之后又是怎么将网络响应便捷的转换为我们需要结果。体验了程序设计之美。也希望以后的开发过程中可以学以致用，将这些知识真正的纳为己用。\n\n","source":"_posts/2019-10-15-retrofit-and-okHttp.markdown","raw":"---\nlayout: post\ntitle: \"Retrofit与OkHttp源码解析\"\nsubtitle: \"源码解析\"\ndate: 2019-10-15 13:49:22\nauthor: \"rank\"\nheader_image: \"img/post-bg-android.jpg\"\ncatalog: true\ntags:\n  - Android\n---\n\n### Android 网络框架解析\n\n从 2016 Retrofit 开源以来，Retrofit 以它优雅的设计，方便的使用迅速征服了很多开发者，Retrofit+OkHttp 成了 Android 网络开发开源解决方案的佼佼者。 Retrofit 已经在实际项目使用很久了，也对 Retorfit 和 OkHttp 实现原理有一定的了解，但却一直没有书面的记录，网上已经有很多相关的优秀文章，但本着思前想后千万遍,*不如动笔*写下来的道理，还是打算写一整篇 Retrofit、OkHttp 以及 Okio 的解析，整理和完善相关的知识，总结和归纳比阅读更重要。\n\nRetrofit、OkHttp、Okio 三者本身都是非常优秀的开源框架，它们组合在一起汇聚成了一套在 Android 完善的网络解决框架，它们的网络 IO 流程如下：\n\n<img src=\"https://blog.piasy.com/img/201608/okio_okhttp_retrofit.png\" alt=\"网络数据传输流程\" style=\"zoom:38%;\" />\n\nRetrofit 通过很多精妙的设计，可以让开发者在方便快捷的实现网络操作的请求和响应，而 OkHttp 则是网络具体实现的核心，它负责网络的具体请求，连接池复用、网络拦截， Http1、http2 的兼容等，Okio 则处理所有的 IO 问题，磁盘缓存、网络 IO 等都可以看到它的身影，下面我们就来逐个介绍它们。\n\n### Retrofit\n\n#### 1.0.0 Create\n\n本文的 Retrofit 版本为 `2.3.0` ,我们先从 Retrofit 的入口 `create` 函数来了解 :\n\n![create](https://s2.ax1x.com/2019/10/12/uOovh4.md.png)\n\n在解析入口之前，我们先回顾一下我们是如何使用 Retrofit 的，通常我们会先声明一个 ServiceInterface\n\n![AccountApiService](https://s2.ax1x.com/2019/10/12/uO7DsI.png)\n\n然后通过 Rerofit 的实例调用 `create` 方法，我们可以获得 `AccountApiService` 的实例并且可以使用 `login(username,password)` 来发起网络请求了。但其实 `AccountApiService`并没有什么具体的实现类，我们调用其内部的某个方法时都被我们 `create` 中`Proxy.newProxyInstance()`创建的动态代理所拦截了。这就是 Retrofit 设计的第一个巧妙的点——所有业务层面的具体实现都会汇聚到 `create` 里的 Proxy 中，上层组件对这一过程是没有感知的，这也是设计模式中的`动态代理`模式。\n\n接下来短短的几句代码也是整个 Retrofit 的思路与核心，通过 **ServiceMethod** 来将 Interface 中声明的抽象方法给处理为真正的 `request` ，**OkHttpCall** 则对 okHttp 进行包装扩展，负责实际的网络请求，而 serviceMethod 中的 **callAdapter** 则负责处理响应的数据的解析、格式化、转换等。\n\n看似简单，但是 Retrofit 以漂亮的解耦扩展了强大的功能和留下了很多插槽以供扩展，我们可以看下 [Stay](http://notes.stay4it.com/2016/04/05/read-the-fcking-code-of-retrofit/retrofit01.png) 画的流程图\n\n![retrofit](https://s2.ax1x.com/2019/10/12/uOL4hT.png)\n\n#### 2.0.0 ServiceMethod\n\n![ServiceMethod](https://s2.ax1x.com/2019/10/14/uzwZEn.md.png)\n\nServiceMethod 就是通过动态代理得到的我们所调用的方法所代表的对象—— `Method` ， 解析对象获得方法的参数、注解来拼接生成网络请求所需要的 url、header、httpMethod 等参数，除此之外 ServiceMethod 还存储了`callFactory`、`callAdapter`、`converter` 等为下一步的网络请求做准备。 `CallAdapter`、`converter` 我们之后再做详细解释。`callFactory` 就是我们通过 Builder 模式构建 Retrofit 时所传递的 `OkHttpClient` 实例，如果没有传递则会默认创建一个。除此之外，ServiceMethod 还做了缓存处理，同一个 API 的同一个方法，只会创建一次。之后会直接从缓存池中获取。可以看下边的代码：\n\n![ServiceMethod](https://s2.ax1x.com/2019/10/12/uXkIXt.md.png)\n\n#### 3.0.0 OkHttpCall\n\nOkHttpCall 对 `OkHttp` 的同步请求 `execute` 异步请求 `enqueue` 做了简单的包装，让其可以使用之前准备好的`callfactory` 以及 ServiceMethod 处理好的参数，同时也对基本的网络成功和失败可以直接进行判断 。我们对 OkHttpCall 的同步请求做简单的分析 :\n\n![okHttpCall 同步请求](https://s2.ax1x.com/2019/10/14/uzrqw4.md.png)\n\n异步响应增加了 `callback` 的机制，但是处理模式类似，这里就不做赘述了，感兴趣的同学可以自己去翻看源码。虽然 rertrofit 没有提供网络请求库的更换，但是得益于 Retrofit 漂亮的设计我们也可以用别的网络框架实现 `Call<T>` 接口然后修改源码很轻松的替换网络请求源。\n\n#### 4.0.0 CallAdapter\n\n从上面的流程图我们可以看到 retrofit 提供了非常多适配器（Adapter）来处理响应数据，Retrofit 本身只内置了`DefaultCallAdapterFactory` 和 `ExcuterCallAdapterFactory` 它们适用于网络请求的返回值为 `Retrofit.Call<T>` 的情况下，而如果需要其它的响应类型则是需要额外扩充的，Retrofit 预留了 `CallAdaptter.Facotry` 的接口，让开发者可以自己实现相应的适配器工厂。\n\n#### 4.1.0 Converter\n\nconverter 的功能是将网络响应的主体内容部分的 json、xml、String 等特定的数据格式转换成我们更容易处理的实体对象，Retrofit 本身只提供了 `BuildInConverters`（提供一些基础的数据转换 steam string 等 ） 的实现，来提供基本功能。但是和 `CallAdapter` 一样提供了`Converter.Factory` 来让开发者扩展使用。\n\n至此，Retrofit 的核心的解析就完了，这里没有长篇大论剖析代码，主要是秉着知道轮子怎么造以及如何更好地造，找到框架中真正值得学习的思路和设计。接下来我们就看看 OkHttp 的魅力所在吧\n\n### OkHttp\n\n#### 概览\n\n<img src=\"https://s2.ax1x.com/2019/10/14/uzf1W4.md.jpg\" alt=\"okHttp架构\" style=\"zoom:80%;\" />\n\n在剖析之前 我们先来了解一下 OkHttp 的架构，从下图我们可以看到 OKHttp 分为\n\n- **应用层** 应用层的核心类都是由开发者直接使用的，`OkHttpClient` 用来构造我们需要的网络请求所对应的实例对象 `Call`，`Call` 用来发送接收网络请求，而 `Dispatcher` 则用来管理网络请求的队列。\n- **协议层** 协议层用来具体化 Http1、Http2、Https 以及 WebSocket 等协议在网络通信中具体实现和交互，让开发者只需要关注网络请求和响应本身\n- **连接层** 连接层用来管理网络请求的线程池连接池复用，任务调度\n- **缓存处理** 对支持的 HTTP 响应和请求做缓存和复用，优化网络质量\n- **I/O 处理** 磁盘缓存、网络 IO 的具体操作都是依赖于此，它的具体工作是由 `Okio` 框架来完成的\n- **拦截器** 从图中也可以看出`Interceptor` 是贯穿整个 OkHttp 的核心，它以责任链的模式将整个流程优雅的分发处理，是整个 OkHttp 的重中之重。\n\n接下来我们按照一个网络请求在 OkHttp 中的流程来解析了解 OkHttp 的内部设计是怎么样的\n\n<img src=\"https://blog.piasy.com/img/201607/okhttp_full_process.png\" alt=\"网络请求经过\" style=\"zoom:60%;\" />\n\n`OkHttpClient` 即 OkHttp 框架的使用入口，本身通过 `Builrder` 模式可以灵活配置非常多的参数, 具体的内部我们就不做赘述了，我们直接来看一个网络请求是怎么发起的：\n\n```java\nString run(String url) throws IOException {\n  OkHttpClient client = new OkHttpClient();\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  Response response = client.newCall(request).execute();\n  return response.body().string();\n}\n```\n\n我们通过 `reuqest` 构建一个 HTTP 请求，通过 client 的 `newCall` 去创建一个 `call` 然后直接 `execute` 发起一个同步的网络请求。这也与我们上边的流程图所展示的一致，接下里我们就看看 `newCall` 里面有什么东西吧。\n\n#### RealCall\n\n![RealCall constructor](https://s2.ax1x.com/2019/10/14/KSeaHH.png)\n\n`newCall` 创建了 `RealCall`， 由`RealCall` 来负责实际的网络请求，它实现了 `Call` 的相关接口 `execute` 与 `enqueue` 来处理同步和异步请求。\n\n我们先从同步请求的具体实现来看看 :\n\n![execute()](https://s2.ax1x.com/2019/10/15/K9yJte.md.png)\n\n`execute()` 中先把当前的 `RealCall` 添加到了调度器 `Dispatcher` 中，等待结束 `Finally` 后再被调度器移出。**Dispatcher** 的具体实现的我们之后再单独讲解。从图中我们发现 `execute ()`用寥寥几行的代码就拿到了网络请求的响应 `Response` 。很显然这里并不是真正处理的网络请求的地方，要解决心中的疑惑还是继续往下看`getResponseWithInterceptorChain()` 里究竟实现了什么\n\n![getResponseWithInterceptorChain()](https://s2.ax1x.com/2019/10/14/KSKuxx.md.png)\n\n`getResponseWithInterceptorChain` 显示添加了需要拦截器 `Interceptor` 然后在方法的最后构建了一个 `RealInterceptorChain` 调用 `proceed` 开始进行网络请求，它会逐层的触发拦截器，激活它们的 `intercept` 方法，将整个网络请求包装调用起来。\n\n#### Interceptor\n\n初看可能觉得莫名其妙，这里为什么会添加一大堆的的拦截器。其实结合 OkHttp 架构图和流程图你就不难发现，`Interceptor` 是 OkHttp 最核心的一个东西，不要误以为它只负责拦截请求一些进行额外的处理（例如 Auth、NetworkListener），实际上它贯穿了整个 OkHttp ，把实际的网络请求，缓存，压缩等功能都统一了起来，每一个功能只是一个 `Interceptor` ,它们再连接成一个 `Interceptor.Chain` ，环环相扣，最终圆满完成了一次网络请求\n\n从 `getResopnseWithInterceptorChain` 函数我们可以看到，`Interceptor.Chain` 的分部依次是：\n\n1. 在 OkHttpClient 中配置的 `Interceptor`\n\n2. 负责失败重试以及重定向的 `RetryAndFollowUpInterceptor`\n\n3. 负责把用户的构造请求转换为发送到服务器的请求、把服务器的请求返回的响应转换为用户友好的响应 `BridgeInterceptor`\n\n4. 负责读取缓存直接返回、更新缓存的 `CacheInterceptor`\n\n5. 负责创建分配 HTTP 连接的 `ConnectInterceptor`\n\n6. 配置 OkHttpClient 时设置的 `NetworkInterceptor`\n\n7. 负责向服务器发送请求数据、从服务器读取响应数据的 `CallServerInterceptor`\n\n它们的显示层级也对应了当一个 HTTP 请求发生的时候它们的调用顺序，我们逐个的去了解它们具体的工作职责与原理。\n\n##### **RetryAndFollowUpInterceptor**\n\nRetryAndFolllowUpInterceptor 主要职责是如它的名字一样，将网络重试或者转发。具体情况就是遇到如服务器返回 HTTP 状态码 300、301、302 之类的自动重定向，遇到 401（需要认证） 调用 client.authenticator() (如果开发者有实现的话) 自动去认证，除此之外还有代理认证等等，因为逻辑代码较多就不贴出来了，感兴趣的可以自己去看看源码实现\n\n##### **BridgeInterceptor**\n\nBridgeInterceptor 具体主要是处理请求和响应中的 `header `部分，如果数据有压缩步骤，例如 `gzip` 等处理，那么它还负责将数据解压缩完成，涉及 `Content-Type`、`Content-Length`、`Transfer-Encoding` 等`header` 的处理\n\n##### **CacheInterceptor**\n\nCacheInterceptor 会将符合要求的 `request`和与之对应的 `Response` 缓存起来，如果下次 `request` 没有超过缓存时效，这一步会拦截器会直接返回 `Response`，不会再触发之后的拦截器经行网络请求了 ；而如果没有找到对应的 `response` 则会先继续向下获取网络响应然后尝试缓存。值得一提的是 CacheInterceptor 的缓存机制是非常严格的，必须符合 Http 对缓存制定的标准且是 GET 请求。\n\n##### **ConnectInterceptor**\n\nConnectIntercetpor 则是负责 HTTP 连接创建、复用与分配。算是我们需要了解的重难点了，~~敲黑板，记笔记~~。\n\n![connectIntercetpor](https://s2.ax1x.com/2019/10/14/KSfZuR.png)\n\n从上图中我们得知几个关键的对象 `StreamAllocation`、`HttpCodec`、`RealConnection` 。\n\nStreamAllocation 是 `HttpCodec` 和 `RealConnection` 的载体，它在 RetryAndFollowUpIntercetpor 中创建，通过 `newStream` 方法中去申请分配一个 `RealConnection` ，`RealConnection` 代表的就是一个可用的 TCP/IP 连接。那么连接池是如何运作的，又是如何拿到一条可用的连接呢，我们从 `newStream` 去看:\n\n![newStream](https://s2.ax1x.com/2019/10/14/KSqEFA.md.png)\n\n`newStream` 整个流程的实际代码还是挺长的，我们节选了部分并只关注高亮部分来讲解。\n\n- `newStream` 通过`findHealthyConnection`从连接池内取出可用的连接，如果没取到就重复`findConnection` 的过程。\n- `findHealthyConnection()` 负责确认取出的连接是可用的，而 `findConnection()` 用来从连接池中取出连接和创建连接。\n- `findConnection()` 先尝试 44 行的 `Internal.instance.get(connectionPool,address,this,null)` 取出连接， `Internal.instance` 的实例是在 OkHttpClient 创建的匿名类对象，`get()` 方法只是调用 `ConnectionPool` 的`get` 方法。`ConnectionPool` 顾名思义就是我们的连接池的实现了，这个稍后再细讲。\n- 如果连接池里没有可用的连接。那么就会重新创建一个 `RealConnection` 并去执行 TCP 握手，然后将它加入到 `connectionPool` 中。至此一个寻找可用的 `conncetion` 的步骤就完成了。\n\n找到可用的连接后，接下来通过`newCodec` 创建一个 `HttpCode` 实例， `HttpCode`是对 HTTP 协议操作的抽象，有两个实现：`Http1Codec` 和 `Http2Codec`，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。\n\n管道连接、协议实现这些都准备完毕后，`ConnectInterceptor` 的职责也就完成了。下面先回过头来看看 Connection 的核心 `ConnectionPool` ，它负责了对连接池的复用维护管理。对外它只暴露的简单的 `get`、`put` 方法，内里的实现机制又是如何的呢\n\n**ConnectionPool**\n\n![connectionPool](https://s2.ax1x.com/2019/10/14/Kp9rDI.png)\n\n从代码中我们可以看出\n\n- ConnectionPool 维护了一个线程池`Executor` 用于执行清理空闲、超时以及超过数量的 `Connection` 连接\n- connections 是一个双向队列（Deque），用来管理 `RealConnection` 连接，最大的保持数量是 `5` 最长的`keepAlive` 持续时间为 `5 minutes`。`RealConnection` 是 `socket` 物理连接的包装\n- routerDatabase 用来记录连接失败的线路名单\n- 向连接池添加新的连接时会触发清理空闲连接的任务。`excutor.execute(clearRunnable);`\n\n`ConnectionPool` 的职责很清晰，它负责维护真实的 socket 连接复用，并清理空闲的连接。\n\n##### **CallServerInterceptor**\n\n接下来就到流程的最后一个拦截器——`CallServerIntercaptor`，前边的拦截器已经将我们的请求给包装好， 网络请求所需要的 connection、httpCodec 也都已经初始化完毕，这里就开始正式的网络通讯：\n\n![callServerInterceptor](https://s2.ax1x.com/2019/10/15/K9wjnU.md.png)\n\n我们看 `intercept` 方法高亮的实现部分来看看 `CallServerIntercptor` 做了哪些事情\n\n1. 拿到之前配置好的 `HttpCode`、`conncetion`、`streamAllocation` 以及 `request` 开始进行请求\n2. 通过 `HttpCode` 发送`reuqest` 的 `header` 部分。\n3. 发送完毕后如果`request` 还有 `body`（服务器返回 `Except:100-continue`），那么就继续发送信息主体部分\n4. 开始接受 `Response` 的`Header` ，并创建一个 `response` 承载\n5. 判断 `Response` 的 `header` ，判断`Response` 是否有 `body` ，如果有就重新创建一个 `response` 然后开始接收 `Response` 的信息主体\n6. 进行一些 `header` 和状态码判断没有问题后就返回 `response` ，网络请求完成。\n\n到这里整个网络请求就完成了，可以看到整个流程和物理的网络模型一样，层层递进，分层简化了每层的逻辑、共同完成复杂的任务。\n\n#### Dispatcher\n\n前面我们跟着同步网络请求 `execute` 基本摸清楚了整个 OkHttp 的脉络和流程。但是有一点我们略过了那就是 `Dispatcher` ，它也是同步和异步调用的最大区别。\n\n![execute 和 enqueue](https://s2.ax1x.com/2019/10/15/K9cHyR.md.png)\n\n我们可以看到两者在使用调度器上有些许差别。\n\n-  `execute()` 在调用`Dispatcher` 时使用的是 `Dispatcher .executed()` 来执行然后在 `finally` 后调用`finished` 结束流程。\n- 而 `enqueue()` 则调用了 `enqueue` 将自己添加进入调度器，且包装了一个 `AsyncCall` ，`AsyncCall` 继承了 `NamedRunnable` 它是一个`Runnable` 在`run()` 方法被执行后会触发 `execute()` 方法，而另一个主要方法 `executeOn` 则是将自己添加到传入的线程池执行，两者环环相扣。`AsyncCall` 中 `execute()` 的方法操作与同步请求 `execute()`内的代码逻辑大同小异。具体原因我们去看看 `Dispatcher` 的具体实现 ：\n\n![Dispatcher](https://s2.ax1x.com/2019/10/15/K9202Q.md.png)\n\n可以看到 `Dispatcher`维护着三个双向队列\n\n1.  预备异步队列 `readyAsyncCalls` 一些还没有被放入线程池执行的任务会先放到之类\n2.  运行异步队列 `runningAsyncCalls` 一些已经在执行中的任务在这里管理\n3.  运行同步队列 `runningSyncCalls` 已经执行的同步网络任务在这里管理\n\n**Dispatcher维护了一个懒加载的线程池 `executorService`，线程池没有核心线程，非核心线程最大数量很大，比较适合执行大量的耗时较少的任务。最大的并发请求数量限制为了 60。每个主机的最大请求数量限制为 5。所有的异步任务都是在这个线程池中执行的.**\n\n同步请求 `execute` 的入口也是 `excute` 方法，出口则是 `finished`。我们观察它仅仅只是运行的收扔进队列，结束后被 remove 移出，起到管理作用。没有放入线程池总，也就是说 **`execute` 的执行环境为发起同步请求的线程，这也是为什么我们在 UI 线程中调用同步请求会触发 `NetworkOnMainThread` 的根本原因**\n\n异步请求 `enqueue` 会将方法放入 `readyAsyncCalls` 然后执行 `PromoteAndExcute` 方法，它会将`readyAsyncCalls` 中的任务放到 `runningAsyncCalls` 中，然后调用每个任务的 `executeOn` 将线程池 `excutorServier` 传递给他们调用。线程池会执行开始执行任务而后又触发每个 `AsyncCall` 的 `execute` 方法执行网络请求，这时网络请求运行的环境就位于线程池内了，之后结果会通过`enqueue` 传递的 `responseCallback` 回调到发起线程。\n\n到这里整个 OkHttp 的请求流程我们就解析完毕了。其中一些例如缓存策略并没有细致的展开，还有 HttpCode 的具体实现，它是如何对 TCP/IP 网络请求的抽象的。但已经对 OkHttp 建立了一个大致的脉络，由 0 跨越到了 1 ，对整个请求流程有了一定了解。再次不由得再次佩服框架的开发者，设计了如此精美强大的网络请求开源方案。\n\n### 总结\n\n从 Retorfit 分析到 OkHttp ，我们了解调用的 Api 是如何循序渐进的从一两行的代码变为一整个完整 HTTP 请求，之后又是怎么将网络响应便捷的转换为我们需要结果。体验了程序设计之美。也希望以后的开发过程中可以学以致用，将这些知识真正的纳为己用。\n\n","slug":"2019-10-15-retrofit-and-okHttp","published":1,"updated":"2024-09-13T03:38:13.729Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pp0021s2y4gsy921lj","content":"<h3 id=\"Android-网络框架解析\"><a href=\"#Android-网络框架解析\" class=\"headerlink\" title=\"Android 网络框架解析\"></a>Android 网络框架解析</h3><p>从 2016 Retrofit 开源以来，Retrofit 以它优雅的设计，方便的使用迅速征服了很多开发者，Retrofit+OkHttp 成了 Android 网络开发开源解决方案的佼佼者。 Retrofit 已经在实际项目使用很久了，也对 Retorfit 和 OkHttp 实现原理有一定的了解，但却一直没有书面的记录，网上已经有很多相关的优秀文章，但本着思前想后千万遍,<em>不如动笔</em>写下来的道理，还是打算写一整篇 Retrofit、OkHttp 以及 Okio 的解析，整理和完善相关的知识，总结和归纳比阅读更重要。</p>\n<p>Retrofit、OkHttp、Okio 三者本身都是非常优秀的开源框架，它们组合在一起汇聚成了一套在 Android 完善的网络解决框架，它们的网络 IO 流程如下：</p>\n<img src=\"https://blog.piasy.com/img/201608/okio_okhttp_retrofit.png\" alt=\"网络数据传输流程\" style=\"zoom:38%;\" />\n\n<p>Retrofit 通过很多精妙的设计，可以让开发者在方便快捷的实现网络操作的请求和响应，而 OkHttp 则是网络具体实现的核心，它负责网络的具体请求，连接池复用、网络拦截， Http1、http2 的兼容等，Okio 则处理所有的 IO 问题，磁盘缓存、网络 IO 等都可以看到它的身影，下面我们就来逐个介绍它们。</p>\n<h3 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h3><h4 id=\"1-0-0-Create\"><a href=\"#1-0-0-Create\" class=\"headerlink\" title=\"1.0.0 Create\"></a>1.0.0 Create</h4><p>本文的 Retrofit 版本为 <code>2.3.0</code> ,我们先从 Retrofit 的入口 <code>create</code> 函数来了解 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uOovh4.md.png\" alt=\"create\"></p>\n<p>在解析入口之前，我们先回顾一下我们是如何使用 Retrofit 的，通常我们会先声明一个 ServiceInterface</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uO7DsI.png\" alt=\"AccountApiService\"></p>\n<p>然后通过 Rerofit 的实例调用 <code>create</code> 方法，我们可以获得 <code>AccountApiService</code> 的实例并且可以使用 <code>login(username,password)</code> 来发起网络请求了。但其实 <code>AccountApiService</code>并没有什么具体的实现类，我们调用其内部的某个方法时都被我们 <code>create</code> 中<code>Proxy.newProxyInstance()</code>创建的动态代理所拦截了。这就是 Retrofit 设计的第一个巧妙的点——所有业务层面的具体实现都会汇聚到 <code>create</code> 里的 Proxy 中，上层组件对这一过程是没有感知的，这也是设计模式中的<code>动态代理</code>模式。</p>\n<p>接下来短短的几句代码也是整个 Retrofit 的思路与核心，通过 <strong>ServiceMethod</strong> 来将 Interface 中声明的抽象方法给处理为真正的 <code>request</code> ，<strong>OkHttpCall</strong> 则对 okHttp 进行包装扩展，负责实际的网络请求，而 serviceMethod 中的 <strong>callAdapter</strong> 则负责处理响应的数据的解析、格式化、转换等。</p>\n<p>看似简单，但是 Retrofit 以漂亮的解耦扩展了强大的功能和留下了很多插槽以供扩展，我们可以看下 <a href=\"http://notes.stay4it.com/2016/04/05/read-the-fcking-code-of-retrofit/retrofit01.png\">Stay</a> 画的流程图</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uOL4hT.png\" alt=\"retrofit\"></p>\n<h4 id=\"2-0-0-ServiceMethod\"><a href=\"#2-0-0-ServiceMethod\" class=\"headerlink\" title=\"2.0.0 ServiceMethod\"></a>2.0.0 ServiceMethod</h4><p><img src=\"https://s2.ax1x.com/2019/10/14/uzwZEn.md.png\" alt=\"ServiceMethod\"></p>\n<p>ServiceMethod 就是通过动态代理得到的我们所调用的方法所代表的对象—— <code>Method</code> ， 解析对象获得方法的参数、注解来拼接生成网络请求所需要的 url、header、httpMethod 等参数，除此之外 ServiceMethod 还存储了<code>callFactory</code>、<code>callAdapter</code>、<code>converter</code> 等为下一步的网络请求做准备。 <code>CallAdapter</code>、<code>converter</code> 我们之后再做详细解释。<code>callFactory</code> 就是我们通过 Builder 模式构建 Retrofit 时所传递的 <code>OkHttpClient</code> 实例，如果没有传递则会默认创建一个。除此之外，ServiceMethod 还做了缓存处理，同一个 API 的同一个方法，只会创建一次。之后会直接从缓存池中获取。可以看下边的代码：</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uXkIXt.md.png\" alt=\"ServiceMethod\"></p>\n<h4 id=\"3-0-0-OkHttpCall\"><a href=\"#3-0-0-OkHttpCall\" class=\"headerlink\" title=\"3.0.0 OkHttpCall\"></a>3.0.0 OkHttpCall</h4><p>OkHttpCall 对 <code>OkHttp</code> 的同步请求 <code>execute</code> 异步请求 <code>enqueue</code> 做了简单的包装，让其可以使用之前准备好的<code>callfactory</code> 以及 ServiceMethod 处理好的参数，同时也对基本的网络成功和失败可以直接进行判断 。我们对 OkHttpCall 的同步请求做简单的分析 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/uzrqw4.md.png\" alt=\"okHttpCall 同步请求\"></p>\n<p>异步响应增加了 <code>callback</code> 的机制，但是处理模式类似，这里就不做赘述了，感兴趣的同学可以自己去翻看源码。虽然 rertrofit 没有提供网络请求库的更换，但是得益于 Retrofit 漂亮的设计我们也可以用别的网络框架实现 <code>Call&lt;T&gt;</code> 接口然后修改源码很轻松的替换网络请求源。</p>\n<h4 id=\"4-0-0-CallAdapter\"><a href=\"#4-0-0-CallAdapter\" class=\"headerlink\" title=\"4.0.0 CallAdapter\"></a>4.0.0 CallAdapter</h4><p>从上面的流程图我们可以看到 retrofit 提供了非常多适配器（Adapter）来处理响应数据，Retrofit 本身只内置了<code>DefaultCallAdapterFactory</code> 和 <code>ExcuterCallAdapterFactory</code> 它们适用于网络请求的返回值为 <code>Retrofit.Call&lt;T&gt;</code> 的情况下，而如果需要其它的响应类型则是需要额外扩充的，Retrofit 预留了 <code>CallAdaptter.Facotry</code> 的接口，让开发者可以自己实现相应的适配器工厂。</p>\n<h4 id=\"4-1-0-Converter\"><a href=\"#4-1-0-Converter\" class=\"headerlink\" title=\"4.1.0 Converter\"></a>4.1.0 Converter</h4><p>converter 的功能是将网络响应的主体内容部分的 json、xml、String 等特定的数据格式转换成我们更容易处理的实体对象，Retrofit 本身只提供了 <code>BuildInConverters</code>（提供一些基础的数据转换 steam string 等 ） 的实现，来提供基本功能。但是和 <code>CallAdapter</code> 一样提供了<code>Converter.Factory</code> 来让开发者扩展使用。</p>\n<p>至此，Retrofit 的核心的解析就完了，这里没有长篇大论剖析代码，主要是秉着知道轮子怎么造以及如何更好地造，找到框架中真正值得学习的思路和设计。接下来我们就看看 OkHttp 的魅力所在吧</p>\n<h3 id=\"OkHttp\"><a href=\"#OkHttp\" class=\"headerlink\" title=\"OkHttp\"></a>OkHttp</h3><h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><img src=\"https://s2.ax1x.com/2019/10/14/uzf1W4.md.jpg\" alt=\"okHttp架构\" style=\"zoom:80%;\" />\n\n<p>在剖析之前 我们先来了解一下 OkHttp 的架构，从下图我们可以看到 OKHttp 分为</p>\n<ul>\n<li><strong>应用层</strong> 应用层的核心类都是由开发者直接使用的，<code>OkHttpClient</code> 用来构造我们需要的网络请求所对应的实例对象 <code>Call</code>，<code>Call</code> 用来发送接收网络请求，而 <code>Dispatcher</code> 则用来管理网络请求的队列。</li>\n<li><strong>协议层</strong> 协议层用来具体化 Http1、Http2、Https 以及 WebSocket 等协议在网络通信中具体实现和交互，让开发者只需要关注网络请求和响应本身</li>\n<li><strong>连接层</strong> 连接层用来管理网络请求的线程池连接池复用，任务调度</li>\n<li><strong>缓存处理</strong> 对支持的 HTTP 响应和请求做缓存和复用，优化网络质量</li>\n<li><strong>I&#x2F;O 处理</strong> 磁盘缓存、网络 IO 的具体操作都是依赖于此，它的具体工作是由 <code>Okio</code> 框架来完成的</li>\n<li><strong>拦截器</strong> 从图中也可以看出<code>Interceptor</code> 是贯穿整个 OkHttp 的核心，它以责任链的模式将整个流程优雅的分发处理，是整个 OkHttp 的重中之重。</li>\n</ul>\n<p>接下来我们按照一个网络请求在 OkHttp 中的流程来解析了解 OkHttp 的内部设计是怎么样的</p>\n<img src=\"https://blog.piasy.com/img/201607/okhttp_full_process.png\" alt=\"网络请求经过\" style=\"zoom:60%;\" />\n\n<p><code>OkHttpClient</code> 即 OkHttp 框架的使用入口，本身通过 <code>Builrder</code> 模式可以灵活配置非常多的参数, 具体的内部我们就不做赘述了，我们直接来看一个网络请求是怎么发起的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">run</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">  <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">  <span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.newCall(request).execute();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response.body().string();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>reuqest</code> 构建一个 HTTP 请求，通过 client 的 <code>newCall</code> 去创建一个 <code>call</code> 然后直接 <code>execute</code> 发起一个同步的网络请求。这也与我们上边的流程图所展示的一致，接下里我们就看看 <code>newCall</code> 里面有什么东西吧。</p>\n<h4 id=\"RealCall\"><a href=\"#RealCall\" class=\"headerlink\" title=\"RealCall\"></a>RealCall</h4><p><img src=\"https://s2.ax1x.com/2019/10/14/KSeaHH.png\" alt=\"RealCall constructor\"></p>\n<p><code>newCall</code> 创建了 <code>RealCall</code>， 由<code>RealCall</code> 来负责实际的网络请求，它实现了 <code>Call</code> 的相关接口 <code>execute</code> 与 <code>enqueue</code> 来处理同步和异步请求。</p>\n<p>我们先从同步请求的具体实现来看看 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9yJte.md.png\" alt=\"execute()\"></p>\n<p><code>execute()</code> 中先把当前的 <code>RealCall</code> 添加到了调度器 <code>Dispatcher</code> 中，等待结束 <code>Finally</code> 后再被调度器移出。<strong>Dispatcher</strong> 的具体实现的我们之后再单独讲解。从图中我们发现 <code>execute ()</code>用寥寥几行的代码就拿到了网络请求的响应 <code>Response</code> 。很显然这里并不是真正处理的网络请求的地方，要解决心中的疑惑还是继续往下看<code>getResponseWithInterceptorChain()</code> 里究竟实现了什么</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSKuxx.md.png\" alt=\"getResponseWithInterceptorChain()\"></p>\n<p><code>getResponseWithInterceptorChain</code> 显示添加了需要拦截器 <code>Interceptor</code> 然后在方法的最后构建了一个 <code>RealInterceptorChain</code> 调用 <code>proceed</code> 开始进行网络请求，它会逐层的触发拦截器，激活它们的 <code>intercept</code> 方法，将整个网络请求包装调用起来。</p>\n<h4 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h4><p>初看可能觉得莫名其妙，这里为什么会添加一大堆的的拦截器。其实结合 OkHttp 架构图和流程图你就不难发现，<code>Interceptor</code> 是 OkHttp 最核心的一个东西，不要误以为它只负责拦截请求一些进行额外的处理（例如 Auth、NetworkListener），实际上它贯穿了整个 OkHttp ，把实际的网络请求，缓存，压缩等功能都统一了起来，每一个功能只是一个 <code>Interceptor</code> ,它们再连接成一个 <code>Interceptor.Chain</code> ，环环相扣，最终圆满完成了一次网络请求</p>\n<p>从 <code>getResopnseWithInterceptorChain</code> 函数我们可以看到，<code>Interceptor.Chain</code> 的分部依次是：</p>\n<ol>\n<li><p>在 OkHttpClient 中配置的 <code>Interceptor</code></p>\n</li>\n<li><p>负责失败重试以及重定向的 <code>RetryAndFollowUpInterceptor</code></p>\n</li>\n<li><p>负责把用户的构造请求转换为发送到服务器的请求、把服务器的请求返回的响应转换为用户友好的响应 <code>BridgeInterceptor</code></p>\n</li>\n<li><p>负责读取缓存直接返回、更新缓存的 <code>CacheInterceptor</code></p>\n</li>\n<li><p>负责创建分配 HTTP 连接的 <code>ConnectInterceptor</code></p>\n</li>\n<li><p>配置 OkHttpClient 时设置的 <code>NetworkInterceptor</code></p>\n</li>\n<li><p>负责向服务器发送请求数据、从服务器读取响应数据的 <code>CallServerInterceptor</code></p>\n</li>\n</ol>\n<p>它们的显示层级也对应了当一个 HTTP 请求发生的时候它们的调用顺序，我们逐个的去了解它们具体的工作职责与原理。</p>\n<h5 id=\"RetryAndFollowUpInterceptor\"><a href=\"#RetryAndFollowUpInterceptor\" class=\"headerlink\" title=\"RetryAndFollowUpInterceptor\"></a><strong>RetryAndFollowUpInterceptor</strong></h5><p>RetryAndFolllowUpInterceptor 主要职责是如它的名字一样，将网络重试或者转发。具体情况就是遇到如服务器返回 HTTP 状态码 300、301、302 之类的自动重定向，遇到 401（需要认证） 调用 client.authenticator() (如果开发者有实现的话) 自动去认证，除此之外还有代理认证等等，因为逻辑代码较多就不贴出来了，感兴趣的可以自己去看看源码实现</p>\n<h5 id=\"BridgeInterceptor\"><a href=\"#BridgeInterceptor\" class=\"headerlink\" title=\"BridgeInterceptor\"></a><strong>BridgeInterceptor</strong></h5><p>BridgeInterceptor 具体主要是处理请求和响应中的 <code>header </code>部分，如果数据有压缩步骤，例如 <code>gzip</code> 等处理，那么它还负责将数据解压缩完成，涉及 <code>Content-Type</code>、<code>Content-Length</code>、<code>Transfer-Encoding</code> 等<code>header</code> 的处理</p>\n<h5 id=\"CacheInterceptor\"><a href=\"#CacheInterceptor\" class=\"headerlink\" title=\"CacheInterceptor\"></a><strong>CacheInterceptor</strong></h5><p>CacheInterceptor 会将符合要求的 <code>request</code>和与之对应的 <code>Response</code> 缓存起来，如果下次 <code>request</code> 没有超过缓存时效，这一步会拦截器会直接返回 <code>Response</code>，不会再触发之后的拦截器经行网络请求了 ；而如果没有找到对应的 <code>response</code> 则会先继续向下获取网络响应然后尝试缓存。值得一提的是 CacheInterceptor 的缓存机制是非常严格的，必须符合 Http 对缓存制定的标准且是 GET 请求。</p>\n<h5 id=\"ConnectInterceptor\"><a href=\"#ConnectInterceptor\" class=\"headerlink\" title=\"ConnectInterceptor\"></a><strong>ConnectInterceptor</strong></h5><p>ConnectIntercetpor 则是负责 HTTP 连接创建、复用与分配。算是我们需要了解的重难点了，<del>敲黑板，记笔记</del>。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSfZuR.png\" alt=\"connectIntercetpor\"></p>\n<p>从上图中我们得知几个关键的对象 <code>StreamAllocation</code>、<code>HttpCodec</code>、<code>RealConnection</code> 。</p>\n<p>StreamAllocation 是 <code>HttpCodec</code> 和 <code>RealConnection</code> 的载体，它在 RetryAndFollowUpIntercetpor 中创建，通过 <code>newStream</code> 方法中去申请分配一个 <code>RealConnection</code> ，<code>RealConnection</code> 代表的就是一个可用的 TCP&#x2F;IP 连接。那么连接池是如何运作的，又是如何拿到一条可用的连接呢，我们从 <code>newStream</code> 去看:</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSqEFA.md.png\" alt=\"newStream\"></p>\n<p><code>newStream</code> 整个流程的实际代码还是挺长的，我们节选了部分并只关注高亮部分来讲解。</p>\n<ul>\n<li><code>newStream</code> 通过<code>findHealthyConnection</code>从连接池内取出可用的连接，如果没取到就重复<code>findConnection</code> 的过程。</li>\n<li><code>findHealthyConnection()</code> 负责确认取出的连接是可用的，而 <code>findConnection()</code> 用来从连接池中取出连接和创建连接。</li>\n<li><code>findConnection()</code> 先尝试 44 行的 <code>Internal.instance.get(connectionPool,address,this,null)</code> 取出连接， <code>Internal.instance</code> 的实例是在 OkHttpClient 创建的匿名类对象，<code>get()</code> 方法只是调用 <code>ConnectionPool</code> 的<code>get</code> 方法。<code>ConnectionPool</code> 顾名思义就是我们的连接池的实现了，这个稍后再细讲。</li>\n<li>如果连接池里没有可用的连接。那么就会重新创建一个 <code>RealConnection</code> 并去执行 TCP 握手，然后将它加入到 <code>connectionPool</code> 中。至此一个寻找可用的 <code>conncetion</code> 的步骤就完成了。</li>\n</ul>\n<p>找到可用的连接后，接下来通过<code>newCodec</code> 创建一个 <code>HttpCode</code> 实例， <code>HttpCode</code>是对 HTTP 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP&#x2F;1.1 和 HTTP&#x2F;2 版本的实现。</p>\n<p>管道连接、协议实现这些都准备完毕后，<code>ConnectInterceptor</code> 的职责也就完成了。下面先回过头来看看 Connection 的核心 <code>ConnectionPool</code> ，它负责了对连接池的复用维护管理。对外它只暴露的简单的 <code>get</code>、<code>put</code> 方法，内里的实现机制又是如何的呢</p>\n<p><strong>ConnectionPool</strong></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/Kp9rDI.png\" alt=\"connectionPool\"></p>\n<p>从代码中我们可以看出</p>\n<ul>\n<li>ConnectionPool 维护了一个线程池<code>Executor</code> 用于执行清理空闲、超时以及超过数量的 <code>Connection</code> 连接</li>\n<li>connections 是一个双向队列（Deque），用来管理 <code>RealConnection</code> 连接，最大的保持数量是 <code>5</code> 最长的<code>keepAlive</code> 持续时间为 <code>5 minutes</code>。<code>RealConnection</code> 是 <code>socket</code> 物理连接的包装</li>\n<li>routerDatabase 用来记录连接失败的线路名单</li>\n<li>向连接池添加新的连接时会触发清理空闲连接的任务。<code>excutor.execute(clearRunnable);</code></li>\n</ul>\n<p><code>ConnectionPool</code> 的职责很清晰，它负责维护真实的 socket 连接复用，并清理空闲的连接。</p>\n<h5 id=\"CallServerInterceptor\"><a href=\"#CallServerInterceptor\" class=\"headerlink\" title=\"CallServerInterceptor\"></a><strong>CallServerInterceptor</strong></h5><p>接下来就到流程的最后一个拦截器——<code>CallServerIntercaptor</code>，前边的拦截器已经将我们的请求给包装好， 网络请求所需要的 connection、httpCodec 也都已经初始化完毕，这里就开始正式的网络通讯：</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9wjnU.md.png\" alt=\"callServerInterceptor\"></p>\n<p>我们看 <code>intercept</code> 方法高亮的实现部分来看看 <code>CallServerIntercptor</code> 做了哪些事情</p>\n<ol>\n<li>拿到之前配置好的 <code>HttpCode</code>、<code>conncetion</code>、<code>streamAllocation</code> 以及 <code>request</code> 开始进行请求</li>\n<li>通过 <code>HttpCode</code> 发送<code>reuqest</code> 的 <code>header</code> 部分。</li>\n<li>发送完毕后如果<code>request</code> 还有 <code>body</code>（服务器返回 <code>Except:100-continue</code>），那么就继续发送信息主体部分</li>\n<li>开始接受 <code>Response</code> 的<code>Header</code> ，并创建一个 <code>response</code> 承载</li>\n<li>判断 <code>Response</code> 的 <code>header</code> ，判断<code>Response</code> 是否有 <code>body</code> ，如果有就重新创建一个 <code>response</code> 然后开始接收 <code>Response</code> 的信息主体</li>\n<li>进行一些 <code>header</code> 和状态码判断没有问题后就返回 <code>response</code> ，网络请求完成。</li>\n</ol>\n<p>到这里整个网络请求就完成了，可以看到整个流程和物理的网络模型一样，层层递进，分层简化了每层的逻辑、共同完成复杂的任务。</p>\n<h4 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h4><p>前面我们跟着同步网络请求 <code>execute</code> 基本摸清楚了整个 OkHttp 的脉络和流程。但是有一点我们略过了那就是 <code>Dispatcher</code> ，它也是同步和异步调用的最大区别。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9cHyR.md.png\" alt=\"execute 和 enqueue\"></p>\n<p>我们可以看到两者在使用调度器上有些许差别。</p>\n<ul>\n<li><code>execute()</code> 在调用<code>Dispatcher</code> 时使用的是 <code>Dispatcher .executed()</code> 来执行然后在 <code>finally</code> 后调用<code>finished</code> 结束流程。</li>\n<li>而 <code>enqueue()</code> 则调用了 <code>enqueue</code> 将自己添加进入调度器，且包装了一个 <code>AsyncCall</code> ，<code>AsyncCall</code> 继承了 <code>NamedRunnable</code> 它是一个<code>Runnable</code> 在<code>run()</code> 方法被执行后会触发 <code>execute()</code> 方法，而另一个主要方法 <code>executeOn</code> 则是将自己添加到传入的线程池执行，两者环环相扣。<code>AsyncCall</code> 中 <code>execute()</code> 的方法操作与同步请求 <code>execute()</code>内的代码逻辑大同小异。具体原因我们去看看 <code>Dispatcher</code> 的具体实现 ：</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9202Q.md.png\" alt=\"Dispatcher\"></p>\n<p>可以看到 <code>Dispatcher</code>维护着三个双向队列</p>\n<ol>\n<li>预备异步队列 <code>readyAsyncCalls</code> 一些还没有被放入线程池执行的任务会先放到之类</li>\n<li>运行异步队列 <code>runningAsyncCalls</code> 一些已经在执行中的任务在这里管理</li>\n<li>运行同步队列 <code>runningSyncCalls</code> 已经执行的同步网络任务在这里管理</li>\n</ol>\n<p><strong>Dispatcher维护了一个懒加载的线程池 <code>executorService</code>，线程池没有核心线程，非核心线程最大数量很大，比较适合执行大量的耗时较少的任务。最大的并发请求数量限制为了 60。每个主机的最大请求数量限制为 5。所有的异步任务都是在这个线程池中执行的.</strong></p>\n<p>同步请求 <code>execute</code> 的入口也是 <code>excute</code> 方法，出口则是 <code>finished</code>。我们观察它仅仅只是运行的收扔进队列，结束后被 remove 移出，起到管理作用。没有放入线程池总，也就是说 <strong><code>execute</code> 的执行环境为发起同步请求的线程，这也是为什么我们在 UI 线程中调用同步请求会触发 <code>NetworkOnMainThread</code> 的根本原因</strong></p>\n<p>异步请求 <code>enqueue</code> 会将方法放入 <code>readyAsyncCalls</code> 然后执行 <code>PromoteAndExcute</code> 方法，它会将<code>readyAsyncCalls</code> 中的任务放到 <code>runningAsyncCalls</code> 中，然后调用每个任务的 <code>executeOn</code> 将线程池 <code>excutorServier</code> 传递给他们调用。线程池会执行开始执行任务而后又触发每个 <code>AsyncCall</code> 的 <code>execute</code> 方法执行网络请求，这时网络请求运行的环境就位于线程池内了，之后结果会通过<code>enqueue</code> 传递的 <code>responseCallback</code> 回调到发起线程。</p>\n<p>到这里整个 OkHttp 的请求流程我们就解析完毕了。其中一些例如缓存策略并没有细致的展开，还有 HttpCode 的具体实现，它是如何对 TCP&#x2F;IP 网络请求的抽象的。但已经对 OkHttp 建立了一个大致的脉络，由 0 跨越到了 1 ，对整个请求流程有了一定了解。再次不由得再次佩服框架的开发者，设计了如此精美强大的网络请求开源方案。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>从 Retorfit 分析到 OkHttp ，我们了解调用的 Api 是如何循序渐进的从一两行的代码变为一整个完整 HTTP 请求，之后又是怎么将网络响应便捷的转换为我们需要结果。体验了程序设计之美。也希望以后的开发过程中可以学以致用，将这些知识真正的纳为己用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Android-网络框架解析\"><a href=\"#Android-网络框架解析\" class=\"headerlink\" title=\"Android 网络框架解析\"></a>Android 网络框架解析</h3><p>从 2016 Retrofit 开源以来，Retrofit 以它优雅的设计，方便的使用迅速征服了很多开发者，Retrofit+OkHttp 成了 Android 网络开发开源解决方案的佼佼者。 Retrofit 已经在实际项目使用很久了，也对 Retorfit 和 OkHttp 实现原理有一定的了解，但却一直没有书面的记录，网上已经有很多相关的优秀文章，但本着思前想后千万遍,<em>不如动笔</em>写下来的道理，还是打算写一整篇 Retrofit、OkHttp 以及 Okio 的解析，整理和完善相关的知识，总结和归纳比阅读更重要。</p>\n<p>Retrofit、OkHttp、Okio 三者本身都是非常优秀的开源框架，它们组合在一起汇聚成了一套在 Android 完善的网络解决框架，它们的网络 IO 流程如下：</p>\n<img src=\"https://blog.piasy.com/img/201608/okio_okhttp_retrofit.png\" alt=\"网络数据传输流程\" style=\"zoom:38%;\" />\n\n<p>Retrofit 通过很多精妙的设计，可以让开发者在方便快捷的实现网络操作的请求和响应，而 OkHttp 则是网络具体实现的核心，它负责网络的具体请求，连接池复用、网络拦截， Http1、http2 的兼容等，Okio 则处理所有的 IO 问题，磁盘缓存、网络 IO 等都可以看到它的身影，下面我们就来逐个介绍它们。</p>\n<h3 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h3><h4 id=\"1-0-0-Create\"><a href=\"#1-0-0-Create\" class=\"headerlink\" title=\"1.0.0 Create\"></a>1.0.0 Create</h4><p>本文的 Retrofit 版本为 <code>2.3.0</code> ,我们先从 Retrofit 的入口 <code>create</code> 函数来了解 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uOovh4.md.png\" alt=\"create\"></p>\n<p>在解析入口之前，我们先回顾一下我们是如何使用 Retrofit 的，通常我们会先声明一个 ServiceInterface</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uO7DsI.png\" alt=\"AccountApiService\"></p>\n<p>然后通过 Rerofit 的实例调用 <code>create</code> 方法，我们可以获得 <code>AccountApiService</code> 的实例并且可以使用 <code>login(username,password)</code> 来发起网络请求了。但其实 <code>AccountApiService</code>并没有什么具体的实现类，我们调用其内部的某个方法时都被我们 <code>create</code> 中<code>Proxy.newProxyInstance()</code>创建的动态代理所拦截了。这就是 Retrofit 设计的第一个巧妙的点——所有业务层面的具体实现都会汇聚到 <code>create</code> 里的 Proxy 中，上层组件对这一过程是没有感知的，这也是设计模式中的<code>动态代理</code>模式。</p>\n<p>接下来短短的几句代码也是整个 Retrofit 的思路与核心，通过 <strong>ServiceMethod</strong> 来将 Interface 中声明的抽象方法给处理为真正的 <code>request</code> ，<strong>OkHttpCall</strong> 则对 okHttp 进行包装扩展，负责实际的网络请求，而 serviceMethod 中的 <strong>callAdapter</strong> 则负责处理响应的数据的解析、格式化、转换等。</p>\n<p>看似简单，但是 Retrofit 以漂亮的解耦扩展了强大的功能和留下了很多插槽以供扩展，我们可以看下 <a href=\"http://notes.stay4it.com/2016/04/05/read-the-fcking-code-of-retrofit/retrofit01.png\">Stay</a> 画的流程图</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uOL4hT.png\" alt=\"retrofit\"></p>\n<h4 id=\"2-0-0-ServiceMethod\"><a href=\"#2-0-0-ServiceMethod\" class=\"headerlink\" title=\"2.0.0 ServiceMethod\"></a>2.0.0 ServiceMethod</h4><p><img src=\"https://s2.ax1x.com/2019/10/14/uzwZEn.md.png\" alt=\"ServiceMethod\"></p>\n<p>ServiceMethod 就是通过动态代理得到的我们所调用的方法所代表的对象—— <code>Method</code> ， 解析对象获得方法的参数、注解来拼接生成网络请求所需要的 url、header、httpMethod 等参数，除此之外 ServiceMethod 还存储了<code>callFactory</code>、<code>callAdapter</code>、<code>converter</code> 等为下一步的网络请求做准备。 <code>CallAdapter</code>、<code>converter</code> 我们之后再做详细解释。<code>callFactory</code> 就是我们通过 Builder 模式构建 Retrofit 时所传递的 <code>OkHttpClient</code> 实例，如果没有传递则会默认创建一个。除此之外，ServiceMethod 还做了缓存处理，同一个 API 的同一个方法，只会创建一次。之后会直接从缓存池中获取。可以看下边的代码：</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/uXkIXt.md.png\" alt=\"ServiceMethod\"></p>\n<h4 id=\"3-0-0-OkHttpCall\"><a href=\"#3-0-0-OkHttpCall\" class=\"headerlink\" title=\"3.0.0 OkHttpCall\"></a>3.0.0 OkHttpCall</h4><p>OkHttpCall 对 <code>OkHttp</code> 的同步请求 <code>execute</code> 异步请求 <code>enqueue</code> 做了简单的包装，让其可以使用之前准备好的<code>callfactory</code> 以及 ServiceMethod 处理好的参数，同时也对基本的网络成功和失败可以直接进行判断 。我们对 OkHttpCall 的同步请求做简单的分析 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/uzrqw4.md.png\" alt=\"okHttpCall 同步请求\"></p>\n<p>异步响应增加了 <code>callback</code> 的机制，但是处理模式类似，这里就不做赘述了，感兴趣的同学可以自己去翻看源码。虽然 rertrofit 没有提供网络请求库的更换，但是得益于 Retrofit 漂亮的设计我们也可以用别的网络框架实现 <code>Call&lt;T&gt;</code> 接口然后修改源码很轻松的替换网络请求源。</p>\n<h4 id=\"4-0-0-CallAdapter\"><a href=\"#4-0-0-CallAdapter\" class=\"headerlink\" title=\"4.0.0 CallAdapter\"></a>4.0.0 CallAdapter</h4><p>从上面的流程图我们可以看到 retrofit 提供了非常多适配器（Adapter）来处理响应数据，Retrofit 本身只内置了<code>DefaultCallAdapterFactory</code> 和 <code>ExcuterCallAdapterFactory</code> 它们适用于网络请求的返回值为 <code>Retrofit.Call&lt;T&gt;</code> 的情况下，而如果需要其它的响应类型则是需要额外扩充的，Retrofit 预留了 <code>CallAdaptter.Facotry</code> 的接口，让开发者可以自己实现相应的适配器工厂。</p>\n<h4 id=\"4-1-0-Converter\"><a href=\"#4-1-0-Converter\" class=\"headerlink\" title=\"4.1.0 Converter\"></a>4.1.0 Converter</h4><p>converter 的功能是将网络响应的主体内容部分的 json、xml、String 等特定的数据格式转换成我们更容易处理的实体对象，Retrofit 本身只提供了 <code>BuildInConverters</code>（提供一些基础的数据转换 steam string 等 ） 的实现，来提供基本功能。但是和 <code>CallAdapter</code> 一样提供了<code>Converter.Factory</code> 来让开发者扩展使用。</p>\n<p>至此，Retrofit 的核心的解析就完了，这里没有长篇大论剖析代码，主要是秉着知道轮子怎么造以及如何更好地造，找到框架中真正值得学习的思路和设计。接下来我们就看看 OkHttp 的魅力所在吧</p>\n<h3 id=\"OkHttp\"><a href=\"#OkHttp\" class=\"headerlink\" title=\"OkHttp\"></a>OkHttp</h3><h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><img src=\"https://s2.ax1x.com/2019/10/14/uzf1W4.md.jpg\" alt=\"okHttp架构\" style=\"zoom:80%;\" />\n\n<p>在剖析之前 我们先来了解一下 OkHttp 的架构，从下图我们可以看到 OKHttp 分为</p>\n<ul>\n<li><strong>应用层</strong> 应用层的核心类都是由开发者直接使用的，<code>OkHttpClient</code> 用来构造我们需要的网络请求所对应的实例对象 <code>Call</code>，<code>Call</code> 用来发送接收网络请求，而 <code>Dispatcher</code> 则用来管理网络请求的队列。</li>\n<li><strong>协议层</strong> 协议层用来具体化 Http1、Http2、Https 以及 WebSocket 等协议在网络通信中具体实现和交互，让开发者只需要关注网络请求和响应本身</li>\n<li><strong>连接层</strong> 连接层用来管理网络请求的线程池连接池复用，任务调度</li>\n<li><strong>缓存处理</strong> 对支持的 HTTP 响应和请求做缓存和复用，优化网络质量</li>\n<li><strong>I&#x2F;O 处理</strong> 磁盘缓存、网络 IO 的具体操作都是依赖于此，它的具体工作是由 <code>Okio</code> 框架来完成的</li>\n<li><strong>拦截器</strong> 从图中也可以看出<code>Interceptor</code> 是贯穿整个 OkHttp 的核心，它以责任链的模式将整个流程优雅的分发处理，是整个 OkHttp 的重中之重。</li>\n</ul>\n<p>接下来我们按照一个网络请求在 OkHttp 中的流程来解析了解 OkHttp 的内部设计是怎么样的</p>\n<img src=\"https://blog.piasy.com/img/201607/okhttp_full_process.png\" alt=\"网络请求经过\" style=\"zoom:60%;\" />\n\n<p><code>OkHttpClient</code> 即 OkHttp 框架的使用入口，本身通过 <code>Builrder</code> 模式可以灵活配置非常多的参数, 具体的内部我们就不做赘述了，我们直接来看一个网络请求是怎么发起的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">run</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">  <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">  <span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">      .url(url)</span><br><span class=\"line\">      .build();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.newCall(request).execute();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response.body().string();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过 <code>reuqest</code> 构建一个 HTTP 请求，通过 client 的 <code>newCall</code> 去创建一个 <code>call</code> 然后直接 <code>execute</code> 发起一个同步的网络请求。这也与我们上边的流程图所展示的一致，接下里我们就看看 <code>newCall</code> 里面有什么东西吧。</p>\n<h4 id=\"RealCall\"><a href=\"#RealCall\" class=\"headerlink\" title=\"RealCall\"></a>RealCall</h4><p><img src=\"https://s2.ax1x.com/2019/10/14/KSeaHH.png\" alt=\"RealCall constructor\"></p>\n<p><code>newCall</code> 创建了 <code>RealCall</code>， 由<code>RealCall</code> 来负责实际的网络请求，它实现了 <code>Call</code> 的相关接口 <code>execute</code> 与 <code>enqueue</code> 来处理同步和异步请求。</p>\n<p>我们先从同步请求的具体实现来看看 :</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9yJte.md.png\" alt=\"execute()\"></p>\n<p><code>execute()</code> 中先把当前的 <code>RealCall</code> 添加到了调度器 <code>Dispatcher</code> 中，等待结束 <code>Finally</code> 后再被调度器移出。<strong>Dispatcher</strong> 的具体实现的我们之后再单独讲解。从图中我们发现 <code>execute ()</code>用寥寥几行的代码就拿到了网络请求的响应 <code>Response</code> 。很显然这里并不是真正处理的网络请求的地方，要解决心中的疑惑还是继续往下看<code>getResponseWithInterceptorChain()</code> 里究竟实现了什么</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSKuxx.md.png\" alt=\"getResponseWithInterceptorChain()\"></p>\n<p><code>getResponseWithInterceptorChain</code> 显示添加了需要拦截器 <code>Interceptor</code> 然后在方法的最后构建了一个 <code>RealInterceptorChain</code> 调用 <code>proceed</code> 开始进行网络请求，它会逐层的触发拦截器，激活它们的 <code>intercept</code> 方法，将整个网络请求包装调用起来。</p>\n<h4 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h4><p>初看可能觉得莫名其妙，这里为什么会添加一大堆的的拦截器。其实结合 OkHttp 架构图和流程图你就不难发现，<code>Interceptor</code> 是 OkHttp 最核心的一个东西，不要误以为它只负责拦截请求一些进行额外的处理（例如 Auth、NetworkListener），实际上它贯穿了整个 OkHttp ，把实际的网络请求，缓存，压缩等功能都统一了起来，每一个功能只是一个 <code>Interceptor</code> ,它们再连接成一个 <code>Interceptor.Chain</code> ，环环相扣，最终圆满完成了一次网络请求</p>\n<p>从 <code>getResopnseWithInterceptorChain</code> 函数我们可以看到，<code>Interceptor.Chain</code> 的分部依次是：</p>\n<ol>\n<li><p>在 OkHttpClient 中配置的 <code>Interceptor</code></p>\n</li>\n<li><p>负责失败重试以及重定向的 <code>RetryAndFollowUpInterceptor</code></p>\n</li>\n<li><p>负责把用户的构造请求转换为发送到服务器的请求、把服务器的请求返回的响应转换为用户友好的响应 <code>BridgeInterceptor</code></p>\n</li>\n<li><p>负责读取缓存直接返回、更新缓存的 <code>CacheInterceptor</code></p>\n</li>\n<li><p>负责创建分配 HTTP 连接的 <code>ConnectInterceptor</code></p>\n</li>\n<li><p>配置 OkHttpClient 时设置的 <code>NetworkInterceptor</code></p>\n</li>\n<li><p>负责向服务器发送请求数据、从服务器读取响应数据的 <code>CallServerInterceptor</code></p>\n</li>\n</ol>\n<p>它们的显示层级也对应了当一个 HTTP 请求发生的时候它们的调用顺序，我们逐个的去了解它们具体的工作职责与原理。</p>\n<h5 id=\"RetryAndFollowUpInterceptor\"><a href=\"#RetryAndFollowUpInterceptor\" class=\"headerlink\" title=\"RetryAndFollowUpInterceptor\"></a><strong>RetryAndFollowUpInterceptor</strong></h5><p>RetryAndFolllowUpInterceptor 主要职责是如它的名字一样，将网络重试或者转发。具体情况就是遇到如服务器返回 HTTP 状态码 300、301、302 之类的自动重定向，遇到 401（需要认证） 调用 client.authenticator() (如果开发者有实现的话) 自动去认证，除此之外还有代理认证等等，因为逻辑代码较多就不贴出来了，感兴趣的可以自己去看看源码实现</p>\n<h5 id=\"BridgeInterceptor\"><a href=\"#BridgeInterceptor\" class=\"headerlink\" title=\"BridgeInterceptor\"></a><strong>BridgeInterceptor</strong></h5><p>BridgeInterceptor 具体主要是处理请求和响应中的 <code>header </code>部分，如果数据有压缩步骤，例如 <code>gzip</code> 等处理，那么它还负责将数据解压缩完成，涉及 <code>Content-Type</code>、<code>Content-Length</code>、<code>Transfer-Encoding</code> 等<code>header</code> 的处理</p>\n<h5 id=\"CacheInterceptor\"><a href=\"#CacheInterceptor\" class=\"headerlink\" title=\"CacheInterceptor\"></a><strong>CacheInterceptor</strong></h5><p>CacheInterceptor 会将符合要求的 <code>request</code>和与之对应的 <code>Response</code> 缓存起来，如果下次 <code>request</code> 没有超过缓存时效，这一步会拦截器会直接返回 <code>Response</code>，不会再触发之后的拦截器经行网络请求了 ；而如果没有找到对应的 <code>response</code> 则会先继续向下获取网络响应然后尝试缓存。值得一提的是 CacheInterceptor 的缓存机制是非常严格的，必须符合 Http 对缓存制定的标准且是 GET 请求。</p>\n<h5 id=\"ConnectInterceptor\"><a href=\"#ConnectInterceptor\" class=\"headerlink\" title=\"ConnectInterceptor\"></a><strong>ConnectInterceptor</strong></h5><p>ConnectIntercetpor 则是负责 HTTP 连接创建、复用与分配。算是我们需要了解的重难点了，<del>敲黑板，记笔记</del>。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSfZuR.png\" alt=\"connectIntercetpor\"></p>\n<p>从上图中我们得知几个关键的对象 <code>StreamAllocation</code>、<code>HttpCodec</code>、<code>RealConnection</code> 。</p>\n<p>StreamAllocation 是 <code>HttpCodec</code> 和 <code>RealConnection</code> 的载体，它在 RetryAndFollowUpIntercetpor 中创建，通过 <code>newStream</code> 方法中去申请分配一个 <code>RealConnection</code> ，<code>RealConnection</code> 代表的就是一个可用的 TCP&#x2F;IP 连接。那么连接池是如何运作的，又是如何拿到一条可用的连接呢，我们从 <code>newStream</code> 去看:</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/KSqEFA.md.png\" alt=\"newStream\"></p>\n<p><code>newStream</code> 整个流程的实际代码还是挺长的，我们节选了部分并只关注高亮部分来讲解。</p>\n<ul>\n<li><code>newStream</code> 通过<code>findHealthyConnection</code>从连接池内取出可用的连接，如果没取到就重复<code>findConnection</code> 的过程。</li>\n<li><code>findHealthyConnection()</code> 负责确认取出的连接是可用的，而 <code>findConnection()</code> 用来从连接池中取出连接和创建连接。</li>\n<li><code>findConnection()</code> 先尝试 44 行的 <code>Internal.instance.get(connectionPool,address,this,null)</code> 取出连接， <code>Internal.instance</code> 的实例是在 OkHttpClient 创建的匿名类对象，<code>get()</code> 方法只是调用 <code>ConnectionPool</code> 的<code>get</code> 方法。<code>ConnectionPool</code> 顾名思义就是我们的连接池的实现了，这个稍后再细讲。</li>\n<li>如果连接池里没有可用的连接。那么就会重新创建一个 <code>RealConnection</code> 并去执行 TCP 握手，然后将它加入到 <code>connectionPool</code> 中。至此一个寻找可用的 <code>conncetion</code> 的步骤就完成了。</li>\n</ul>\n<p>找到可用的连接后，接下来通过<code>newCodec</code> 创建一个 <code>HttpCode</code> 实例， <code>HttpCode</code>是对 HTTP 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP&#x2F;1.1 和 HTTP&#x2F;2 版本的实现。</p>\n<p>管道连接、协议实现这些都准备完毕后，<code>ConnectInterceptor</code> 的职责也就完成了。下面先回过头来看看 Connection 的核心 <code>ConnectionPool</code> ，它负责了对连接池的复用维护管理。对外它只暴露的简单的 <code>get</code>、<code>put</code> 方法，内里的实现机制又是如何的呢</p>\n<p><strong>ConnectionPool</strong></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/14/Kp9rDI.png\" alt=\"connectionPool\"></p>\n<p>从代码中我们可以看出</p>\n<ul>\n<li>ConnectionPool 维护了一个线程池<code>Executor</code> 用于执行清理空闲、超时以及超过数量的 <code>Connection</code> 连接</li>\n<li>connections 是一个双向队列（Deque），用来管理 <code>RealConnection</code> 连接，最大的保持数量是 <code>5</code> 最长的<code>keepAlive</code> 持续时间为 <code>5 minutes</code>。<code>RealConnection</code> 是 <code>socket</code> 物理连接的包装</li>\n<li>routerDatabase 用来记录连接失败的线路名单</li>\n<li>向连接池添加新的连接时会触发清理空闲连接的任务。<code>excutor.execute(clearRunnable);</code></li>\n</ul>\n<p><code>ConnectionPool</code> 的职责很清晰，它负责维护真实的 socket 连接复用，并清理空闲的连接。</p>\n<h5 id=\"CallServerInterceptor\"><a href=\"#CallServerInterceptor\" class=\"headerlink\" title=\"CallServerInterceptor\"></a><strong>CallServerInterceptor</strong></h5><p>接下来就到流程的最后一个拦截器——<code>CallServerIntercaptor</code>，前边的拦截器已经将我们的请求给包装好， 网络请求所需要的 connection、httpCodec 也都已经初始化完毕，这里就开始正式的网络通讯：</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9wjnU.md.png\" alt=\"callServerInterceptor\"></p>\n<p>我们看 <code>intercept</code> 方法高亮的实现部分来看看 <code>CallServerIntercptor</code> 做了哪些事情</p>\n<ol>\n<li>拿到之前配置好的 <code>HttpCode</code>、<code>conncetion</code>、<code>streamAllocation</code> 以及 <code>request</code> 开始进行请求</li>\n<li>通过 <code>HttpCode</code> 发送<code>reuqest</code> 的 <code>header</code> 部分。</li>\n<li>发送完毕后如果<code>request</code> 还有 <code>body</code>（服务器返回 <code>Except:100-continue</code>），那么就继续发送信息主体部分</li>\n<li>开始接受 <code>Response</code> 的<code>Header</code> ，并创建一个 <code>response</code> 承载</li>\n<li>判断 <code>Response</code> 的 <code>header</code> ，判断<code>Response</code> 是否有 <code>body</code> ，如果有就重新创建一个 <code>response</code> 然后开始接收 <code>Response</code> 的信息主体</li>\n<li>进行一些 <code>header</code> 和状态码判断没有问题后就返回 <code>response</code> ，网络请求完成。</li>\n</ol>\n<p>到这里整个网络请求就完成了，可以看到整个流程和物理的网络模型一样，层层递进，分层简化了每层的逻辑、共同完成复杂的任务。</p>\n<h4 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h4><p>前面我们跟着同步网络请求 <code>execute</code> 基本摸清楚了整个 OkHttp 的脉络和流程。但是有一点我们略过了那就是 <code>Dispatcher</code> ，它也是同步和异步调用的最大区别。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9cHyR.md.png\" alt=\"execute 和 enqueue\"></p>\n<p>我们可以看到两者在使用调度器上有些许差别。</p>\n<ul>\n<li><code>execute()</code> 在调用<code>Dispatcher</code> 时使用的是 <code>Dispatcher .executed()</code> 来执行然后在 <code>finally</code> 后调用<code>finished</code> 结束流程。</li>\n<li>而 <code>enqueue()</code> 则调用了 <code>enqueue</code> 将自己添加进入调度器，且包装了一个 <code>AsyncCall</code> ，<code>AsyncCall</code> 继承了 <code>NamedRunnable</code> 它是一个<code>Runnable</code> 在<code>run()</code> 方法被执行后会触发 <code>execute()</code> 方法，而另一个主要方法 <code>executeOn</code> 则是将自己添加到传入的线程池执行，两者环环相扣。<code>AsyncCall</code> 中 <code>execute()</code> 的方法操作与同步请求 <code>execute()</code>内的代码逻辑大同小异。具体原因我们去看看 <code>Dispatcher</code> 的具体实现 ：</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/10/15/K9202Q.md.png\" alt=\"Dispatcher\"></p>\n<p>可以看到 <code>Dispatcher</code>维护着三个双向队列</p>\n<ol>\n<li>预备异步队列 <code>readyAsyncCalls</code> 一些还没有被放入线程池执行的任务会先放到之类</li>\n<li>运行异步队列 <code>runningAsyncCalls</code> 一些已经在执行中的任务在这里管理</li>\n<li>运行同步队列 <code>runningSyncCalls</code> 已经执行的同步网络任务在这里管理</li>\n</ol>\n<p><strong>Dispatcher维护了一个懒加载的线程池 <code>executorService</code>，线程池没有核心线程，非核心线程最大数量很大，比较适合执行大量的耗时较少的任务。最大的并发请求数量限制为了 60。每个主机的最大请求数量限制为 5。所有的异步任务都是在这个线程池中执行的.</strong></p>\n<p>同步请求 <code>execute</code> 的入口也是 <code>excute</code> 方法，出口则是 <code>finished</code>。我们观察它仅仅只是运行的收扔进队列，结束后被 remove 移出，起到管理作用。没有放入线程池总，也就是说 <strong><code>execute</code> 的执行环境为发起同步请求的线程，这也是为什么我们在 UI 线程中调用同步请求会触发 <code>NetworkOnMainThread</code> 的根本原因</strong></p>\n<p>异步请求 <code>enqueue</code> 会将方法放入 <code>readyAsyncCalls</code> 然后执行 <code>PromoteAndExcute</code> 方法，它会将<code>readyAsyncCalls</code> 中的任务放到 <code>runningAsyncCalls</code> 中，然后调用每个任务的 <code>executeOn</code> 将线程池 <code>excutorServier</code> 传递给他们调用。线程池会执行开始执行任务而后又触发每个 <code>AsyncCall</code> 的 <code>execute</code> 方法执行网络请求，这时网络请求运行的环境就位于线程池内了，之后结果会通过<code>enqueue</code> 传递的 <code>responseCallback</code> 回调到发起线程。</p>\n<p>到这里整个 OkHttp 的请求流程我们就解析完毕了。其中一些例如缓存策略并没有细致的展开，还有 HttpCode 的具体实现，它是如何对 TCP&#x2F;IP 网络请求的抽象的。但已经对 OkHttp 建立了一个大致的脉络，由 0 跨越到了 1 ，对整个请求流程有了一定了解。再次不由得再次佩服框架的开发者，设计了如此精美强大的网络请求开源方案。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>从 Retorfit 分析到 OkHttp ，我们了解调用的 Api 是如何循序渐进的从一两行的代码变为一整个完整 HTTP 请求，之后又是怎么将网络响应便捷的转换为我们需要结果。体验了程序设计之美。也希望以后的开发过程中可以学以致用，将这些知识真正的纳为己用。</p>\n"},{"layout":"post","title":"Flutter 深入探索","subtitle":"了解 flutter 的渲染和更新机制","date":"2020-05-11T09:56:00.000Z","author":"rank","header_image":"img/post-bg-flutter.jpg","catalog":true,"_content":"\n\n## Flutter 框架简介\n\n![架构](https://i.loli.net/2020/05/11/FDJ3UmPfj7sOIkp.png)\n\n在深入代码之前，我们先了解一下 Flutter 框架结构：\n\n1. 底层的 Engine 库，负责语言的解释（Dart）、视图的渲染（Skia、Text）.它们都是使用C、C++ 编写的，具有极高的性能。\n2. Framework 中将编写 UI 所需要的动画、绘制、手势等独立实现，然后组合起来交由 rendering 层级来产生强大的效果，组件的层次是扁平化的，最大化可能的组合数量。\n3.  Flutter 自带了两套较为完善的 Widgets 套件，Android 平台风格的 `Material` 与 iOS 平台风格的 `Cupertino`\n\n从结构图的我们可以看到 Android Flutter 结构非常扁平化，功能也都奉行单一职责，我们可以较为容易的了解我们所需要的代码实现。从层次上可以看出我们经常使用的 `StatelessWidget`、`StateFullWidget` 属于 Widget 层，它们并不负责具体的渲染工作，而是 redering 层来做，实际上也是这样的。widget 只是一个数据配置的类，它的创建/销毁都是十分轻量级的。它所做的就是通过 widget 树来创建和映射一个实际的视图渲染树 `renderObject`。我们可以通过官方文档的流程图来了解这一流程：\n\n![](https://i.loli.net/2020/05/08/6yLGiCNKVI47maB.jpg)\n\n1. 我们在项目中编写代码构建了一个 widget 树，通过 `runApp()` 装载或者 `setState` 的时候就触发了树的更新和渲染机制。\n2. 通过 widget 树生成了一个 Elment 树，它的职责是桥接、管理 Widget树 与 Render 树\n3. 在 Elment 中，生成对应的 render树，然后根据 Widget 的布局属性进行布局和绘制 \n4. 当我们使用 `setState({})` 触发更新的时候，同样会触发上述流程，只不过这时发生的更新是局部的，锁定需要更新的区域，进行对子树的删除或更新操作\n\n\n\n## Widget\n\nWidget 为我们一般情况下直接用来构建界面的组件，通过它来描述当前的配置下视图应该呈现的样子，**在创建 Widget 的时候都需要将所有的构造参数设定为 final ，即整个 Widget 是 immutable 状态。因为这样设计的话，就可以当数据变更的时候发送通知到对应的可变更节点，由上到下对 重建整个 Widget 树经行刷新，而不用关心具体会影响到哪些节点。**Widget 分为有状态的`StatefullWidget` 与无状态的 `StateelessWidget` 。它们的特性如下：\n\n- `StatelessWidget`: 无中间状态变化的 Widget，需要更新展示内容就得重新通过 new 。它的整体是一个 final 的。\n\n- `StatefullWidget`:  `StatefullWidget `可以在内部存储和发生状态变化，之前有提到，Widget 设计上必须为 immutable 状态的，所以 `StatefullWidget` 还有一个必须实现的抽象方法 `createState()` ,它需要你实现返回一个继承了 `State`  的类，通过它来存储中间状态和通知树更新。\n  `State` 类拥有完整的视图生命周期，它提供了一系列的钩子函数，在对应的视图阶段会被触发，以便开发者做出响应:\n\n  1. `ininState() `  state 创建后被插入到树中时候嗲用\n  2. `didUpdateWidget(newWidget)` 当祖先节点被 rebuild widget 时调用\n  3. `deactivate()` 被 remove 的时候调用\n  4. `didChagnedDependecies()` 在 `intState()` 之后、或者依赖的 `InheriteWidget` rebuild 之后被调用\n  5. `build()` 当初始化准备工作完成后或者 State 触发视图改变的时候都会被调用\n  6. `dispose()` 当 widget 彻底被销毁的时候调用\n  7. `reassemble()` hot reload 时调用\n\n  \n\n## Widget 装载和更新过程\n\n从图片了解 Widget 的装载和更新过程，从文档中了解了 widget 的生命周期。再我们通过从代码的角度来看看这一切到底是如何发生的。\n\n我们通过新建 flutter project 所生成的计数器来演示:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        title: 'Flutter Demo',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'You have pushed the button this many times:',\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n\n```\n\n#### 初始化\n\n当 app 启动候，engine 库装载成功 ，main.dart 中 main 函数被启动，`runApp(widget)` 函数被调用，属于 flutter 工作就开始了。 `runApp(wiedget)` 做的事情很清晰\n\n``` dart\nvoid runApp(Widget app) {\n  WidgetsFlutterBinding.ensureInitialized()\n    ..scheduleAttachRootWidget(app)\n    ..scheduleWarmUpFrame();\n}\n```\n\n1. 通过 WidgetsFlutterBinding 初始化所有 flutter 需要的组件\n2. 构建 widget 树所对应的 element 树和 render 树\n3. 开始做绘制的准备工作。\n\nWidgetsFlutterBinding 内部实现代码虽然只有寥寥几行，但是它实际是通过 dart 的 mixins 特性，像架构图那样，将所有的功能聚合，具体实现则分开。当 widgetsFlutterBinding 实例化的时候，他所继承的所有类也都一一实例加载了。\n\n```dart\nclass WidgetsFlutterBinding extends BindingBase with GestureBinding, ServicesBinding, SchedulerBinding, PaintingBinding, SemanticsBinding, RendererBinding, WidgetsBinding {\n//GestureBinding 、ServicesBinding 等等如它们的名字各司其职，通过WidgetsFlutterBinding 来初始化调用\n    static WidgetsBinding ensureInitialized() {\n    if (WidgetsBinding.instance == null)\n      WidgetsFlutterBinding();\n    return WidgetsBinding.instance;\n  }\n    \n}\n\n```\n\n接下来就是构建过程\n\n``` dart\n  void scheduleAttachRootWidget(Widget rootWidget) {\n      //通过 Timer.run 将执行方法挂起执行，避免阻塞，让后边的帧预热方法先执行，争取时间\n    Timer.run(() {\n      attachRootWidget(rootWidget);\n    });\n  }\n\n  void attachRootWidget(Widget rootWidget) {\n    _renderViewElement = RenderObjectToWidgetAdapter<RenderBox>(\n      container: renderView,\n      debugShortDescription: '[root]',\n      child: rootWidget,\n    ).attachToRenderTree(buildOwner, renderViewElement);\n  }\n\n```\n\n#### 构建树\n\n`scheduleAttachRootWidget ` 实际的方法是 `attachRootWidget` ,  在这里通过适配器的 `attachToRenderTree` 方法构建 widget 对应的  elment 树和 renderObject。这时的 `renderViewElement` 还为 null 并没有被创建。`renderView` 里也只携带的 window 和屏幕参数的相关初始化信息。\n\n``` dart\n  RenderObjectToWidgetElement<T> createElement() => RenderObjectToWidgetElement<T>(this);\n\n\n  RenderObjectToWidgetElement<T> attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement<T> element ]) {\n      //如果 elment 为空，则开始创建 element 并布局，\n    if (element == null) {\n      // 锁定当前的状态，禁止当前区域更新\n      owner.lockState(() {\n         //创建 renderObject 对应的 element\n        element = createElement();\n        assert(element != null);\n         // 赋值 widgetManager\n        element.assignOwner(owner);\n      });\n        // 计算更新范围,整个树开始构建\n      owner.buildScope(element, () {\n        element.mount(null, null);\n      });\n      \n      SchedulerBinding.instance.ensureVisualUpdate();\n    } else {\n      element._newWidget = this;\n      // 标记 element 需要更新\n      element.markNeedsBuild();\n    }\n    return element;\n  }\n\n```\n\n当应用初始化的时候 element 树毫无疑问是还没有的，这里就开始构建整个 element 树。整块区域的关于绘制构建的就是 `buildScope`。接下来我们也从这里进去一探究竟。\n\n``` dart\n// 我们去除源码中大量的断言和校验\nvoid buildScope(Element context, [ VoidCallback callback ]) {\n    try {\n      _scheduledFlushDirtyElements = true;\n      if (callback != null) {\n        _dirtyElementsNeedsResorting = false;\n        callback();\n      }\n      _dirtyElements.sort(Element._sort);\n      _dirtyElementsNeedsResorting = false;\n      int dirtyCount = _dirtyElements.length;\n      int index = 0;\n      while (index < dirtyCount) {\n          // 调用脏元素列表的 rebuild 方法，重新构建.\n          _dirtyElements[index].rebuild();\n        }\n        index += 1;\n        // 如果中途有插入需要渲染的 element,则重新排序并index 减一再次执行循环 \n        // _scheduledFlushDirtyElements 类似，只不过它控制的是脏元素的原来为是是否插入了新的元素，且 build 方法并不在这里执行。 \n        if (dirtyCount < _dirtyElements.length || _dirtyElementsNeedsResorting) {\n          _dirtyElements.sort(Element._sort);\n          _dirtyElementsNeedsResorting = false;\n          dirtyCount = _dirtyElements.length;\n          while (index > 0 && _dirtyElements[index - 1].dirty) {\n            index -= 1;\n          }\n        }\n      }\n    } finally {\n      // 清理所有的脏元素标记\n      for (Element element in _dirtyElements) {\n        assert(element._inDirtyList);\n        element._inDirtyList = false;\n      }\n      _dirtyElements.clear();\n      _scheduledFlushDirtyElements = false;\n      _dirtyElementsNeedsResorting = null;\n     \n    }\n  }\n```\n\n从代码和注释可以看出来,`buildScope` 是将所有被 `scheduleBuildFor`  标记为脏元素的 element 在此重新执行 rebuild 方法。而 `buildScope` 中并没有看到 `scheduleBuildFor` 的方法调用，那么很显然 在 `callback ` 里了。在 `callback` 中我们看到 element 的  `mount` 方法被执行。\n\n``` dart\n@override\n  void mount(Element parent, dynamic newSlot) {\n    assert(parent == null);\n     // 创建 renderObject\n    super.mount(parent, newSlot);\n     // 开始构建\n    _rebuild();\n  }\n\t\n/////////////////////////////////// RootRenderObjectElement /////////////////////\n\n// 我们在 root 中所创建了的 Element 为  RenderObjectToWidgetElement，他的父类 RootRenderObjectElement 中的 mount 实现了创建和绑定 renderObject。\n @override\n  void mount(Element parent, dynamic newSlot) {\n    super.mount(parent, newSlot);\n    _renderObject = widget.createRenderObject(this);\n    assert(_slot == newSlot);\n    attachRenderObject(newSlot);\n    _dirty = false;\n  }\n\n```\n\n`mount` 在初始化的时候创建了我们真正负责渲染的类 renderObject . 然后开始了视图构建的过程。\n\n``` dart\n static const Object _rootChildSlot = Object();\n\t\n  void _rebuild() {\n      _child = updateChild(_child, widget.child, _rootChildSlot);\n  }\n\n  Element updateChild(Element child, Widget newWidget, dynamic newSlot) {\n    if (newWidget == null) {\n      if (child != null)\n          //如果没有新的 widget 需要更新，则目的就是移除 child，child 的 deactive 会被调用\n        deactivateChild(child);\n      return null;\n    }\n    // slot 在 elment 中用于声明该元素在 parent 中的位置\n    if (child != null) {\n      if (child.widget == newWidget) {\n        if (child.slot != newSlot)\n           //如果当两个元素相同，位置不同的时候更新它的位置\n          updateSlotForChild(child, newSlot);\n        return child;\n      }\n        // canUpdate 则通过 key、runtimeType 判断两个 widget是否相同，如果相同则更新或移动位置 \n      if (Widget.canUpdate(child.widget, newWidget)) {\n        if (child.slot != newSlot)\n          updateSlotForChild(child, newSlot);\n        child.update(newWidget);\n        assert(child.widget == newWidget);\n        return child;\n      }\n      deactivateChild(child);\n      assert(child._parent == null);\n    }\n    //如果不是更新则需要将 widget 树插入到树中\n    return inflateWidget(newWidget, newSlot);\n  }\n```\n\n 当进入到 rebuild 方法后我们发现这里并不是只处理了初始化时视图构建的逻辑，前面的大部分很明显是为了更新和复用提供的，事实也没错，但是更新如何执行到这里还还是要稍后揭晓，我们继续看看 `inflateWidget`\n\n```dart\n Element inflateWidget(Widget newWidget, dynamic newSlot) {\n    final Key key = newWidget.key;\n     // 如果 widget 拥有 key ，那么尝试通过 key 来进行回收复用 \n    if (key is GlobalKey) {\n      final Element newChild = _retakeInactiveElement(key, newWidget);\n      if (newChild != null) {\n        // 将找到 widget 重新加入树中，并调用它的 activate 生命周期方法，该方法还会触发 didChangeDependencies 与 markNeddBuild\n        newChild._activateWithParent(this, newSlot);\n        final Element updatedChild = updateChild(newChild, newWidget, newSlot);\n        assert(newChild == updatedChild);\n        return updatedChild;\n      }\n    }\n    // 创建 child Widget 对应的 element \n    final Element newChild = newWidget.createElement();\n  \t// 循环构建树  这里的 Element 不再是 rootElement,而是 StateleesWidget 与 StatefullWidget 的上层——ComponentElement， 它所对应的 mount 实现也稍有不同 \n    newChild.mount(this, newSlot);\n    assert(newChild._debugLifecycleState == _ElementLifecycle.active);\n    return newChild;\n  }\n\n//////////////////////////////ComponentElement///////////////////////////////////////////\n\n  @override\n  void mount(Element parent, dynamic newSlot) {\n    super.mount(parent, newSlot);\n    assert(_child == null);\n    assert(_active);\n    _firstBuild();\n    assert(_child != null);\n  }\n\n  void _firstBuild() {\n    rebuild();\n  }\n\n// 最终会调用 performRebuild 来循环构建整个子树\n  @override\n  void performRebuild() {\n    Widget built;\n    try {\n      built = build();\n      debugWidgetBuilderValue(widget, built);\n    } catch (e, stack) {\n      built = ErrorWidget.builder(...);\n    } finally {\n      _dirty = false;\n    }\n    try {\n      _child = updateChild(_child, built, slot);\n      assert(_child != null);\n    } catch (e, stack) {\n      built = ErrorWidget.builder(...);\n    }\n  }\n```\n\n#### 渲染视图\n\n到这里整个 renderObject 的树就创建完成了，当 Engine  通过 callback 通知 rendering 层开始渲染时候，渲染工作也就开始了，下图为渲染过程：\n\n![](https://i.loli.net/2020/05/11/TKrnEPou51qDM39.png)\n\n本次我们主要关心 build 与 layout 部分，之前的 build 过程已经分析完了，接下来就是 layout ,paint。这里就不做详细分析了，我们可以看到 drawFrame 被调用后它们也都分别完成了各自的工作，然后将数量打包交给引擎最后渲染到窗口。\n\n```dart\n // 当需要刷新视图的时候，flutter 注册的 frameCallback 都会被调用\n void _handlePersistentFrameCallback(Duration timeStamp) {\n    drawFrame();\n  }\n\n  @protected\n  void drawFrame() {\n    assert(renderView != null);\n     // 更新所有\"脏\" render 的 布局信息\n    pipelineOwner.flushLayout();\n    // 将数据打包\n    pipelineOwner.flushCompositingBits();\n    // 标记绘制图层\n    pipelineOwner.flushPaint();\n      //将处理好的数据上传\n    renderView.compositeFrame(); // this sends the bits to the GPU\n    pipelineOwner.flushSemantics(); // this also sends the semantics to the OS.\n  }\n\n   void flushLayout() {\n    try {\n      while (_nodesNeedingLayout.isNotEmpty) {\n        final List<RenderObject> dirtyNodes = _nodesNeedingLayout;\n        _nodesNeedingLayout = <RenderObject>[];\n         // 扫描所有需要重新布局列表里的Render，调用它们的 _layoutWithoutResize() 重新布局\n        for (RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) => a.depth - b.depth)) {\n          if (node._needsLayout && node.owner == this)\n            node._layoutWithoutResize();\n        }\n      }\n    } finally {\n \t....\n    }\n  }\n\n  void _layoutWithoutResize() {\n      //performLayout 取决于每个 Widget 的 renderObject 具体实现\n    performLayout();\n    markNeedsSemanticsUpdate();\n    markNeedsPaint();\n  }\n\n```\n\n以上就是 Flutter 初次运行时候的构建过程。我们可以发现其中混杂了许多判断更新的代码，由此也可以判断，flutter 的视图创建和更新有不小的重合，事实也确实如此，接下里我们看看 Flutter 中视图是如何更新的。\n\n#### 更新\n\n通常我们都是调用 ` setState({})` 通知更新，在计数器程序里，我们监听了 FloatingActionButton 的点击事件，在事件中使用 `setState({counter++;})` 来使得 Text 组件使用的数据发生了变换。：\n\n```dart\n void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n  \n@protected\n  void setState(VoidCallback fn) {\n    assert(fn != null);\n    final dynamic result = fn() as dynamic;\n    assert(() {\n      if (result is Future) {\n        throw FlutterError.fromParts(....);\n      }\n      return true;\n    }());\n    _element.markNeedsBuild();\n  }\n// 还记得开篇的 attachToRenderTree 中的 element 如果不等于空的处理方式吗，这里同样如此。将 element 标记需要构建\n\n void markNeedsBuild() {\n    if (!_active)\n      return;\n    if (dirty)\n      return;\n     //将元素标记为“脏的”，需要更新构建\n    _dirty = true;\n    owner.scheduleBuildFor(this);\n  }\n\n void scheduleBuildFor(Element element) {\n \t// 将元素扔进列表等待下次发车\n    _dirtyElements.add(element);\n     //还需要重新激活\n    element._inDirtyList = true;\n  }\n\n```\n\n当我们将 element 标记为后 WidgetsBinding 的 `drawFrame` 方法同样被调用. drawFrame 与 reanderBinding 的方法有些许类似，但是它在 drawFrame 操作之前还调用了我们之前看到的 buildScope 来重新构建当前区域的树，只有再通过 `_rebuild` `udpateChild` 一系列的方法对比和移动 widget 。最后在重新 drawFrame 将改变的视图更新的窗口上。\n\n```dart\n  @override\n  void drawFrame() {\n    if (_needToReportFirstFrame && _reportFirstFrame) {\n      assert(!_firstFrameCompleter.isCompleted);\n\n      TimingsCallback firstFrameCallback;\n      firstFrameCallback = (List<FrameTiming> timings) {\n        if (!kReleaseMode) {\n          developer.Timeline.instantSync('Rasterized first useful frame');\n          developer.postEvent('Flutter.FirstFrame', <String, dynamic>{});\n        }\n        SchedulerBinding.instance.removeTimingsCallback(firstFrameCallback);\n        _firstFrameCompleter.complete();\n      };\n      SchedulerBinding.instance.addTimingsCallback(firstFrameCallback);\n    }\n\n    try {\n      if (renderViewElement != null)\n          // 如果element 不为空则开始构建\n        buildOwner.buildScope(renderViewElement);\n        // 然后调用渲染 经行 layout paint  send window 等操作\n      super.drawFrame();\n      buildOwner.finalizeTree();\n    } finally {\n    ...\n    }\n    _needToReportFirstFrame = false;\n  }\n```\n\n\n\n\n\n可以发现相比 Android 系统的视图应用初始化过程，Flutter 作为一个跨平台 UI 视图框架确实更加简洁。需要关注和操心的事情更小。而 immutable 的 widget 设计，也使得在更新的时候也十分的简单，widget 重用与实际渲染对象分开映射，让 widget 的重建并不特别的花费成本。\n\n\n\n\n\n## 参考\n\n[深入了解 Flutter 界面开发](https://www.yuque.com/xytech/flutter/tge705)\n\n","source":"_posts/2020-05-11-flutter_depth.markdown","raw":"---\nlayout: post\ntitle: \"Flutter 深入探索\"\nsubtitle: \"了解 flutter 的渲染和更新机制\"\ndate: 2020-05-11 17:56:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-flutter.jpg\"\ncatalog: true\ntags:\n  - Flutter\n---\n\n\n## Flutter 框架简介\n\n![架构](https://i.loli.net/2020/05/11/FDJ3UmPfj7sOIkp.png)\n\n在深入代码之前，我们先了解一下 Flutter 框架结构：\n\n1. 底层的 Engine 库，负责语言的解释（Dart）、视图的渲染（Skia、Text）.它们都是使用C、C++ 编写的，具有极高的性能。\n2. Framework 中将编写 UI 所需要的动画、绘制、手势等独立实现，然后组合起来交由 rendering 层级来产生强大的效果，组件的层次是扁平化的，最大化可能的组合数量。\n3.  Flutter 自带了两套较为完善的 Widgets 套件，Android 平台风格的 `Material` 与 iOS 平台风格的 `Cupertino`\n\n从结构图的我们可以看到 Android Flutter 结构非常扁平化，功能也都奉行单一职责，我们可以较为容易的了解我们所需要的代码实现。从层次上可以看出我们经常使用的 `StatelessWidget`、`StateFullWidget` 属于 Widget 层，它们并不负责具体的渲染工作，而是 redering 层来做，实际上也是这样的。widget 只是一个数据配置的类，它的创建/销毁都是十分轻量级的。它所做的就是通过 widget 树来创建和映射一个实际的视图渲染树 `renderObject`。我们可以通过官方文档的流程图来了解这一流程：\n\n![](https://i.loli.net/2020/05/08/6yLGiCNKVI47maB.jpg)\n\n1. 我们在项目中编写代码构建了一个 widget 树，通过 `runApp()` 装载或者 `setState` 的时候就触发了树的更新和渲染机制。\n2. 通过 widget 树生成了一个 Elment 树，它的职责是桥接、管理 Widget树 与 Render 树\n3. 在 Elment 中，生成对应的 render树，然后根据 Widget 的布局属性进行布局和绘制 \n4. 当我们使用 `setState({})` 触发更新的时候，同样会触发上述流程，只不过这时发生的更新是局部的，锁定需要更新的区域，进行对子树的删除或更新操作\n\n\n\n## Widget\n\nWidget 为我们一般情况下直接用来构建界面的组件，通过它来描述当前的配置下视图应该呈现的样子，**在创建 Widget 的时候都需要将所有的构造参数设定为 final ，即整个 Widget 是 immutable 状态。因为这样设计的话，就可以当数据变更的时候发送通知到对应的可变更节点，由上到下对 重建整个 Widget 树经行刷新，而不用关心具体会影响到哪些节点。**Widget 分为有状态的`StatefullWidget` 与无状态的 `StateelessWidget` 。它们的特性如下：\n\n- `StatelessWidget`: 无中间状态变化的 Widget，需要更新展示内容就得重新通过 new 。它的整体是一个 final 的。\n\n- `StatefullWidget`:  `StatefullWidget `可以在内部存储和发生状态变化，之前有提到，Widget 设计上必须为 immutable 状态的，所以 `StatefullWidget` 还有一个必须实现的抽象方法 `createState()` ,它需要你实现返回一个继承了 `State`  的类，通过它来存储中间状态和通知树更新。\n  `State` 类拥有完整的视图生命周期，它提供了一系列的钩子函数，在对应的视图阶段会被触发，以便开发者做出响应:\n\n  1. `ininState() `  state 创建后被插入到树中时候嗲用\n  2. `didUpdateWidget(newWidget)` 当祖先节点被 rebuild widget 时调用\n  3. `deactivate()` 被 remove 的时候调用\n  4. `didChagnedDependecies()` 在 `intState()` 之后、或者依赖的 `InheriteWidget` rebuild 之后被调用\n  5. `build()` 当初始化准备工作完成后或者 State 触发视图改变的时候都会被调用\n  6. `dispose()` 当 widget 彻底被销毁的时候调用\n  7. `reassemble()` hot reload 时调用\n\n  \n\n## Widget 装载和更新过程\n\n从图片了解 Widget 的装载和更新过程，从文档中了解了 widget 的生命周期。再我们通过从代码的角度来看看这一切到底是如何发生的。\n\n我们通过新建 flutter project 所生成的计数器来演示:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        title: 'Flutter Demo',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'You have pushed the button this many times:',\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n\n```\n\n#### 初始化\n\n当 app 启动候，engine 库装载成功 ，main.dart 中 main 函数被启动，`runApp(widget)` 函数被调用，属于 flutter 工作就开始了。 `runApp(wiedget)` 做的事情很清晰\n\n``` dart\nvoid runApp(Widget app) {\n  WidgetsFlutterBinding.ensureInitialized()\n    ..scheduleAttachRootWidget(app)\n    ..scheduleWarmUpFrame();\n}\n```\n\n1. 通过 WidgetsFlutterBinding 初始化所有 flutter 需要的组件\n2. 构建 widget 树所对应的 element 树和 render 树\n3. 开始做绘制的准备工作。\n\nWidgetsFlutterBinding 内部实现代码虽然只有寥寥几行，但是它实际是通过 dart 的 mixins 特性，像架构图那样，将所有的功能聚合，具体实现则分开。当 widgetsFlutterBinding 实例化的时候，他所继承的所有类也都一一实例加载了。\n\n```dart\nclass WidgetsFlutterBinding extends BindingBase with GestureBinding, ServicesBinding, SchedulerBinding, PaintingBinding, SemanticsBinding, RendererBinding, WidgetsBinding {\n//GestureBinding 、ServicesBinding 等等如它们的名字各司其职，通过WidgetsFlutterBinding 来初始化调用\n    static WidgetsBinding ensureInitialized() {\n    if (WidgetsBinding.instance == null)\n      WidgetsFlutterBinding();\n    return WidgetsBinding.instance;\n  }\n    \n}\n\n```\n\n接下来就是构建过程\n\n``` dart\n  void scheduleAttachRootWidget(Widget rootWidget) {\n      //通过 Timer.run 将执行方法挂起执行，避免阻塞，让后边的帧预热方法先执行，争取时间\n    Timer.run(() {\n      attachRootWidget(rootWidget);\n    });\n  }\n\n  void attachRootWidget(Widget rootWidget) {\n    _renderViewElement = RenderObjectToWidgetAdapter<RenderBox>(\n      container: renderView,\n      debugShortDescription: '[root]',\n      child: rootWidget,\n    ).attachToRenderTree(buildOwner, renderViewElement);\n  }\n\n```\n\n#### 构建树\n\n`scheduleAttachRootWidget ` 实际的方法是 `attachRootWidget` ,  在这里通过适配器的 `attachToRenderTree` 方法构建 widget 对应的  elment 树和 renderObject。这时的 `renderViewElement` 还为 null 并没有被创建。`renderView` 里也只携带的 window 和屏幕参数的相关初始化信息。\n\n``` dart\n  RenderObjectToWidgetElement<T> createElement() => RenderObjectToWidgetElement<T>(this);\n\n\n  RenderObjectToWidgetElement<T> attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement<T> element ]) {\n      //如果 elment 为空，则开始创建 element 并布局，\n    if (element == null) {\n      // 锁定当前的状态，禁止当前区域更新\n      owner.lockState(() {\n         //创建 renderObject 对应的 element\n        element = createElement();\n        assert(element != null);\n         // 赋值 widgetManager\n        element.assignOwner(owner);\n      });\n        // 计算更新范围,整个树开始构建\n      owner.buildScope(element, () {\n        element.mount(null, null);\n      });\n      \n      SchedulerBinding.instance.ensureVisualUpdate();\n    } else {\n      element._newWidget = this;\n      // 标记 element 需要更新\n      element.markNeedsBuild();\n    }\n    return element;\n  }\n\n```\n\n当应用初始化的时候 element 树毫无疑问是还没有的，这里就开始构建整个 element 树。整块区域的关于绘制构建的就是 `buildScope`。接下来我们也从这里进去一探究竟。\n\n``` dart\n// 我们去除源码中大量的断言和校验\nvoid buildScope(Element context, [ VoidCallback callback ]) {\n    try {\n      _scheduledFlushDirtyElements = true;\n      if (callback != null) {\n        _dirtyElementsNeedsResorting = false;\n        callback();\n      }\n      _dirtyElements.sort(Element._sort);\n      _dirtyElementsNeedsResorting = false;\n      int dirtyCount = _dirtyElements.length;\n      int index = 0;\n      while (index < dirtyCount) {\n          // 调用脏元素列表的 rebuild 方法，重新构建.\n          _dirtyElements[index].rebuild();\n        }\n        index += 1;\n        // 如果中途有插入需要渲染的 element,则重新排序并index 减一再次执行循环 \n        // _scheduledFlushDirtyElements 类似，只不过它控制的是脏元素的原来为是是否插入了新的元素，且 build 方法并不在这里执行。 \n        if (dirtyCount < _dirtyElements.length || _dirtyElementsNeedsResorting) {\n          _dirtyElements.sort(Element._sort);\n          _dirtyElementsNeedsResorting = false;\n          dirtyCount = _dirtyElements.length;\n          while (index > 0 && _dirtyElements[index - 1].dirty) {\n            index -= 1;\n          }\n        }\n      }\n    } finally {\n      // 清理所有的脏元素标记\n      for (Element element in _dirtyElements) {\n        assert(element._inDirtyList);\n        element._inDirtyList = false;\n      }\n      _dirtyElements.clear();\n      _scheduledFlushDirtyElements = false;\n      _dirtyElementsNeedsResorting = null;\n     \n    }\n  }\n```\n\n从代码和注释可以看出来,`buildScope` 是将所有被 `scheduleBuildFor`  标记为脏元素的 element 在此重新执行 rebuild 方法。而 `buildScope` 中并没有看到 `scheduleBuildFor` 的方法调用，那么很显然 在 `callback ` 里了。在 `callback` 中我们看到 element 的  `mount` 方法被执行。\n\n``` dart\n@override\n  void mount(Element parent, dynamic newSlot) {\n    assert(parent == null);\n     // 创建 renderObject\n    super.mount(parent, newSlot);\n     // 开始构建\n    _rebuild();\n  }\n\t\n/////////////////////////////////// RootRenderObjectElement /////////////////////\n\n// 我们在 root 中所创建了的 Element 为  RenderObjectToWidgetElement，他的父类 RootRenderObjectElement 中的 mount 实现了创建和绑定 renderObject。\n @override\n  void mount(Element parent, dynamic newSlot) {\n    super.mount(parent, newSlot);\n    _renderObject = widget.createRenderObject(this);\n    assert(_slot == newSlot);\n    attachRenderObject(newSlot);\n    _dirty = false;\n  }\n\n```\n\n`mount` 在初始化的时候创建了我们真正负责渲染的类 renderObject . 然后开始了视图构建的过程。\n\n``` dart\n static const Object _rootChildSlot = Object();\n\t\n  void _rebuild() {\n      _child = updateChild(_child, widget.child, _rootChildSlot);\n  }\n\n  Element updateChild(Element child, Widget newWidget, dynamic newSlot) {\n    if (newWidget == null) {\n      if (child != null)\n          //如果没有新的 widget 需要更新，则目的就是移除 child，child 的 deactive 会被调用\n        deactivateChild(child);\n      return null;\n    }\n    // slot 在 elment 中用于声明该元素在 parent 中的位置\n    if (child != null) {\n      if (child.widget == newWidget) {\n        if (child.slot != newSlot)\n           //如果当两个元素相同，位置不同的时候更新它的位置\n          updateSlotForChild(child, newSlot);\n        return child;\n      }\n        // canUpdate 则通过 key、runtimeType 判断两个 widget是否相同，如果相同则更新或移动位置 \n      if (Widget.canUpdate(child.widget, newWidget)) {\n        if (child.slot != newSlot)\n          updateSlotForChild(child, newSlot);\n        child.update(newWidget);\n        assert(child.widget == newWidget);\n        return child;\n      }\n      deactivateChild(child);\n      assert(child._parent == null);\n    }\n    //如果不是更新则需要将 widget 树插入到树中\n    return inflateWidget(newWidget, newSlot);\n  }\n```\n\n 当进入到 rebuild 方法后我们发现这里并不是只处理了初始化时视图构建的逻辑，前面的大部分很明显是为了更新和复用提供的，事实也没错，但是更新如何执行到这里还还是要稍后揭晓，我们继续看看 `inflateWidget`\n\n```dart\n Element inflateWidget(Widget newWidget, dynamic newSlot) {\n    final Key key = newWidget.key;\n     // 如果 widget 拥有 key ，那么尝试通过 key 来进行回收复用 \n    if (key is GlobalKey) {\n      final Element newChild = _retakeInactiveElement(key, newWidget);\n      if (newChild != null) {\n        // 将找到 widget 重新加入树中，并调用它的 activate 生命周期方法，该方法还会触发 didChangeDependencies 与 markNeddBuild\n        newChild._activateWithParent(this, newSlot);\n        final Element updatedChild = updateChild(newChild, newWidget, newSlot);\n        assert(newChild == updatedChild);\n        return updatedChild;\n      }\n    }\n    // 创建 child Widget 对应的 element \n    final Element newChild = newWidget.createElement();\n  \t// 循环构建树  这里的 Element 不再是 rootElement,而是 StateleesWidget 与 StatefullWidget 的上层——ComponentElement， 它所对应的 mount 实现也稍有不同 \n    newChild.mount(this, newSlot);\n    assert(newChild._debugLifecycleState == _ElementLifecycle.active);\n    return newChild;\n  }\n\n//////////////////////////////ComponentElement///////////////////////////////////////////\n\n  @override\n  void mount(Element parent, dynamic newSlot) {\n    super.mount(parent, newSlot);\n    assert(_child == null);\n    assert(_active);\n    _firstBuild();\n    assert(_child != null);\n  }\n\n  void _firstBuild() {\n    rebuild();\n  }\n\n// 最终会调用 performRebuild 来循环构建整个子树\n  @override\n  void performRebuild() {\n    Widget built;\n    try {\n      built = build();\n      debugWidgetBuilderValue(widget, built);\n    } catch (e, stack) {\n      built = ErrorWidget.builder(...);\n    } finally {\n      _dirty = false;\n    }\n    try {\n      _child = updateChild(_child, built, slot);\n      assert(_child != null);\n    } catch (e, stack) {\n      built = ErrorWidget.builder(...);\n    }\n  }\n```\n\n#### 渲染视图\n\n到这里整个 renderObject 的树就创建完成了，当 Engine  通过 callback 通知 rendering 层开始渲染时候，渲染工作也就开始了，下图为渲染过程：\n\n![](https://i.loli.net/2020/05/11/TKrnEPou51qDM39.png)\n\n本次我们主要关心 build 与 layout 部分，之前的 build 过程已经分析完了，接下来就是 layout ,paint。这里就不做详细分析了，我们可以看到 drawFrame 被调用后它们也都分别完成了各自的工作，然后将数量打包交给引擎最后渲染到窗口。\n\n```dart\n // 当需要刷新视图的时候，flutter 注册的 frameCallback 都会被调用\n void _handlePersistentFrameCallback(Duration timeStamp) {\n    drawFrame();\n  }\n\n  @protected\n  void drawFrame() {\n    assert(renderView != null);\n     // 更新所有\"脏\" render 的 布局信息\n    pipelineOwner.flushLayout();\n    // 将数据打包\n    pipelineOwner.flushCompositingBits();\n    // 标记绘制图层\n    pipelineOwner.flushPaint();\n      //将处理好的数据上传\n    renderView.compositeFrame(); // this sends the bits to the GPU\n    pipelineOwner.flushSemantics(); // this also sends the semantics to the OS.\n  }\n\n   void flushLayout() {\n    try {\n      while (_nodesNeedingLayout.isNotEmpty) {\n        final List<RenderObject> dirtyNodes = _nodesNeedingLayout;\n        _nodesNeedingLayout = <RenderObject>[];\n         // 扫描所有需要重新布局列表里的Render，调用它们的 _layoutWithoutResize() 重新布局\n        for (RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) => a.depth - b.depth)) {\n          if (node._needsLayout && node.owner == this)\n            node._layoutWithoutResize();\n        }\n      }\n    } finally {\n \t....\n    }\n  }\n\n  void _layoutWithoutResize() {\n      //performLayout 取决于每个 Widget 的 renderObject 具体实现\n    performLayout();\n    markNeedsSemanticsUpdate();\n    markNeedsPaint();\n  }\n\n```\n\n以上就是 Flutter 初次运行时候的构建过程。我们可以发现其中混杂了许多判断更新的代码，由此也可以判断，flutter 的视图创建和更新有不小的重合，事实也确实如此，接下里我们看看 Flutter 中视图是如何更新的。\n\n#### 更新\n\n通常我们都是调用 ` setState({})` 通知更新，在计数器程序里，我们监听了 FloatingActionButton 的点击事件，在事件中使用 `setState({counter++;})` 来使得 Text 组件使用的数据发生了变换。：\n\n```dart\n void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n  \n@protected\n  void setState(VoidCallback fn) {\n    assert(fn != null);\n    final dynamic result = fn() as dynamic;\n    assert(() {\n      if (result is Future) {\n        throw FlutterError.fromParts(....);\n      }\n      return true;\n    }());\n    _element.markNeedsBuild();\n  }\n// 还记得开篇的 attachToRenderTree 中的 element 如果不等于空的处理方式吗，这里同样如此。将 element 标记需要构建\n\n void markNeedsBuild() {\n    if (!_active)\n      return;\n    if (dirty)\n      return;\n     //将元素标记为“脏的”，需要更新构建\n    _dirty = true;\n    owner.scheduleBuildFor(this);\n  }\n\n void scheduleBuildFor(Element element) {\n \t// 将元素扔进列表等待下次发车\n    _dirtyElements.add(element);\n     //还需要重新激活\n    element._inDirtyList = true;\n  }\n\n```\n\n当我们将 element 标记为后 WidgetsBinding 的 `drawFrame` 方法同样被调用. drawFrame 与 reanderBinding 的方法有些许类似，但是它在 drawFrame 操作之前还调用了我们之前看到的 buildScope 来重新构建当前区域的树，只有再通过 `_rebuild` `udpateChild` 一系列的方法对比和移动 widget 。最后在重新 drawFrame 将改变的视图更新的窗口上。\n\n```dart\n  @override\n  void drawFrame() {\n    if (_needToReportFirstFrame && _reportFirstFrame) {\n      assert(!_firstFrameCompleter.isCompleted);\n\n      TimingsCallback firstFrameCallback;\n      firstFrameCallback = (List<FrameTiming> timings) {\n        if (!kReleaseMode) {\n          developer.Timeline.instantSync('Rasterized first useful frame');\n          developer.postEvent('Flutter.FirstFrame', <String, dynamic>{});\n        }\n        SchedulerBinding.instance.removeTimingsCallback(firstFrameCallback);\n        _firstFrameCompleter.complete();\n      };\n      SchedulerBinding.instance.addTimingsCallback(firstFrameCallback);\n    }\n\n    try {\n      if (renderViewElement != null)\n          // 如果element 不为空则开始构建\n        buildOwner.buildScope(renderViewElement);\n        // 然后调用渲染 经行 layout paint  send window 等操作\n      super.drawFrame();\n      buildOwner.finalizeTree();\n    } finally {\n    ...\n    }\n    _needToReportFirstFrame = false;\n  }\n```\n\n\n\n\n\n可以发现相比 Android 系统的视图应用初始化过程，Flutter 作为一个跨平台 UI 视图框架确实更加简洁。需要关注和操心的事情更小。而 immutable 的 widget 设计，也使得在更新的时候也十分的简单，widget 重用与实际渲染对象分开映射，让 widget 的重建并不特别的花费成本。\n\n\n\n\n\n## 参考\n\n[深入了解 Flutter 界面开发](https://www.yuque.com/xytech/flutter/tge705)\n\n","slug":"2020-05-11-flutter_depth","published":1,"updated":"2024-09-13T03:38:13.730Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pq0023s2y43juhgy80","content":"<h2 id=\"Flutter-框架简介\"><a href=\"#Flutter-框架简介\" class=\"headerlink\" title=\"Flutter 框架简介\"></a>Flutter 框架简介</h2><p><img src=\"https://i.loli.net/2020/05/11/FDJ3UmPfj7sOIkp.png\" alt=\"架构\"></p>\n<p>在深入代码之前，我们先了解一下 Flutter 框架结构：</p>\n<ol>\n<li>底层的 Engine 库，负责语言的解释（Dart）、视图的渲染（Skia、Text）.它们都是使用C、C++ 编写的，具有极高的性能。</li>\n<li>Framework 中将编写 UI 所需要的动画、绘制、手势等独立实现，然后组合起来交由 rendering 层级来产生强大的效果，组件的层次是扁平化的，最大化可能的组合数量。</li>\n<li>Flutter 自带了两套较为完善的 Widgets 套件，Android 平台风格的 <code>Material</code> 与 iOS 平台风格的 <code>Cupertino</code></li>\n</ol>\n<p>从结构图的我们可以看到 Android Flutter 结构非常扁平化，功能也都奉行单一职责，我们可以较为容易的了解我们所需要的代码实现。从层次上可以看出我们经常使用的 <code>StatelessWidget</code>、<code>StateFullWidget</code> 属于 Widget 层，它们并不负责具体的渲染工作，而是 redering 层来做，实际上也是这样的。widget 只是一个数据配置的类，它的创建&#x2F;销毁都是十分轻量级的。它所做的就是通过 widget 树来创建和映射一个实际的视图渲染树 <code>renderObject</code>。我们可以通过官方文档的流程图来了解这一流程：</p>\n<p><img src=\"https://i.loli.net/2020/05/08/6yLGiCNKVI47maB.jpg\"></p>\n<ol>\n<li>我们在项目中编写代码构建了一个 widget 树，通过 <code>runApp()</code> 装载或者 <code>setState</code> 的时候就触发了树的更新和渲染机制。</li>\n<li>通过 widget 树生成了一个 Elment 树，它的职责是桥接、管理 Widget树 与 Render 树</li>\n<li>在 Elment 中，生成对应的 render树，然后根据 Widget 的布局属性进行布局和绘制 </li>\n<li>当我们使用 <code>setState(&#123;&#125;)</code> 触发更新的时候，同样会触发上述流程，只不过这时发生的更新是局部的，锁定需要更新的区域，进行对子树的删除或更新操作</li>\n</ol>\n<h2 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h2><p>Widget 为我们一般情况下直接用来构建界面的组件，通过它来描述当前的配置下视图应该呈现的样子，<strong>在创建 Widget 的时候都需要将所有的构造参数设定为 final ，即整个 Widget 是 immutable 状态。因为这样设计的话，就可以当数据变更的时候发送通知到对应的可变更节点，由上到下对 重建整个 Widget 树经行刷新，而不用关心具体会影响到哪些节点。</strong>Widget 分为有状态的<code>StatefullWidget</code> 与无状态的 <code>StateelessWidget</code> 。它们的特性如下：</p>\n<ul>\n<li><p><code>StatelessWidget</code>: 无中间状态变化的 Widget，需要更新展示内容就得重新通过 new 。它的整体是一个 final 的。</p>\n</li>\n<li><p><code>StatefullWidget</code>:  <code>StatefullWidget </code>可以在内部存储和发生状态变化，之前有提到，Widget 设计上必须为 immutable 状态的，所以 <code>StatefullWidget</code> 还有一个必须实现的抽象方法 <code>createState()</code> ,它需要你实现返回一个继承了 <code>State</code>  的类，通过它来存储中间状态和通知树更新。<br><code>State</code> 类拥有完整的视图生命周期，它提供了一系列的钩子函数，在对应的视图阶段会被触发，以便开发者做出响应:</p>\n<ol>\n<li><code>ininState() </code>  state 创建后被插入到树中时候嗲用</li>\n<li><code>didUpdateWidget(newWidget)</code> 当祖先节点被 rebuild widget 时调用</li>\n<li><code>deactivate()</code> 被 remove 的时候调用</li>\n<li><code>didChagnedDependecies()</code> 在 <code>intState()</code> 之后、或者依赖的 <code>InheriteWidget</code> rebuild 之后被调用</li>\n<li><code>build()</code> 当初始化准备工作完成后或者 State 触发视图改变的时候都会被调用</li>\n<li><code>dispose()</code> 当 widget 彻底被销毁的时候调用</li>\n<li><code>reassemble()</code> hot reload 时调用</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Widget-装载和更新过程\"><a href=\"#Widget-装载和更新过程\" class=\"headerlink\" title=\"Widget 装载和更新过程\"></a>Widget 装载和更新过程</h2><p>从图片了解 Widget 的装载和更新过程，从文档中了解了 widget 的生命周期。再我们通过从代码的角度来看看这一切到底是如何发生的。</p>\n<p>我们通过新建 flutter project 所生成的计数器来演示:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">        theme: ThemeData(</span><br><span class=\"line\">          primarySwatch: Colors.blue,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme.of(context).textTheme.display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>当 app 启动候，engine 库装载成功 ，main.dart 中 main 函数被启动，<code>runApp(widget)</code> 函数被调用，属于 flutter 工作就开始了。 <code>runApp(wiedget)</code> 做的事情很清晰</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> runApp(Widget app) &#123;</span><br><span class=\"line\">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class=\"line\">    ..scheduleAttachRootWidget(app)</span><br><span class=\"line\">    ..scheduleWarmUpFrame();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过 WidgetsFlutterBinding 初始化所有 flutter 需要的组件</li>\n<li>构建 widget 树所对应的 element 树和 render 树</li>\n<li>开始做绘制的准备工作。</li>\n</ol>\n<p>WidgetsFlutterBinding 内部实现代码虽然只有寥寥几行，但是它实际是通过 dart 的 mixins 特性，像架构图那样，将所有的功能聚合，具体实现则分开。当 widgetsFlutterBinding 实例化的时候，他所继承的所有类也都一一实例加载了。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetsFlutterBinding</span> <span class=\"keyword\">extends</span> <span class=\"title\">BindingBase</span> <span class=\"title\">with</span> <span class=\"title\">GestureBinding</span>, <span class=\"title\">ServicesBinding</span>, <span class=\"title\">SchedulerBinding</span>, <span class=\"title\">PaintingBinding</span>, <span class=\"title\">SemanticsBinding</span>, <span class=\"title\">RendererBinding</span>, <span class=\"title\">WidgetsBinding</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//GestureBinding 、ServicesBinding 等等如它们的名字各司其职，通过WidgetsFlutterBinding 来初始化调用</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> WidgetsBinding ensureInitialized() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WidgetsBinding.instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      WidgetsFlutterBinding();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WidgetsBinding.instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是构建过程</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> scheduleAttachRootWidget(Widget rootWidget) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过 Timer.run 将执行方法挂起执行，避免阻塞，让后边的帧预热方法先执行，争取时间</span></span><br><span class=\"line\">  Timer.run(() &#123;</span><br><span class=\"line\">    attachRootWidget(rootWidget);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> attachRootWidget(Widget rootWidget) &#123;</span><br><span class=\"line\">  _renderViewElement = RenderObjectToWidgetAdapter&lt;RenderBox&gt;(</span><br><span class=\"line\">    container: renderView,</span><br><span class=\"line\">    debugShortDescription: <span class=\"string\">&#x27;[root]&#x27;</span>,</span><br><span class=\"line\">    child: rootWidget,</span><br><span class=\"line\">  ).attachToRenderTree(buildOwner, renderViewElement);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建树\"><a href=\"#构建树\" class=\"headerlink\" title=\"构建树\"></a>构建树</h4><p><code>scheduleAttachRootWidget </code> 实际的方法是 <code>attachRootWidget</code> ,  在这里通过适配器的 <code>attachToRenderTree</code> 方法构建 widget 对应的  elment 树和 renderObject。这时的 <code>renderViewElement</code> 还为 null 并没有被创建。<code>renderView</code> 里也只携带的 window 和屏幕参数的相关初始化信息。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RenderObjectToWidgetElement&lt;T&gt; createElement() =&gt; RenderObjectToWidgetElement&lt;T&gt;(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RenderObjectToWidgetElement&lt;T&gt; attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement&lt;T&gt; element ]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果 elment 为空，则开始创建 element 并布局，</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 锁定当前的状态，禁止当前区域更新</span></span><br><span class=\"line\">    owner.lockState(() &#123;</span><br><span class=\"line\">       <span class=\"comment\">//创建 renderObject 对应的 element</span></span><br><span class=\"line\">      element = createElement();</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(element != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 赋值 widgetManager</span></span><br><span class=\"line\">      element.assignOwner(owner);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 计算更新范围,整个树开始构建</span></span><br><span class=\"line\">    owner.buildScope(element, () &#123;</span><br><span class=\"line\">      element.mount(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    SchedulerBinding.instance.ensureVisualUpdate();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    element._newWidget = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标记 element 需要更新</span></span><br><span class=\"line\">    element.markNeedsBuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当应用初始化的时候 element 树毫无疑问是还没有的，这里就开始构建整个 element 树。整块区域的关于绘制构建的就是 <code>buildScope</code>。接下来我们也从这里进去一探究竟。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们去除源码中大量的断言和校验</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> buildScope(<span class=\"built_in\">Element</span> context, [ VoidCallback callback ]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      _scheduledFlushDirtyElements = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _dirtyElements.sort(<span class=\"built_in\">Element</span>._sort);</span><br><span class=\"line\">      _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> dirtyCount = _dirtyElements.length;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (index &lt; dirtyCount) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 调用脏元素列表的 rebuild 方法，重新构建.</span></span><br><span class=\"line\">          _dirtyElements[index].rebuild();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果中途有插入需要渲染的 element,则重新排序并index 减一再次执行循环 </span></span><br><span class=\"line\">        <span class=\"comment\">// _scheduledFlushDirtyElements 类似，只不过它控制的是脏元素的原来为是是否插入了新的元素，且 build 方法并不在这里执行。 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dirtyCount &lt; _dirtyElements.length || _dirtyElementsNeedsResorting) &#123;</span><br><span class=\"line\">          _dirtyElements.sort(<span class=\"built_in\">Element</span>._sort);</span><br><span class=\"line\">          _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">          dirtyCount = _dirtyElements.length;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (index &gt; <span class=\"number\">0</span> &amp;&amp; _dirtyElements[index - <span class=\"number\">1</span>].dirty) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清理所有的脏元素标记</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"built_in\">Element</span> element <span class=\"keyword\">in</span> _dirtyElements) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(element._inDirtyList);</span><br><span class=\"line\">        element._inDirtyList = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _dirtyElements.clear();</span><br><span class=\"line\">      _scheduledFlushDirtyElements = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      _dirtyElementsNeedsResorting = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从代码和注释可以看出来,<code>buildScope</code> 是将所有被 <code>scheduleBuildFor</code>  标记为脏元素的 element 在此重新执行 rebuild 方法。而 <code>buildScope</code> 中并没有看到 <code>scheduleBuildFor</code> 的方法调用，那么很显然 在 <code>callback </code> 里了。在 <code>callback</code> 中我们看到 element 的  <code>mount</code> 方法被执行。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(parent == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 创建 renderObject</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">     <span class=\"comment\">// 开始构建</span></span><br><span class=\"line\">    _rebuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/////////////////////////////////// <span class=\"language-markdown\">RootRenderObjectElement /////////////////////</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们在 root 中所创建了的 Element 为  RenderObjectToWidgetElement，他的父类 RootRenderObjectElement 中的 mount 实现了创建和绑定 renderObject。</span></span><br><span class=\"line\"> <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">    _renderObject = widget.createRenderObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_slot == newSlot);</span><br><span class=\"line\">    attachRenderObject(newSlot);</span><br><span class=\"line\">    _dirty = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>mount</code> 在初始化的时候创建了我们真正负责渲染的类 renderObject . 然后开始了视图构建的过程。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">Object</span> _rootChildSlot = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> _rebuild() &#123;</span><br><span class=\"line\">     _child = updateChild(_child, widget.child, _rootChildSlot);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">Element</span> updateChild(<span class=\"built_in\">Element</span> child, Widget newWidget, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (newWidget == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"comment\">//如果没有新的 widget 需要更新，则目的就是移除 child，child 的 deactive 会被调用</span></span><br><span class=\"line\">       deactivateChild(child);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// slot 在 elment 中用于声明该元素在 parent 中的位置</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (child.widget == newWidget) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (child.slot != newSlot)</span><br><span class=\"line\">          <span class=\"comment\">//如果当两个元素相同，位置不同的时候更新它的位置</span></span><br><span class=\"line\">         updateSlotForChild(child, newSlot);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> child;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">       <span class=\"comment\">// canUpdate 则通过 key、runtimeType 判断两个 widget是否相同，如果相同则更新或移动位置 </span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (Widget.canUpdate(child.widget, newWidget)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (child.slot != newSlot)</span><br><span class=\"line\">         updateSlotForChild(child, newSlot);</span><br><span class=\"line\">       child.update(newWidget);</span><br><span class=\"line\">       <span class=\"keyword\">assert</span>(child.widget == newWidget);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> child;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     deactivateChild(child);</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(child._parent == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//如果不是更新则需要将 widget 树插入到树中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> inflateWidget(newWidget, newSlot);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 当进入到 rebuild 方法后我们发现这里并不是只处理了初始化时视图构建的逻辑，前面的大部分很明显是为了更新和复用提供的，事实也没错，但是更新如何执行到这里还还是要稍后揭晓，我们继续看看 <code>inflateWidget</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">Element</span> inflateWidget(Widget newWidget, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Key key = newWidget.key;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 widget 拥有 key ，那么尝试通过 key 来进行回收复用 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key <span class=\"keyword\">is</span> GlobalKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> newChild = _retakeInactiveElement(key, newWidget);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newChild != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将找到 widget 重新加入树中，并调用它的 activate 生命周期方法，该方法还会触发 didChangeDependencies 与 markNeddBuild</span></span><br><span class=\"line\">        newChild._activateWithParent(<span class=\"keyword\">this</span>, newSlot);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> updatedChild = updateChild(newChild, newWidget, newSlot);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(newChild == updatedChild);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updatedChild;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 child Widget 对应的 element </span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> newChild = newWidget.createElement();</span><br><span class=\"line\">  \t<span class=\"comment\">// 循环构建树  这里的 Element 不再是 rootElement,而是 StateleesWidget 与 StatefullWidget 的上层——ComponentElement， 它所对应的 mount 实现也稍有不同 </span></span><br><span class=\"line\">    newChild.mount(<span class=\"keyword\">this</span>, newSlot);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(newChild._debugLifecycleState == _ElementLifecycle.active);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newChild;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////<span class=\"language-markdown\">ComponentElement///////////////////////////////////////////</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_child == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_active);</span><br><span class=\"line\">    _firstBuild();</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_child != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _firstBuild() &#123;</span><br><span class=\"line\">    rebuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最终会调用 performRebuild 来循环构建整个子树</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> performRebuild() &#123;</span><br><span class=\"line\">    Widget built;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      built = build();</span><br><span class=\"line\">      debugWidgetBuilderValue(widget, built);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, stack) &#123;</span><br><span class=\"line\">      built = ErrorWidget.builder(...);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      _dirty = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      _child = updateChild(_child, built, slot);</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(_child != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, stack) &#123;</span><br><span class=\"line\">      built = ErrorWidget.builder(...);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"渲染视图\"><a href=\"#渲染视图\" class=\"headerlink\" title=\"渲染视图\"></a>渲染视图</h4><p>到这里整个 renderObject 的树就创建完成了，当 Engine  通过 callback 通知 rendering 层开始渲染时候，渲染工作也就开始了，下图为渲染过程：</p>\n<p><img src=\"https://i.loli.net/2020/05/11/TKrnEPou51qDM39.png\"></p>\n<p>本次我们主要关心 build 与 layout 部分，之前的 build 过程已经分析完了，接下来就是 layout ,paint。这里就不做详细分析了，我们可以看到 drawFrame 被调用后它们也都分别完成了各自的工作，然后将数量打包交给引擎最后渲染到窗口。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当需要刷新视图的时候，flutter 注册的 frameCallback 都会被调用</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> _handlePersistentFrameCallback(<span class=\"built_in\">Duration</span> timeStamp) &#123;</span><br><span class=\"line\">   drawFrame();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@protected</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> drawFrame() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">assert</span>(renderView != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 更新所有&quot;脏&quot; render 的 布局信息</span></span><br><span class=\"line\">   pipelineOwner.flushLayout();</span><br><span class=\"line\">   <span class=\"comment\">// 将数据打包</span></span><br><span class=\"line\">   pipelineOwner.flushCompositingBits();</span><br><span class=\"line\">   <span class=\"comment\">// 标记绘制图层</span></span><br><span class=\"line\">   pipelineOwner.flushPaint();</span><br><span class=\"line\">     <span class=\"comment\">//将处理好的数据上传</span></span><br><span class=\"line\">   renderView.compositeFrame(); <span class=\"comment\">// this sends the bits to the GPU</span></span><br><span class=\"line\">   pipelineOwner.flushSemantics(); <span class=\"comment\">// this also sends the semantics to the OS.</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> flushLayout() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (_nodesNeedingLayout.isNotEmpty) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"built_in\">List</span>&lt;RenderObject&gt; dirtyNodes = _nodesNeedingLayout;</span><br><span class=\"line\">       _nodesNeedingLayout = &lt;RenderObject&gt;[];</span><br><span class=\"line\">        <span class=\"comment\">// 扫描所有需要重新布局列表里的Render，调用它们的 _layoutWithoutResize() 重新布局</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (RenderObject node <span class=\"keyword\">in</span> dirtyNodes..sort((RenderObject a, RenderObject b) =&gt; a.depth - b.depth)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (node._needsLayout &amp;&amp; node.owner == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">           node._layoutWithoutResize();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> _layoutWithoutResize() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//performLayout 取决于每个 Widget 的 renderObject 具体实现</span></span><br><span class=\"line\">   performLayout();</span><br><span class=\"line\">   markNeedsSemanticsUpdate();</span><br><span class=\"line\">   markNeedsPaint();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上就是 Flutter 初次运行时候的构建过程。我们可以发现其中混杂了许多判断更新的代码，由此也可以判断，flutter 的视图创建和更新有不小的重合，事实也确实如此，接下里我们看看 Flutter 中视图是如何更新的。</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>通常我们都是调用 <code> setState(&#123;&#125;)</code> 通知更新，在计数器程序里，我们监听了 FloatingActionButton 的点击事件，在事件中使用 <code>setState(&#123;counter++;&#125;)</code> 来使得 Text 组件使用的数据发生了变换。：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setState(VoidCallback fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fn != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">dynamic</span> result = fn() <span class=\"keyword\">as</span> <span class=\"built_in\">dynamic</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result <span class=\"keyword\">is</span> Future) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> FlutterError.fromParts(....);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\">    _element.markNeedsBuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 还记得开篇的 attachToRenderTree 中的 element 如果不等于空的处理方式吗，这里同样如此。将 element 标记需要构建</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> markNeedsBuild() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_active)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dirty)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     <span class=\"comment\">//将元素标记为“脏的”，需要更新构建</span></span><br><span class=\"line\">    _dirty = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    owner.scheduleBuildFor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> scheduleBuildFor(<span class=\"built_in\">Element</span> element) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 将元素扔进列表等待下次发车</span></span><br><span class=\"line\">    _dirtyElements.add(element);</span><br><span class=\"line\">     <span class=\"comment\">//还需要重新激活</span></span><br><span class=\"line\">    element._inDirtyList = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们将 element 标记为后 WidgetsBinding 的 <code>drawFrame</code> 方法同样被调用. drawFrame 与 reanderBinding 的方法有些许类似，但是它在 drawFrame 操作之前还调用了我们之前看到的 buildScope 来重新构建当前区域的树，只有再通过 <code>_rebuild</code> <code>udpateChild</code> 一系列的方法对比和移动 widget 。最后在重新 drawFrame 将改变的视图更新的窗口上。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> drawFrame() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_needToReportFirstFrame &amp;&amp; _reportFirstFrame) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(!_firstFrameCompleter.isCompleted);</span><br><span class=\"line\"></span><br><span class=\"line\">    TimingsCallback firstFrameCallback;</span><br><span class=\"line\">    firstFrameCallback = (<span class=\"built_in\">List</span>&lt;FrameTiming&gt; timings) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!kReleaseMode) &#123;</span><br><span class=\"line\">        developer.Timeline.instantSync(<span class=\"string\">&#x27;Rasterized first useful frame&#x27;</span>);</span><br><span class=\"line\">        developer.postEvent(<span class=\"string\">&#x27;Flutter.FirstFrame&#x27;</span>, &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt;&#123;&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SchedulerBinding.instance.removeTimingsCallback(firstFrameCallback);</span><br><span class=\"line\">      _firstFrameCompleter.complete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    SchedulerBinding.instance.addTimingsCallback(firstFrameCallback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (renderViewElement != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果element 不为空则开始构建</span></span><br><span class=\"line\">      buildOwner.buildScope(renderViewElement);</span><br><span class=\"line\">      <span class=\"comment\">// 然后调用渲染 经行 layout paint  send window 等操作</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.drawFrame();</span><br><span class=\"line\">    buildOwner.finalizeTree();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _needToReportFirstFrame = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>可以发现相比 Android 系统的视图应用初始化过程，Flutter 作为一个跨平台 UI 视图框架确实更加简洁。需要关注和操心的事情更小。而 immutable 的 widget 设计，也使得在更新的时候也十分的简单，widget 重用与实际渲染对象分开映射，让 widget 的重建并不特别的花费成本。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.yuque.com/xytech/flutter/tge705\">深入了解 Flutter 界面开发</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Flutter-框架简介\"><a href=\"#Flutter-框架简介\" class=\"headerlink\" title=\"Flutter 框架简介\"></a>Flutter 框架简介</h2><p><img src=\"https://i.loli.net/2020/05/11/FDJ3UmPfj7sOIkp.png\" alt=\"架构\"></p>\n<p>在深入代码之前，我们先了解一下 Flutter 框架结构：</p>\n<ol>\n<li>底层的 Engine 库，负责语言的解释（Dart）、视图的渲染（Skia、Text）.它们都是使用C、C++ 编写的，具有极高的性能。</li>\n<li>Framework 中将编写 UI 所需要的动画、绘制、手势等独立实现，然后组合起来交由 rendering 层级来产生强大的效果，组件的层次是扁平化的，最大化可能的组合数量。</li>\n<li>Flutter 自带了两套较为完善的 Widgets 套件，Android 平台风格的 <code>Material</code> 与 iOS 平台风格的 <code>Cupertino</code></li>\n</ol>\n<p>从结构图的我们可以看到 Android Flutter 结构非常扁平化，功能也都奉行单一职责，我们可以较为容易的了解我们所需要的代码实现。从层次上可以看出我们经常使用的 <code>StatelessWidget</code>、<code>StateFullWidget</code> 属于 Widget 层，它们并不负责具体的渲染工作，而是 redering 层来做，实际上也是这样的。widget 只是一个数据配置的类，它的创建&#x2F;销毁都是十分轻量级的。它所做的就是通过 widget 树来创建和映射一个实际的视图渲染树 <code>renderObject</code>。我们可以通过官方文档的流程图来了解这一流程：</p>\n<p><img src=\"https://i.loli.net/2020/05/08/6yLGiCNKVI47maB.jpg\"></p>\n<ol>\n<li>我们在项目中编写代码构建了一个 widget 树，通过 <code>runApp()</code> 装载或者 <code>setState</code> 的时候就触发了树的更新和渲染机制。</li>\n<li>通过 widget 树生成了一个 Elment 树，它的职责是桥接、管理 Widget树 与 Render 树</li>\n<li>在 Elment 中，生成对应的 render树，然后根据 Widget 的布局属性进行布局和绘制 </li>\n<li>当我们使用 <code>setState(&#123;&#125;)</code> 触发更新的时候，同样会触发上述流程，只不过这时发生的更新是局部的，锁定需要更新的区域，进行对子树的删除或更新操作</li>\n</ol>\n<h2 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h2><p>Widget 为我们一般情况下直接用来构建界面的组件，通过它来描述当前的配置下视图应该呈现的样子，<strong>在创建 Widget 的时候都需要将所有的构造参数设定为 final ，即整个 Widget 是 immutable 状态。因为这样设计的话，就可以当数据变更的时候发送通知到对应的可变更节点，由上到下对 重建整个 Widget 树经行刷新，而不用关心具体会影响到哪些节点。</strong>Widget 分为有状态的<code>StatefullWidget</code> 与无状态的 <code>StateelessWidget</code> 。它们的特性如下：</p>\n<ul>\n<li><p><code>StatelessWidget</code>: 无中间状态变化的 Widget，需要更新展示内容就得重新通过 new 。它的整体是一个 final 的。</p>\n</li>\n<li><p><code>StatefullWidget</code>:  <code>StatefullWidget </code>可以在内部存储和发生状态变化，之前有提到，Widget 设计上必须为 immutable 状态的，所以 <code>StatefullWidget</code> 还有一个必须实现的抽象方法 <code>createState()</code> ,它需要你实现返回一个继承了 <code>State</code>  的类，通过它来存储中间状态和通知树更新。<br><code>State</code> 类拥有完整的视图生命周期，它提供了一系列的钩子函数，在对应的视图阶段会被触发，以便开发者做出响应:</p>\n<ol>\n<li><code>ininState() </code>  state 创建后被插入到树中时候嗲用</li>\n<li><code>didUpdateWidget(newWidget)</code> 当祖先节点被 rebuild widget 时调用</li>\n<li><code>deactivate()</code> 被 remove 的时候调用</li>\n<li><code>didChagnedDependecies()</code> 在 <code>intState()</code> 之后、或者依赖的 <code>InheriteWidget</code> rebuild 之后被调用</li>\n<li><code>build()</code> 当初始化准备工作完成后或者 State 触发视图改变的时候都会被调用</li>\n<li><code>dispose()</code> 当 widget 彻底被销毁的时候调用</li>\n<li><code>reassemble()</code> hot reload 时调用</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Widget-装载和更新过程\"><a href=\"#Widget-装载和更新过程\" class=\"headerlink\" title=\"Widget 装载和更新过程\"></a>Widget 装载和更新过程</h2><p>从图片了解 Widget 的装载和更新过程，从文档中了解了 widget 的生命周期。再我们通过从代码的角度来看看这一切到底是如何发生的。</p>\n<p>我们通过新建 flutter project 所生成的计数器来演示:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">        theme: ThemeData(</span><br><span class=\"line\">          primarySwatch: Colors.blue,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme.of(context).textTheme.display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>当 app 启动候，engine 库装载成功 ，main.dart 中 main 函数被启动，<code>runApp(widget)</code> 函数被调用，属于 flutter 工作就开始了。 <code>runApp(wiedget)</code> 做的事情很清晰</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> runApp(Widget app) &#123;</span><br><span class=\"line\">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class=\"line\">    ..scheduleAttachRootWidget(app)</span><br><span class=\"line\">    ..scheduleWarmUpFrame();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过 WidgetsFlutterBinding 初始化所有 flutter 需要的组件</li>\n<li>构建 widget 树所对应的 element 树和 render 树</li>\n<li>开始做绘制的准备工作。</li>\n</ol>\n<p>WidgetsFlutterBinding 内部实现代码虽然只有寥寥几行，但是它实际是通过 dart 的 mixins 特性，像架构图那样，将所有的功能聚合，具体实现则分开。当 widgetsFlutterBinding 实例化的时候，他所继承的所有类也都一一实例加载了。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetsFlutterBinding</span> <span class=\"keyword\">extends</span> <span class=\"title\">BindingBase</span> <span class=\"title\">with</span> <span class=\"title\">GestureBinding</span>, <span class=\"title\">ServicesBinding</span>, <span class=\"title\">SchedulerBinding</span>, <span class=\"title\">PaintingBinding</span>, <span class=\"title\">SemanticsBinding</span>, <span class=\"title\">RendererBinding</span>, <span class=\"title\">WidgetsBinding</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//GestureBinding 、ServicesBinding 等等如它们的名字各司其职，通过WidgetsFlutterBinding 来初始化调用</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> WidgetsBinding ensureInitialized() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WidgetsBinding.instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      WidgetsFlutterBinding();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WidgetsBinding.instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是构建过程</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> scheduleAttachRootWidget(Widget rootWidget) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过 Timer.run 将执行方法挂起执行，避免阻塞，让后边的帧预热方法先执行，争取时间</span></span><br><span class=\"line\">  Timer.run(() &#123;</span><br><span class=\"line\">    attachRootWidget(rootWidget);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> attachRootWidget(Widget rootWidget) &#123;</span><br><span class=\"line\">  _renderViewElement = RenderObjectToWidgetAdapter&lt;RenderBox&gt;(</span><br><span class=\"line\">    container: renderView,</span><br><span class=\"line\">    debugShortDescription: <span class=\"string\">&#x27;[root]&#x27;</span>,</span><br><span class=\"line\">    child: rootWidget,</span><br><span class=\"line\">  ).attachToRenderTree(buildOwner, renderViewElement);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建树\"><a href=\"#构建树\" class=\"headerlink\" title=\"构建树\"></a>构建树</h4><p><code>scheduleAttachRootWidget </code> 实际的方法是 <code>attachRootWidget</code> ,  在这里通过适配器的 <code>attachToRenderTree</code> 方法构建 widget 对应的  elment 树和 renderObject。这时的 <code>renderViewElement</code> 还为 null 并没有被创建。<code>renderView</code> 里也只携带的 window 和屏幕参数的相关初始化信息。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RenderObjectToWidgetElement&lt;T&gt; createElement() =&gt; RenderObjectToWidgetElement&lt;T&gt;(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RenderObjectToWidgetElement&lt;T&gt; attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement&lt;T&gt; element ]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果 elment 为空，则开始创建 element 并布局，</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 锁定当前的状态，禁止当前区域更新</span></span><br><span class=\"line\">    owner.lockState(() &#123;</span><br><span class=\"line\">       <span class=\"comment\">//创建 renderObject 对应的 element</span></span><br><span class=\"line\">      element = createElement();</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(element != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 赋值 widgetManager</span></span><br><span class=\"line\">      element.assignOwner(owner);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 计算更新范围,整个树开始构建</span></span><br><span class=\"line\">    owner.buildScope(element, () &#123;</span><br><span class=\"line\">      element.mount(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    SchedulerBinding.instance.ensureVisualUpdate();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    element._newWidget = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标记 element 需要更新</span></span><br><span class=\"line\">    element.markNeedsBuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当应用初始化的时候 element 树毫无疑问是还没有的，这里就开始构建整个 element 树。整块区域的关于绘制构建的就是 <code>buildScope</code>。接下来我们也从这里进去一探究竟。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们去除源码中大量的断言和校验</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> buildScope(<span class=\"built_in\">Element</span> context, [ VoidCallback callback ]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      _scheduledFlushDirtyElements = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _dirtyElements.sort(<span class=\"built_in\">Element</span>._sort);</span><br><span class=\"line\">      _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> dirtyCount = _dirtyElements.length;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (index &lt; dirtyCount) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 调用脏元素列表的 rebuild 方法，重新构建.</span></span><br><span class=\"line\">          _dirtyElements[index].rebuild();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果中途有插入需要渲染的 element,则重新排序并index 减一再次执行循环 </span></span><br><span class=\"line\">        <span class=\"comment\">// _scheduledFlushDirtyElements 类似，只不过它控制的是脏元素的原来为是是否插入了新的元素，且 build 方法并不在这里执行。 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dirtyCount &lt; _dirtyElements.length || _dirtyElementsNeedsResorting) &#123;</span><br><span class=\"line\">          _dirtyElements.sort(<span class=\"built_in\">Element</span>._sort);</span><br><span class=\"line\">          _dirtyElementsNeedsResorting = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">          dirtyCount = _dirtyElements.length;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (index &gt; <span class=\"number\">0</span> &amp;&amp; _dirtyElements[index - <span class=\"number\">1</span>].dirty) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清理所有的脏元素标记</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"built_in\">Element</span> element <span class=\"keyword\">in</span> _dirtyElements) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(element._inDirtyList);</span><br><span class=\"line\">        element._inDirtyList = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _dirtyElements.clear();</span><br><span class=\"line\">      _scheduledFlushDirtyElements = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      _dirtyElementsNeedsResorting = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从代码和注释可以看出来,<code>buildScope</code> 是将所有被 <code>scheduleBuildFor</code>  标记为脏元素的 element 在此重新执行 rebuild 方法。而 <code>buildScope</code> 中并没有看到 <code>scheduleBuildFor</code> 的方法调用，那么很显然 在 <code>callback </code> 里了。在 <code>callback</code> 中我们看到 element 的  <code>mount</code> 方法被执行。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(parent == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 创建 renderObject</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">     <span class=\"comment\">// 开始构建</span></span><br><span class=\"line\">    _rebuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/////////////////////////////////// <span class=\"language-markdown\">RootRenderObjectElement /////////////////////</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们在 root 中所创建了的 Element 为  RenderObjectToWidgetElement，他的父类 RootRenderObjectElement 中的 mount 实现了创建和绑定 renderObject。</span></span><br><span class=\"line\"> <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">    _renderObject = widget.createRenderObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_slot == newSlot);</span><br><span class=\"line\">    attachRenderObject(newSlot);</span><br><span class=\"line\">    _dirty = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>mount</code> 在初始化的时候创建了我们真正负责渲染的类 renderObject . 然后开始了视图构建的过程。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">Object</span> _rootChildSlot = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> _rebuild() &#123;</span><br><span class=\"line\">     _child = updateChild(_child, widget.child, _rootChildSlot);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">Element</span> updateChild(<span class=\"built_in\">Element</span> child, Widget newWidget, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (newWidget == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"comment\">//如果没有新的 widget 需要更新，则目的就是移除 child，child 的 deactive 会被调用</span></span><br><span class=\"line\">       deactivateChild(child);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// slot 在 elment 中用于声明该元素在 parent 中的位置</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (child.widget == newWidget) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (child.slot != newSlot)</span><br><span class=\"line\">          <span class=\"comment\">//如果当两个元素相同，位置不同的时候更新它的位置</span></span><br><span class=\"line\">         updateSlotForChild(child, newSlot);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> child;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">       <span class=\"comment\">// canUpdate 则通过 key、runtimeType 判断两个 widget是否相同，如果相同则更新或移动位置 </span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (Widget.canUpdate(child.widget, newWidget)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (child.slot != newSlot)</span><br><span class=\"line\">         updateSlotForChild(child, newSlot);</span><br><span class=\"line\">       child.update(newWidget);</span><br><span class=\"line\">       <span class=\"keyword\">assert</span>(child.widget == newWidget);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> child;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     deactivateChild(child);</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(child._parent == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//如果不是更新则需要将 widget 树插入到树中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> inflateWidget(newWidget, newSlot);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 当进入到 rebuild 方法后我们发现这里并不是只处理了初始化时视图构建的逻辑，前面的大部分很明显是为了更新和复用提供的，事实也没错，但是更新如何执行到这里还还是要稍后揭晓，我们继续看看 <code>inflateWidget</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">Element</span> inflateWidget(Widget newWidget, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Key key = newWidget.key;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 widget 拥有 key ，那么尝试通过 key 来进行回收复用 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key <span class=\"keyword\">is</span> GlobalKey) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> newChild = _retakeInactiveElement(key, newWidget);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newChild != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将找到 widget 重新加入树中，并调用它的 activate 生命周期方法，该方法还会触发 didChangeDependencies 与 markNeddBuild</span></span><br><span class=\"line\">        newChild._activateWithParent(<span class=\"keyword\">this</span>, newSlot);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> updatedChild = updateChild(newChild, newWidget, newSlot);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(newChild == updatedChild);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updatedChild;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 child Widget 对应的 element </span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">Element</span> newChild = newWidget.createElement();</span><br><span class=\"line\">  \t<span class=\"comment\">// 循环构建树  这里的 Element 不再是 rootElement,而是 StateleesWidget 与 StatefullWidget 的上层——ComponentElement， 它所对应的 mount 实现也稍有不同 </span></span><br><span class=\"line\">    newChild.mount(<span class=\"keyword\">this</span>, newSlot);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(newChild._debugLifecycleState == _ElementLifecycle.active);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newChild;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////<span class=\"language-markdown\">ComponentElement///////////////////////////////////////////</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> mount(<span class=\"built_in\">Element</span> parent, <span class=\"built_in\">dynamic</span> newSlot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.mount(parent, newSlot);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_child == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_active);</span><br><span class=\"line\">    _firstBuild();</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(_child != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _firstBuild() &#123;</span><br><span class=\"line\">    rebuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最终会调用 performRebuild 来循环构建整个子树</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> performRebuild() &#123;</span><br><span class=\"line\">    Widget built;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      built = build();</span><br><span class=\"line\">      debugWidgetBuilderValue(widget, built);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, stack) &#123;</span><br><span class=\"line\">      built = ErrorWidget.builder(...);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      _dirty = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      _child = updateChild(_child, built, slot);</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(_child != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, stack) &#123;</span><br><span class=\"line\">      built = ErrorWidget.builder(...);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"渲染视图\"><a href=\"#渲染视图\" class=\"headerlink\" title=\"渲染视图\"></a>渲染视图</h4><p>到这里整个 renderObject 的树就创建完成了，当 Engine  通过 callback 通知 rendering 层开始渲染时候，渲染工作也就开始了，下图为渲染过程：</p>\n<p><img src=\"https://i.loli.net/2020/05/11/TKrnEPou51qDM39.png\"></p>\n<p>本次我们主要关心 build 与 layout 部分，之前的 build 过程已经分析完了，接下来就是 layout ,paint。这里就不做详细分析了，我们可以看到 drawFrame 被调用后它们也都分别完成了各自的工作，然后将数量打包交给引擎最后渲染到窗口。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当需要刷新视图的时候，flutter 注册的 frameCallback 都会被调用</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> _handlePersistentFrameCallback(<span class=\"built_in\">Duration</span> timeStamp) &#123;</span><br><span class=\"line\">   drawFrame();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@protected</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> drawFrame() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">assert</span>(renderView != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 更新所有&quot;脏&quot; render 的 布局信息</span></span><br><span class=\"line\">   pipelineOwner.flushLayout();</span><br><span class=\"line\">   <span class=\"comment\">// 将数据打包</span></span><br><span class=\"line\">   pipelineOwner.flushCompositingBits();</span><br><span class=\"line\">   <span class=\"comment\">// 标记绘制图层</span></span><br><span class=\"line\">   pipelineOwner.flushPaint();</span><br><span class=\"line\">     <span class=\"comment\">//将处理好的数据上传</span></span><br><span class=\"line\">   renderView.compositeFrame(); <span class=\"comment\">// this sends the bits to the GPU</span></span><br><span class=\"line\">   pipelineOwner.flushSemantics(); <span class=\"comment\">// this also sends the semantics to the OS.</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> flushLayout() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (_nodesNeedingLayout.isNotEmpty) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"built_in\">List</span>&lt;RenderObject&gt; dirtyNodes = _nodesNeedingLayout;</span><br><span class=\"line\">       _nodesNeedingLayout = &lt;RenderObject&gt;[];</span><br><span class=\"line\">        <span class=\"comment\">// 扫描所有需要重新布局列表里的Render，调用它们的 _layoutWithoutResize() 重新布局</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (RenderObject node <span class=\"keyword\">in</span> dirtyNodes..sort((RenderObject a, RenderObject b) =&gt; a.depth - b.depth)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (node._needsLayout &amp;&amp; node.owner == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">           node._layoutWithoutResize();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> _layoutWithoutResize() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//performLayout 取决于每个 Widget 的 renderObject 具体实现</span></span><br><span class=\"line\">   performLayout();</span><br><span class=\"line\">   markNeedsSemanticsUpdate();</span><br><span class=\"line\">   markNeedsPaint();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上就是 Flutter 初次运行时候的构建过程。我们可以发现其中混杂了许多判断更新的代码，由此也可以判断，flutter 的视图创建和更新有不小的重合，事实也确实如此，接下里我们看看 Flutter 中视图是如何更新的。</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>通常我们都是调用 <code> setState(&#123;&#125;)</code> 通知更新，在计数器程序里，我们监听了 FloatingActionButton 的点击事件，在事件中使用 <code>setState(&#123;counter++;&#125;)</code> 来使得 Text 组件使用的数据发生了变换。：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> setState(VoidCallback fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fn != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">dynamic</span> result = fn() <span class=\"keyword\">as</span> <span class=\"built_in\">dynamic</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result <span class=\"keyword\">is</span> Future) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> FlutterError.fromParts(....);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\">    _element.markNeedsBuild();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 还记得开篇的 attachToRenderTree 中的 element 如果不等于空的处理方式吗，这里同样如此。将 element 标记需要构建</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> markNeedsBuild() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_active)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dirty)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     <span class=\"comment\">//将元素标记为“脏的”，需要更新构建</span></span><br><span class=\"line\">    _dirty = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    owner.scheduleBuildFor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> scheduleBuildFor(<span class=\"built_in\">Element</span> element) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 将元素扔进列表等待下次发车</span></span><br><span class=\"line\">    _dirtyElements.add(element);</span><br><span class=\"line\">     <span class=\"comment\">//还需要重新激活</span></span><br><span class=\"line\">    element._inDirtyList = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们将 element 标记为后 WidgetsBinding 的 <code>drawFrame</code> 方法同样被调用. drawFrame 与 reanderBinding 的方法有些许类似，但是它在 drawFrame 操作之前还调用了我们之前看到的 buildScope 来重新构建当前区域的树，只有再通过 <code>_rebuild</code> <code>udpateChild</code> 一系列的方法对比和移动 widget 。最后在重新 drawFrame 将改变的视图更新的窗口上。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> drawFrame() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_needToReportFirstFrame &amp;&amp; _reportFirstFrame) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(!_firstFrameCompleter.isCompleted);</span><br><span class=\"line\"></span><br><span class=\"line\">    TimingsCallback firstFrameCallback;</span><br><span class=\"line\">    firstFrameCallback = (<span class=\"built_in\">List</span>&lt;FrameTiming&gt; timings) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!kReleaseMode) &#123;</span><br><span class=\"line\">        developer.Timeline.instantSync(<span class=\"string\">&#x27;Rasterized first useful frame&#x27;</span>);</span><br><span class=\"line\">        developer.postEvent(<span class=\"string\">&#x27;Flutter.FirstFrame&#x27;</span>, &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt;&#123;&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SchedulerBinding.instance.removeTimingsCallback(firstFrameCallback);</span><br><span class=\"line\">      _firstFrameCompleter.complete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    SchedulerBinding.instance.addTimingsCallback(firstFrameCallback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (renderViewElement != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果element 不为空则开始构建</span></span><br><span class=\"line\">      buildOwner.buildScope(renderViewElement);</span><br><span class=\"line\">      <span class=\"comment\">// 然后调用渲染 经行 layout paint  send window 等操作</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.drawFrame();</span><br><span class=\"line\">    buildOwner.finalizeTree();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _needToReportFirstFrame = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>可以发现相比 Android 系统的视图应用初始化过程，Flutter 作为一个跨平台 UI 视图框架确实更加简洁。需要关注和操心的事情更小。而 immutable 的 widget 设计，也使得在更新的时候也十分的简单，widget 重用与实际渲染对象分开映射，让 widget 的重建并不特别的花费成本。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.yuque.com/xytech/flutter/tge705\">深入了解 Flutter 界面开发</a></p>\n"},{"layout":"post","title":"Android 列表预加载分析","subtitle":"方案调研","date":"2023-02-22T06:13:00.000Z","author":"rank","header_image":"img/about-bg-walle.jpg","catalog":true,"_content":"\n\n当今移动应用开发中，列表控件是最常用的UI控件之一，它可以显示各种信息，如图片、文本、视频等等。然而，在移动设备上，列表数据的加载和显示是非常耗费资源的操作。当列表中的数据量较大时，用户往往需要等待较长的时间才能看到完整的列表。为了提高用户体验，开发人员需要采取一些策略来减少加载时间，如预加载。\n预加载是指在用户滑动列表之前，提前加载一部分列表数据，以便在用户滑动到这些数据时可以立即显示，从而提高用户的体验和感知速度。Android系统提供了一些API和技术来实现列表预加载，本课题旨在对Android列表预加载进行深入研究和分析，探究其实现原理、优化策略和性能影响，为开发人员提供参考和指导。\n \n\n接下来我们就深入研究几种预加载列表的方法，它们或是通过 Android 系统的 API 扩展或是各种第三方框架完备的实现，了解它们的实现原理，方便我们根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。\n\n## RecyclerView.OnScrollListener\n\n通过 RecyclerView 的 addOnScrollListener 接口，我们可以监听到 RecyclerView 的滑动状态，然后通过该 RecyclerView 装载的 LayoutManager 来得到当前滑动最下方或最上方展示的 item 的索引，痛殴索引来判断我们是否需要执行预加载逻辑。\n\n\n```dart\nrvList.addOnScrollListener(new RecyclerView.OnScrollListener() {\n    @Override\n    public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        // 获取 LayoutManger\n        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();\n        // 如果 LayoutManager 是 LinearLayoutManager\n        if (layoutManager instanceof GridLayoutManager) {\n            GridLayoutManager manager = (GridLayoutManager) layoutManager;\n            int nextPreloadCount = 8;\n            int previousPreloadCount = 4;\n            if (dy > 0\n                    && manager.findLastVisibleItemPosition()\n                    == layoutManager.getItemCount() - 1 - nextPreloadCount) {\n                mViewModel.loadNext();\n            } else if (dy > 0 && manager.findFirstVisibleItemPosition() == previousPreloadCount) {\n                mViewModel.loadPrevious();\n            }\n        }\n    }\n});\n```\n\n通过给列表页的 RecyerView 增加这一段代码，我们就可以很轻松的实现列表的预加载，在有本地本地数据缓存排除网络状态的情况下，和之前通过框架的 `loadMore` 触发有着显而易见的差别。但于此同时，在查看日志是就很容易发现，`onScrolled` 方法会在一次滑动中多次重复调用，造成同一个页面加载的多次调用，网络加载下对性能以及数据流量有很大的影响，需要业务逻辑上做去重处理。\n\n\n### 结论\n\n`RecyclerView.onScrollListener` 的实现和集成方式大致如上，通过实践我们可以得出以前结论：  \n\n**优点**：\n\n- 编码简单\n- 代码入侵性低，无需修改现有的 RecyclerView 或 adapter\n\n**缺点**：\n\n- `onScrolled` 方法会在一次滑动中多次重复调用，需要业务逻辑自行做去重判断\n- 不同的 `LayoutManager`  会有不同的判断逻辑，需要不停的兼容扩展\n\n## Adapter.onBindViewHolder\n\n我们监听列表的原因是想知道当前滑动到第几项目，从而来决定是否要开始预加载，为此需要拿到滑动的状态和 `LayoutManager`  .  实际上 Adapter 就有天生的简单易用的回调，那就是 `onBindViewHolder`  `onBindViewHolder` 在 `RecyclerView` 需要显示指定的 `Position` 的 数据时才会通知，这时我们就可以根据 `BindViewHolder` 的 `Position` 以及整个列表的数据对比来判断我们是否需要进行预加载，而无需实时的关心列表的滑动状态和 `LayoutManager` 的类型\n\n\n接下来我们就使用 Adpater 的 onBindViewHolder 来实现以下预加载：\n\n```java\npublic class ListAdapter extends RecyclerView.Adapter<ViewHolder> {\n\n\tprivate int nextPreloadCount = 8;\n\n\tprivate int previousPreloadCount = 4;\n\t\n\tprivate boolean isScroll\n\n\tpublic void onBindViewHolder(@NonNull VH holder, int position,\n                @NonNull List<Object> payloads) {\n\t\t\tcheckPreload(position);\n  }\n\n\tpublic void bindRecyelerView(@NonNull RecyclerView recyclerView ) {\n\t\t if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n         isScroll = false;\n     } else {\n\t\t\t \t isScroll = true;\n\t\t }\n\t}\n\t\n\tprivate void checkPreload(int position) {\n\t\t if (!isScroll){\n\t\t\t\treturn;\n\t\t }\n     if (position == previousPreloadCount) {\n          mViewModel.loadPrevious();\n     } else if (position == getItemCount() - 1 - nextPreloadCount) {\n          mViewModel.loadNext();\n     }\n    }\n}\n```\n\n代码整体实现也简单易懂，列表滑动过程中所有的列表项的加载都会经过 `Adapter.onBindViewHolder` \n从而触发预加载检测一致，由于 RecyclerView 的逻辑处理，`onBindViewHolder`  不会存在单次滑动中被多次调用的情况。且由于 Adpater 的 position 获取是与 layoutManger 无关的，所以也不需要 layoutManger 相关的代码逻辑。但是这个方案也仍然优缺点，那就是当触发预加载的 viewHolder 在列表加载过程中被向上滑出了 RecyclerView 的缓存区域时，再向下滑动到页尾时会再次被绑定导致 `onBindViewHolder`  触发，从而使得预加载重复触发。\n\n### 结论\n\n`Adapter.onBindViewHolder` 的实现也并不复杂，且相较于监听列表的实现差异明显\n\n**优点**：\n\n- 代码编写逻辑简单，基类可多处复用，与类型无关\n- `RecyclerView` 对页首页尾的 `ViewHolder` 并不会立即回收，不会在正常的滑动事件内触发多次加载\n\n**缺点**：\n\n- 仍会重新触发上拉加载，还是需要做去重操作。\n\n## BaseRecyclerViewAdapterHelpr\n\n`BaseRecyclerViewAdapterHelpr`  是一个强大而灵活的 RecyclerView Adapter ，是一个在 github 拥有 23.4 K star 的库，很多商业项目的的 adapter 都会采用它，以下简称 `BRVAH` 。 我们来探究下它是如何处理预加载方案的，通过文档查看我们发现它的加载更多的逻辑是专门有 `QuickAdapterHelper.kt` 来实现的，直接查看它的预加载方案 ：\n\n#### 加载上一页\n\n```kotlin\nleadingLoadStateAdapter?.let {\n            mAdapter.addAdapter(it)\n\n            firstAdapterOnViewAttachChangeListener =\n                object : BaseQuickAdapter.OnViewAttachStateChangeListener {\n\n                    override fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\n                        leadingLoadStateAdapter.checkPreload(holder.bindingAdapterPosition)\n                    }\n\n                    override fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\n\n                    }\n                }.apply { contentAdapter.addOnViewAttachStateChangeListener(this) }\n```\n\n#### 加载下一页\n\n```kotlin\ntrailingLoadStateAdapter?.let {\n            mAdapter.addAdapter(it)\n\n            lastAdapterOnViewAttachChangeListener =\n                object : BaseQuickAdapter.OnViewAttachStateChangeListener {\n\n                    override fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\n                        trailingLoadStateAdapter.checkPreload(\n                            holder.bindingAdapter?.itemCount ?: 0,\n                            holder.bindingAdapterPosition\n                        )\n                    }\n\n                    override fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\n\n                    }\n                }.apply { contentAdapter.addOnViewAttachStateChangeListener(this) }\n        }\n```\n\n`BRVAH` 整体对加载的方案采用的是 `ConcatAdapter`  ，加载的头部和尾部通过独立的 adapter 来做逻辑控制，所以两部的代码基本一致，这里我们就拿加载下一页的逻辑来梳理。 `contentAdapter` 就是实际的列表 adapter ，`trailingLoadStateAdapter` 则是专门负责列表尾部逻辑处理的 adapter ，可以看到它创建了一个 `OnViewAttachStateChangeListener`   用来监听 viewHolder 的 onViewAttachedToWindow ,  其具体实现是绑定了  Adapter 的 `onViewAttachedToWindow` ，通过这个契机触发预加载监测机制。具体实现就不在深究了，我们知道它的触发契机和大致实现即可，感兴趣的可以直接去查阅对应的源码，其实际实现也并不复杂。\n\n可以看到 `BRVAH` 虽然采用了对 Adapter 进行封装处理预加载逻辑，但它并没有采用 Adpater 的 `onBindViewHolder`  当作触发契机而是采用了 `onViewAttachedToWindow`  造成这样的差异是什么，我们可以看下这两者的实际差别:\n\n`onViewAttachedToWindow`方法在RecyclerView中显示一个ViewHolder时被调用。当RecyclerView需要显示一个新的ViewHolder时，它会调用Adapter的`onCreateViewHolder`方法来创建一个ViewHolder，然后将这个ViewHolder绑定到数据源中对应的数据上，最后调用ViewHolder的`onBindViewHolder`方法将数据显示在ViewHolder的视图上。这时，如果ViewHolder被成功添加到RecyclerView中，`onViewAttachedToWindow`方法就会被调用。\n\n因此，`onViewAttachedToWindow`方法在ViewHolder显示在RecyclerView上时触发，而**`onBindViewHolder`方法则是在RecyclerView需要更新ViewHolder数据时触发。\n\n从我们的业务场景出发—— 预加载的目的是通过滑动来判断用户可能有向下滑动的意图，提前补充列表数据，避免用户等待。业务场景其实并不太依赖当前视图是否真的展示在界面上了，所以这里没有用生命周期更靠前的 **`onBindViewHolder`** 而用了更靠后的 **`onViewAttachedToWindow`** 从源码角度上来看并没有得到好的解释，去查看仓库也没有相关的提交注释。只能后续看是否能联系上作者询问了\n\n### 结论\n\n`BRVAH` 带了新的预加载方案，虽然目前看本质上与 onBindViewHolder 类似，但是`BRVAH` 除此之外还提供了成套的解决方案，包括防止重复加载以及列表头尾的优雅处理。\n\n **优点**：\n\n- 集成难度中等\n- 有较高的 star 和活跃度，出现问题的概率较小\n- 提供了成套的解决方案，避免造轮子\n\n**缺点**：\n\n- 需要引入新的库，修改调整现有的 adapter\n\n## BRV\n\n`BRV` 是一个基于 `SmartRefreshLayout`  框架的扩展库，他在 `SmartRefreshLayout` 的基础上提供了预加载，缺省页，悬停标题等功能，号称拥有比 `BRVAH`   更强大的功能以及实用性，它的其中预加载逻辑如下：\n\n```kotlin\n/** 监听onBindViewHolder事件 */\n    var onBindViewHolderListener = object : OnBindViewHolderListener {\n        override fun onBindViewHolder(\n            rv: RecyclerView,\n            adapter: BindingAdapter,\n            holder: BindingAdapter.BindingViewHolder,\n            position: Int,\n        ) {\n            if (mEnableLoadMore && !mFooterNoMoreData &&\n                rv.scrollState != SCROLL_STATE_IDLE &&\n                preloadIndex != -1 &&\n                (adapter.itemCount - preloadIndex <= position)\n            ) {\n                post {\n                    if (state == RefreshState.None) {\n                        notifyStateChanged(RefreshState.Loading)\n                        onLoadMore(this@PageRefreshLayout)\n                    }\n                }\n            }\n        }\n    }\n```\n\n可以看到与我们编写 onBindViewHolder 的监听逻辑基本如出一辙，通过当前的触发的　bindViewHolder position  来判断是否要触发预加载，而加载的头部和尾部则是基于 `SmartRefreshLayout`  来的，通过 ViewGruop 单独的 add 添加和 remove 掉。\n\n### 结论\n\n`BRV`  的预加载方案基本与我们自己基于 Adpater 的基本一致，在此基础上增加了去重处理\n\n **优点**：\n\n- 提供了成套的解决方案，避免数据重复造轮子\n\n**缺点**：\n\n- 集成难度复杂，依赖 `SmartRefreshLayout`  没有引入 `SmartRefreshLayout`  库的话还需要单独引入\n- 只提供了向后预加载，不支持向前预加载\n\n## Paging 3\n\n[Paging 库概览  |  Android 开发者  |  Android Developers](https://developer.android.com/topic/libraries/architecture/paging/v3-overview?hl=zh-cn#paging)\n\nPaging 作为 Jetpack 的组件，专门用于加载和显示来自本地和网络中的数据页面，同样也提供了数据预加载的功能，那么作为官方的列表加载方案，它又是如何实现的。\n\n`Paging3`   作为一整套的列表解决方案，它提供了分页数据的内存缓存、内置的请求重复信息删除功能 以及对刷新与重试功能的支持等等，此外， `paging3` 还大量的使用了 Flow 作为数据处理实现，功能调用栈也极深。导致代码阅读复杂较高，这里我们就只了解下 `Paging3`  预加载的契机以及判断逻辑，用于跟其他框架进行对比。\n\n#### 触发契机\n\n首先是触发契机，`Paging3`  提供了 `PagingDataAdapter`  作为 RecyclerView 的适配器，开发者必须使用基于它的 Adapter 来进行列表适配，`PagingDataAdapter`  内置了 diff 机制以及直接管理列表数据，列表设置和更新需要通过 `submitData` 方法，获取数据则通过 `getItem`  方法，而 `paging3` 的预加载机制则就藏匿在 `getItem`  的具体实现中，由于列表数据是完全封装起来的，调用者只能通过 `getItem` 来获取列表数据，而调用 `getItem` 往往是在 `onBindViewHolder` 时，所以 paging3 的分页触发契机也基本等同于 `onBindViewHolder` 方式\n\n#### 判断逻辑\n\n`getItem` 方法触发时，paging3 会生成 `ViewportHint` 的快照，用来存储描述当前列表的状态，同时依据这些信息来判断是否要触发预加载\n\n```kotlin\n/**\n     * Processes the hint coming from UI.\n     */\n    fun processHint(viewportHint: ViewportHint) {\n        state.modify(viewportHint as? ViewportHint.Access) { prependHint, appendHint ->\n            if (viewportHint.shouldPrioritizeOver(\n                    previous = prependHint.value,\n                    loadType = PREPEND\n                )\n            ) {\n                prependHint.value = viewportHint\n            }\n            if (viewportHint.shouldPrioritizeOver(\n                    previous = appendHint.value,\n                    loadType = APPEND\n                )\n            ) {\n                appendHint.value = viewportHint\n            }\n        }\n    }\n```\n\n`prependHint`, `appendHint` 本质也分别是一个 `Flow` ，当前符合预加载机制后，它们会将 `viewportHint` 发送到专门用于处理此类数据的 `PageFetcherSnapshot`  将来转换成一个刷新事件从而融入整个数据加载流程。\n\n`Paging3` 的预加载机制大致就是如此，更详细的机制由于代码量太多不变深入，如果对 `Paging3` 不熟悉和感兴趣的可以放下边官方的 CodeLab 做深入了解\n\n### 结论\n\n`paging3`  的预加载只是整个库的冰山一角，但是由此也可以看到官方也是通过 `onBindViewHodler` 作为预加载的判断契机的，给我们挑选更轻量的方案做了一定的背书\n\n**优点**\n\n- 有完备的机制以及官方背书，出现问题的概率较小\n- 预加载还加入了锁的处理，考虑了多线程并发,完全解决了可能出现的多次请求问题。\n\n**缺点**\n\n- 集成难度非常大，`paging3` 是一整套列表解决方案，需要各个层级的逻辑变更\n- 代码由 kotlin 、Flow 以及协程编写，预读和调适性教差，Java 接入不友好\n\n### CodeLab\n\nGoogle 提供了两个引导文档来让开发人员快速的学习如何集成和使用 Paging 3\n\n[Android Paging 基础知识  |  Android Developers](https://developer.android.com/codelabs/android-paging-basics?hl=zh-cn#0)\n\n[Android Paging Advanced Codelab  |  Android Developers](https://developer.android.com/codelabs/android-paging?hl=zh-cn#0)\n\n## 总结\n\n在实现列表预加载的过程中，选择合适的技术方案非常关键，今天我们介绍了以下几种列表预加载方案：\n\n1. 使用onScrollListener技术，可以通过监听滚动事件，在滑动到指定位置之前提前加载数据，以此实现列表预加载的功能。它的实现简单，同时缺点也相当明显。\n2. 使用 BindViewHolder 技术，可以在绑定 ViewHolder 时进行数据的预加载，以此提高列表数据的加载速度和用户体验。它的逻辑简单明了，也是很多解决方案的核心逻辑。如果考虑自己封装的话，那么以它为蓝本是不二之选。\n3. BRV框架是一个开源的Android列表框架，它基于`SmartRefreshLayout`  ，提供了很多常用的列表功能，包括列表预加载。BRV框架可以方便地实现列表预加载，并提供了许多其他的功能，如分组、拖拽等等。遗憾的是并不支持列表向前预加载。\n4. Paging框架是一个Android官方提供的用于实现分页加载的框架。它可以方便地实现列表预加载，同时还提供了分页加载、数据缓存等功能。\n5. BaseRecyclerViewAdapterHelper是一个轻量级的RecyclerView适配器，它可以快速地构建RecyclerView 列表，并支持列表预加载等功能。\n\n选择哪种方案实现列表预加载，需要根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。\n\n## 参考资料：\n\n[换一个思路，超简单的RecyclerView预加载 - 掘金](https://juejin.cn/post/6885146484791050247)\n\n[预加载/预拉取 - BRV](https://liangjingkanji.github.io/BRV/preload/#_1)\n\n[https://github.com/CymChad/BaseRecyclerViewAdapterHelper](https://github.com/CymChad/BaseRecyclerViewAdapterHelper)\n\n[Paging  |  Android 开发者  |  Android Developers](https://developer.android.com/jetpack/androidx/releases/paging?hl=zh_cn)\n\n","source":"_posts/2023-02-20-android_preload_review.md","raw":"---\nlayout: post\ntitle: \"Android 列表预加载分析\"\nsubtitle: \"方案调研\"\ndate: 2023-02-22 14:13:00\nauthor: \"rank\"\nheader_image: \"img/about-bg-walle.jpg\"\ncatalog: true\ntags:\n  - Android\n  - RecyclerView\n---\n\n\n当今移动应用开发中，列表控件是最常用的UI控件之一，它可以显示各种信息，如图片、文本、视频等等。然而，在移动设备上，列表数据的加载和显示是非常耗费资源的操作。当列表中的数据量较大时，用户往往需要等待较长的时间才能看到完整的列表。为了提高用户体验，开发人员需要采取一些策略来减少加载时间，如预加载。\n预加载是指在用户滑动列表之前，提前加载一部分列表数据，以便在用户滑动到这些数据时可以立即显示，从而提高用户的体验和感知速度。Android系统提供了一些API和技术来实现列表预加载，本课题旨在对Android列表预加载进行深入研究和分析，探究其实现原理、优化策略和性能影响，为开发人员提供参考和指导。\n \n\n接下来我们就深入研究几种预加载列表的方法，它们或是通过 Android 系统的 API 扩展或是各种第三方框架完备的实现，了解它们的实现原理，方便我们根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。\n\n## RecyclerView.OnScrollListener\n\n通过 RecyclerView 的 addOnScrollListener 接口，我们可以监听到 RecyclerView 的滑动状态，然后通过该 RecyclerView 装载的 LayoutManager 来得到当前滑动最下方或最上方展示的 item 的索引，痛殴索引来判断我们是否需要执行预加载逻辑。\n\n\n```dart\nrvList.addOnScrollListener(new RecyclerView.OnScrollListener() {\n    @Override\n    public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        // 获取 LayoutManger\n        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();\n        // 如果 LayoutManager 是 LinearLayoutManager\n        if (layoutManager instanceof GridLayoutManager) {\n            GridLayoutManager manager = (GridLayoutManager) layoutManager;\n            int nextPreloadCount = 8;\n            int previousPreloadCount = 4;\n            if (dy > 0\n                    && manager.findLastVisibleItemPosition()\n                    == layoutManager.getItemCount() - 1 - nextPreloadCount) {\n                mViewModel.loadNext();\n            } else if (dy > 0 && manager.findFirstVisibleItemPosition() == previousPreloadCount) {\n                mViewModel.loadPrevious();\n            }\n        }\n    }\n});\n```\n\n通过给列表页的 RecyerView 增加这一段代码，我们就可以很轻松的实现列表的预加载，在有本地本地数据缓存排除网络状态的情况下，和之前通过框架的 `loadMore` 触发有着显而易见的差别。但于此同时，在查看日志是就很容易发现，`onScrolled` 方法会在一次滑动中多次重复调用，造成同一个页面加载的多次调用，网络加载下对性能以及数据流量有很大的影响，需要业务逻辑上做去重处理。\n\n\n### 结论\n\n`RecyclerView.onScrollListener` 的实现和集成方式大致如上，通过实践我们可以得出以前结论：  \n\n**优点**：\n\n- 编码简单\n- 代码入侵性低，无需修改现有的 RecyclerView 或 adapter\n\n**缺点**：\n\n- `onScrolled` 方法会在一次滑动中多次重复调用，需要业务逻辑自行做去重判断\n- 不同的 `LayoutManager`  会有不同的判断逻辑，需要不停的兼容扩展\n\n## Adapter.onBindViewHolder\n\n我们监听列表的原因是想知道当前滑动到第几项目，从而来决定是否要开始预加载，为此需要拿到滑动的状态和 `LayoutManager`  .  实际上 Adapter 就有天生的简单易用的回调，那就是 `onBindViewHolder`  `onBindViewHolder` 在 `RecyclerView` 需要显示指定的 `Position` 的 数据时才会通知，这时我们就可以根据 `BindViewHolder` 的 `Position` 以及整个列表的数据对比来判断我们是否需要进行预加载，而无需实时的关心列表的滑动状态和 `LayoutManager` 的类型\n\n\n接下来我们就使用 Adpater 的 onBindViewHolder 来实现以下预加载：\n\n```java\npublic class ListAdapter extends RecyclerView.Adapter<ViewHolder> {\n\n\tprivate int nextPreloadCount = 8;\n\n\tprivate int previousPreloadCount = 4;\n\t\n\tprivate boolean isScroll\n\n\tpublic void onBindViewHolder(@NonNull VH holder, int position,\n                @NonNull List<Object> payloads) {\n\t\t\tcheckPreload(position);\n  }\n\n\tpublic void bindRecyelerView(@NonNull RecyclerView recyclerView ) {\n\t\t if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n         isScroll = false;\n     } else {\n\t\t\t \t isScroll = true;\n\t\t }\n\t}\n\t\n\tprivate void checkPreload(int position) {\n\t\t if (!isScroll){\n\t\t\t\treturn;\n\t\t }\n     if (position == previousPreloadCount) {\n          mViewModel.loadPrevious();\n     } else if (position == getItemCount() - 1 - nextPreloadCount) {\n          mViewModel.loadNext();\n     }\n    }\n}\n```\n\n代码整体实现也简单易懂，列表滑动过程中所有的列表项的加载都会经过 `Adapter.onBindViewHolder` \n从而触发预加载检测一致，由于 RecyclerView 的逻辑处理，`onBindViewHolder`  不会存在单次滑动中被多次调用的情况。且由于 Adpater 的 position 获取是与 layoutManger 无关的，所以也不需要 layoutManger 相关的代码逻辑。但是这个方案也仍然优缺点，那就是当触发预加载的 viewHolder 在列表加载过程中被向上滑出了 RecyclerView 的缓存区域时，再向下滑动到页尾时会再次被绑定导致 `onBindViewHolder`  触发，从而使得预加载重复触发。\n\n### 结论\n\n`Adapter.onBindViewHolder` 的实现也并不复杂，且相较于监听列表的实现差异明显\n\n**优点**：\n\n- 代码编写逻辑简单，基类可多处复用，与类型无关\n- `RecyclerView` 对页首页尾的 `ViewHolder` 并不会立即回收，不会在正常的滑动事件内触发多次加载\n\n**缺点**：\n\n- 仍会重新触发上拉加载，还是需要做去重操作。\n\n## BaseRecyclerViewAdapterHelpr\n\n`BaseRecyclerViewAdapterHelpr`  是一个强大而灵活的 RecyclerView Adapter ，是一个在 github 拥有 23.4 K star 的库，很多商业项目的的 adapter 都会采用它，以下简称 `BRVAH` 。 我们来探究下它是如何处理预加载方案的，通过文档查看我们发现它的加载更多的逻辑是专门有 `QuickAdapterHelper.kt` 来实现的，直接查看它的预加载方案 ：\n\n#### 加载上一页\n\n```kotlin\nleadingLoadStateAdapter?.let {\n            mAdapter.addAdapter(it)\n\n            firstAdapterOnViewAttachChangeListener =\n                object : BaseQuickAdapter.OnViewAttachStateChangeListener {\n\n                    override fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\n                        leadingLoadStateAdapter.checkPreload(holder.bindingAdapterPosition)\n                    }\n\n                    override fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\n\n                    }\n                }.apply { contentAdapter.addOnViewAttachStateChangeListener(this) }\n```\n\n#### 加载下一页\n\n```kotlin\ntrailingLoadStateAdapter?.let {\n            mAdapter.addAdapter(it)\n\n            lastAdapterOnViewAttachChangeListener =\n                object : BaseQuickAdapter.OnViewAttachStateChangeListener {\n\n                    override fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\n                        trailingLoadStateAdapter.checkPreload(\n                            holder.bindingAdapter?.itemCount ?: 0,\n                            holder.bindingAdapterPosition\n                        )\n                    }\n\n                    override fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\n\n                    }\n                }.apply { contentAdapter.addOnViewAttachStateChangeListener(this) }\n        }\n```\n\n`BRVAH` 整体对加载的方案采用的是 `ConcatAdapter`  ，加载的头部和尾部通过独立的 adapter 来做逻辑控制，所以两部的代码基本一致，这里我们就拿加载下一页的逻辑来梳理。 `contentAdapter` 就是实际的列表 adapter ，`trailingLoadStateAdapter` 则是专门负责列表尾部逻辑处理的 adapter ，可以看到它创建了一个 `OnViewAttachStateChangeListener`   用来监听 viewHolder 的 onViewAttachedToWindow ,  其具体实现是绑定了  Adapter 的 `onViewAttachedToWindow` ，通过这个契机触发预加载监测机制。具体实现就不在深究了，我们知道它的触发契机和大致实现即可，感兴趣的可以直接去查阅对应的源码，其实际实现也并不复杂。\n\n可以看到 `BRVAH` 虽然采用了对 Adapter 进行封装处理预加载逻辑，但它并没有采用 Adpater 的 `onBindViewHolder`  当作触发契机而是采用了 `onViewAttachedToWindow`  造成这样的差异是什么，我们可以看下这两者的实际差别:\n\n`onViewAttachedToWindow`方法在RecyclerView中显示一个ViewHolder时被调用。当RecyclerView需要显示一个新的ViewHolder时，它会调用Adapter的`onCreateViewHolder`方法来创建一个ViewHolder，然后将这个ViewHolder绑定到数据源中对应的数据上，最后调用ViewHolder的`onBindViewHolder`方法将数据显示在ViewHolder的视图上。这时，如果ViewHolder被成功添加到RecyclerView中，`onViewAttachedToWindow`方法就会被调用。\n\n因此，`onViewAttachedToWindow`方法在ViewHolder显示在RecyclerView上时触发，而**`onBindViewHolder`方法则是在RecyclerView需要更新ViewHolder数据时触发。\n\n从我们的业务场景出发—— 预加载的目的是通过滑动来判断用户可能有向下滑动的意图，提前补充列表数据，避免用户等待。业务场景其实并不太依赖当前视图是否真的展示在界面上了，所以这里没有用生命周期更靠前的 **`onBindViewHolder`** 而用了更靠后的 **`onViewAttachedToWindow`** 从源码角度上来看并没有得到好的解释，去查看仓库也没有相关的提交注释。只能后续看是否能联系上作者询问了\n\n### 结论\n\n`BRVAH` 带了新的预加载方案，虽然目前看本质上与 onBindViewHolder 类似，但是`BRVAH` 除此之外还提供了成套的解决方案，包括防止重复加载以及列表头尾的优雅处理。\n\n **优点**：\n\n- 集成难度中等\n- 有较高的 star 和活跃度，出现问题的概率较小\n- 提供了成套的解决方案，避免造轮子\n\n**缺点**：\n\n- 需要引入新的库，修改调整现有的 adapter\n\n## BRV\n\n`BRV` 是一个基于 `SmartRefreshLayout`  框架的扩展库，他在 `SmartRefreshLayout` 的基础上提供了预加载，缺省页，悬停标题等功能，号称拥有比 `BRVAH`   更强大的功能以及实用性，它的其中预加载逻辑如下：\n\n```kotlin\n/** 监听onBindViewHolder事件 */\n    var onBindViewHolderListener = object : OnBindViewHolderListener {\n        override fun onBindViewHolder(\n            rv: RecyclerView,\n            adapter: BindingAdapter,\n            holder: BindingAdapter.BindingViewHolder,\n            position: Int,\n        ) {\n            if (mEnableLoadMore && !mFooterNoMoreData &&\n                rv.scrollState != SCROLL_STATE_IDLE &&\n                preloadIndex != -1 &&\n                (adapter.itemCount - preloadIndex <= position)\n            ) {\n                post {\n                    if (state == RefreshState.None) {\n                        notifyStateChanged(RefreshState.Loading)\n                        onLoadMore(this@PageRefreshLayout)\n                    }\n                }\n            }\n        }\n    }\n```\n\n可以看到与我们编写 onBindViewHolder 的监听逻辑基本如出一辙，通过当前的触发的　bindViewHolder position  来判断是否要触发预加载，而加载的头部和尾部则是基于 `SmartRefreshLayout`  来的，通过 ViewGruop 单独的 add 添加和 remove 掉。\n\n### 结论\n\n`BRV`  的预加载方案基本与我们自己基于 Adpater 的基本一致，在此基础上增加了去重处理\n\n **优点**：\n\n- 提供了成套的解决方案，避免数据重复造轮子\n\n**缺点**：\n\n- 集成难度复杂，依赖 `SmartRefreshLayout`  没有引入 `SmartRefreshLayout`  库的话还需要单独引入\n- 只提供了向后预加载，不支持向前预加载\n\n## Paging 3\n\n[Paging 库概览  |  Android 开发者  |  Android Developers](https://developer.android.com/topic/libraries/architecture/paging/v3-overview?hl=zh-cn#paging)\n\nPaging 作为 Jetpack 的组件，专门用于加载和显示来自本地和网络中的数据页面，同样也提供了数据预加载的功能，那么作为官方的列表加载方案，它又是如何实现的。\n\n`Paging3`   作为一整套的列表解决方案，它提供了分页数据的内存缓存、内置的请求重复信息删除功能 以及对刷新与重试功能的支持等等，此外， `paging3` 还大量的使用了 Flow 作为数据处理实现，功能调用栈也极深。导致代码阅读复杂较高，这里我们就只了解下 `Paging3`  预加载的契机以及判断逻辑，用于跟其他框架进行对比。\n\n#### 触发契机\n\n首先是触发契机，`Paging3`  提供了 `PagingDataAdapter`  作为 RecyclerView 的适配器，开发者必须使用基于它的 Adapter 来进行列表适配，`PagingDataAdapter`  内置了 diff 机制以及直接管理列表数据，列表设置和更新需要通过 `submitData` 方法，获取数据则通过 `getItem`  方法，而 `paging3` 的预加载机制则就藏匿在 `getItem`  的具体实现中，由于列表数据是完全封装起来的，调用者只能通过 `getItem` 来获取列表数据，而调用 `getItem` 往往是在 `onBindViewHolder` 时，所以 paging3 的分页触发契机也基本等同于 `onBindViewHolder` 方式\n\n#### 判断逻辑\n\n`getItem` 方法触发时，paging3 会生成 `ViewportHint` 的快照，用来存储描述当前列表的状态，同时依据这些信息来判断是否要触发预加载\n\n```kotlin\n/**\n     * Processes the hint coming from UI.\n     */\n    fun processHint(viewportHint: ViewportHint) {\n        state.modify(viewportHint as? ViewportHint.Access) { prependHint, appendHint ->\n            if (viewportHint.shouldPrioritizeOver(\n                    previous = prependHint.value,\n                    loadType = PREPEND\n                )\n            ) {\n                prependHint.value = viewportHint\n            }\n            if (viewportHint.shouldPrioritizeOver(\n                    previous = appendHint.value,\n                    loadType = APPEND\n                )\n            ) {\n                appendHint.value = viewportHint\n            }\n        }\n    }\n```\n\n`prependHint`, `appendHint` 本质也分别是一个 `Flow` ，当前符合预加载机制后，它们会将 `viewportHint` 发送到专门用于处理此类数据的 `PageFetcherSnapshot`  将来转换成一个刷新事件从而融入整个数据加载流程。\n\n`Paging3` 的预加载机制大致就是如此，更详细的机制由于代码量太多不变深入，如果对 `Paging3` 不熟悉和感兴趣的可以放下边官方的 CodeLab 做深入了解\n\n### 结论\n\n`paging3`  的预加载只是整个库的冰山一角，但是由此也可以看到官方也是通过 `onBindViewHodler` 作为预加载的判断契机的，给我们挑选更轻量的方案做了一定的背书\n\n**优点**\n\n- 有完备的机制以及官方背书，出现问题的概率较小\n- 预加载还加入了锁的处理，考虑了多线程并发,完全解决了可能出现的多次请求问题。\n\n**缺点**\n\n- 集成难度非常大，`paging3` 是一整套列表解决方案，需要各个层级的逻辑变更\n- 代码由 kotlin 、Flow 以及协程编写，预读和调适性教差，Java 接入不友好\n\n### CodeLab\n\nGoogle 提供了两个引导文档来让开发人员快速的学习如何集成和使用 Paging 3\n\n[Android Paging 基础知识  |  Android Developers](https://developer.android.com/codelabs/android-paging-basics?hl=zh-cn#0)\n\n[Android Paging Advanced Codelab  |  Android Developers](https://developer.android.com/codelabs/android-paging?hl=zh-cn#0)\n\n## 总结\n\n在实现列表预加载的过程中，选择合适的技术方案非常关键，今天我们介绍了以下几种列表预加载方案：\n\n1. 使用onScrollListener技术，可以通过监听滚动事件，在滑动到指定位置之前提前加载数据，以此实现列表预加载的功能。它的实现简单，同时缺点也相当明显。\n2. 使用 BindViewHolder 技术，可以在绑定 ViewHolder 时进行数据的预加载，以此提高列表数据的加载速度和用户体验。它的逻辑简单明了，也是很多解决方案的核心逻辑。如果考虑自己封装的话，那么以它为蓝本是不二之选。\n3. BRV框架是一个开源的Android列表框架，它基于`SmartRefreshLayout`  ，提供了很多常用的列表功能，包括列表预加载。BRV框架可以方便地实现列表预加载，并提供了许多其他的功能，如分组、拖拽等等。遗憾的是并不支持列表向前预加载。\n4. Paging框架是一个Android官方提供的用于实现分页加载的框架。它可以方便地实现列表预加载，同时还提供了分页加载、数据缓存等功能。\n5. BaseRecyclerViewAdapterHelper是一个轻量级的RecyclerView适配器，它可以快速地构建RecyclerView 列表，并支持列表预加载等功能。\n\n选择哪种方案实现列表预加载，需要根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。\n\n## 参考资料：\n\n[换一个思路，超简单的RecyclerView预加载 - 掘金](https://juejin.cn/post/6885146484791050247)\n\n[预加载/预拉取 - BRV](https://liangjingkanji.github.io/BRV/preload/#_1)\n\n[https://github.com/CymChad/BaseRecyclerViewAdapterHelper](https://github.com/CymChad/BaseRecyclerViewAdapterHelper)\n\n[Paging  |  Android 开发者  |  Android Developers](https://developer.android.com/jetpack/androidx/releases/paging?hl=zh_cn)\n\n","slug":"2023-02-20-android_preload_review","published":1,"updated":"2024-09-13T03:38:13.730Z","comments":1,"photos":[],"link":"","_id":"cm10dl6pr0027s2y49w67251q","content":"<p>当今移动应用开发中，列表控件是最常用的UI控件之一，它可以显示各种信息，如图片、文本、视频等等。然而，在移动设备上，列表数据的加载和显示是非常耗费资源的操作。当列表中的数据量较大时，用户往往需要等待较长的时间才能看到完整的列表。为了提高用户体验，开发人员需要采取一些策略来减少加载时间，如预加载。<br>预加载是指在用户滑动列表之前，提前加载一部分列表数据，以便在用户滑动到这些数据时可以立即显示，从而提高用户的体验和感知速度。Android系统提供了一些API和技术来实现列表预加载，本课题旨在对Android列表预加载进行深入研究和分析，探究其实现原理、优化策略和性能影响，为开发人员提供参考和指导。</p>\n<p>接下来我们就深入研究几种预加载列表的方法，它们或是通过 Android 系统的 API 扩展或是各种第三方框架完备的实现，了解它们的实现原理，方便我们根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。</p>\n<h2 id=\"RecyclerView-OnScrollListener\"><a href=\"#RecyclerView-OnScrollListener\" class=\"headerlink\" title=\"RecyclerView.OnScrollListener\"></a>RecyclerView.OnScrollListener</h2><p>通过 RecyclerView 的 addOnScrollListener 接口，我们可以监听到 RecyclerView 的滑动状态，然后通过该 RecyclerView 装载的 LayoutManager 来得到当前滑动最下方或最上方展示的 item 的索引，痛殴索引来判断我们是否需要执行预加载逻辑。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvList.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> onScrolled(<span class=\"meta\">@NonNull</span> RecyclerView recyclerView, <span class=\"built_in\">int</span> dx, <span class=\"built_in\">int</span> dy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        <span class=\"comment\">// 获取 LayoutManger</span></span><br><span class=\"line\">        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();</span><br><span class=\"line\">        <span class=\"comment\">// 如果 LayoutManager 是 LinearLayoutManager</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (layoutManager instanceof GridLayoutManager) &#123;</span><br><span class=\"line\">            GridLayoutManager manager = (GridLayoutManager) layoutManager;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> nextPreloadCount = <span class=\"number\">8</span>;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> previousPreloadCount = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dy &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; manager.findLastVisibleItemPosition()</span><br><span class=\"line\">                    == layoutManager.getItemCount() - <span class=\"number\">1</span> - nextPreloadCount) &#123;</span><br><span class=\"line\">                mViewModel.loadNext();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dy &gt; <span class=\"number\">0</span> &amp;&amp; manager.findFirstVisibleItemPosition() == previousPreloadCount) &#123;</span><br><span class=\"line\">                mViewModel.loadPrevious();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过给列表页的 RecyerView 增加这一段代码，我们就可以很轻松的实现列表的预加载，在有本地本地数据缓存排除网络状态的情况下，和之前通过框架的 <code>loadMore</code> 触发有着显而易见的差别。但于此同时，在查看日志是就很容易发现，<code>onScrolled</code> 方法会在一次滑动中多次重复调用，造成同一个页面加载的多次调用，网络加载下对性能以及数据流量有很大的影响，需要业务逻辑上做去重处理。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>RecyclerView.onScrollListener</code> 的实现和集成方式大致如上，通过实践我们可以得出以前结论：  </p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>编码简单</li>\n<li>代码入侵性低，无需修改现有的 RecyclerView 或 adapter</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><code>onScrolled</code> 方法会在一次滑动中多次重复调用，需要业务逻辑自行做去重判断</li>\n<li>不同的 <code>LayoutManager</code>  会有不同的判断逻辑，需要不停的兼容扩展</li>\n</ul>\n<h2 id=\"Adapter-onBindViewHolder\"><a href=\"#Adapter-onBindViewHolder\" class=\"headerlink\" title=\"Adapter.onBindViewHolder\"></a>Adapter.onBindViewHolder</h2><p>我们监听列表的原因是想知道当前滑动到第几项目，从而来决定是否要开始预加载，为此需要拿到滑动的状态和 <code>LayoutManager</code>  .  实际上 Adapter 就有天生的简单易用的回调，那就是 <code>onBindViewHolder</code>  <code>onBindViewHolder</code> 在 <code>RecyclerView</code> 需要显示指定的 <code>Position</code> 的 数据时才会通知，这时我们就可以根据 <code>BindViewHolder</code> 的 <code>Position</code> 以及整个列表的数据对比来判断我们是否需要进行预加载，而无需实时的关心列表的滑动状态和 <code>LayoutManager</code> 的类型</p>\n<p>接下来我们就使用 Adpater 的 onBindViewHolder 来实现以下预加载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.Adapter&lt;ViewHolder&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">nextPreloadCount</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">previousPreloadCount</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isScroll</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> VH holder, <span class=\"type\">int</span> position,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"meta\">@NonNull</span> List&lt;Object&gt; payloads)</span> &#123;</span><br><span class=\"line\">\t\t\tcheckPreload(position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindRecyelerView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RecyclerView recyclerView )</span> &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE) &#123;</span><br><span class=\"line\">         isScroll = <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t \t isScroll = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkPreload</span><span class=\"params\">(<span class=\"type\">int</span> position)</span> &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">if</span> (!isScroll)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (position == previousPreloadCount) &#123;</span><br><span class=\"line\">          mViewModel.loadPrevious();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position == getItemCount() - <span class=\"number\">1</span> - nextPreloadCount) &#123;</span><br><span class=\"line\">          mViewModel.loadNext();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码整体实现也简单易懂，列表滑动过程中所有的列表项的加载都会经过 <code>Adapter.onBindViewHolder</code><br>从而触发预加载检测一致，由于 RecyclerView 的逻辑处理，<code>onBindViewHolder</code>  不会存在单次滑动中被多次调用的情况。且由于 Adpater 的 position 获取是与 layoutManger 无关的，所以也不需要 layoutManger 相关的代码逻辑。但是这个方案也仍然优缺点，那就是当触发预加载的 viewHolder 在列表加载过程中被向上滑出了 RecyclerView 的缓存区域时，再向下滑动到页尾时会再次被绑定导致 <code>onBindViewHolder</code>  触发，从而使得预加载重复触发。</p>\n<h3 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>Adapter.onBindViewHolder</code> 的实现也并不复杂，且相较于监听列表的实现差异明显</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>代码编写逻辑简单，基类可多处复用，与类型无关</li>\n<li><code>RecyclerView</code> 对页首页尾的 <code>ViewHolder</code> 并不会立即回收，不会在正常的滑动事件内触发多次加载</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>仍会重新触发上拉加载，还是需要做去重操作。</li>\n</ul>\n<h2 id=\"BaseRecyclerViewAdapterHelpr\"><a href=\"#BaseRecyclerViewAdapterHelpr\" class=\"headerlink\" title=\"BaseRecyclerViewAdapterHelpr\"></a>BaseRecyclerViewAdapterHelpr</h2><p><code>BaseRecyclerViewAdapterHelpr</code>  是一个强大而灵活的 RecyclerView Adapter ，是一个在 github 拥有 23.4 K star 的库，很多商业项目的的 adapter 都会采用它，以下简称 <code>BRVAH</code> 。 我们来探究下它是如何处理预加载方案的，通过文档查看我们发现它的加载更多的逻辑是专门有 <code>QuickAdapterHelper.kt</code> 来实现的，直接查看它的预加载方案 ：</p>\n<h4 id=\"加载上一页\"><a href=\"#加载上一页\" class=\"headerlink\" title=\"加载上一页\"></a>加载上一页</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leadingLoadStateAdapter?.let &#123;</span><br><span class=\"line\">            mAdapter.addAdapter(it)</span><br><span class=\"line\"></span><br><span class=\"line\">            firstAdapterOnViewAttachChangeListener =</span><br><span class=\"line\">                <span class=\"keyword\">object</span> : BaseQuickAdapter.OnViewAttachStateChangeListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\">                        leadingLoadStateAdapter.checkPreload(holder.bindingAdapterPosition)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.apply &#123; contentAdapter.addOnViewAttachStateChangeListener(<span class=\"keyword\">this</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加载下一页\"><a href=\"#加载下一页\" class=\"headerlink\" title=\"加载下一页\"></a>加载下一页</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trailingLoadStateAdapter?.let &#123;</span><br><span class=\"line\">            mAdapter.addAdapter(it)</span><br><span class=\"line\"></span><br><span class=\"line\">            lastAdapterOnViewAttachChangeListener =</span><br><span class=\"line\">                <span class=\"keyword\">object</span> : BaseQuickAdapter.OnViewAttachStateChangeListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\">                        trailingLoadStateAdapter.checkPreload(</span><br><span class=\"line\">                            holder.bindingAdapter?.itemCount ?: <span class=\"number\">0</span>,</span><br><span class=\"line\">                            holder.bindingAdapterPosition</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.apply &#123; contentAdapter.addOnViewAttachStateChangeListener(<span class=\"keyword\">this</span>) &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BRVAH</code> 整体对加载的方案采用的是 <code>ConcatAdapter</code>  ，加载的头部和尾部通过独立的 adapter 来做逻辑控制，所以两部的代码基本一致，这里我们就拿加载下一页的逻辑来梳理。 <code>contentAdapter</code> 就是实际的列表 adapter ，<code>trailingLoadStateAdapter</code> 则是专门负责列表尾部逻辑处理的 adapter ，可以看到它创建了一个 <code>OnViewAttachStateChangeListener</code>   用来监听 viewHolder 的 onViewAttachedToWindow ,  其具体实现是绑定了  Adapter 的 <code>onViewAttachedToWindow</code> ，通过这个契机触发预加载监测机制。具体实现就不在深究了，我们知道它的触发契机和大致实现即可，感兴趣的可以直接去查阅对应的源码，其实际实现也并不复杂。</p>\n<p>可以看到 <code>BRVAH</code> 虽然采用了对 Adapter 进行封装处理预加载逻辑，但它并没有采用 Adpater 的 <code>onBindViewHolder</code>  当作触发契机而是采用了 <code>onViewAttachedToWindow</code>  造成这样的差异是什么，我们可以看下这两者的实际差别:</p>\n<p><code>onViewAttachedToWindow</code>方法在RecyclerView中显示一个ViewHolder时被调用。当RecyclerView需要显示一个新的ViewHolder时，它会调用Adapter的<code>onCreateViewHolder</code>方法来创建一个ViewHolder，然后将这个ViewHolder绑定到数据源中对应的数据上，最后调用ViewHolder的<code>onBindViewHolder</code>方法将数据显示在ViewHolder的视图上。这时，如果ViewHolder被成功添加到RecyclerView中，<code>onViewAttachedToWindow</code>方法就会被调用。</p>\n<p>因此，<code>onViewAttachedToWindow</code>方法在ViewHolder显示在RecyclerView上时触发，而**<code>onBindViewHolder</code>方法则是在RecyclerView需要更新ViewHolder数据时触发。</p>\n<p>从我们的业务场景出发—— 预加载的目的是通过滑动来判断用户可能有向下滑动的意图，提前补充列表数据，避免用户等待。业务场景其实并不太依赖当前视图是否真的展示在界面上了，所以这里没有用生命周期更靠前的 <strong><code>onBindViewHolder</code></strong> 而用了更靠后的 <strong><code>onViewAttachedToWindow</code></strong> 从源码角度上来看并没有得到好的解释，去查看仓库也没有相关的提交注释。只能后续看是否能联系上作者询问了</p>\n<h3 id=\"结论-2\"><a href=\"#结论-2\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>BRVAH</code> 带了新的预加载方案，虽然目前看本质上与 onBindViewHolder 类似，但是<code>BRVAH</code> 除此之外还提供了成套的解决方案，包括防止重复加载以及列表头尾的优雅处理。</p>\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>集成难度中等</li>\n<li>有较高的 star 和活跃度，出现问题的概率较小</li>\n<li>提供了成套的解决方案，避免造轮子</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>需要引入新的库，修改调整现有的 adapter</li>\n</ul>\n<h2 id=\"BRV\"><a href=\"#BRV\" class=\"headerlink\" title=\"BRV\"></a>BRV</h2><p><code>BRV</code> 是一个基于 <code>SmartRefreshLayout</code>  框架的扩展库，他在 <code>SmartRefreshLayout</code> 的基础上提供了预加载，缺省页，悬停标题等功能，号称拥有比 <code>BRVAH</code>   更强大的功能以及实用性，它的其中预加载逻辑如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 监听onBindViewHolder事件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onBindViewHolderListener = <span class=\"keyword\">object</span> : OnBindViewHolderListener &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            rv: <span class=\"type\">RecyclerView</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            adapter: <span class=\"type\">BindingAdapter</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            holder: <span class=\"type\">BindingAdapter</span>.<span class=\"type\">BindingViewHolder</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            position: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        )</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mEnableLoadMore &amp;&amp; !mFooterNoMoreData &amp;&amp;</span><br><span class=\"line\">                rv.scrollState != SCROLL_STATE_IDLE &amp;&amp;</span><br><span class=\"line\">                preloadIndex != -<span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">                (adapter.itemCount - preloadIndex &lt;= position)</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                post &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (state == RefreshState.None) &#123;</span><br><span class=\"line\">                        notifyStateChanged(RefreshState.Loading)</span><br><span class=\"line\">                        onLoadMore(<span class=\"keyword\">this</span><span class=\"symbol\">@PageRefreshLayout</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到与我们编写 onBindViewHolder 的监听逻辑基本如出一辙，通过当前的触发的　bindViewHolder position  来判断是否要触发预加载，而加载的头部和尾部则是基于 <code>SmartRefreshLayout</code>  来的，通过 ViewGruop 单独的 add 添加和 remove 掉。</p>\n<h3 id=\"结论-3\"><a href=\"#结论-3\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>BRV</code>  的预加载方案基本与我们自己基于 Adpater 的基本一致，在此基础上增加了去重处理</p>\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>提供了成套的解决方案，避免数据重复造轮子</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>集成难度复杂，依赖 <code>SmartRefreshLayout</code>  没有引入 <code>SmartRefreshLayout</code>  库的话还需要单独引入</li>\n<li>只提供了向后预加载，不支持向前预加载</li>\n</ul>\n<h2 id=\"Paging-3\"><a href=\"#Paging-3\" class=\"headerlink\" title=\"Paging 3\"></a>Paging 3</h2><p><a href=\"https://developer.android.com/topic/libraries/architecture/paging/v3-overview?hl=zh-cn#paging\">Paging 库概览  |  Android 开发者  |  Android Developers</a></p>\n<p>Paging 作为 Jetpack 的组件，专门用于加载和显示来自本地和网络中的数据页面，同样也提供了数据预加载的功能，那么作为官方的列表加载方案，它又是如何实现的。</p>\n<p><code>Paging3</code>   作为一整套的列表解决方案，它提供了分页数据的内存缓存、内置的请求重复信息删除功能 以及对刷新与重试功能的支持等等，此外， <code>paging3</code> 还大量的使用了 Flow 作为数据处理实现，功能调用栈也极深。导致代码阅读复杂较高，这里我们就只了解下 <code>Paging3</code>  预加载的契机以及判断逻辑，用于跟其他框架进行对比。</p>\n<h4 id=\"触发契机\"><a href=\"#触发契机\" class=\"headerlink\" title=\"触发契机\"></a>触发契机</h4><p>首先是触发契机，<code>Paging3</code>  提供了 <code>PagingDataAdapter</code>  作为 RecyclerView 的适配器，开发者必须使用基于它的 Adapter 来进行列表适配，<code>PagingDataAdapter</code>  内置了 diff 机制以及直接管理列表数据，列表设置和更新需要通过 <code>submitData</code> 方法，获取数据则通过 <code>getItem</code>  方法，而 <code>paging3</code> 的预加载机制则就藏匿在 <code>getItem</code>  的具体实现中，由于列表数据是完全封装起来的，调用者只能通过 <code>getItem</code> 来获取列表数据，而调用 <code>getItem</code> 往往是在 <code>onBindViewHolder</code> 时，所以 paging3 的分页触发契机也基本等同于 <code>onBindViewHolder</code> 方式</p>\n<h4 id=\"判断逻辑\"><a href=\"#判断逻辑\" class=\"headerlink\" title=\"判断逻辑\"></a>判断逻辑</h4><p><code>getItem</code> 方法触发时，paging3 会生成 <code>ViewportHint</code> 的快照，用来存储描述当前列表的状态，同时依据这些信息来判断是否要触发预加载</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Processes the hint coming from UI.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processHint</span><span class=\"params\">(viewportHint: <span class=\"type\">ViewportHint</span>)</span></span> &#123;</span><br><span class=\"line\">        state.modify(viewportHint <span class=\"keyword\">as</span>? ViewportHint.Access) &#123; prependHint, appendHint -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewportHint.shouldPrioritizeOver(</span><br><span class=\"line\">                    previous = prependHint.value,</span><br><span class=\"line\">                    loadType = PREPEND</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                prependHint.value = viewportHint</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewportHint.shouldPrioritizeOver(</span><br><span class=\"line\">                    previous = appendHint.value,</span><br><span class=\"line\">                    loadType = APPEND</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                appendHint.value = viewportHint</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>prependHint</code>, <code>appendHint</code> 本质也分别是一个 <code>Flow</code> ，当前符合预加载机制后，它们会将 <code>viewportHint</code> 发送到专门用于处理此类数据的 <code>PageFetcherSnapshot</code>  将来转换成一个刷新事件从而融入整个数据加载流程。</p>\n<p><code>Paging3</code> 的预加载机制大致就是如此，更详细的机制由于代码量太多不变深入，如果对 <code>Paging3</code> 不熟悉和感兴趣的可以放下边官方的 CodeLab 做深入了解</p>\n<h3 id=\"结论-4\"><a href=\"#结论-4\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>paging3</code>  的预加载只是整个库的冰山一角，但是由此也可以看到官方也是通过 <code>onBindViewHodler</code> 作为预加载的判断契机的，给我们挑选更轻量的方案做了一定的背书</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>有完备的机制以及官方背书，出现问题的概率较小</li>\n<li>预加载还加入了锁的处理，考虑了多线程并发,完全解决了可能出现的多次请求问题。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>集成难度非常大，<code>paging3</code> 是一整套列表解决方案，需要各个层级的逻辑变更</li>\n<li>代码由 kotlin 、Flow 以及协程编写，预读和调适性教差，Java 接入不友好</li>\n</ul>\n<h3 id=\"CodeLab\"><a href=\"#CodeLab\" class=\"headerlink\" title=\"CodeLab\"></a>CodeLab</h3><p>Google 提供了两个引导文档来让开发人员快速的学习如何集成和使用 Paging 3</p>\n<p><a href=\"https://developer.android.com/codelabs/android-paging-basics?hl=zh-cn#0\">Android Paging 基础知识  |  Android Developers</a></p>\n<p><a href=\"https://developer.android.com/codelabs/android-paging?hl=zh-cn#0\">Android Paging Advanced Codelab  |  Android Developers</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实现列表预加载的过程中，选择合适的技术方案非常关键，今天我们介绍了以下几种列表预加载方案：</p>\n<ol>\n<li>使用onScrollListener技术，可以通过监听滚动事件，在滑动到指定位置之前提前加载数据，以此实现列表预加载的功能。它的实现简单，同时缺点也相当明显。</li>\n<li>使用 BindViewHolder 技术，可以在绑定 ViewHolder 时进行数据的预加载，以此提高列表数据的加载速度和用户体验。它的逻辑简单明了，也是很多解决方案的核心逻辑。如果考虑自己封装的话，那么以它为蓝本是不二之选。</li>\n<li>BRV框架是一个开源的Android列表框架，它基于<code>SmartRefreshLayout</code>  ，提供了很多常用的列表功能，包括列表预加载。BRV框架可以方便地实现列表预加载，并提供了许多其他的功能，如分组、拖拽等等。遗憾的是并不支持列表向前预加载。</li>\n<li>Paging框架是一个Android官方提供的用于实现分页加载的框架。它可以方便地实现列表预加载，同时还提供了分页加载、数据缓存等功能。</li>\n<li>BaseRecyclerViewAdapterHelper是一个轻量级的RecyclerView适配器，它可以快速地构建RecyclerView 列表，并支持列表预加载等功能。</li>\n</ol>\n<p>选择哪种方案实现列表预加载，需要根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://juejin.cn/post/6885146484791050247\">换一个思路，超简单的RecyclerView预加载 - 掘金</a></p>\n<p><a href=\"https://liangjingkanji.github.io/BRV/preload/#_1\">预加载&#x2F;预拉取 - BRV</a></p>\n<p><a href=\"https://github.com/CymChad/BaseRecyclerViewAdapterHelper\">https://github.com/CymChad/BaseRecyclerViewAdapterHelper</a></p>\n<p><a href=\"https://developer.android.com/jetpack/androidx/releases/paging?hl=zh_cn\">Paging  |  Android 开发者  |  Android Developers</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当今移动应用开发中，列表控件是最常用的UI控件之一，它可以显示各种信息，如图片、文本、视频等等。然而，在移动设备上，列表数据的加载和显示是非常耗费资源的操作。当列表中的数据量较大时，用户往往需要等待较长的时间才能看到完整的列表。为了提高用户体验，开发人员需要采取一些策略来减少加载时间，如预加载。<br>预加载是指在用户滑动列表之前，提前加载一部分列表数据，以便在用户滑动到这些数据时可以立即显示，从而提高用户的体验和感知速度。Android系统提供了一些API和技术来实现列表预加载，本课题旨在对Android列表预加载进行深入研究和分析，探究其实现原理、优化策略和性能影响，为开发人员提供参考和指导。</p>\n<p>接下来我们就深入研究几种预加载列表的方法，它们或是通过 Android 系统的 API 扩展或是各种第三方框架完备的实现，了解它们的实现原理，方便我们根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。</p>\n<h2 id=\"RecyclerView-OnScrollListener\"><a href=\"#RecyclerView-OnScrollListener\" class=\"headerlink\" title=\"RecyclerView.OnScrollListener\"></a>RecyclerView.OnScrollListener</h2><p>通过 RecyclerView 的 addOnScrollListener 接口，我们可以监听到 RecyclerView 的滑动状态，然后通过该 RecyclerView 装载的 LayoutManager 来得到当前滑动最下方或最上方展示的 item 的索引，痛殴索引来判断我们是否需要执行预加载逻辑。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvList.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> onScrolled(<span class=\"meta\">@NonNull</span> RecyclerView recyclerView, <span class=\"built_in\">int</span> dx, <span class=\"built_in\">int</span> dy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        <span class=\"comment\">// 获取 LayoutManger</span></span><br><span class=\"line\">        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();</span><br><span class=\"line\">        <span class=\"comment\">// 如果 LayoutManager 是 LinearLayoutManager</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (layoutManager instanceof GridLayoutManager) &#123;</span><br><span class=\"line\">            GridLayoutManager manager = (GridLayoutManager) layoutManager;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> nextPreloadCount = <span class=\"number\">8</span>;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> previousPreloadCount = <span class=\"number\">4</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dy &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; manager.findLastVisibleItemPosition()</span><br><span class=\"line\">                    == layoutManager.getItemCount() - <span class=\"number\">1</span> - nextPreloadCount) &#123;</span><br><span class=\"line\">                mViewModel.loadNext();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dy &gt; <span class=\"number\">0</span> &amp;&amp; manager.findFirstVisibleItemPosition() == previousPreloadCount) &#123;</span><br><span class=\"line\">                mViewModel.loadPrevious();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过给列表页的 RecyerView 增加这一段代码，我们就可以很轻松的实现列表的预加载，在有本地本地数据缓存排除网络状态的情况下，和之前通过框架的 <code>loadMore</code> 触发有着显而易见的差别。但于此同时，在查看日志是就很容易发现，<code>onScrolled</code> 方法会在一次滑动中多次重复调用，造成同一个页面加载的多次调用，网络加载下对性能以及数据流量有很大的影响，需要业务逻辑上做去重处理。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>RecyclerView.onScrollListener</code> 的实现和集成方式大致如上，通过实践我们可以得出以前结论：  </p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>编码简单</li>\n<li>代码入侵性低，无需修改现有的 RecyclerView 或 adapter</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><code>onScrolled</code> 方法会在一次滑动中多次重复调用，需要业务逻辑自行做去重判断</li>\n<li>不同的 <code>LayoutManager</code>  会有不同的判断逻辑，需要不停的兼容扩展</li>\n</ul>\n<h2 id=\"Adapter-onBindViewHolder\"><a href=\"#Adapter-onBindViewHolder\" class=\"headerlink\" title=\"Adapter.onBindViewHolder\"></a>Adapter.onBindViewHolder</h2><p>我们监听列表的原因是想知道当前滑动到第几项目，从而来决定是否要开始预加载，为此需要拿到滑动的状态和 <code>LayoutManager</code>  .  实际上 Adapter 就有天生的简单易用的回调，那就是 <code>onBindViewHolder</code>  <code>onBindViewHolder</code> 在 <code>RecyclerView</code> 需要显示指定的 <code>Position</code> 的 数据时才会通知，这时我们就可以根据 <code>BindViewHolder</code> 的 <code>Position</code> 以及整个列表的数据对比来判断我们是否需要进行预加载，而无需实时的关心列表的滑动状态和 <code>LayoutManager</code> 的类型</p>\n<p>接下来我们就使用 Adpater 的 onBindViewHolder 来实现以下预加载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.Adapter&lt;ViewHolder&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">nextPreloadCount</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">previousPreloadCount</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isScroll</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> VH holder, <span class=\"type\">int</span> position,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"meta\">@NonNull</span> List&lt;Object&gt; payloads)</span> &#123;</span><br><span class=\"line\">\t\t\tcheckPreload(position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindRecyelerView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RecyclerView recyclerView )</span> &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE) &#123;</span><br><span class=\"line\">         isScroll = <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t \t isScroll = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkPreload</span><span class=\"params\">(<span class=\"type\">int</span> position)</span> &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">if</span> (!isScroll)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (position == previousPreloadCount) &#123;</span><br><span class=\"line\">          mViewModel.loadPrevious();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position == getItemCount() - <span class=\"number\">1</span> - nextPreloadCount) &#123;</span><br><span class=\"line\">          mViewModel.loadNext();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码整体实现也简单易懂，列表滑动过程中所有的列表项的加载都会经过 <code>Adapter.onBindViewHolder</code><br>从而触发预加载检测一致，由于 RecyclerView 的逻辑处理，<code>onBindViewHolder</code>  不会存在单次滑动中被多次调用的情况。且由于 Adpater 的 position 获取是与 layoutManger 无关的，所以也不需要 layoutManger 相关的代码逻辑。但是这个方案也仍然优缺点，那就是当触发预加载的 viewHolder 在列表加载过程中被向上滑出了 RecyclerView 的缓存区域时，再向下滑动到页尾时会再次被绑定导致 <code>onBindViewHolder</code>  触发，从而使得预加载重复触发。</p>\n<h3 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>Adapter.onBindViewHolder</code> 的实现也并不复杂，且相较于监听列表的实现差异明显</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>代码编写逻辑简单，基类可多处复用，与类型无关</li>\n<li><code>RecyclerView</code> 对页首页尾的 <code>ViewHolder</code> 并不会立即回收，不会在正常的滑动事件内触发多次加载</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>仍会重新触发上拉加载，还是需要做去重操作。</li>\n</ul>\n<h2 id=\"BaseRecyclerViewAdapterHelpr\"><a href=\"#BaseRecyclerViewAdapterHelpr\" class=\"headerlink\" title=\"BaseRecyclerViewAdapterHelpr\"></a>BaseRecyclerViewAdapterHelpr</h2><p><code>BaseRecyclerViewAdapterHelpr</code>  是一个强大而灵活的 RecyclerView Adapter ，是一个在 github 拥有 23.4 K star 的库，很多商业项目的的 adapter 都会采用它，以下简称 <code>BRVAH</code> 。 我们来探究下它是如何处理预加载方案的，通过文档查看我们发现它的加载更多的逻辑是专门有 <code>QuickAdapterHelper.kt</code> 来实现的，直接查看它的预加载方案 ：</p>\n<h4 id=\"加载上一页\"><a href=\"#加载上一页\" class=\"headerlink\" title=\"加载上一页\"></a>加载上一页</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leadingLoadStateAdapter?.let &#123;</span><br><span class=\"line\">            mAdapter.addAdapter(it)</span><br><span class=\"line\"></span><br><span class=\"line\">            firstAdapterOnViewAttachChangeListener =</span><br><span class=\"line\">                <span class=\"keyword\">object</span> : BaseQuickAdapter.OnViewAttachStateChangeListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\">                        leadingLoadStateAdapter.checkPreload(holder.bindingAdapterPosition)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.apply &#123; contentAdapter.addOnViewAttachStateChangeListener(<span class=\"keyword\">this</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加载下一页\"><a href=\"#加载下一页\" class=\"headerlink\" title=\"加载下一页\"></a>加载下一页</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trailingLoadStateAdapter?.let &#123;</span><br><span class=\"line\">            mAdapter.addAdapter(it)</span><br><span class=\"line\"></span><br><span class=\"line\">            lastAdapterOnViewAttachChangeListener =</span><br><span class=\"line\">                <span class=\"keyword\">object</span> : BaseQuickAdapter.OnViewAttachStateChangeListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewAttachedToWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\">                        trailingLoadStateAdapter.checkPreload(</span><br><span class=\"line\">                            holder.bindingAdapter?.itemCount ?: <span class=\"number\">0</span>,</span><br><span class=\"line\">                            holder.bindingAdapterPosition</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewDetachedFromWindow</span><span class=\"params\">(holder: <span class=\"type\">RecyclerView</span>.<span class=\"type\">ViewHolder</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.apply &#123; contentAdapter.addOnViewAttachStateChangeListener(<span class=\"keyword\">this</span>) &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BRVAH</code> 整体对加载的方案采用的是 <code>ConcatAdapter</code>  ，加载的头部和尾部通过独立的 adapter 来做逻辑控制，所以两部的代码基本一致，这里我们就拿加载下一页的逻辑来梳理。 <code>contentAdapter</code> 就是实际的列表 adapter ，<code>trailingLoadStateAdapter</code> 则是专门负责列表尾部逻辑处理的 adapter ，可以看到它创建了一个 <code>OnViewAttachStateChangeListener</code>   用来监听 viewHolder 的 onViewAttachedToWindow ,  其具体实现是绑定了  Adapter 的 <code>onViewAttachedToWindow</code> ，通过这个契机触发预加载监测机制。具体实现就不在深究了，我们知道它的触发契机和大致实现即可，感兴趣的可以直接去查阅对应的源码，其实际实现也并不复杂。</p>\n<p>可以看到 <code>BRVAH</code> 虽然采用了对 Adapter 进行封装处理预加载逻辑，但它并没有采用 Adpater 的 <code>onBindViewHolder</code>  当作触发契机而是采用了 <code>onViewAttachedToWindow</code>  造成这样的差异是什么，我们可以看下这两者的实际差别:</p>\n<p><code>onViewAttachedToWindow</code>方法在RecyclerView中显示一个ViewHolder时被调用。当RecyclerView需要显示一个新的ViewHolder时，它会调用Adapter的<code>onCreateViewHolder</code>方法来创建一个ViewHolder，然后将这个ViewHolder绑定到数据源中对应的数据上，最后调用ViewHolder的<code>onBindViewHolder</code>方法将数据显示在ViewHolder的视图上。这时，如果ViewHolder被成功添加到RecyclerView中，<code>onViewAttachedToWindow</code>方法就会被调用。</p>\n<p>因此，<code>onViewAttachedToWindow</code>方法在ViewHolder显示在RecyclerView上时触发，而**<code>onBindViewHolder</code>方法则是在RecyclerView需要更新ViewHolder数据时触发。</p>\n<p>从我们的业务场景出发—— 预加载的目的是通过滑动来判断用户可能有向下滑动的意图，提前补充列表数据，避免用户等待。业务场景其实并不太依赖当前视图是否真的展示在界面上了，所以这里没有用生命周期更靠前的 <strong><code>onBindViewHolder</code></strong> 而用了更靠后的 <strong><code>onViewAttachedToWindow</code></strong> 从源码角度上来看并没有得到好的解释，去查看仓库也没有相关的提交注释。只能后续看是否能联系上作者询问了</p>\n<h3 id=\"结论-2\"><a href=\"#结论-2\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>BRVAH</code> 带了新的预加载方案，虽然目前看本质上与 onBindViewHolder 类似，但是<code>BRVAH</code> 除此之外还提供了成套的解决方案，包括防止重复加载以及列表头尾的优雅处理。</p>\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>集成难度中等</li>\n<li>有较高的 star 和活跃度，出现问题的概率较小</li>\n<li>提供了成套的解决方案，避免造轮子</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>需要引入新的库，修改调整现有的 adapter</li>\n</ul>\n<h2 id=\"BRV\"><a href=\"#BRV\" class=\"headerlink\" title=\"BRV\"></a>BRV</h2><p><code>BRV</code> 是一个基于 <code>SmartRefreshLayout</code>  框架的扩展库，他在 <code>SmartRefreshLayout</code> 的基础上提供了预加载，缺省页，悬停标题等功能，号称拥有比 <code>BRVAH</code>   更强大的功能以及实用性，它的其中预加载逻辑如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 监听onBindViewHolder事件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onBindViewHolderListener = <span class=\"keyword\">object</span> : OnBindViewHolderListener &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            rv: <span class=\"type\">RecyclerView</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            adapter: <span class=\"type\">BindingAdapter</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            holder: <span class=\"type\">BindingAdapter</span>.<span class=\"type\">BindingViewHolder</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            position: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        )</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mEnableLoadMore &amp;&amp; !mFooterNoMoreData &amp;&amp;</span><br><span class=\"line\">                rv.scrollState != SCROLL_STATE_IDLE &amp;&amp;</span><br><span class=\"line\">                preloadIndex != -<span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">                (adapter.itemCount - preloadIndex &lt;= position)</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                post &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (state == RefreshState.None) &#123;</span><br><span class=\"line\">                        notifyStateChanged(RefreshState.Loading)</span><br><span class=\"line\">                        onLoadMore(<span class=\"keyword\">this</span><span class=\"symbol\">@PageRefreshLayout</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到与我们编写 onBindViewHolder 的监听逻辑基本如出一辙，通过当前的触发的　bindViewHolder position  来判断是否要触发预加载，而加载的头部和尾部则是基于 <code>SmartRefreshLayout</code>  来的，通过 ViewGruop 单独的 add 添加和 remove 掉。</p>\n<h3 id=\"结论-3\"><a href=\"#结论-3\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>BRV</code>  的预加载方案基本与我们自己基于 Adpater 的基本一致，在此基础上增加了去重处理</p>\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>提供了成套的解决方案，避免数据重复造轮子</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>集成难度复杂，依赖 <code>SmartRefreshLayout</code>  没有引入 <code>SmartRefreshLayout</code>  库的话还需要单独引入</li>\n<li>只提供了向后预加载，不支持向前预加载</li>\n</ul>\n<h2 id=\"Paging-3\"><a href=\"#Paging-3\" class=\"headerlink\" title=\"Paging 3\"></a>Paging 3</h2><p><a href=\"https://developer.android.com/topic/libraries/architecture/paging/v3-overview?hl=zh-cn#paging\">Paging 库概览  |  Android 开发者  |  Android Developers</a></p>\n<p>Paging 作为 Jetpack 的组件，专门用于加载和显示来自本地和网络中的数据页面，同样也提供了数据预加载的功能，那么作为官方的列表加载方案，它又是如何实现的。</p>\n<p><code>Paging3</code>   作为一整套的列表解决方案，它提供了分页数据的内存缓存、内置的请求重复信息删除功能 以及对刷新与重试功能的支持等等，此外， <code>paging3</code> 还大量的使用了 Flow 作为数据处理实现，功能调用栈也极深。导致代码阅读复杂较高，这里我们就只了解下 <code>Paging3</code>  预加载的契机以及判断逻辑，用于跟其他框架进行对比。</p>\n<h4 id=\"触发契机\"><a href=\"#触发契机\" class=\"headerlink\" title=\"触发契机\"></a>触发契机</h4><p>首先是触发契机，<code>Paging3</code>  提供了 <code>PagingDataAdapter</code>  作为 RecyclerView 的适配器，开发者必须使用基于它的 Adapter 来进行列表适配，<code>PagingDataAdapter</code>  内置了 diff 机制以及直接管理列表数据，列表设置和更新需要通过 <code>submitData</code> 方法，获取数据则通过 <code>getItem</code>  方法，而 <code>paging3</code> 的预加载机制则就藏匿在 <code>getItem</code>  的具体实现中，由于列表数据是完全封装起来的，调用者只能通过 <code>getItem</code> 来获取列表数据，而调用 <code>getItem</code> 往往是在 <code>onBindViewHolder</code> 时，所以 paging3 的分页触发契机也基本等同于 <code>onBindViewHolder</code> 方式</p>\n<h4 id=\"判断逻辑\"><a href=\"#判断逻辑\" class=\"headerlink\" title=\"判断逻辑\"></a>判断逻辑</h4><p><code>getItem</code> 方法触发时，paging3 会生成 <code>ViewportHint</code> 的快照，用来存储描述当前列表的状态，同时依据这些信息来判断是否要触发预加载</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Processes the hint coming from UI.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processHint</span><span class=\"params\">(viewportHint: <span class=\"type\">ViewportHint</span>)</span></span> &#123;</span><br><span class=\"line\">        state.modify(viewportHint <span class=\"keyword\">as</span>? ViewportHint.Access) &#123; prependHint, appendHint -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewportHint.shouldPrioritizeOver(</span><br><span class=\"line\">                    previous = prependHint.value,</span><br><span class=\"line\">                    loadType = PREPEND</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                prependHint.value = viewportHint</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewportHint.shouldPrioritizeOver(</span><br><span class=\"line\">                    previous = appendHint.value,</span><br><span class=\"line\">                    loadType = APPEND</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                appendHint.value = viewportHint</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>prependHint</code>, <code>appendHint</code> 本质也分别是一个 <code>Flow</code> ，当前符合预加载机制后，它们会将 <code>viewportHint</code> 发送到专门用于处理此类数据的 <code>PageFetcherSnapshot</code>  将来转换成一个刷新事件从而融入整个数据加载流程。</p>\n<p><code>Paging3</code> 的预加载机制大致就是如此，更详细的机制由于代码量太多不变深入，如果对 <code>Paging3</code> 不熟悉和感兴趣的可以放下边官方的 CodeLab 做深入了解</p>\n<h3 id=\"结论-4\"><a href=\"#结论-4\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p><code>paging3</code>  的预加载只是整个库的冰山一角，但是由此也可以看到官方也是通过 <code>onBindViewHodler</code> 作为预加载的判断契机的，给我们挑选更轻量的方案做了一定的背书</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>有完备的机制以及官方背书，出现问题的概率较小</li>\n<li>预加载还加入了锁的处理，考虑了多线程并发,完全解决了可能出现的多次请求问题。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>集成难度非常大，<code>paging3</code> 是一整套列表解决方案，需要各个层级的逻辑变更</li>\n<li>代码由 kotlin 、Flow 以及协程编写，预读和调适性教差，Java 接入不友好</li>\n</ul>\n<h3 id=\"CodeLab\"><a href=\"#CodeLab\" class=\"headerlink\" title=\"CodeLab\"></a>CodeLab</h3><p>Google 提供了两个引导文档来让开发人员快速的学习如何集成和使用 Paging 3</p>\n<p><a href=\"https://developer.android.com/codelabs/android-paging-basics?hl=zh-cn#0\">Android Paging 基础知识  |  Android Developers</a></p>\n<p><a href=\"https://developer.android.com/codelabs/android-paging?hl=zh-cn#0\">Android Paging Advanced Codelab  |  Android Developers</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实现列表预加载的过程中，选择合适的技术方案非常关键，今天我们介绍了以下几种列表预加载方案：</p>\n<ol>\n<li>使用onScrollListener技术，可以通过监听滚动事件，在滑动到指定位置之前提前加载数据，以此实现列表预加载的功能。它的实现简单，同时缺点也相当明显。</li>\n<li>使用 BindViewHolder 技术，可以在绑定 ViewHolder 时进行数据的预加载，以此提高列表数据的加载速度和用户体验。它的逻辑简单明了，也是很多解决方案的核心逻辑。如果考虑自己封装的话，那么以它为蓝本是不二之选。</li>\n<li>BRV框架是一个开源的Android列表框架，它基于<code>SmartRefreshLayout</code>  ，提供了很多常用的列表功能，包括列表预加载。BRV框架可以方便地实现列表预加载，并提供了许多其他的功能，如分组、拖拽等等。遗憾的是并不支持列表向前预加载。</li>\n<li>Paging框架是一个Android官方提供的用于实现分页加载的框架。它可以方便地实现列表预加载，同时还提供了分页加载、数据缓存等功能。</li>\n<li>BaseRecyclerViewAdapterHelper是一个轻量级的RecyclerView适配器，它可以快速地构建RecyclerView 列表，并支持列表预加载等功能。</li>\n</ol>\n<p>选择哪种方案实现列表预加载，需要根据具体的业务需求和性能要求进行综合评估和比较，从而选择最合适的方案来实现列表预加载功能。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://juejin.cn/post/6885146484791050247\">换一个思路，超简单的RecyclerView预加载 - 掘金</a></p>\n<p><a href=\"https://liangjingkanji.github.io/BRV/preload/#_1\">预加载&#x2F;预拉取 - BRV</a></p>\n<p><a href=\"https://github.com/CymChad/BaseRecyclerViewAdapterHelper\">https://github.com/CymChad/BaseRecyclerViewAdapterHelper</a></p>\n<p><a href=\"https://developer.android.com/jetpack/androidx/releases/paging?hl=zh_cn\">Paging  |  Android 开发者  |  Android Developers</a></p>\n"},{"layout":"post","title":"HTTP 权威指南阅读笔记（一）","subtitle":"HTTP 常用知识点概览","date":"2019-10-11T07:49:00.000Z","author":"rank","header_image":"img/java.jpg","catalog":true,"_content":"\n### URI\n\n**URI 是一种更通用的资源标识符，URL 实际是它的子集。URI 是一个通用的概念，由两个主要的子集 URL 和 URN 构成 ，URL 是通过描述资源的位置来标识自愿的，而 URN 则是通过名称来识别资源，与它们所处的位置无关**\n\nURN 的好处是显而易见的，但是将 URL 转换成 URN 需要进行大量的工作，在可预见的未来，英特网资源仍然会以 URL 来命名。\n\n**URL 格式**\n\n```\n<scheme>://<user>:<password>@<host><port><path>;<params>?<query>#<frag>\n```\n\n除了通用的 URL 格式外，我们生活中还用了很多常用的 Web 链接方案，它们与标准的 URL 或多或少有一些异同，下面就来介绍一下\n\n- **http** 超文本传输协议，除了没有用户名和密码之外，与通用的 URL 格式相同，如果没有指定端口，那么它的**默认端口为 80**\n\n  ```\n  格式：http://<host>:<port>/<path>?<query>#<frag>\n  范例：https://www.jianshu.com/recommendations/notes?category_id=56#9835\n\n  scheme:https\n  host: www.jianshu.com\n  port: 80\n  path: recommendations/notes\n  query:category_id=56\n  flag: 9835\n  ```\n\n- **https** 方案与 http 的唯一区别在于 https 方案使用了网景的 SSL，为 http 提供了端到端的加密机制。**默认端口 443**\n\n  ```\n  格式：http://<host>:<port>/<path>?<query>#<frag>\n  ```\n\n- **ftp** 文件传输协议 URL 可以用来从 FTP 服务器上下载或其上载文件，并获取 FTP 服务器上的目录结构内容的列表。\n\n  ```\n  格式: ftp://<user>:<password>@<host>:<port>/<path>;<params>\n  范例: ftp://anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/\n\n  scheme: ftp\n  username: anonymous\n  password：joe@joes-hardware.com\n  host: prep.ai.mit.edu\n  prot: 21\n  path: pub/gnu/\n\n  ```\n\n- **rtsp,rtspu** 是可以通过实时流传输协议解析的音视频媒体资源的标识符。方案中的 `u` 表示它是用来使用 UDP 协议获取资源的。\n\n  ```\n  格式: rtsp://<user>:<password>@<host>:<prot>/<path>\n        rtspu://<user>:<password>@<host>:<prot>/<path>\n\n  范例: rtsp://www.joes-hardware.com:554/interview/cto_video\n  ```\n\n- **file** 方案 file 表示一台指定主机上可以直接访问的文件。各字段都遵循通用格式。如果省略了主机名，就默认为正在使用的基本格式。\n\n  ```\n  格式: file://<host>/<path>\n  范例: file://OFFICE-FS/policies/casual-firdays.doc\n  ```\n\n### HTTP 报文\n\n报文的请求格式 :\n\n```\n<method> <request-RUL> <version>\n<headers>\n<entity-body>\n```\n\n报文的响应格式 :\n\n```\n<version><status><reason_phrase>\n<headers>\n<entity-body>\n```\n\n解释：\n\n- **方法（method）**\n  客户端对服务器资源执行的动作。由一个单独的单词表示。\n\n  |  方法   |                描述                | 主体部分 |\n  | :-----: | :--------------------------------: | :------: |\n  |   GET   |        从服务器获取一份文档        |    否    |\n  |  HEAD   |      只从服务器获得文档的首部      |    否    |\n  |  POST   |     向服务器发送需要处理的数据     |    是    |\n  |   PUT   |   将请求的主题部分存储在服务器上   |    是    |\n  |  TRACE  | 对可能经过代理服务器的报文进行追踪 |    否    |\n  | OPTIONS |   决定可以在服务器上执行哪些方法   |    否    |\n  | DELETE  |        从服务器删除一份文档        |    否    |\n\n* **请求 URL（request-URL）**\n  所请求资源，或者 URL 路径组件的完整 URL\n\n* **版本（version）**\n  报文所使用的 HTTP 版本 ，格式规定是这样的:\n\n  ```\n  HTTP/<major>.<minor>\n  ```\n\n  major 表示主要版本号而 minor 表示次要版本号，它们都是整数\n\n* **状态码（status-code）**\n  这三位数码描述了请求过程中发生的情况。每个状态码的第一位数都用语描述状态的一般类别（成功、出错等）\n\n  | 整体范围  | 已定义范围 |    分类    |\n  | :-------: | :--------: | :--------: |\n  | 100 ~ 199 |  100 ~101  |  信息提示  |\n  | 200 ~ 299 | 200 ~ 206  |    成功    |\n  | 300 ~ 399 | 300 ~ 305  |   重定向   |\n  | 400 ~ 499 | 400 ~ 415  | 客户端错误 |\n  | 500 ~ 599 | 500 ~ 505  | 服务器错误 |\n\n- **原因短语（reason-phrase）**\n  数字状态码的可读版本，只对人类解读有意义\n\n- **首部（header）**\n  可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号`:`然后是一个可选的空格，接着是一个值，最后是一个 CRLF。\n\n- **实体的主体部分（entity-body）**\n  包含一个任意数组组成的数据块。但并不是所有的报文都包含实体的主体部分。\n\n### 连接管理\n\n#### TCP\n\n**HTTP 和 TCP 的关联**\n\nHTTP 连接实际上就是 TCP 连接及其使用规则。 TCP 为 HTTP 提供了一条可靠的比特传输管道。从 TCP 连接一端填入的字节会从另一端以原有的顺序正确的传送出来。\n\nTCP 的数据通过名为 IP 分组（或 IP 数据报）的小数据块来发送的，按 **HTTP over TCP over IP** 这样的协议栈来传递。其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插入了一个（称为 TSL 或 SSL）密码加密层\n\n**HTTP 请求流程**\n\n1. 客户端首先根据 URL 确定 服务器 IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问，则需要通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址。\n2. 客户端向服务器发送一条 TCP 连接请求，并等待服务器回送一个请求接受应答，从而建立起一个 TCP 连接。\n   像我们常用的 okHttp 这种网络框架除了常用 的 DNS 缓存外还建立了 socket 连接池用作 TCP 连接的复用。\n3. 建立连接后客户端会通过新建立的 TCP 管道来发送 HTTP 请求，服务器收到请求并对请求经行处理。\n4. 服务器回送 HTTP 响应\n\nTCP 网络的时延取决于应减速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。以及 TCP 协议的技术复杂性也会对时延产生有巨大的影响。\n\n**TCP 具体是如何传递的**\n\n当 HTTP 要发送一条报文时，会以流的形式将报文数据的内容通过一条打开的 TCP 连接按序传输。TCP 收到数据流之后，会将数据流砍成被称作段的小数据块。并将段封装在 IP 分组中，通过因特网进行传输。所有的这些工作都是由 TCP/IP 软件来处理的，HTTP 程序员什么都看不到。\n\n每个 TCP 段都是有 IP 分组承载，从一个 IP 地址发送到另一个 IP 地址的每个分组中都包含：\n\n- 一个 IP 分组首部（通常为 20 字节）\n  包含了源和目的地的 IP 地址、长度和其他一些标记\n- 一个 TCP 段首部（通常为 20 字节）\n  包含了 TCP 端口号、TCP 控制标记，以及用于数据排序和完整性检查的一些数字值\n- 一个 TCP 数据块（0 或多个字节）\n  被分割封装的数据块\n\n#### TCP 性能优化\n\n**TCP 性能聚焦区域**\n\n- TCP 连接建立握手\n  提起 TCP 握手就很容易想到 TCP 的 三次握手和四次挥手这种耳熟能详的话语，这句话也同时证明了 TCP 的建立是多么的复杂。现在就是详细说说 TCP 是怎么三次握手和四次挥手的\n\n  1. **请求新的连接时，客户端要向服务器发送一个小的 TCP 分组。分组设置了一个特殊的标记 SYN，说明这是一个连接请求**\n  2. **如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个 TCP 分组。分组中 SYN 和 ACK(确认有效标记)都被置位，说明连接已经被接受**\n  3. **客户端收到服务器的消息后，再回送一条标记 ACK 的分组消息，发送完毕后客户端和服务器端进入连接状态，三次握手完毕**\n  4. **客户端进程发出释放报文，并停止发送数据。报文首部标记 FIN ，说明这个请求是断开连接请求**\n  5. **服务器收到释放报文，发出 ACK 确认报文。此时服务已经进入了半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端仍要接收。**\n  6. **服务器将所有数据发送完毕后，就向客户端发送 FIN 和 ACK 标记的报文确认释放**\n  7. **客户端收到释放报文后立刻发出 ACK 确认报文，此时四次挥手结束。但是客户端只是进入了 TIME_WAIT 状态，还需要经过 2MSL 的最长报文时间后才真正的结束释放 TCP 链接**\n\n  小的 HTTP 事务可能会在 TCP 建立连接上花费 50% 甚至更多的时间。\n\n- TCP 慢启动拥塞控制\n\n- 数据聚集的 Nagle 算法\n\n- 用于捎带确认的 TCP 延迟确认算法\n\n- TIME_WAIT 时延和端口耗尽\n\nTips:\n\n什么是 2MSL？\n\nMSL 是 Maximum Segment Lifetime 英文的缩写，中文可以译为 “报文最大生存时间”，他是任何报文在网络上存在的长时间，超过这个时间报文将被丢弃。RFC793 中规定 MSL 为 2 分钟，实际应用常用的是 30 秒、1 分钟和 2 分钟。2MSL 即 2 倍的 MSL 时间\n\n**持久连接**\n\n客户端经常会打开到同一个站点的连接。一个页面上的大部分资源、请求相当一部分通常都指向同一个站点。因此从，初始化了对某服务器 HTTP 请求的应用程序可能在不久的将来还会对那台服务器发起更多请求。这种性质被称作为“站点局部性”\n\n因此 HTTP/1.1（以及 HTTP/1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 任然保持在打开在状态，以便未来的 HTTP 请求重用现存的链接。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便快速进行数据的传输。\n\n持久连接分为两种类型\n\n**1. HTTP/1.0 + keep-alive 连接**\n**1996 年开始 ，很多 HTTP/1.0 浏览器和服务器都经行了扩展，以支持一种被称为 keep-alive 连接的早期实验性持久连接。这些早期的持久连接受到了一些互操作性设计方面的困扰，与之后的 HTTP/1.1 版本得到的了修正，但是至今任然还有很多实用早期的 keep-alive 连接**\n**实现 keep-alive 连接的客户端可以通过包含 connection：keep-alive 的首部请求来请求一条将要保持状态的连接，服务器如果愿意为下一条请求将连接保持在打开状态，就在响应中包含相同的首部。如果响应中没有，客户端则认为服务器不不支持 keep-alive**\n\n**需要注意的是 Keep-alive 只是请求将连接保持在活跃状态。发出 keep-alive 请求后客户端和服务端不一定会同意，它们可以随时关闭该连接。**\n\n**2. HTTP/1.1 持久连接**\n\nHTTP/1.1 逐渐停止了对 keep-alive 的支持，用一种名为持久连接（persistent connection）的改进型设计取代了它。\n\n与 keep-alive 不同，持久连接在默认情况下是激活的。除非特别指明，否则 HTTP/1.1 假定所有连接都是持久的。要在事务处理结束之后通过在报文中显式的在报文中添加一个 connection：close 首部将连接关闭。虽然设计上是这样，但是客户端和服务端仍然可以随时关闭。同时不发送 Connection：close 也不意味着服务器承诺永远将连接保持在打开状态\n\n#### 管道化连接\n\nHTTP/1.1 还允许在持久化连接上可选地使用请求管道。这是相对于 keep-alive 连接的又一性能优化。在响应达到之前，可以将多条请求放入队列。当地一条请求通过网络流向服务器时，第二条第三条也可以开始发送。在高延时网络条件下，这样可以降低网络的环回时间，提高性能。\n\n### 客户端识别与 cookie 机制\n\nHTTP 最初是一个匿名、无状态的请求/响应协议。服务器处理来自客户端的请求，然后向\n\n现代的 Web 站点希望能够提供个性化的接触。但是 HTTP 本身并不具有识别用户的能力，于是早期的 Web 站点设计者们自己创造了一些用户数识别技术。每种技术都有其优劣，大致可以分为以下几种：\n\n- 承载用户身份信息的 HTTP 首部\n- 客户端 IP 地址跟踪，通过用的 IP 地址对其进行识别\n- 用户登录，用认证方式来识别用户\n- 胖 URL，一种在 URL 中嵌入识别信息的技术\n- cookie 一种功能强大且高效持久身份识别技术\n\n#### 常用的 HTTP 首部\n\n|    首部请求     |   首部类型   |             描述             |\n| :-------------: | :----------: | :--------------------------: |\n|      From       |     请求     |         E-mail 地址          |\n|   User-Agent    |     请求     |       用户的浏览器软件       |\n|     Referer     |     请求     | 用户是从这个页面上转发过来的 |\n|  Authorization  |     请求     |         用户名和密码         |\n|    Client-IP    | 扩展（请求） |       客户端的 IP 地址       |\n| X-Forwarded-For | 扩展（请求） |      客户端端的 IP 地址      |\n|     Cookie      | 扩展（请求） |     服务器产生的 ID 标签     |\n\n**From** 首部包含了用户的 E-mail 地址。每个用户都有不同的 E-mail 地址就，所以在理想情况下，可以将这个地址作为可行的源端来识别用户。但是担心 E-mail 被恶意收集和利用，所有很少有使用和发送 From 首部\n\n**User-Agent** 首部可以将用户所有的浏览器的相关信息告知服务器，包括程序的名称和版本，通常还包含操作系统的相关信息。\n\n**Referer** 首部提供了用户来源的 URL 。Referer 首部虽然不能完全标示用户，但它却是说明了用户之前访问过哪个页面，通过它可以更好的理解用户的浏览器行为。\n\nFrom、User-Agent、Referer 三者虽然都不足以对用户进行可靠的识别，但对也对用户的行为定位起到了一定的作用，User-Agent 可以判断用户的设备，让 Web 页面做出不同的行为。Referer 可以识别用户来源来做数据分析等等。\n\n#### 客户端 IP 地址\n\n早期的 Web 先锋还尝试将客户端 IP 地址作为一种标识形式使用。如果每个用户都有不同的 IP 地址，IP 地址也很少发生变化，那么这种方法确实是可行的。但实际上通过客户端 IP 识别用户存在很多缺点，限制了将其作为用户识别技术的效能。\n\n- IP 地址描述的是客户所使用的机器，而不是用户。如果多个用户使用同一台机器，就无法对其分别了\n- 很多因特网服务区会对登录网络的用户动态分配 IP 地址。用户每次登录都会获得一个不同的 IP 地址\n- 为了提高安全性，并对稀缺的地址资源进行管理，很多用户都是通过网络地址转换防火墙来浏览网络的。这些 NAT 设备隐藏了防火墙后面时实际客户端的 IP 地址，而将其转换成了客户一个防火墙共享的 IP 地址和不同的端口号来标识\n\n#### 用户登录\n\nWeb 服务器无需被动的根据用户的 IP 地址来猜测他的身份，它可以要求用户通过用户名和密码进行认证来显示的询问用户是谁。\n\n而且为了使 Web 站点的登录更加简便，HTTP 中包含了一种内建机制，可以用 WWW-Authenticate 首部和 Authentication 首部向 Web 站点传递用户的相关信息。一旦登录浏览器就可以不断在每条发往这个站点的请你去中发送这个登录信息了。\n\n#### 胖 URL\n\n有些站点还会为每个用户生成特定的 URL 俩追踪用户的身份。通常会对真正的 URl 进行扩展，在 URL 路径的尾部添加一些状态信息来表明用户相关信息，这种修改过的 URl 就被称之为 胖 URL( fat URL)\n\n这种方式存在几个很严重的问题\n\n- 用户相关信息直接暴露在外边\n- 破坏缓存，为每个用户生成 URL 就意味着不再有可供访问的公共缓存了。\n- 无法共享 , URl 的信息附带了当前用户的个人信息，发送给其他人就意味着信息被暴露了\n- 逃逸口，用户必须严格按照流程才能正常使用，如果用户逃离此链接可能会丢失进展（信息都在 URL 中）\n\n#### Cookie\n\ncookie 是当前识别用户，实现持久会话的最好方式。前面各种技术存在的很多问题对它都没什么影响，但是通常也会将它们与那些技术公用，以实现额外的价值。\n\ncookie 定义了一些新的 HTTP 首部，同时 cookie 还影响了缓存，大多数缓存和浏览器都不会对任何 cookie 的内容进行缓存。\n\n可以将 cookie 笼统的分为两类：**会话 cookie 和持久 cookie** 。会话 cookie 是一种临时 cookie ，它记录了用户访问站点时设置的偏好和爱好。用户退出浏览器时，会话 cookie 就被删除了。持久 cookie 生存的时间会更长一些；它们存储在硬盘上，即使浏览器退出、计算机重启它们也仍然存在。通常会用持久 cookie 维护某个用户的周期性访问的站点和配置文件或登录名。它们唯一区别就是它们的过期时间。**如果 cookie 设置了 Discard 参数或者没有设置 Expires 和 Max-Age 参数来说明扩展的过期时间，这个 coookie 就是一个会话 cookie**\n\n##### cookie 是如何工作的\n\nCookie 是一种非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。cookie 由服务器生成，发送给浏览器，浏览器把 cookie 以键值对（key-value）的形式保存在目录下的文本内，下一次请求同一网站时会把该 cookie 发送给服务器，服务器就能获得发送请求的用户的状态信息。\n\n##### cookie 的传递\n\n浏览器内部的 cookie 罐中可以有成百上千个 cookie，但浏览器不会将每个 cookie 都发送给所有的站点。产生 cookie 的服务器可以想 Set-Cookie 响应首部添加一个 Domain 属性来控制哪些站点可以看到那个 cookie。比如。例如：\n\n```\nSet-Cooke:user=\"mary\";domian=\"airtravelbargains.com\"\n```\n\n之后如果用户访问的是 .airtravelbargains.com 结尾的站点，那么 `user=\"mary\"` 的这个 cookie 信息都会被发布出去\n\n同时 cookie 规范甚至允许用户将 cookie 与部分 web 站点关联起来。可以通过 `path` 属性来实现这一功能，在这个属性下列出的 URL 路径前缀下的 cookie 都是有效的\n\n例如，某个 web 服务器可能是由两个组织共享的，每个组织都有独立的 cookie。站点 www.airtravelbargains.com 可能会将部分的 web 站点用于汽车租凭——比如 http://www.airtravelbargains.om/autos/ 用一个独立的 cookie 来记录用户喜欢的汽车样式。可能会生成一个特俗汽车租凭 cookie：\n\n```\nSet-cookie:pref=compact;domian=\"airtravelbargains.com\";path=\"/autos/\"\n```\n\n如果用户访问 http://www.airtravelbargains.om/specials.html 它就只会获得这个 cookie :\n\n```\nCookie:user=“mary”\n```\n\n但如果访问 http://www.airtravelbargains.om/autos/index.html 则就会获得两个 cookie：\n\n```\nCookie:user=\"mary\"\nCookie:pref=\"compact\"\n```\n\n因此，cookie 就是服务器贴到客户端上由客户端维护的状态片段，只会回送给合适的站点。\n\n# 认证机制\n\n现在有数以亿计的人在用 web 进行私人事务处理，访问私有的数据。我们保证能方便访问的同时，且只有特定的人能够看到我们的敏感信息并且能够执行我们的特权事务。并不是所有信息都是能够公开的。\n\n因此服务器需要通过某种方式来了解用户身份。一旦服务器知道了用户身份证，就以判断用户可以访问的事务和资源了。\n\n常见的 HTTP 认证分为基本认证（base authentication）和摘要认真（digest authentication）接下来就介绍两种认证机制\n\n## 基本认证机制\n\nHTTP 提供了一个原生的质询/响应（challenge/response）框架，简化了用户的认证过程。\n\nWeb 应用程序收到一条 HTTP 请求报文时，服务器没有按照请求执行动画，而是以一个“认真质询“进行响应，要去用户提供一些保密信息来说明他是谁，从而对其进行质询。\n\n当用户再次发起请求时要附上保密证书（用户名和密码）。如果政府不匹配则产生一条错误信息。如果匹配，则可以正常请求了\n\n### 认证协议与首部\n\nHTTP 通过一组可定制的控制首部，为不同的认证协议提供了一个可扩展框架。通过人们可以随意设计一些使用 HTTP 质询/响应的新协议。\n\nHTTP 官方定义了两个协议：基本认证和摘要认证。\n\n#### 基本认证\n\n基本认证是最流行的 HTTP 认证协议。几乎每个主要的客户端和服务器都实现了基本认证机制。基本认证最初是在 HTTP/1.0 规范提出的，但此后被移到了 RFC 2617 中\n\n在基本认证中， Web 服务器可以拒绝一个事务，质询客户端，请用户提供有效的用户和密码。服务器此时会返回 401 状态码来提示客户端需要认证，客户端收到质询后，请求用户输入用户名和密码，然后将用户米和密码稍加扰码再用 Authentication 首部将信息传递给服务器验证。具体的流程如下表格：\n\n| 步骤 |        首部         |                                         描述                                         | 方法/状态        |\n| :--: | :-----------------: | :----------------------------------------------------------------------------------: | ---------------- |\n| 请求 |                     |                                第一条请求没有认证信息                                | GET              |\n| 质询 | WWW-Authentication  |              服务器用 401 状态拒绝了请求，说明需要用户提供用户名和密码               | 401 Unauthorized |\n| 授权 |   Authentication    | 客户端重新发送请求，这次会携带 Authentication 首部，内容部分用来说明算法、用户和密码 | GET              |\n| 成功 | Authentication-Info |                          如果授权正确，服务器将会把文档返回                          | 200 OK           |\n\n基本认证存简单便捷，但与此同时也存在很多的安全缺陷，只能用它防止非恶意用户无意间进行的访问，或将其配合 SSL 技术来使用。\n\n基本认证存在下列缺点：\n\n- **用户信息容易被盗取** 基本认证会通过网络发送用户名和密码，这些用户和密码只是用 Base-64 编码一下，攻击者可以很容易的获取到用户的明文用户名和密码\n- **无法抵御重放攻击** 即使用户名和密码进行了更难解码的方式加密，第三方用户任然可以捕获修改过的用户和密码，并将修改过的用户名和密码一次次的重放给服务器\n- **没有提供针对代理和中间节点的防护措施** 代理和中间节点可以不修改首部的认证信息而去修改报文的其余部分，这样就严重的改变了事务的本质\n- **无法识别恶意服务器** 基本认证只能服务器对客户端发起质询，客户端无法辨别服务器的真伪\n\n#### 摘要认证\n\n摘要认证是另一种 HTTP 认证协议，它试图修复基本认证的严重缺陷。具体来说，它进行了如下改进：\n\n- 永远不会以明文的方式在网络上发送密码\n- 可以防止恶意用户捕获并重放认证的握手过程\n- 可以有选择地防止对报文内容的篡改\n- 防范其他几种常见的攻击方式\n\n摘要认证是一种升级版的认证方式，所用首部和基本认证类似。它的简要握手机制如下：\n\n1. 服务器计算出一个随机数，并将随机数放在 WWW-Authentication 质询报文中，与之一同发送客户端的还有服务器所支持的算法列表\n2. 客户端选择一个算法，计算出密码和其他数据的摘要，其后将摘要信息放置到 Authentication 报文中发回给服务器。如果客户端还要对服务器进行认证，可以发送客户端随机数。\n3. 服务端收到摘要、选中的算法以及支持数据，计算出客户端相同的摘要。然后服务器将本地生成摘要与传送过来的数据进行比较，认证其是否匹配。如果客户端反过来通过客户端随机数对服务器机型质询，就会创建客户端摘要。\n\n摘要认证的核心就是对公共信息、保密信息和有时限的随即值这个组合进行信息摘要计算。来防止可能发生的密码窃听、认证重放以及报文内容篡改等。通常我们使用 MD5 等信息摘要算法\n\n摘要认证拥有较为完善的安全机制，但它也并不是万无一失的。它并没有对内容的安全提供任何保证——真正安全的事务只有通过 SSL 才能提供。\n\n### HTTPS\n\n随着互联网的高速发展，越来越多的人在网络上处理一些很重要的事情。但如果没有强有力的安全保证，人们就会无法安心地进处理业务。基本认证和摘要认证已经无法满足人们，人们迫切的需要一种易于管理，不但能够适应不断变化的情况还应该能满足社会和政府的各项要求。我们需要一种能够提供下列功能的 HTTP 安全技术：\n\n- 服务器认证\n- 客户端认证\n- 完整性（客户端和服务端的数据不会被篡改）\n- 加密（客户端和服务端的对话是私密的，不会被窃听）\n- 效率（一个运行足够快的算法，以便低端的客户端和服务端能够使用）\n- 普适性（大多数客户端和服务端都是直接使用）\n- 管理的可扩展性（任何地方任何人可以立刻进行安全通信）\n- 适应性（能够支持当前最知名的安全方法）\n- 在社会上的可行性（满足社会的政治需要）\n\nHTTPS 就应运而生了。它是由网景公司首创的，所有主要的浏览器和服务器都支持此协议。\n\n使用 HTTPS 时，所有的 HTTP 请求和响应数据在发送到网络之前，都要进行加密。HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL 也可以使用其后继者——传输安全层（TLS），大部分困难的编码及解码工作都是又 SSL 库中完成的，所以 Web 客户端和服务器在使用 安全 HTTP 时无需过多地修改其协议处理逻辑。\n\n#### 数字加密\n\n详细了解 HTTPS 之前，我们先介绍一些 SSL 和 HTTPS 用到的加密编程技术的背景知识。\n\n最初，人们需要自己进行编码和解码，所以起初密码是相当简单的算法。后来机械技术的发展，使得人们开始制造一些机器，这些机器可以用复杂得多的密码来传递快递、精确地对报文进行编解码，但也仍然被机械设备的速度和功能限制着，之后计算机的发展打破了这些限制，使得超大密钥成为可能。超大密钥可以从一个加密算法中产生数万亿的虚拟加密算法，由不同的密钥值来区分不同的算法。密钥越长，编码组合就越多，通过随即猜测密钥来破解代码就越困难。\n\n##### 对称加密技术\n\n很多数字加密算法都被称为对称密钥（symmetric-key）加密技术，这是应为它们在编码和解码时使用的密钥一样。\n\n在对称密钥加密技术中，发送端和接收端要共享相同的密钥 K 才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。\n\n常用的对称密钥算法包括：DES、Triple-DES、RC2 和 RC4\n\n对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，一定要有一个共享保密密钥。如果网络上的所有节点都要使用这种技术，那将是一个管理噩梦。\n\n##### 公开密钥加密技术\n\n公开密钥加密技术没有为每对主机使用单独的加密/解密密钥，而是使用了非对称密钥：一个用来对主机报文编码，另一个用来对主机报文解码。编码密钥众所周知的，但只有主机才知道私有的解密密钥。这样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更简单。但解码密钥是保密，只有接收端才能对发送给它的报文进行解码。\n\n**RSA**\n\nRSA 算法就是一个满足了所有这些条件的流行的公开密钥加密系统，它是在 MIT 发明的，后来由 RSA 数据安全公司将其商业化。即使有了公共密钥、任意一段明文、用公共密钥对明文编码之后得到的相关密文、RSA 算法自身、甚至源代码，破解代码找到相应的私有密钥的难度仍相当于对一个极大的树进行质因数分解的困难程度。\n\n##### 数字签名\n\n到目前为止，我们已经讨论了各种使用对称和非对称密钥加/解密保密报文的密钥加密技术。除了加/解密报文之外，还可以用加密系统对报文进行签名（sign），以说明是谁编写的报文，同时证明报文未被篡改过。这种技术叫做数字签名（digital signing）对下一节要讨论的英特网安全证书系统来说非常重要。\n\n数字签名是附加在报文上的特殊加密校验码。它有以下好处：\n\n- 签名可以证明作者编写了这条报文。只有作者才会有最机密私有密钥。因此只有作者才能计算出这些校验和。校验和就像来自作者的个人\"签名\"一样。\n- 签名可以防止报文被篡改。如果有恶意在报文传输过程中对其进行了修改，校验和就不再匹配了。由于校验和只有作者保密的私有密钥才能产生，所以攻击者无法为篡改了的报文伪造出正确的校验码\n\n**数字签名的认证过程**\n\n节点 A 向节点 B 发送与一条报文，它们的交互过程如下\n\n1. 节点 A 将变长报文提取为定长摘要\n2. 节点 A 对摘要应用了一个“签名”函数，这个函数会将用户的私有密钥作为参数。因为只有用户才知道私有密钥，所以正确的签名函数会说明签名者就是其所有者。\n3. 一旦计算出签名，节点 A 将其附加在报文的末尾，并将报文和签名都发送给 B\n4. 在接收端，如果节点 B 需要确定报文确实是节点 A 写的，而且没有篡改过，节点 B 就可以对签名进行检查。节点 B 接收经私有密钥扰码的签名，并应用了使用公开密钥的反函数。如果拆包后的摘要与节点 B 自己的摘要版本不匹配，要么就是报文在传输过程中被篡改了，要么就是发送端没有节点 A 的私有密钥（也就是说它不是节点 A）\n\n##### 数字证书\n\n数字证书与现实生活的 ID 卡一样，证书内的内容都是由某些受信任组织以数字方式签发的。证书一般包含证书的对象、发布者、数字签名以及公开密钥等等。任何人都能创建一个数字证书，但并不是所有人都能够获得受人尊敬的签发权，从而为证书信息担保，并用其私有密钥签发证书。\n\n通过 HTTPS 建立一个 Web 事务后，现代的浏览器都会自动获取所连接服务器的数字证书。如果没有证书，安全连接就会失败。服务器中包含很多字段，其中包括：\n\n- Web 站点的名称和主机名\n- Web 站点的公开密钥\n- 签名颁发机构的签名\n- 来自签名颁发机构的签名\n\n浏览器收到证书时会对颁发机构进行验证检查。如果这个机构是很有权威的公共签名机构，浏览器可能已经知道其公开密钥了（浏览器会预先安装很多签名颁发机构的证书），然后浏览器和服务器就开始通过数字签名来进行认证。\n\n如果它对颁发机构一无所知，浏览器就无法确定是否应该信任这个签名颁发机构，它通常提示用户，看看它是否信任这个签名发布者（例如 Chrome 中浏览不受信任的 HTTPS 链接时候，会有 X 和 ~~HTTPS://~~ 的提示来显示这是一个不安全的访问）\n\n#### HTTPS 概述\n\nHTTPS 就是在安全的传输层上发送的 HTTP 。HTTPS 没有将未加密的 HTTP 报文发送给 TCP ，并通过世界范围内的因特网进行传输。而在在将 HTTP 报文发送给 TCP 之前，先将其发送给了一个安全层，对其进行加密。目前，HTTP 安全层是通过 SSL 及其现代代替协议 TLS 来实现的。\n\n**HTTPS 方案**\n\n通常情况下，非安全的 HTTP 的 URL 方案前缀为 http :\n\n```html\nhttp://www.baidu.com/\n```\n\n在安全 HTTPS 协议中，URL 的方案前缀为 HTTPS 如下所示：\n\n```\nhttps://www.baidu.com/\n```\n\n当一个客户端对某 Web 资源执行事务时，它会去检查 URL 的方案。\n\n- 如果方案为 HTTP ，客户端就会打开一条到服务器端口 80 (默认情况下) 的连接，并向其发送老的 HTTP 命令\n- 如果方案为 HTTPS，客户端就会打开一条服务器到端口 443（默认情况下）的连接，然后与服务器“握手”。这个握手过程中它们要完成以下工作\n  - 交换协议版本号\n  - 选择一个两端都了解的密码\n  - 对两端的身份进行认证\n  - 生成临时的会话密钥，以便加密信道\n\n**服务器证书**\n\nSSL 支持双向认证，将服务器证书承载回客户端，再将客户端的证书回送给服务器。\n\n一方面浏览器并不经常使用客户端证书。大部分用户甚至没有客户端证书。服务器可以要求使用客户端证书，但实际上很少这样做。\n\n另一方面，安全 HTTPS 事务总是要求使用服务器证书的。服务器是一个显示了组织的名称、地址、服务器 DNS 域名以及其他信息的派生证书。你和你所用的客户端软件可以检查证书，以确保所有的信息都是可信的。\n\n虽然 SSL 自身并不要求用户检查 Web 服务器证书，但是大部分现代浏览器都会对证书进行简单的完整性检查，并为用户提供进行进一步彻查的手段。网景公司提出的一种 Web 服务器证书有效性算法是大部分浏览器有效性验证的基础。验证步骤如下：\n\n- 日期检测\n  首先，检查证书的起始日期和结束日期，以确保证书仍然有效\n- 签名颁发者可信度\n  每个证书都是由某些证书颁发机构（CA）签发的，它们负责为服务器担保。证书有不同的等级，每种证书都要求不同级别的背景验证。任何人都可以生成证书，但有些 CA 是非常著名的组织，它们通过非常清晰的流程来验证证书申请人的身份及商业行为的合法性。因此，浏览器会附带一个签名颁发机构的授信列表。如果浏览器收到了未知颁发机构签发的证书，那它通常会显示一条警告信息。\n- 签名检测\n  一单判定签名授权是可信的，浏览器就要对签名使用签名颁发机构的公开密钥，并将其与校验码进行比较，已查看证书的完整性。\n\n- 站点身份检测\n  为防止服务复制其他人的证书，或拦截其他人的流量，大部分浏览器都会试着去验证书中的域名与它们所对话的服务器的域名是否匹配。\n\n**OpenSSL**\n\nOpenSSL 是 SSL 和 TLS 最常见的开元实现，由一些志愿者合作开发，目前是开发一个强壮的，具有完备功能的商业级工具集，以实现 SSL 和 TLS 协议及一个全功能的通用加密库。可以从 https://www.openssl.org 上获取完整的相关信息。\n\n### 实体和编码\n\n每天都有数以亿计的各种媒体对象经由 HTTP 传送，如图像、文本、影片以及软件程序等。只要你能叫出名字，HTTP 就可以传送，不经如此，它还需要保障它的报文被正确传送、识别、提取以及适当处理。做到这一步它要确保它所承载的“货物”满足以下条件\n\n- 可以被正确识别（通过 Content-Type 首部说明媒体格式，Content-Language 说明媒体语言），以便被客户端正确识别处理\n- 可以被正确解包（Content-Length 首部来说报文长度和 Content-Encoding 说明报文转码压缩方式）\n- 是最新的（Expires、Last-modified 来说明实效时间和最后修改时间，Cache-Control 来说明缓存）\n- 符合用户的需要（基于 Accept 系列的内容协商用户所需内容）\n- 在网络上可以快速有效的传输（通过范围请求、差异编码以及其他数据压缩方法）\n- 完整到达、未被篡改（通过 Content-Range 和 Content -MD5 来验证）\n\n可以看到 HTTP 为传输报文定制了一系列相关的报文首部，这些首部平常在日常也相当常见，我们这次就来详细了解它们的功能以及如何运作的。\n\n#### 实体结构\n\n```\nHTTP/1.0 200 OK\nServer:Netscape_enterprise/3.6\nData:Sun,17 sep 2000 00:01:05 GMT\n一一一一一一一一一一一一一一一一一一一一一一一一\n|Content-Type:text/plain \t\t\t\t |\n|COntent-Lenght:18              实体首部  |\n|                                        |     实体部分\n|Hi! I`m a Message !            实体主体  |\n|一一一一一一一一一一一一一一一一一一一一一一一一\n```\n\n上文可以看出，描述 HTTP 协议之后的内容就是实体部分，实体部分又分为两部分：实体首部和实体主体，他们之间由一个空白的 CRLF 行结束。\n\n回车符（CR）和换行符（LF） 是文本文件用于标记换行的控制字符或字节码。\n\n- CR = Carriage Return，回车符号（`\\r`，十六进制 ascii 码为 `0x0D` ，十进制 ascii 码为 `13`）,用于将鼠标移动至行首，并不前前进至下一行。\n- LF = Line Feed, 换行符号（`\\n`,十六进制 ascii 码为 `0X0A`,十六进制码为 `10`)。\n\n紧邻的 CR 和 LF （组成 CRLF ，`\\r\\n`，或十六进制 `0X0D0A`）将鼠标移动到下一行行首。（Windows 操作系统默认的文本换行符为 CRLF ；Linux 以及 macOS 系统默认使用 LF）\n\n#### Content-Length\n\ncontent-length 首部指示出报文中实体主体打字节大小。这个大小是包含了所有内容编码的，比如，对文文件进行了 gzip 压缩的话，content-Lenght 首部就是压缩后打大小，而不是原始大小。\n\n除了使用了分块编码，否者 Content-Length 就是带有实体主体的报文必须使用的。使用 Content-Length 首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。\n\n#### 实体摘要\n\n尽管 HTTP 通常都是在 TCP/IP 这样可靠传输协议之上实现的，但仍有很多因素导致报文的一部分在传输过程中被修改，比如不兼容的转码、代理有误等待呢个。为了检测主体的数据的完整性，发送方可以在生成初始的主体对主体运行 MD5 算法生成一个数据的校验和，通过 Content-MD5 首部发送给接收方。\n\n除了检测完整性之外，MD5 还可以当做散列表的关键字，用来快速定位文档并消除不必要的重复内容存储。\n\n#### 媒体类型和字符集\n\nContent-Type 首部字段说明了实体主体的 MIME 类型。 MIME 类型是标准化的名字，用以说明作为货物运载实体的基本媒体类型。客户端应用程序使用 MIME 类型来解释和处理其中内容。如果实体主体部分经过内容编码的话，Content-Type 首部说明的仍然是编码之前的实体主体部分\n\nMIME 类型由一个住媒体类型（比如 text、image 或 audio 等）后面跟一条斜线以及一个子类型组成，子类型用于进一步描素媒体类型。下表中罗列一些常用的媒体类型\n\n|           媒体类型            |                            描述                            |\n| :---------------------------: | :--------------------------------------------------------: |\n|           text/html           |                         HTML 文档                          |\n|          text/plain           |                         纯文本文档                         |\n|           image/gif           |                          GIF 图像                          |\n|          image/jpeg           |                         JPEG 图像                          |\n|          audio/x-wav          |                      WAV 格式声音数据                      |\n|          model/vrml           |                       三维 VRML 模型                       |\n| application/vnd.ms-powerpoint |                          PPT 文档                          |\n|     multipart/byteranges      | 实体主体有若干部分，每部分都包含了完整文档的不同的字节范围 |\n|         message/http          |               实体主体包含了完整的 HTTP 报文               |\n\n**多部分媒体类型**\n\nMIME 中的 multipart 电子邮件报文中包含多个报文，它们合在一起作为单一的复杂报文发送。每一部分都是独立的，有各自的描述其内容的集；不同部分之间用分界字符连接在一起。\n\nHTTP 也支持多部分主体。不过，通常只用在下列两种情形之一：提交填写的表单，或是作为承载若干文档片段的范围响应。\n\n下边我们就举例介绍它们的传输格式\n\n**多部分表格提交**\n\n当提交填写的 HTTP 表格时，边长的文本字段和上传的对象都作为多部分主体里面独立的部分发送，这样表格中就可以填写各种不同类型和长度的值。\n\nHTTP 使用 Content-Type ：multipart/from-data 或 Content-Type：multipart/mixed 这样的首部以及多部分主体来发送这种请求，举例如下：\n\n```\nContent-Type：multipart/from-data ;boundary=AaB03x\n```\n\n其中 boundary 参数说明了分割主体中不同部分所用的字符串\n\n下面例子向我们展示了多表格提交的编码，假如我们有如下表格。\n\n```html\n<form\n  aciont=\"http://server.com/cgi/handle\"\n  enctype=\"multipart/form-data\"\n  method=\"post\"\n>\n  <p>What is your name?</p>\n  <input type=\"text\" ,name=\"submit-name\" /><br />\n  <p>What files are you sending?</p>\n  <input type=\"file\" name=\"files\" /><br />\n  <input type=\"submit\" value=\"send\" /><input type=\"reset\" />\n</form>\n```\n\n我们在文本中输入 “Joke” 并选择了一个文本文件“essayfile.txt” ，那么它的主体构造可能是这个样子\n\n```\nContent-Type : mutltipart/form-data;boundary=AaB03x\n--AaB03x\nContent-Disposition:form-data;name=\"submit-name\"\nJoke\n--AaB03x\nContent-Disposition:form-data;name=\"files\"；filename=\"essayfile.txt\"\nCOntent-Type:text/plain\n...contents of essayfile.txt....\n--AaB03x--\n\n```\n\n如果我们还选了了另一个图像文件 \"imagefile.gif\"，那么构造的主体可能就这个样子了\n\n```\nContent-Type:multipart/form-data;bundary=AaB03x\n--AaB03x\nContent-Disposition:form-data;name=\"submit-name\"\nJoke\n--AaB03x\nContent-Disposition:form-data;name=\"files\"\nContent-Type:multipart/mixed;boundary=BbC04y\n--BbC04y\nContent-Disposition:file;filename=\"essayfile.txt\"\nContent-Type:text/plain\n...contents of esssayfile.txt...\n--BbC04y\nContent-Disposition:file;filename=\"iamgefile.gif\"\nContent-Type:iamge/gif\nContent-Transfer-Encoding:binary\n...contents of imagefile.gif...\n--BbC04y--\n--AaB03x--\n```\n\n**多部分范围提交**\n\nHTTP 对范围请求的响应也可以使多部分的。这样的响应中有 Content-Type:mutipart/byteranges 首部和带有不同范围的多部分主体。\n","source":"_posts/2019-10-11-HTTP_The_Definitive_Guide.markdown","raw":"---\nlayout: post\ntitle: \"HTTP 权威指南阅读笔记（一）\"\nsubtitle: \"HTTP 常用知识点概览\"\ndate: 2019-10-11 15:49:00\nauthor: \"rank\"\nheader_image: \"img/java.jpg\"\ncatalog: true\ntags:\n  - HTTP\n---\n\n### URI\n\n**URI 是一种更通用的资源标识符，URL 实际是它的子集。URI 是一个通用的概念，由两个主要的子集 URL 和 URN 构成 ，URL 是通过描述资源的位置来标识自愿的，而 URN 则是通过名称来识别资源，与它们所处的位置无关**\n\nURN 的好处是显而易见的，但是将 URL 转换成 URN 需要进行大量的工作，在可预见的未来，英特网资源仍然会以 URL 来命名。\n\n**URL 格式**\n\n```\n<scheme>://<user>:<password>@<host><port><path>;<params>?<query>#<frag>\n```\n\n除了通用的 URL 格式外，我们生活中还用了很多常用的 Web 链接方案，它们与标准的 URL 或多或少有一些异同，下面就来介绍一下\n\n- **http** 超文本传输协议，除了没有用户名和密码之外，与通用的 URL 格式相同，如果没有指定端口，那么它的**默认端口为 80**\n\n  ```\n  格式：http://<host>:<port>/<path>?<query>#<frag>\n  范例：https://www.jianshu.com/recommendations/notes?category_id=56#9835\n\n  scheme:https\n  host: www.jianshu.com\n  port: 80\n  path: recommendations/notes\n  query:category_id=56\n  flag: 9835\n  ```\n\n- **https** 方案与 http 的唯一区别在于 https 方案使用了网景的 SSL，为 http 提供了端到端的加密机制。**默认端口 443**\n\n  ```\n  格式：http://<host>:<port>/<path>?<query>#<frag>\n  ```\n\n- **ftp** 文件传输协议 URL 可以用来从 FTP 服务器上下载或其上载文件，并获取 FTP 服务器上的目录结构内容的列表。\n\n  ```\n  格式: ftp://<user>:<password>@<host>:<port>/<path>;<params>\n  范例: ftp://anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/\n\n  scheme: ftp\n  username: anonymous\n  password：joe@joes-hardware.com\n  host: prep.ai.mit.edu\n  prot: 21\n  path: pub/gnu/\n\n  ```\n\n- **rtsp,rtspu** 是可以通过实时流传输协议解析的音视频媒体资源的标识符。方案中的 `u` 表示它是用来使用 UDP 协议获取资源的。\n\n  ```\n  格式: rtsp://<user>:<password>@<host>:<prot>/<path>\n        rtspu://<user>:<password>@<host>:<prot>/<path>\n\n  范例: rtsp://www.joes-hardware.com:554/interview/cto_video\n  ```\n\n- **file** 方案 file 表示一台指定主机上可以直接访问的文件。各字段都遵循通用格式。如果省略了主机名，就默认为正在使用的基本格式。\n\n  ```\n  格式: file://<host>/<path>\n  范例: file://OFFICE-FS/policies/casual-firdays.doc\n  ```\n\n### HTTP 报文\n\n报文的请求格式 :\n\n```\n<method> <request-RUL> <version>\n<headers>\n<entity-body>\n```\n\n报文的响应格式 :\n\n```\n<version><status><reason_phrase>\n<headers>\n<entity-body>\n```\n\n解释：\n\n- **方法（method）**\n  客户端对服务器资源执行的动作。由一个单独的单词表示。\n\n  |  方法   |                描述                | 主体部分 |\n  | :-----: | :--------------------------------: | :------: |\n  |   GET   |        从服务器获取一份文档        |    否    |\n  |  HEAD   |      只从服务器获得文档的首部      |    否    |\n  |  POST   |     向服务器发送需要处理的数据     |    是    |\n  |   PUT   |   将请求的主题部分存储在服务器上   |    是    |\n  |  TRACE  | 对可能经过代理服务器的报文进行追踪 |    否    |\n  | OPTIONS |   决定可以在服务器上执行哪些方法   |    否    |\n  | DELETE  |        从服务器删除一份文档        |    否    |\n\n* **请求 URL（request-URL）**\n  所请求资源，或者 URL 路径组件的完整 URL\n\n* **版本（version）**\n  报文所使用的 HTTP 版本 ，格式规定是这样的:\n\n  ```\n  HTTP/<major>.<minor>\n  ```\n\n  major 表示主要版本号而 minor 表示次要版本号，它们都是整数\n\n* **状态码（status-code）**\n  这三位数码描述了请求过程中发生的情况。每个状态码的第一位数都用语描述状态的一般类别（成功、出错等）\n\n  | 整体范围  | 已定义范围 |    分类    |\n  | :-------: | :--------: | :--------: |\n  | 100 ~ 199 |  100 ~101  |  信息提示  |\n  | 200 ~ 299 | 200 ~ 206  |    成功    |\n  | 300 ~ 399 | 300 ~ 305  |   重定向   |\n  | 400 ~ 499 | 400 ~ 415  | 客户端错误 |\n  | 500 ~ 599 | 500 ~ 505  | 服务器错误 |\n\n- **原因短语（reason-phrase）**\n  数字状态码的可读版本，只对人类解读有意义\n\n- **首部（header）**\n  可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号`:`然后是一个可选的空格，接着是一个值，最后是一个 CRLF。\n\n- **实体的主体部分（entity-body）**\n  包含一个任意数组组成的数据块。但并不是所有的报文都包含实体的主体部分。\n\n### 连接管理\n\n#### TCP\n\n**HTTP 和 TCP 的关联**\n\nHTTP 连接实际上就是 TCP 连接及其使用规则。 TCP 为 HTTP 提供了一条可靠的比特传输管道。从 TCP 连接一端填入的字节会从另一端以原有的顺序正确的传送出来。\n\nTCP 的数据通过名为 IP 分组（或 IP 数据报）的小数据块来发送的，按 **HTTP over TCP over IP** 这样的协议栈来传递。其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插入了一个（称为 TSL 或 SSL）密码加密层\n\n**HTTP 请求流程**\n\n1. 客户端首先根据 URL 确定 服务器 IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问，则需要通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址。\n2. 客户端向服务器发送一条 TCP 连接请求，并等待服务器回送一个请求接受应答，从而建立起一个 TCP 连接。\n   像我们常用的 okHttp 这种网络框架除了常用 的 DNS 缓存外还建立了 socket 连接池用作 TCP 连接的复用。\n3. 建立连接后客户端会通过新建立的 TCP 管道来发送 HTTP 请求，服务器收到请求并对请求经行处理。\n4. 服务器回送 HTTP 响应\n\nTCP 网络的时延取决于应减速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。以及 TCP 协议的技术复杂性也会对时延产生有巨大的影响。\n\n**TCP 具体是如何传递的**\n\n当 HTTP 要发送一条报文时，会以流的形式将报文数据的内容通过一条打开的 TCP 连接按序传输。TCP 收到数据流之后，会将数据流砍成被称作段的小数据块。并将段封装在 IP 分组中，通过因特网进行传输。所有的这些工作都是由 TCP/IP 软件来处理的，HTTP 程序员什么都看不到。\n\n每个 TCP 段都是有 IP 分组承载，从一个 IP 地址发送到另一个 IP 地址的每个分组中都包含：\n\n- 一个 IP 分组首部（通常为 20 字节）\n  包含了源和目的地的 IP 地址、长度和其他一些标记\n- 一个 TCP 段首部（通常为 20 字节）\n  包含了 TCP 端口号、TCP 控制标记，以及用于数据排序和完整性检查的一些数字值\n- 一个 TCP 数据块（0 或多个字节）\n  被分割封装的数据块\n\n#### TCP 性能优化\n\n**TCP 性能聚焦区域**\n\n- TCP 连接建立握手\n  提起 TCP 握手就很容易想到 TCP 的 三次握手和四次挥手这种耳熟能详的话语，这句话也同时证明了 TCP 的建立是多么的复杂。现在就是详细说说 TCP 是怎么三次握手和四次挥手的\n\n  1. **请求新的连接时，客户端要向服务器发送一个小的 TCP 分组。分组设置了一个特殊的标记 SYN，说明这是一个连接请求**\n  2. **如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个 TCP 分组。分组中 SYN 和 ACK(确认有效标记)都被置位，说明连接已经被接受**\n  3. **客户端收到服务器的消息后，再回送一条标记 ACK 的分组消息，发送完毕后客户端和服务器端进入连接状态，三次握手完毕**\n  4. **客户端进程发出释放报文，并停止发送数据。报文首部标记 FIN ，说明这个请求是断开连接请求**\n  5. **服务器收到释放报文，发出 ACK 确认报文。此时服务已经进入了半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端仍要接收。**\n  6. **服务器将所有数据发送完毕后，就向客户端发送 FIN 和 ACK 标记的报文确认释放**\n  7. **客户端收到释放报文后立刻发出 ACK 确认报文，此时四次挥手结束。但是客户端只是进入了 TIME_WAIT 状态，还需要经过 2MSL 的最长报文时间后才真正的结束释放 TCP 链接**\n\n  小的 HTTP 事务可能会在 TCP 建立连接上花费 50% 甚至更多的时间。\n\n- TCP 慢启动拥塞控制\n\n- 数据聚集的 Nagle 算法\n\n- 用于捎带确认的 TCP 延迟确认算法\n\n- TIME_WAIT 时延和端口耗尽\n\nTips:\n\n什么是 2MSL？\n\nMSL 是 Maximum Segment Lifetime 英文的缩写，中文可以译为 “报文最大生存时间”，他是任何报文在网络上存在的长时间，超过这个时间报文将被丢弃。RFC793 中规定 MSL 为 2 分钟，实际应用常用的是 30 秒、1 分钟和 2 分钟。2MSL 即 2 倍的 MSL 时间\n\n**持久连接**\n\n客户端经常会打开到同一个站点的连接。一个页面上的大部分资源、请求相当一部分通常都指向同一个站点。因此从，初始化了对某服务器 HTTP 请求的应用程序可能在不久的将来还会对那台服务器发起更多请求。这种性质被称作为“站点局部性”\n\n因此 HTTP/1.1（以及 HTTP/1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 任然保持在打开在状态，以便未来的 HTTP 请求重用现存的链接。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便快速进行数据的传输。\n\n持久连接分为两种类型\n\n**1. HTTP/1.0 + keep-alive 连接**\n**1996 年开始 ，很多 HTTP/1.0 浏览器和服务器都经行了扩展，以支持一种被称为 keep-alive 连接的早期实验性持久连接。这些早期的持久连接受到了一些互操作性设计方面的困扰，与之后的 HTTP/1.1 版本得到的了修正，但是至今任然还有很多实用早期的 keep-alive 连接**\n**实现 keep-alive 连接的客户端可以通过包含 connection：keep-alive 的首部请求来请求一条将要保持状态的连接，服务器如果愿意为下一条请求将连接保持在打开状态，就在响应中包含相同的首部。如果响应中没有，客户端则认为服务器不不支持 keep-alive**\n\n**需要注意的是 Keep-alive 只是请求将连接保持在活跃状态。发出 keep-alive 请求后客户端和服务端不一定会同意，它们可以随时关闭该连接。**\n\n**2. HTTP/1.1 持久连接**\n\nHTTP/1.1 逐渐停止了对 keep-alive 的支持，用一种名为持久连接（persistent connection）的改进型设计取代了它。\n\n与 keep-alive 不同，持久连接在默认情况下是激活的。除非特别指明，否则 HTTP/1.1 假定所有连接都是持久的。要在事务处理结束之后通过在报文中显式的在报文中添加一个 connection：close 首部将连接关闭。虽然设计上是这样，但是客户端和服务端仍然可以随时关闭。同时不发送 Connection：close 也不意味着服务器承诺永远将连接保持在打开状态\n\n#### 管道化连接\n\nHTTP/1.1 还允许在持久化连接上可选地使用请求管道。这是相对于 keep-alive 连接的又一性能优化。在响应达到之前，可以将多条请求放入队列。当地一条请求通过网络流向服务器时，第二条第三条也可以开始发送。在高延时网络条件下，这样可以降低网络的环回时间，提高性能。\n\n### 客户端识别与 cookie 机制\n\nHTTP 最初是一个匿名、无状态的请求/响应协议。服务器处理来自客户端的请求，然后向\n\n现代的 Web 站点希望能够提供个性化的接触。但是 HTTP 本身并不具有识别用户的能力，于是早期的 Web 站点设计者们自己创造了一些用户数识别技术。每种技术都有其优劣，大致可以分为以下几种：\n\n- 承载用户身份信息的 HTTP 首部\n- 客户端 IP 地址跟踪，通过用的 IP 地址对其进行识别\n- 用户登录，用认证方式来识别用户\n- 胖 URL，一种在 URL 中嵌入识别信息的技术\n- cookie 一种功能强大且高效持久身份识别技术\n\n#### 常用的 HTTP 首部\n\n|    首部请求     |   首部类型   |             描述             |\n| :-------------: | :----------: | :--------------------------: |\n|      From       |     请求     |         E-mail 地址          |\n|   User-Agent    |     请求     |       用户的浏览器软件       |\n|     Referer     |     请求     | 用户是从这个页面上转发过来的 |\n|  Authorization  |     请求     |         用户名和密码         |\n|    Client-IP    | 扩展（请求） |       客户端的 IP 地址       |\n| X-Forwarded-For | 扩展（请求） |      客户端端的 IP 地址      |\n|     Cookie      | 扩展（请求） |     服务器产生的 ID 标签     |\n\n**From** 首部包含了用户的 E-mail 地址。每个用户都有不同的 E-mail 地址就，所以在理想情况下，可以将这个地址作为可行的源端来识别用户。但是担心 E-mail 被恶意收集和利用，所有很少有使用和发送 From 首部\n\n**User-Agent** 首部可以将用户所有的浏览器的相关信息告知服务器，包括程序的名称和版本，通常还包含操作系统的相关信息。\n\n**Referer** 首部提供了用户来源的 URL 。Referer 首部虽然不能完全标示用户，但它却是说明了用户之前访问过哪个页面，通过它可以更好的理解用户的浏览器行为。\n\nFrom、User-Agent、Referer 三者虽然都不足以对用户进行可靠的识别，但对也对用户的行为定位起到了一定的作用，User-Agent 可以判断用户的设备，让 Web 页面做出不同的行为。Referer 可以识别用户来源来做数据分析等等。\n\n#### 客户端 IP 地址\n\n早期的 Web 先锋还尝试将客户端 IP 地址作为一种标识形式使用。如果每个用户都有不同的 IP 地址，IP 地址也很少发生变化，那么这种方法确实是可行的。但实际上通过客户端 IP 识别用户存在很多缺点，限制了将其作为用户识别技术的效能。\n\n- IP 地址描述的是客户所使用的机器，而不是用户。如果多个用户使用同一台机器，就无法对其分别了\n- 很多因特网服务区会对登录网络的用户动态分配 IP 地址。用户每次登录都会获得一个不同的 IP 地址\n- 为了提高安全性，并对稀缺的地址资源进行管理，很多用户都是通过网络地址转换防火墙来浏览网络的。这些 NAT 设备隐藏了防火墙后面时实际客户端的 IP 地址，而将其转换成了客户一个防火墙共享的 IP 地址和不同的端口号来标识\n\n#### 用户登录\n\nWeb 服务器无需被动的根据用户的 IP 地址来猜测他的身份，它可以要求用户通过用户名和密码进行认证来显示的询问用户是谁。\n\n而且为了使 Web 站点的登录更加简便，HTTP 中包含了一种内建机制，可以用 WWW-Authenticate 首部和 Authentication 首部向 Web 站点传递用户的相关信息。一旦登录浏览器就可以不断在每条发往这个站点的请你去中发送这个登录信息了。\n\n#### 胖 URL\n\n有些站点还会为每个用户生成特定的 URL 俩追踪用户的身份。通常会对真正的 URl 进行扩展，在 URL 路径的尾部添加一些状态信息来表明用户相关信息，这种修改过的 URl 就被称之为 胖 URL( fat URL)\n\n这种方式存在几个很严重的问题\n\n- 用户相关信息直接暴露在外边\n- 破坏缓存，为每个用户生成 URL 就意味着不再有可供访问的公共缓存了。\n- 无法共享 , URl 的信息附带了当前用户的个人信息，发送给其他人就意味着信息被暴露了\n- 逃逸口，用户必须严格按照流程才能正常使用，如果用户逃离此链接可能会丢失进展（信息都在 URL 中）\n\n#### Cookie\n\ncookie 是当前识别用户，实现持久会话的最好方式。前面各种技术存在的很多问题对它都没什么影响，但是通常也会将它们与那些技术公用，以实现额外的价值。\n\ncookie 定义了一些新的 HTTP 首部，同时 cookie 还影响了缓存，大多数缓存和浏览器都不会对任何 cookie 的内容进行缓存。\n\n可以将 cookie 笼统的分为两类：**会话 cookie 和持久 cookie** 。会话 cookie 是一种临时 cookie ，它记录了用户访问站点时设置的偏好和爱好。用户退出浏览器时，会话 cookie 就被删除了。持久 cookie 生存的时间会更长一些；它们存储在硬盘上，即使浏览器退出、计算机重启它们也仍然存在。通常会用持久 cookie 维护某个用户的周期性访问的站点和配置文件或登录名。它们唯一区别就是它们的过期时间。**如果 cookie 设置了 Discard 参数或者没有设置 Expires 和 Max-Age 参数来说明扩展的过期时间，这个 coookie 就是一个会话 cookie**\n\n##### cookie 是如何工作的\n\nCookie 是一种非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。cookie 由服务器生成，发送给浏览器，浏览器把 cookie 以键值对（key-value）的形式保存在目录下的文本内，下一次请求同一网站时会把该 cookie 发送给服务器，服务器就能获得发送请求的用户的状态信息。\n\n##### cookie 的传递\n\n浏览器内部的 cookie 罐中可以有成百上千个 cookie，但浏览器不会将每个 cookie 都发送给所有的站点。产生 cookie 的服务器可以想 Set-Cookie 响应首部添加一个 Domain 属性来控制哪些站点可以看到那个 cookie。比如。例如：\n\n```\nSet-Cooke:user=\"mary\";domian=\"airtravelbargains.com\"\n```\n\n之后如果用户访问的是 .airtravelbargains.com 结尾的站点，那么 `user=\"mary\"` 的这个 cookie 信息都会被发布出去\n\n同时 cookie 规范甚至允许用户将 cookie 与部分 web 站点关联起来。可以通过 `path` 属性来实现这一功能，在这个属性下列出的 URL 路径前缀下的 cookie 都是有效的\n\n例如，某个 web 服务器可能是由两个组织共享的，每个组织都有独立的 cookie。站点 www.airtravelbargains.com 可能会将部分的 web 站点用于汽车租凭——比如 http://www.airtravelbargains.om/autos/ 用一个独立的 cookie 来记录用户喜欢的汽车样式。可能会生成一个特俗汽车租凭 cookie：\n\n```\nSet-cookie:pref=compact;domian=\"airtravelbargains.com\";path=\"/autos/\"\n```\n\n如果用户访问 http://www.airtravelbargains.om/specials.html 它就只会获得这个 cookie :\n\n```\nCookie:user=“mary”\n```\n\n但如果访问 http://www.airtravelbargains.om/autos/index.html 则就会获得两个 cookie：\n\n```\nCookie:user=\"mary\"\nCookie:pref=\"compact\"\n```\n\n因此，cookie 就是服务器贴到客户端上由客户端维护的状态片段，只会回送给合适的站点。\n\n# 认证机制\n\n现在有数以亿计的人在用 web 进行私人事务处理，访问私有的数据。我们保证能方便访问的同时，且只有特定的人能够看到我们的敏感信息并且能够执行我们的特权事务。并不是所有信息都是能够公开的。\n\n因此服务器需要通过某种方式来了解用户身份。一旦服务器知道了用户身份证，就以判断用户可以访问的事务和资源了。\n\n常见的 HTTP 认证分为基本认证（base authentication）和摘要认真（digest authentication）接下来就介绍两种认证机制\n\n## 基本认证机制\n\nHTTP 提供了一个原生的质询/响应（challenge/response）框架，简化了用户的认证过程。\n\nWeb 应用程序收到一条 HTTP 请求报文时，服务器没有按照请求执行动画，而是以一个“认真质询“进行响应，要去用户提供一些保密信息来说明他是谁，从而对其进行质询。\n\n当用户再次发起请求时要附上保密证书（用户名和密码）。如果政府不匹配则产生一条错误信息。如果匹配，则可以正常请求了\n\n### 认证协议与首部\n\nHTTP 通过一组可定制的控制首部，为不同的认证协议提供了一个可扩展框架。通过人们可以随意设计一些使用 HTTP 质询/响应的新协议。\n\nHTTP 官方定义了两个协议：基本认证和摘要认证。\n\n#### 基本认证\n\n基本认证是最流行的 HTTP 认证协议。几乎每个主要的客户端和服务器都实现了基本认证机制。基本认证最初是在 HTTP/1.0 规范提出的，但此后被移到了 RFC 2617 中\n\n在基本认证中， Web 服务器可以拒绝一个事务，质询客户端，请用户提供有效的用户和密码。服务器此时会返回 401 状态码来提示客户端需要认证，客户端收到质询后，请求用户输入用户名和密码，然后将用户米和密码稍加扰码再用 Authentication 首部将信息传递给服务器验证。具体的流程如下表格：\n\n| 步骤 |        首部         |                                         描述                                         | 方法/状态        |\n| :--: | :-----------------: | :----------------------------------------------------------------------------------: | ---------------- |\n| 请求 |                     |                                第一条请求没有认证信息                                | GET              |\n| 质询 | WWW-Authentication  |              服务器用 401 状态拒绝了请求，说明需要用户提供用户名和密码               | 401 Unauthorized |\n| 授权 |   Authentication    | 客户端重新发送请求，这次会携带 Authentication 首部，内容部分用来说明算法、用户和密码 | GET              |\n| 成功 | Authentication-Info |                          如果授权正确，服务器将会把文档返回                          | 200 OK           |\n\n基本认证存简单便捷，但与此同时也存在很多的安全缺陷，只能用它防止非恶意用户无意间进行的访问，或将其配合 SSL 技术来使用。\n\n基本认证存在下列缺点：\n\n- **用户信息容易被盗取** 基本认证会通过网络发送用户名和密码，这些用户和密码只是用 Base-64 编码一下，攻击者可以很容易的获取到用户的明文用户名和密码\n- **无法抵御重放攻击** 即使用户名和密码进行了更难解码的方式加密，第三方用户任然可以捕获修改过的用户和密码，并将修改过的用户名和密码一次次的重放给服务器\n- **没有提供针对代理和中间节点的防护措施** 代理和中间节点可以不修改首部的认证信息而去修改报文的其余部分，这样就严重的改变了事务的本质\n- **无法识别恶意服务器** 基本认证只能服务器对客户端发起质询，客户端无法辨别服务器的真伪\n\n#### 摘要认证\n\n摘要认证是另一种 HTTP 认证协议，它试图修复基本认证的严重缺陷。具体来说，它进行了如下改进：\n\n- 永远不会以明文的方式在网络上发送密码\n- 可以防止恶意用户捕获并重放认证的握手过程\n- 可以有选择地防止对报文内容的篡改\n- 防范其他几种常见的攻击方式\n\n摘要认证是一种升级版的认证方式，所用首部和基本认证类似。它的简要握手机制如下：\n\n1. 服务器计算出一个随机数，并将随机数放在 WWW-Authentication 质询报文中，与之一同发送客户端的还有服务器所支持的算法列表\n2. 客户端选择一个算法，计算出密码和其他数据的摘要，其后将摘要信息放置到 Authentication 报文中发回给服务器。如果客户端还要对服务器进行认证，可以发送客户端随机数。\n3. 服务端收到摘要、选中的算法以及支持数据，计算出客户端相同的摘要。然后服务器将本地生成摘要与传送过来的数据进行比较，认证其是否匹配。如果客户端反过来通过客户端随机数对服务器机型质询，就会创建客户端摘要。\n\n摘要认证的核心就是对公共信息、保密信息和有时限的随即值这个组合进行信息摘要计算。来防止可能发生的密码窃听、认证重放以及报文内容篡改等。通常我们使用 MD5 等信息摘要算法\n\n摘要认证拥有较为完善的安全机制，但它也并不是万无一失的。它并没有对内容的安全提供任何保证——真正安全的事务只有通过 SSL 才能提供。\n\n### HTTPS\n\n随着互联网的高速发展，越来越多的人在网络上处理一些很重要的事情。但如果没有强有力的安全保证，人们就会无法安心地进处理业务。基本认证和摘要认证已经无法满足人们，人们迫切的需要一种易于管理，不但能够适应不断变化的情况还应该能满足社会和政府的各项要求。我们需要一种能够提供下列功能的 HTTP 安全技术：\n\n- 服务器认证\n- 客户端认证\n- 完整性（客户端和服务端的数据不会被篡改）\n- 加密（客户端和服务端的对话是私密的，不会被窃听）\n- 效率（一个运行足够快的算法，以便低端的客户端和服务端能够使用）\n- 普适性（大多数客户端和服务端都是直接使用）\n- 管理的可扩展性（任何地方任何人可以立刻进行安全通信）\n- 适应性（能够支持当前最知名的安全方法）\n- 在社会上的可行性（满足社会的政治需要）\n\nHTTPS 就应运而生了。它是由网景公司首创的，所有主要的浏览器和服务器都支持此协议。\n\n使用 HTTPS 时，所有的 HTTP 请求和响应数据在发送到网络之前，都要进行加密。HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL 也可以使用其后继者——传输安全层（TLS），大部分困难的编码及解码工作都是又 SSL 库中完成的，所以 Web 客户端和服务器在使用 安全 HTTP 时无需过多地修改其协议处理逻辑。\n\n#### 数字加密\n\n详细了解 HTTPS 之前，我们先介绍一些 SSL 和 HTTPS 用到的加密编程技术的背景知识。\n\n最初，人们需要自己进行编码和解码，所以起初密码是相当简单的算法。后来机械技术的发展，使得人们开始制造一些机器，这些机器可以用复杂得多的密码来传递快递、精确地对报文进行编解码，但也仍然被机械设备的速度和功能限制着，之后计算机的发展打破了这些限制，使得超大密钥成为可能。超大密钥可以从一个加密算法中产生数万亿的虚拟加密算法，由不同的密钥值来区分不同的算法。密钥越长，编码组合就越多，通过随即猜测密钥来破解代码就越困难。\n\n##### 对称加密技术\n\n很多数字加密算法都被称为对称密钥（symmetric-key）加密技术，这是应为它们在编码和解码时使用的密钥一样。\n\n在对称密钥加密技术中，发送端和接收端要共享相同的密钥 K 才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。\n\n常用的对称密钥算法包括：DES、Triple-DES、RC2 和 RC4\n\n对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，一定要有一个共享保密密钥。如果网络上的所有节点都要使用这种技术，那将是一个管理噩梦。\n\n##### 公开密钥加密技术\n\n公开密钥加密技术没有为每对主机使用单独的加密/解密密钥，而是使用了非对称密钥：一个用来对主机报文编码，另一个用来对主机报文解码。编码密钥众所周知的，但只有主机才知道私有的解密密钥。这样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更简单。但解码密钥是保密，只有接收端才能对发送给它的报文进行解码。\n\n**RSA**\n\nRSA 算法就是一个满足了所有这些条件的流行的公开密钥加密系统，它是在 MIT 发明的，后来由 RSA 数据安全公司将其商业化。即使有了公共密钥、任意一段明文、用公共密钥对明文编码之后得到的相关密文、RSA 算法自身、甚至源代码，破解代码找到相应的私有密钥的难度仍相当于对一个极大的树进行质因数分解的困难程度。\n\n##### 数字签名\n\n到目前为止，我们已经讨论了各种使用对称和非对称密钥加/解密保密报文的密钥加密技术。除了加/解密报文之外，还可以用加密系统对报文进行签名（sign），以说明是谁编写的报文，同时证明报文未被篡改过。这种技术叫做数字签名（digital signing）对下一节要讨论的英特网安全证书系统来说非常重要。\n\n数字签名是附加在报文上的特殊加密校验码。它有以下好处：\n\n- 签名可以证明作者编写了这条报文。只有作者才会有最机密私有密钥。因此只有作者才能计算出这些校验和。校验和就像来自作者的个人\"签名\"一样。\n- 签名可以防止报文被篡改。如果有恶意在报文传输过程中对其进行了修改，校验和就不再匹配了。由于校验和只有作者保密的私有密钥才能产生，所以攻击者无法为篡改了的报文伪造出正确的校验码\n\n**数字签名的认证过程**\n\n节点 A 向节点 B 发送与一条报文，它们的交互过程如下\n\n1. 节点 A 将变长报文提取为定长摘要\n2. 节点 A 对摘要应用了一个“签名”函数，这个函数会将用户的私有密钥作为参数。因为只有用户才知道私有密钥，所以正确的签名函数会说明签名者就是其所有者。\n3. 一旦计算出签名，节点 A 将其附加在报文的末尾，并将报文和签名都发送给 B\n4. 在接收端，如果节点 B 需要确定报文确实是节点 A 写的，而且没有篡改过，节点 B 就可以对签名进行检查。节点 B 接收经私有密钥扰码的签名，并应用了使用公开密钥的反函数。如果拆包后的摘要与节点 B 自己的摘要版本不匹配，要么就是报文在传输过程中被篡改了，要么就是发送端没有节点 A 的私有密钥（也就是说它不是节点 A）\n\n##### 数字证书\n\n数字证书与现实生活的 ID 卡一样，证书内的内容都是由某些受信任组织以数字方式签发的。证书一般包含证书的对象、发布者、数字签名以及公开密钥等等。任何人都能创建一个数字证书，但并不是所有人都能够获得受人尊敬的签发权，从而为证书信息担保，并用其私有密钥签发证书。\n\n通过 HTTPS 建立一个 Web 事务后，现代的浏览器都会自动获取所连接服务器的数字证书。如果没有证书，安全连接就会失败。服务器中包含很多字段，其中包括：\n\n- Web 站点的名称和主机名\n- Web 站点的公开密钥\n- 签名颁发机构的签名\n- 来自签名颁发机构的签名\n\n浏览器收到证书时会对颁发机构进行验证检查。如果这个机构是很有权威的公共签名机构，浏览器可能已经知道其公开密钥了（浏览器会预先安装很多签名颁发机构的证书），然后浏览器和服务器就开始通过数字签名来进行认证。\n\n如果它对颁发机构一无所知，浏览器就无法确定是否应该信任这个签名颁发机构，它通常提示用户，看看它是否信任这个签名发布者（例如 Chrome 中浏览不受信任的 HTTPS 链接时候，会有 X 和 ~~HTTPS://~~ 的提示来显示这是一个不安全的访问）\n\n#### HTTPS 概述\n\nHTTPS 就是在安全的传输层上发送的 HTTP 。HTTPS 没有将未加密的 HTTP 报文发送给 TCP ，并通过世界范围内的因特网进行传输。而在在将 HTTP 报文发送给 TCP 之前，先将其发送给了一个安全层，对其进行加密。目前，HTTP 安全层是通过 SSL 及其现代代替协议 TLS 来实现的。\n\n**HTTPS 方案**\n\n通常情况下，非安全的 HTTP 的 URL 方案前缀为 http :\n\n```html\nhttp://www.baidu.com/\n```\n\n在安全 HTTPS 协议中，URL 的方案前缀为 HTTPS 如下所示：\n\n```\nhttps://www.baidu.com/\n```\n\n当一个客户端对某 Web 资源执行事务时，它会去检查 URL 的方案。\n\n- 如果方案为 HTTP ，客户端就会打开一条到服务器端口 80 (默认情况下) 的连接，并向其发送老的 HTTP 命令\n- 如果方案为 HTTPS，客户端就会打开一条服务器到端口 443（默认情况下）的连接，然后与服务器“握手”。这个握手过程中它们要完成以下工作\n  - 交换协议版本号\n  - 选择一个两端都了解的密码\n  - 对两端的身份进行认证\n  - 生成临时的会话密钥，以便加密信道\n\n**服务器证书**\n\nSSL 支持双向认证，将服务器证书承载回客户端，再将客户端的证书回送给服务器。\n\n一方面浏览器并不经常使用客户端证书。大部分用户甚至没有客户端证书。服务器可以要求使用客户端证书，但实际上很少这样做。\n\n另一方面，安全 HTTPS 事务总是要求使用服务器证书的。服务器是一个显示了组织的名称、地址、服务器 DNS 域名以及其他信息的派生证书。你和你所用的客户端软件可以检查证书，以确保所有的信息都是可信的。\n\n虽然 SSL 自身并不要求用户检查 Web 服务器证书，但是大部分现代浏览器都会对证书进行简单的完整性检查，并为用户提供进行进一步彻查的手段。网景公司提出的一种 Web 服务器证书有效性算法是大部分浏览器有效性验证的基础。验证步骤如下：\n\n- 日期检测\n  首先，检查证书的起始日期和结束日期，以确保证书仍然有效\n- 签名颁发者可信度\n  每个证书都是由某些证书颁发机构（CA）签发的，它们负责为服务器担保。证书有不同的等级，每种证书都要求不同级别的背景验证。任何人都可以生成证书，但有些 CA 是非常著名的组织，它们通过非常清晰的流程来验证证书申请人的身份及商业行为的合法性。因此，浏览器会附带一个签名颁发机构的授信列表。如果浏览器收到了未知颁发机构签发的证书，那它通常会显示一条警告信息。\n- 签名检测\n  一单判定签名授权是可信的，浏览器就要对签名使用签名颁发机构的公开密钥，并将其与校验码进行比较，已查看证书的完整性。\n\n- 站点身份检测\n  为防止服务复制其他人的证书，或拦截其他人的流量，大部分浏览器都会试着去验证书中的域名与它们所对话的服务器的域名是否匹配。\n\n**OpenSSL**\n\nOpenSSL 是 SSL 和 TLS 最常见的开元实现，由一些志愿者合作开发，目前是开发一个强壮的，具有完备功能的商业级工具集，以实现 SSL 和 TLS 协议及一个全功能的通用加密库。可以从 https://www.openssl.org 上获取完整的相关信息。\n\n### 实体和编码\n\n每天都有数以亿计的各种媒体对象经由 HTTP 传送，如图像、文本、影片以及软件程序等。只要你能叫出名字，HTTP 就可以传送，不经如此，它还需要保障它的报文被正确传送、识别、提取以及适当处理。做到这一步它要确保它所承载的“货物”满足以下条件\n\n- 可以被正确识别（通过 Content-Type 首部说明媒体格式，Content-Language 说明媒体语言），以便被客户端正确识别处理\n- 可以被正确解包（Content-Length 首部来说报文长度和 Content-Encoding 说明报文转码压缩方式）\n- 是最新的（Expires、Last-modified 来说明实效时间和最后修改时间，Cache-Control 来说明缓存）\n- 符合用户的需要（基于 Accept 系列的内容协商用户所需内容）\n- 在网络上可以快速有效的传输（通过范围请求、差异编码以及其他数据压缩方法）\n- 完整到达、未被篡改（通过 Content-Range 和 Content -MD5 来验证）\n\n可以看到 HTTP 为传输报文定制了一系列相关的报文首部，这些首部平常在日常也相当常见，我们这次就来详细了解它们的功能以及如何运作的。\n\n#### 实体结构\n\n```\nHTTP/1.0 200 OK\nServer:Netscape_enterprise/3.6\nData:Sun,17 sep 2000 00:01:05 GMT\n一一一一一一一一一一一一一一一一一一一一一一一一\n|Content-Type:text/plain \t\t\t\t |\n|COntent-Lenght:18              实体首部  |\n|                                        |     实体部分\n|Hi! I`m a Message !            实体主体  |\n|一一一一一一一一一一一一一一一一一一一一一一一一\n```\n\n上文可以看出，描述 HTTP 协议之后的内容就是实体部分，实体部分又分为两部分：实体首部和实体主体，他们之间由一个空白的 CRLF 行结束。\n\n回车符（CR）和换行符（LF） 是文本文件用于标记换行的控制字符或字节码。\n\n- CR = Carriage Return，回车符号（`\\r`，十六进制 ascii 码为 `0x0D` ，十进制 ascii 码为 `13`）,用于将鼠标移动至行首，并不前前进至下一行。\n- LF = Line Feed, 换行符号（`\\n`,十六进制 ascii 码为 `0X0A`,十六进制码为 `10`)。\n\n紧邻的 CR 和 LF （组成 CRLF ，`\\r\\n`，或十六进制 `0X0D0A`）将鼠标移动到下一行行首。（Windows 操作系统默认的文本换行符为 CRLF ；Linux 以及 macOS 系统默认使用 LF）\n\n#### Content-Length\n\ncontent-length 首部指示出报文中实体主体打字节大小。这个大小是包含了所有内容编码的，比如，对文文件进行了 gzip 压缩的话，content-Lenght 首部就是压缩后打大小，而不是原始大小。\n\n除了使用了分块编码，否者 Content-Length 就是带有实体主体的报文必须使用的。使用 Content-Length 首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。\n\n#### 实体摘要\n\n尽管 HTTP 通常都是在 TCP/IP 这样可靠传输协议之上实现的，但仍有很多因素导致报文的一部分在传输过程中被修改，比如不兼容的转码、代理有误等待呢个。为了检测主体的数据的完整性，发送方可以在生成初始的主体对主体运行 MD5 算法生成一个数据的校验和，通过 Content-MD5 首部发送给接收方。\n\n除了检测完整性之外，MD5 还可以当做散列表的关键字，用来快速定位文档并消除不必要的重复内容存储。\n\n#### 媒体类型和字符集\n\nContent-Type 首部字段说明了实体主体的 MIME 类型。 MIME 类型是标准化的名字，用以说明作为货物运载实体的基本媒体类型。客户端应用程序使用 MIME 类型来解释和处理其中内容。如果实体主体部分经过内容编码的话，Content-Type 首部说明的仍然是编码之前的实体主体部分\n\nMIME 类型由一个住媒体类型（比如 text、image 或 audio 等）后面跟一条斜线以及一个子类型组成，子类型用于进一步描素媒体类型。下表中罗列一些常用的媒体类型\n\n|           媒体类型            |                            描述                            |\n| :---------------------------: | :--------------------------------------------------------: |\n|           text/html           |                         HTML 文档                          |\n|          text/plain           |                         纯文本文档                         |\n|           image/gif           |                          GIF 图像                          |\n|          image/jpeg           |                         JPEG 图像                          |\n|          audio/x-wav          |                      WAV 格式声音数据                      |\n|          model/vrml           |                       三维 VRML 模型                       |\n| application/vnd.ms-powerpoint |                          PPT 文档                          |\n|     multipart/byteranges      | 实体主体有若干部分，每部分都包含了完整文档的不同的字节范围 |\n|         message/http          |               实体主体包含了完整的 HTTP 报文               |\n\n**多部分媒体类型**\n\nMIME 中的 multipart 电子邮件报文中包含多个报文，它们合在一起作为单一的复杂报文发送。每一部分都是独立的，有各自的描述其内容的集；不同部分之间用分界字符连接在一起。\n\nHTTP 也支持多部分主体。不过，通常只用在下列两种情形之一：提交填写的表单，或是作为承载若干文档片段的范围响应。\n\n下边我们就举例介绍它们的传输格式\n\n**多部分表格提交**\n\n当提交填写的 HTTP 表格时，边长的文本字段和上传的对象都作为多部分主体里面独立的部分发送，这样表格中就可以填写各种不同类型和长度的值。\n\nHTTP 使用 Content-Type ：multipart/from-data 或 Content-Type：multipart/mixed 这样的首部以及多部分主体来发送这种请求，举例如下：\n\n```\nContent-Type：multipart/from-data ;boundary=AaB03x\n```\n\n其中 boundary 参数说明了分割主体中不同部分所用的字符串\n\n下面例子向我们展示了多表格提交的编码，假如我们有如下表格。\n\n```html\n<form\n  aciont=\"http://server.com/cgi/handle\"\n  enctype=\"multipart/form-data\"\n  method=\"post\"\n>\n  <p>What is your name?</p>\n  <input type=\"text\" ,name=\"submit-name\" /><br />\n  <p>What files are you sending?</p>\n  <input type=\"file\" name=\"files\" /><br />\n  <input type=\"submit\" value=\"send\" /><input type=\"reset\" />\n</form>\n```\n\n我们在文本中输入 “Joke” 并选择了一个文本文件“essayfile.txt” ，那么它的主体构造可能是这个样子\n\n```\nContent-Type : mutltipart/form-data;boundary=AaB03x\n--AaB03x\nContent-Disposition:form-data;name=\"submit-name\"\nJoke\n--AaB03x\nContent-Disposition:form-data;name=\"files\"；filename=\"essayfile.txt\"\nCOntent-Type:text/plain\n...contents of essayfile.txt....\n--AaB03x--\n\n```\n\n如果我们还选了了另一个图像文件 \"imagefile.gif\"，那么构造的主体可能就这个样子了\n\n```\nContent-Type:multipart/form-data;bundary=AaB03x\n--AaB03x\nContent-Disposition:form-data;name=\"submit-name\"\nJoke\n--AaB03x\nContent-Disposition:form-data;name=\"files\"\nContent-Type:multipart/mixed;boundary=BbC04y\n--BbC04y\nContent-Disposition:file;filename=\"essayfile.txt\"\nContent-Type:text/plain\n...contents of esssayfile.txt...\n--BbC04y\nContent-Disposition:file;filename=\"iamgefile.gif\"\nContent-Type:iamge/gif\nContent-Transfer-Encoding:binary\n...contents of imagefile.gif...\n--BbC04y--\n--AaB03x--\n```\n\n**多部分范围提交**\n\nHTTP 对范围请求的响应也可以使多部分的。这样的响应中有 Content-Type:mutipart/byteranges 首部和带有不同范围的多部分主体。\n","slug":"2019-10-11-HTTP_The_Definitive_Guide","published":1,"updated":"2024-09-13T03:38:13.729Z","comments":1,"photos":[],"link":"","_id":"cm10dl6ps002as2y4h33u3l5t","content":"<h3 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h3><p><strong>URI 是一种更通用的资源标识符，URL 实际是它的子集。URI 是一个通用的概念，由两个主要的子集 URL 和 URN 构成 ，URL 是通过描述资源的位置来标识自愿的，而 URN 则是通过名称来识别资源，与它们所处的位置无关</strong></p>\n<p>URN 的好处是显而易见的，但是将 URL 转换成 URN 需要进行大量的工作，在可预见的未来，英特网资源仍然会以 URL 来命名。</p>\n<p><strong>URL 格式</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;&lt;port&gt;&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n\n<p>除了通用的 URL 格式外，我们生活中还用了很多常用的 Web 链接方案，它们与标准的 URL 或多或少有一些异同，下面就来介绍一下</p>\n<ul>\n<li><p><strong>http</strong> 超文本传输协议，除了没有用户名和密码之外，与通用的 URL 格式相同，如果没有指定端口，那么它的<strong>默认端口为 80</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</span><br><span class=\"line\">范例：https://www.jianshu.com/recommendations/notes?category_id=56#9835</span><br><span class=\"line\"></span><br><span class=\"line\">scheme:https</span><br><span class=\"line\">host: www.jianshu.com</span><br><span class=\"line\">port: 80</span><br><span class=\"line\">path: recommendations/notes</span><br><span class=\"line\">query:category_id=56</span><br><span class=\"line\">flag: 9835</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>https</strong> 方案与 http 的唯一区别在于 https 方案使用了网景的 SSL，为 http 提供了端到端的加密机制。<strong>默认端口 443</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ftp</strong> 文件传输协议 URL 可以用来从 FTP 服务器上下载或其上载文件，并获取 FTP 服务器上的目录结构内容的列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: ftp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;</span><br><span class=\"line\">范例: ftp://anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/</span><br><span class=\"line\"></span><br><span class=\"line\">scheme: ftp</span><br><span class=\"line\">username: anonymous</span><br><span class=\"line\">password：joe@joes-hardware.com</span><br><span class=\"line\">host: prep.ai.mit.edu</span><br><span class=\"line\">prot: 21</span><br><span class=\"line\">path: pub/gnu/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>rtsp,rtspu</strong> 是可以通过实时流传输协议解析的音视频媒体资源的标识符。方案中的 <code>u</code> 表示它是用来使用 UDP 协议获取资源的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: rtsp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;prot&gt;/&lt;path&gt;</span><br><span class=\"line\">      rtspu://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;prot&gt;/&lt;path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">范例: rtsp://www.joes-hardware.com:554/interview/cto_video</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>file</strong> 方案 file 表示一台指定主机上可以直接访问的文件。各字段都遵循通用格式。如果省略了主机名，就默认为正在使用的基本格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: file://&lt;host&gt;/&lt;path&gt;</span><br><span class=\"line\">范例: file://OFFICE-FS/policies/casual-firdays.doc</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"HTTP-报文\"><a href=\"#HTTP-报文\" class=\"headerlink\" title=\"HTTP 报文\"></a>HTTP 报文</h3><p>报文的请求格式 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;method&gt; &lt;request-RUL&gt; &lt;version&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>报文的响应格式 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;version&gt;&lt;status&gt;&lt;reason_phrase&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li><p><strong>方法（method）</strong><br>客户端对服务器资源执行的动作。由一个单独的单词表示。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">主体部分</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">GET</td>\n<td align=\"center\">从服务器获取一份文档</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">HEAD</td>\n<td align=\"center\">只从服务器获得文档的首部</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">向服务器发送需要处理的数据</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">PUT</td>\n<td align=\"center\">将请求的主题部分存储在服务器上</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">TRACE</td>\n<td align=\"center\">对可能经过代理服务器的报文进行追踪</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">OPTIONS</td>\n<td align=\"center\">决定可以在服务器上执行哪些方法</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">DELETE</td>\n<td align=\"center\">从服务器删除一份文档</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><strong>请求 URL（request-URL）</strong><br>所请求资源，或者 URL 路径组件的完整 URL</p>\n</li>\n<li><p><strong>版本（version）</strong><br>报文所使用的 HTTP 版本 ，格式规定是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/&lt;major&gt;.&lt;minor&gt;</span><br></pre></td></tr></table></figure>\n\n<p>major 表示主要版本号而 minor 表示次要版本号，它们都是整数</p>\n</li>\n<li><p><strong>状态码（status-code）</strong><br>这三位数码描述了请求过程中发生的情况。每个状态码的第一位数都用语描述状态的一般类别（成功、出错等）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">整体范围</th>\n<th align=\"center\">已定义范围</th>\n<th align=\"center\">分类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">100 ~ 199</td>\n<td align=\"center\">100 ~101</td>\n<td align=\"center\">信息提示</td>\n</tr>\n<tr>\n<td align=\"center\">200 ~ 299</td>\n<td align=\"center\">200 ~ 206</td>\n<td align=\"center\">成功</td>\n</tr>\n<tr>\n<td align=\"center\">300 ~ 399</td>\n<td align=\"center\">300 ~ 305</td>\n<td align=\"center\">重定向</td>\n</tr>\n<tr>\n<td align=\"center\">400 ~ 499</td>\n<td align=\"center\">400 ~ 415</td>\n<td align=\"center\">客户端错误</td>\n</tr>\n<tr>\n<td align=\"center\">500 ~ 599</td>\n<td align=\"center\">500 ~ 505</td>\n<td align=\"center\">服务器错误</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><strong>原因短语（reason-phrase）</strong><br>数字状态码的可读版本，只对人类解读有意义</p>\n</li>\n<li><p><strong>首部（header）</strong><br>可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号<code>:</code>然后是一个可选的空格，接着是一个值，最后是一个 CRLF。</p>\n</li>\n<li><p><strong>实体的主体部分（entity-body）</strong><br>包含一个任意数组组成的数据块。但并不是所有的报文都包含实体的主体部分。</p>\n</li>\n</ul>\n<h3 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h3><h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><p><strong>HTTP 和 TCP 的关联</strong></p>\n<p>HTTP 连接实际上就是 TCP 连接及其使用规则。 TCP 为 HTTP 提供了一条可靠的比特传输管道。从 TCP 连接一端填入的字节会从另一端以原有的顺序正确的传送出来。</p>\n<p>TCP 的数据通过名为 IP 分组（或 IP 数据报）的小数据块来发送的，按 <strong>HTTP over TCP over IP</strong> 这样的协议栈来传递。其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插入了一个（称为 TSL 或 SSL）密码加密层</p>\n<p><strong>HTTP 请求流程</strong></p>\n<ol>\n<li>客户端首先根据 URL 确定 服务器 IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问，则需要通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址。</li>\n<li>客户端向服务器发送一条 TCP 连接请求，并等待服务器回送一个请求接受应答，从而建立起一个 TCP 连接。<br>像我们常用的 okHttp 这种网络框架除了常用 的 DNS 缓存外还建立了 socket 连接池用作 TCP 连接的复用。</li>\n<li>建立连接后客户端会通过新建立的 TCP 管道来发送 HTTP 请求，服务器收到请求并对请求经行处理。</li>\n<li>服务器回送 HTTP 响应</li>\n</ol>\n<p>TCP 网络的时延取决于应减速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。以及 TCP 协议的技术复杂性也会对时延产生有巨大的影响。</p>\n<p><strong>TCP 具体是如何传递的</strong></p>\n<p>当 HTTP 要发送一条报文时，会以流的形式将报文数据的内容通过一条打开的 TCP 连接按序传输。TCP 收到数据流之后，会将数据流砍成被称作段的小数据块。并将段封装在 IP 分组中，通过因特网进行传输。所有的这些工作都是由 TCP&#x2F;IP 软件来处理的，HTTP 程序员什么都看不到。</p>\n<p>每个 TCP 段都是有 IP 分组承载，从一个 IP 地址发送到另一个 IP 地址的每个分组中都包含：</p>\n<ul>\n<li>一个 IP 分组首部（通常为 20 字节）<br>包含了源和目的地的 IP 地址、长度和其他一些标记</li>\n<li>一个 TCP 段首部（通常为 20 字节）<br>包含了 TCP 端口号、TCP 控制标记，以及用于数据排序和完整性检查的一些数字值</li>\n<li>一个 TCP 数据块（0 或多个字节）<br>被分割封装的数据块</li>\n</ul>\n<h4 id=\"TCP-性能优化\"><a href=\"#TCP-性能优化\" class=\"headerlink\" title=\"TCP 性能优化\"></a>TCP 性能优化</h4><p><strong>TCP 性能聚焦区域</strong></p>\n<ul>\n<li><p>TCP 连接建立握手<br>提起 TCP 握手就很容易想到 TCP 的 三次握手和四次挥手这种耳熟能详的话语，这句话也同时证明了 TCP 的建立是多么的复杂。现在就是详细说说 TCP 是怎么三次握手和四次挥手的</p>\n<ol>\n<li><strong>请求新的连接时，客户端要向服务器发送一个小的 TCP 分组。分组设置了一个特殊的标记 SYN，说明这是一个连接请求</strong></li>\n<li><strong>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个 TCP 分组。分组中 SYN 和 ACK(确认有效标记)都被置位，说明连接已经被接受</strong></li>\n<li><strong>客户端收到服务器的消息后，再回送一条标记 ACK 的分组消息，发送完毕后客户端和服务器端进入连接状态，三次握手完毕</strong></li>\n<li><strong>客户端进程发出释放报文，并停止发送数据。报文首部标记 FIN ，说明这个请求是断开连接请求</strong></li>\n<li><strong>服务器收到释放报文，发出 ACK 确认报文。此时服务已经进入了半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端仍要接收。</strong></li>\n<li><strong>服务器将所有数据发送完毕后，就向客户端发送 FIN 和 ACK 标记的报文确认释放</strong></li>\n<li><strong>客户端收到释放报文后立刻发出 ACK 确认报文，此时四次挥手结束。但是客户端只是进入了 TIME_WAIT 状态，还需要经过 2MSL 的最长报文时间后才真正的结束释放 TCP 链接</strong></li>\n</ol>\n<p>小的 HTTP 事务可能会在 TCP 建立连接上花费 50% 甚至更多的时间。</p>\n</li>\n<li><p>TCP 慢启动拥塞控制</p>\n</li>\n<li><p>数据聚集的 Nagle 算法</p>\n</li>\n<li><p>用于捎带确认的 TCP 延迟确认算法</p>\n</li>\n<li><p>TIME_WAIT 时延和端口耗尽</p>\n</li>\n</ul>\n<p>Tips:</p>\n<p>什么是 2MSL？</p>\n<p>MSL 是 Maximum Segment Lifetime 英文的缩写，中文可以译为 “报文最大生存时间”，他是任何报文在网络上存在的长时间，超过这个时间报文将被丢弃。RFC793 中规定 MSL 为 2 分钟，实际应用常用的是 30 秒、1 分钟和 2 分钟。2MSL 即 2 倍的 MSL 时间</p>\n<p><strong>持久连接</strong></p>\n<p>客户端经常会打开到同一个站点的连接。一个页面上的大部分资源、请求相当一部分通常都指向同一个站点。因此从，初始化了对某服务器 HTTP 请求的应用程序可能在不久的将来还会对那台服务器发起更多请求。这种性质被称作为“站点局部性”</p>\n<p>因此 HTTP&#x2F;1.1（以及 HTTP&#x2F;1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 任然保持在打开在状态，以便未来的 HTTP 请求重用现存的链接。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便快速进行数据的传输。</p>\n<p>持久连接分为两种类型</p>\n<p><strong>1. HTTP&#x2F;1.0 + keep-alive 连接</strong><br><strong>1996 年开始 ，很多 HTTP&#x2F;1.0 浏览器和服务器都经行了扩展，以支持一种被称为 keep-alive 连接的早期实验性持久连接。这些早期的持久连接受到了一些互操作性设计方面的困扰，与之后的 HTTP&#x2F;1.1 版本得到的了修正，但是至今任然还有很多实用早期的 keep-alive 连接</strong><br><strong>实现 keep-alive 连接的客户端可以通过包含 connection：keep-alive 的首部请求来请求一条将要保持状态的连接，服务器如果愿意为下一条请求将连接保持在打开状态，就在响应中包含相同的首部。如果响应中没有，客户端则认为服务器不不支持 keep-alive</strong></p>\n<p><strong>需要注意的是 Keep-alive 只是请求将连接保持在活跃状态。发出 keep-alive 请求后客户端和服务端不一定会同意，它们可以随时关闭该连接。</strong></p>\n<p><strong>2. HTTP&#x2F;1.1 持久连接</strong></p>\n<p>HTTP&#x2F;1.1 逐渐停止了对 keep-alive 的支持，用一种名为持久连接（persistent connection）的改进型设计取代了它。</p>\n<p>与 keep-alive 不同，持久连接在默认情况下是激活的。除非特别指明，否则 HTTP&#x2F;1.1 假定所有连接都是持久的。要在事务处理结束之后通过在报文中显式的在报文中添加一个 connection：close 首部将连接关闭。虽然设计上是这样，但是客户端和服务端仍然可以随时关闭。同时不发送 Connection：close 也不意味着服务器承诺永远将连接保持在打开状态</p>\n<h4 id=\"管道化连接\"><a href=\"#管道化连接\" class=\"headerlink\" title=\"管道化连接\"></a>管道化连接</h4><p>HTTP&#x2F;1.1 还允许在持久化连接上可选地使用请求管道。这是相对于 keep-alive 连接的又一性能优化。在响应达到之前，可以将多条请求放入队列。当地一条请求通过网络流向服务器时，第二条第三条也可以开始发送。在高延时网络条件下，这样可以降低网络的环回时间，提高性能。</p>\n<h3 id=\"客户端识别与-cookie-机制\"><a href=\"#客户端识别与-cookie-机制\" class=\"headerlink\" title=\"客户端识别与 cookie 机制\"></a>客户端识别与 cookie 机制</h3><p>HTTP 最初是一个匿名、无状态的请求&#x2F;响应协议。服务器处理来自客户端的请求，然后向</p>\n<p>现代的 Web 站点希望能够提供个性化的接触。但是 HTTP 本身并不具有识别用户的能力，于是早期的 Web 站点设计者们自己创造了一些用户数识别技术。每种技术都有其优劣，大致可以分为以下几种：</p>\n<ul>\n<li>承载用户身份信息的 HTTP 首部</li>\n<li>客户端 IP 地址跟踪，通过用的 IP 地址对其进行识别</li>\n<li>用户登录，用认证方式来识别用户</li>\n<li>胖 URL，一种在 URL 中嵌入识别信息的技术</li>\n<li>cookie 一种功能强大且高效持久身份识别技术</li>\n</ul>\n<h4 id=\"常用的-HTTP-首部\"><a href=\"#常用的-HTTP-首部\" class=\"headerlink\" title=\"常用的 HTTP 首部\"></a>常用的 HTTP 首部</h4><table>\n<thead>\n<tr>\n<th align=\"center\">首部请求</th>\n<th align=\"center\">首部类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">From</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">E-mail 地址</td>\n</tr>\n<tr>\n<td align=\"center\">User-Agent</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户的浏览器软件</td>\n</tr>\n<tr>\n<td align=\"center\">Referer</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户是从这个页面上转发过来的</td>\n</tr>\n<tr>\n<td align=\"center\">Authorization</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户名和密码</td>\n</tr>\n<tr>\n<td align=\"center\">Client-IP</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">客户端的 IP 地址</td>\n</tr>\n<tr>\n<td align=\"center\">X-Forwarded-For</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">客户端端的 IP 地址</td>\n</tr>\n<tr>\n<td align=\"center\">Cookie</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">服务器产生的 ID 标签</td>\n</tr>\n</tbody></table>\n<p><strong>From</strong> 首部包含了用户的 E-mail 地址。每个用户都有不同的 E-mail 地址就，所以在理想情况下，可以将这个地址作为可行的源端来识别用户。但是担心 E-mail 被恶意收集和利用，所有很少有使用和发送 From 首部</p>\n<p><strong>User-Agent</strong> 首部可以将用户所有的浏览器的相关信息告知服务器，包括程序的名称和版本，通常还包含操作系统的相关信息。</p>\n<p><strong>Referer</strong> 首部提供了用户来源的 URL 。Referer 首部虽然不能完全标示用户，但它却是说明了用户之前访问过哪个页面，通过它可以更好的理解用户的浏览器行为。</p>\n<p>From、User-Agent、Referer 三者虽然都不足以对用户进行可靠的识别，但对也对用户的行为定位起到了一定的作用，User-Agent 可以判断用户的设备，让 Web 页面做出不同的行为。Referer 可以识别用户来源来做数据分析等等。</p>\n<h4 id=\"客户端-IP-地址\"><a href=\"#客户端-IP-地址\" class=\"headerlink\" title=\"客户端 IP 地址\"></a>客户端 IP 地址</h4><p>早期的 Web 先锋还尝试将客户端 IP 地址作为一种标识形式使用。如果每个用户都有不同的 IP 地址，IP 地址也很少发生变化，那么这种方法确实是可行的。但实际上通过客户端 IP 识别用户存在很多缺点，限制了将其作为用户识别技术的效能。</p>\n<ul>\n<li>IP 地址描述的是客户所使用的机器，而不是用户。如果多个用户使用同一台机器，就无法对其分别了</li>\n<li>很多因特网服务区会对登录网络的用户动态分配 IP 地址。用户每次登录都会获得一个不同的 IP 地址</li>\n<li>为了提高安全性，并对稀缺的地址资源进行管理，很多用户都是通过网络地址转换防火墙来浏览网络的。这些 NAT 设备隐藏了防火墙后面时实际客户端的 IP 地址，而将其转换成了客户一个防火墙共享的 IP 地址和不同的端口号来标识</li>\n</ul>\n<h4 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h4><p>Web 服务器无需被动的根据用户的 IP 地址来猜测他的身份，它可以要求用户通过用户名和密码进行认证来显示的询问用户是谁。</p>\n<p>而且为了使 Web 站点的登录更加简便，HTTP 中包含了一种内建机制，可以用 WWW-Authenticate 首部和 Authentication 首部向 Web 站点传递用户的相关信息。一旦登录浏览器就可以不断在每条发往这个站点的请你去中发送这个登录信息了。</p>\n<h4 id=\"胖-URL\"><a href=\"#胖-URL\" class=\"headerlink\" title=\"胖 URL\"></a>胖 URL</h4><p>有些站点还会为每个用户生成特定的 URL 俩追踪用户的身份。通常会对真正的 URl 进行扩展，在 URL 路径的尾部添加一些状态信息来表明用户相关信息，这种修改过的 URl 就被称之为 胖 URL( fat URL)</p>\n<p>这种方式存在几个很严重的问题</p>\n<ul>\n<li>用户相关信息直接暴露在外边</li>\n<li>破坏缓存，为每个用户生成 URL 就意味着不再有可供访问的公共缓存了。</li>\n<li>无法共享 , URl 的信息附带了当前用户的个人信息，发送给其他人就意味着信息被暴露了</li>\n<li>逃逸口，用户必须严格按照流程才能正常使用，如果用户逃离此链接可能会丢失进展（信息都在 URL 中）</li>\n</ul>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>cookie 是当前识别用户，实现持久会话的最好方式。前面各种技术存在的很多问题对它都没什么影响，但是通常也会将它们与那些技术公用，以实现额外的价值。</p>\n<p>cookie 定义了一些新的 HTTP 首部，同时 cookie 还影响了缓存，大多数缓存和浏览器都不会对任何 cookie 的内容进行缓存。</p>\n<p>可以将 cookie 笼统的分为两类：<strong>会话 cookie 和持久 cookie</strong> 。会话 cookie 是一种临时 cookie ，它记录了用户访问站点时设置的偏好和爱好。用户退出浏览器时，会话 cookie 就被删除了。持久 cookie 生存的时间会更长一些；它们存储在硬盘上，即使浏览器退出、计算机重启它们也仍然存在。通常会用持久 cookie 维护某个用户的周期性访问的站点和配置文件或登录名。它们唯一区别就是它们的过期时间。<strong>如果 cookie 设置了 Discard 参数或者没有设置 Expires 和 Max-Age 参数来说明扩展的过期时间，这个 coookie 就是一个会话 cookie</strong></p>\n<h5 id=\"cookie-是如何工作的\"><a href=\"#cookie-是如何工作的\" class=\"headerlink\" title=\"cookie 是如何工作的\"></a>cookie 是如何工作的</h5><p>Cookie 是一种非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。cookie 由服务器生成，发送给浏览器，浏览器把 cookie 以键值对（key-value）的形式保存在目录下的文本内，下一次请求同一网站时会把该 cookie 发送给服务器，服务器就能获得发送请求的用户的状态信息。</p>\n<h5 id=\"cookie-的传递\"><a href=\"#cookie-的传递\" class=\"headerlink\" title=\"cookie 的传递\"></a>cookie 的传递</h5><p>浏览器内部的 cookie 罐中可以有成百上千个 cookie，但浏览器不会将每个 cookie 都发送给所有的站点。产生 cookie 的服务器可以想 Set-Cookie 响应首部添加一个 Domain 属性来控制哪些站点可以看到那个 cookie。比如。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cooke:user=&quot;mary&quot;;domian=&quot;airtravelbargains.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>之后如果用户访问的是 .airtravelbargains.com 结尾的站点，那么 <code>user=&quot;mary&quot;</code> 的这个 cookie 信息都会被发布出去</p>\n<p>同时 cookie 规范甚至允许用户将 cookie 与部分 web 站点关联起来。可以通过 <code>path</code> 属性来实现这一功能，在这个属性下列出的 URL 路径前缀下的 cookie 都是有效的</p>\n<p>例如，某个 web 服务器可能是由两个组织共享的，每个组织都有独立的 cookie。站点 <a href=\"http://www.airtravelbargains.com/\">www.airtravelbargains.com</a> 可能会将部分的 web 站点用于汽车租凭——比如 <a href=\"http://www.airtravelbargains.om/autos/\">http://www.airtravelbargains.om/autos/</a> 用一个独立的 cookie 来记录用户喜欢的汽车样式。可能会生成一个特俗汽车租凭 cookie：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-cookie:pref=compact;domian=&quot;airtravelbargains.com&quot;;path=&quot;/autos/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果用户访问 <a href=\"http://www.airtravelbargains.om/specials.html\">http://www.airtravelbargains.om/specials.html</a> 它就只会获得这个 cookie :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie:user=“mary”</span><br></pre></td></tr></table></figure>\n\n<p>但如果访问 <a href=\"http://www.airtravelbargains.om/autos/index.html\">http://www.airtravelbargains.om/autos/index.html</a> 则就会获得两个 cookie：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie:user=&quot;mary&quot;</span><br><span class=\"line\">Cookie:pref=&quot;compact&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因此，cookie 就是服务器贴到客户端上由客户端维护的状态片段，只会回送给合适的站点。</p>\n<h1 id=\"认证机制\"><a href=\"#认证机制\" class=\"headerlink\" title=\"认证机制\"></a>认证机制</h1><p>现在有数以亿计的人在用 web 进行私人事务处理，访问私有的数据。我们保证能方便访问的同时，且只有特定的人能够看到我们的敏感信息并且能够执行我们的特权事务。并不是所有信息都是能够公开的。</p>\n<p>因此服务器需要通过某种方式来了解用户身份。一旦服务器知道了用户身份证，就以判断用户可以访问的事务和资源了。</p>\n<p>常见的 HTTP 认证分为基本认证（base authentication）和摘要认真（digest authentication）接下来就介绍两种认证机制</p>\n<h2 id=\"基本认证机制\"><a href=\"#基本认证机制\" class=\"headerlink\" title=\"基本认证机制\"></a>基本认证机制</h2><p>HTTP 提供了一个原生的质询&#x2F;响应（challenge&#x2F;response）框架，简化了用户的认证过程。</p>\n<p>Web 应用程序收到一条 HTTP 请求报文时，服务器没有按照请求执行动画，而是以一个“认真质询“进行响应，要去用户提供一些保密信息来说明他是谁，从而对其进行质询。</p>\n<p>当用户再次发起请求时要附上保密证书（用户名和密码）。如果政府不匹配则产生一条错误信息。如果匹配，则可以正常请求了</p>\n<h3 id=\"认证协议与首部\"><a href=\"#认证协议与首部\" class=\"headerlink\" title=\"认证协议与首部\"></a>认证协议与首部</h3><p>HTTP 通过一组可定制的控制首部，为不同的认证协议提供了一个可扩展框架。通过人们可以随意设计一些使用 HTTP 质询&#x2F;响应的新协议。</p>\n<p>HTTP 官方定义了两个协议：基本认证和摘要认证。</p>\n<h4 id=\"基本认证\"><a href=\"#基本认证\" class=\"headerlink\" title=\"基本认证\"></a>基本认证</h4><p>基本认证是最流行的 HTTP 认证协议。几乎每个主要的客户端和服务器都实现了基本认证机制。基本认证最初是在 HTTP&#x2F;1.0 规范提出的，但此后被移到了 RFC 2617 中</p>\n<p>在基本认证中， Web 服务器可以拒绝一个事务，质询客户端，请用户提供有效的用户和密码。服务器此时会返回 401 状态码来提示客户端需要认证，客户端收到质询后，请求用户输入用户名和密码，然后将用户米和密码稍加扰码再用 Authentication 首部将信息传递给服务器验证。具体的流程如下表格：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">步骤</th>\n<th align=\"center\">首部</th>\n<th align=\"center\">描述</th>\n<th>方法&#x2F;状态</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">请求</td>\n<td align=\"center\"></td>\n<td align=\"center\">第一条请求没有认证信息</td>\n<td>GET</td>\n</tr>\n<tr>\n<td align=\"center\">质询</td>\n<td align=\"center\">WWW-Authentication</td>\n<td align=\"center\">服务器用 401 状态拒绝了请求，说明需要用户提供用户名和密码</td>\n<td>401 Unauthorized</td>\n</tr>\n<tr>\n<td align=\"center\">授权</td>\n<td align=\"center\">Authentication</td>\n<td align=\"center\">客户端重新发送请求，这次会携带 Authentication 首部，内容部分用来说明算法、用户和密码</td>\n<td>GET</td>\n</tr>\n<tr>\n<td align=\"center\">成功</td>\n<td align=\"center\">Authentication-Info</td>\n<td align=\"center\">如果授权正确，服务器将会把文档返回</td>\n<td>200 OK</td>\n</tr>\n</tbody></table>\n<p>基本认证存简单便捷，但与此同时也存在很多的安全缺陷，只能用它防止非恶意用户无意间进行的访问，或将其配合 SSL 技术来使用。</p>\n<p>基本认证存在下列缺点：</p>\n<ul>\n<li><strong>用户信息容易被盗取</strong> 基本认证会通过网络发送用户名和密码，这些用户和密码只是用 Base-64 编码一下，攻击者可以很容易的获取到用户的明文用户名和密码</li>\n<li><strong>无法抵御重放攻击</strong> 即使用户名和密码进行了更难解码的方式加密，第三方用户任然可以捕获修改过的用户和密码，并将修改过的用户名和密码一次次的重放给服务器</li>\n<li><strong>没有提供针对代理和中间节点的防护措施</strong> 代理和中间节点可以不修改首部的认证信息而去修改报文的其余部分，这样就严重的改变了事务的本质</li>\n<li><strong>无法识别恶意服务器</strong> 基本认证只能服务器对客户端发起质询，客户端无法辨别服务器的真伪</li>\n</ul>\n<h4 id=\"摘要认证\"><a href=\"#摘要认证\" class=\"headerlink\" title=\"摘要认证\"></a>摘要认证</h4><p>摘要认证是另一种 HTTP 认证协议，它试图修复基本认证的严重缺陷。具体来说，它进行了如下改进：</p>\n<ul>\n<li>永远不会以明文的方式在网络上发送密码</li>\n<li>可以防止恶意用户捕获并重放认证的握手过程</li>\n<li>可以有选择地防止对报文内容的篡改</li>\n<li>防范其他几种常见的攻击方式</li>\n</ul>\n<p>摘要认证是一种升级版的认证方式，所用首部和基本认证类似。它的简要握手机制如下：</p>\n<ol>\n<li>服务器计算出一个随机数，并将随机数放在 WWW-Authentication 质询报文中，与之一同发送客户端的还有服务器所支持的算法列表</li>\n<li>客户端选择一个算法，计算出密码和其他数据的摘要，其后将摘要信息放置到 Authentication 报文中发回给服务器。如果客户端还要对服务器进行认证，可以发送客户端随机数。</li>\n<li>服务端收到摘要、选中的算法以及支持数据，计算出客户端相同的摘要。然后服务器将本地生成摘要与传送过来的数据进行比较，认证其是否匹配。如果客户端反过来通过客户端随机数对服务器机型质询，就会创建客户端摘要。</li>\n</ol>\n<p>摘要认证的核心就是对公共信息、保密信息和有时限的随即值这个组合进行信息摘要计算。来防止可能发生的密码窃听、认证重放以及报文内容篡改等。通常我们使用 MD5 等信息摘要算法</p>\n<p>摘要认证拥有较为完善的安全机制，但它也并不是万无一失的。它并没有对内容的安全提供任何保证——真正安全的事务只有通过 SSL 才能提供。</p>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><p>随着互联网的高速发展，越来越多的人在网络上处理一些很重要的事情。但如果没有强有力的安全保证，人们就会无法安心地进处理业务。基本认证和摘要认证已经无法满足人们，人们迫切的需要一种易于管理，不但能够适应不断变化的情况还应该能满足社会和政府的各项要求。我们需要一种能够提供下列功能的 HTTP 安全技术：</p>\n<ul>\n<li>服务器认证</li>\n<li>客户端认证</li>\n<li>完整性（客户端和服务端的数据不会被篡改）</li>\n<li>加密（客户端和服务端的对话是私密的，不会被窃听）</li>\n<li>效率（一个运行足够快的算法，以便低端的客户端和服务端能够使用）</li>\n<li>普适性（大多数客户端和服务端都是直接使用）</li>\n<li>管理的可扩展性（任何地方任何人可以立刻进行安全通信）</li>\n<li>适应性（能够支持当前最知名的安全方法）</li>\n<li>在社会上的可行性（满足社会的政治需要）</li>\n</ul>\n<p>HTTPS 就应运而生了。它是由网景公司首创的，所有主要的浏览器和服务器都支持此协议。</p>\n<p>使用 HTTPS 时，所有的 HTTP 请求和响应数据在发送到网络之前，都要进行加密。HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL 也可以使用其后继者——传输安全层（TLS），大部分困难的编码及解码工作都是又 SSL 库中完成的，所以 Web 客户端和服务器在使用 安全 HTTP 时无需过多地修改其协议处理逻辑。</p>\n<h4 id=\"数字加密\"><a href=\"#数字加密\" class=\"headerlink\" title=\"数字加密\"></a>数字加密</h4><p>详细了解 HTTPS 之前，我们先介绍一些 SSL 和 HTTPS 用到的加密编程技术的背景知识。</p>\n<p>最初，人们需要自己进行编码和解码，所以起初密码是相当简单的算法。后来机械技术的发展，使得人们开始制造一些机器，这些机器可以用复杂得多的密码来传递快递、精确地对报文进行编解码，但也仍然被机械设备的速度和功能限制着，之后计算机的发展打破了这些限制，使得超大密钥成为可能。超大密钥可以从一个加密算法中产生数万亿的虚拟加密算法，由不同的密钥值来区分不同的算法。密钥越长，编码组合就越多，通过随即猜测密钥来破解代码就越困难。</p>\n<h5 id=\"对称加密技术\"><a href=\"#对称加密技术\" class=\"headerlink\" title=\"对称加密技术\"></a>对称加密技术</h5><p>很多数字加密算法都被称为对称密钥（symmetric-key）加密技术，这是应为它们在编码和解码时使用的密钥一样。</p>\n<p>在对称密钥加密技术中，发送端和接收端要共享相同的密钥 K 才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。</p>\n<p>常用的对称密钥算法包括：DES、Triple-DES、RC2 和 RC4</p>\n<p>对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，一定要有一个共享保密密钥。如果网络上的所有节点都要使用这种技术，那将是一个管理噩梦。</p>\n<h5 id=\"公开密钥加密技术\"><a href=\"#公开密钥加密技术\" class=\"headerlink\" title=\"公开密钥加密技术\"></a>公开密钥加密技术</h5><p>公开密钥加密技术没有为每对主机使用单独的加密&#x2F;解密密钥，而是使用了非对称密钥：一个用来对主机报文编码，另一个用来对主机报文解码。编码密钥众所周知的，但只有主机才知道私有的解密密钥。这样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更简单。但解码密钥是保密，只有接收端才能对发送给它的报文进行解码。</p>\n<p><strong>RSA</strong></p>\n<p>RSA 算法就是一个满足了所有这些条件的流行的公开密钥加密系统，它是在 MIT 发明的，后来由 RSA 数据安全公司将其商业化。即使有了公共密钥、任意一段明文、用公共密钥对明文编码之后得到的相关密文、RSA 算法自身、甚至源代码，破解代码找到相应的私有密钥的难度仍相当于对一个极大的树进行质因数分解的困难程度。</p>\n<h5 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h5><p>到目前为止，我们已经讨论了各种使用对称和非对称密钥加&#x2F;解密保密报文的密钥加密技术。除了加&#x2F;解密报文之外，还可以用加密系统对报文进行签名（sign），以说明是谁编写的报文，同时证明报文未被篡改过。这种技术叫做数字签名（digital signing）对下一节要讨论的英特网安全证书系统来说非常重要。</p>\n<p>数字签名是附加在报文上的特殊加密校验码。它有以下好处：</p>\n<ul>\n<li>签名可以证明作者编写了这条报文。只有作者才会有最机密私有密钥。因此只有作者才能计算出这些校验和。校验和就像来自作者的个人”签名”一样。</li>\n<li>签名可以防止报文被篡改。如果有恶意在报文传输过程中对其进行了修改，校验和就不再匹配了。由于校验和只有作者保密的私有密钥才能产生，所以攻击者无法为篡改了的报文伪造出正确的校验码</li>\n</ul>\n<p><strong>数字签名的认证过程</strong></p>\n<p>节点 A 向节点 B 发送与一条报文，它们的交互过程如下</p>\n<ol>\n<li>节点 A 将变长报文提取为定长摘要</li>\n<li>节点 A 对摘要应用了一个“签名”函数，这个函数会将用户的私有密钥作为参数。因为只有用户才知道私有密钥，所以正确的签名函数会说明签名者就是其所有者。</li>\n<li>一旦计算出签名，节点 A 将其附加在报文的末尾，并将报文和签名都发送给 B</li>\n<li>在接收端，如果节点 B 需要确定报文确实是节点 A 写的，而且没有篡改过，节点 B 就可以对签名进行检查。节点 B 接收经私有密钥扰码的签名，并应用了使用公开密钥的反函数。如果拆包后的摘要与节点 B 自己的摘要版本不匹配，要么就是报文在传输过程中被篡改了，要么就是发送端没有节点 A 的私有密钥（也就是说它不是节点 A）</li>\n</ol>\n<h5 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h5><p>数字证书与现实生活的 ID 卡一样，证书内的内容都是由某些受信任组织以数字方式签发的。证书一般包含证书的对象、发布者、数字签名以及公开密钥等等。任何人都能创建一个数字证书，但并不是所有人都能够获得受人尊敬的签发权，从而为证书信息担保，并用其私有密钥签发证书。</p>\n<p>通过 HTTPS 建立一个 Web 事务后，现代的浏览器都会自动获取所连接服务器的数字证书。如果没有证书，安全连接就会失败。服务器中包含很多字段，其中包括：</p>\n<ul>\n<li>Web 站点的名称和主机名</li>\n<li>Web 站点的公开密钥</li>\n<li>签名颁发机构的签名</li>\n<li>来自签名颁发机构的签名</li>\n</ul>\n<p>浏览器收到证书时会对颁发机构进行验证检查。如果这个机构是很有权威的公共签名机构，浏览器可能已经知道其公开密钥了（浏览器会预先安装很多签名颁发机构的证书），然后浏览器和服务器就开始通过数字签名来进行认证。</p>\n<p>如果它对颁发机构一无所知，浏览器就无法确定是否应该信任这个签名颁发机构，它通常提示用户，看看它是否信任这个签名发布者（例如 Chrome 中浏览不受信任的 HTTPS 链接时候，会有 X 和 <del>HTTPS:&#x2F;&#x2F;</del> 的提示来显示这是一个不安全的访问）</p>\n<h4 id=\"HTTPS-概述\"><a href=\"#HTTPS-概述\" class=\"headerlink\" title=\"HTTPS 概述\"></a>HTTPS 概述</h4><p>HTTPS 就是在安全的传输层上发送的 HTTP 。HTTPS 没有将未加密的 HTTP 报文发送给 TCP ，并通过世界范围内的因特网进行传输。而在在将 HTTP 报文发送给 TCP 之前，先将其发送给了一个安全层，对其进行加密。目前，HTTP 安全层是通过 SSL 及其现代代替协议 TLS 来实现的。</p>\n<p><strong>HTTPS 方案</strong></p>\n<p>通常情况下，非安全的 HTTP 的 URL 方案前缀为 http :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.baidu.com/</span><br></pre></td></tr></table></figure>\n\n<p>在安全 HTTPS 协议中，URL 的方案前缀为 HTTPS 如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n\n<p>当一个客户端对某 Web 资源执行事务时，它会去检查 URL 的方案。</p>\n<ul>\n<li>如果方案为 HTTP ，客户端就会打开一条到服务器端口 80 (默认情况下) 的连接，并向其发送老的 HTTP 命令</li>\n<li>如果方案为 HTTPS，客户端就会打开一条服务器到端口 443（默认情况下）的连接，然后与服务器“握手”。这个握手过程中它们要完成以下工作<ul>\n<li>交换协议版本号</li>\n<li>选择一个两端都了解的密码</li>\n<li>对两端的身份进行认证</li>\n<li>生成临时的会话密钥，以便加密信道</li>\n</ul>\n</li>\n</ul>\n<p><strong>服务器证书</strong></p>\n<p>SSL 支持双向认证，将服务器证书承载回客户端，再将客户端的证书回送给服务器。</p>\n<p>一方面浏览器并不经常使用客户端证书。大部分用户甚至没有客户端证书。服务器可以要求使用客户端证书，但实际上很少这样做。</p>\n<p>另一方面，安全 HTTPS 事务总是要求使用服务器证书的。服务器是一个显示了组织的名称、地址、服务器 DNS 域名以及其他信息的派生证书。你和你所用的客户端软件可以检查证书，以确保所有的信息都是可信的。</p>\n<p>虽然 SSL 自身并不要求用户检查 Web 服务器证书，但是大部分现代浏览器都会对证书进行简单的完整性检查，并为用户提供进行进一步彻查的手段。网景公司提出的一种 Web 服务器证书有效性算法是大部分浏览器有效性验证的基础。验证步骤如下：</p>\n<ul>\n<li><p>日期检测<br>首先，检查证书的起始日期和结束日期，以确保证书仍然有效</p>\n</li>\n<li><p>签名颁发者可信度<br>每个证书都是由某些证书颁发机构（CA）签发的，它们负责为服务器担保。证书有不同的等级，每种证书都要求不同级别的背景验证。任何人都可以生成证书，但有些 CA 是非常著名的组织，它们通过非常清晰的流程来验证证书申请人的身份及商业行为的合法性。因此，浏览器会附带一个签名颁发机构的授信列表。如果浏览器收到了未知颁发机构签发的证书，那它通常会显示一条警告信息。</p>\n</li>\n<li><p>签名检测<br>一单判定签名授权是可信的，浏览器就要对签名使用签名颁发机构的公开密钥，并将其与校验码进行比较，已查看证书的完整性。</p>\n</li>\n<li><p>站点身份检测<br>为防止服务复制其他人的证书，或拦截其他人的流量，大部分浏览器都会试着去验证书中的域名与它们所对话的服务器的域名是否匹配。</p>\n</li>\n</ul>\n<p><strong>OpenSSL</strong></p>\n<p>OpenSSL 是 SSL 和 TLS 最常见的开元实现，由一些志愿者合作开发，目前是开发一个强壮的，具有完备功能的商业级工具集，以实现 SSL 和 TLS 协议及一个全功能的通用加密库。可以从 <a href=\"https://www.openssl.org/\">https://www.openssl.org</a> 上获取完整的相关信息。</p>\n<h3 id=\"实体和编码\"><a href=\"#实体和编码\" class=\"headerlink\" title=\"实体和编码\"></a>实体和编码</h3><p>每天都有数以亿计的各种媒体对象经由 HTTP 传送，如图像、文本、影片以及软件程序等。只要你能叫出名字，HTTP 就可以传送，不经如此，它还需要保障它的报文被正确传送、识别、提取以及适当处理。做到这一步它要确保它所承载的“货物”满足以下条件</p>\n<ul>\n<li>可以被正确识别（通过 Content-Type 首部说明媒体格式，Content-Language 说明媒体语言），以便被客户端正确识别处理</li>\n<li>可以被正确解包（Content-Length 首部来说报文长度和 Content-Encoding 说明报文转码压缩方式）</li>\n<li>是最新的（Expires、Last-modified 来说明实效时间和最后修改时间，Cache-Control 来说明缓存）</li>\n<li>符合用户的需要（基于 Accept 系列的内容协商用户所需内容）</li>\n<li>在网络上可以快速有效的传输（通过范围请求、差异编码以及其他数据压缩方法）</li>\n<li>完整到达、未被篡改（通过 Content-Range 和 Content -MD5 来验证）</li>\n</ul>\n<p>可以看到 HTTP 为传输报文定制了一系列相关的报文首部，这些首部平常在日常也相当常见，我们这次就来详细了解它们的功能以及如何运作的。</p>\n<h4 id=\"实体结构\"><a href=\"#实体结构\" class=\"headerlink\" title=\"实体结构\"></a>实体结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Server:Netscape_enterprise/3.6</span><br><span class=\"line\">Data:Sun,17 sep 2000 00:01:05 GMT</span><br><span class=\"line\">一一一一一一一一一一一一一一一一一一一一一一一一</span><br><span class=\"line\">|Content-Type:text/plain \t\t\t\t |</span><br><span class=\"line\">|COntent-Lenght:18              实体首部  |</span><br><span class=\"line\">|                                        |     实体部分</span><br><span class=\"line\">|Hi! I`m a Message !            实体主体  |</span><br><span class=\"line\">|一一一一一一一一一一一一一一一一一一一一一一一一</span><br></pre></td></tr></table></figure>\n\n<p>上文可以看出，描述 HTTP 协议之后的内容就是实体部分，实体部分又分为两部分：实体首部和实体主体，他们之间由一个空白的 CRLF 行结束。</p>\n<p>回车符（CR）和换行符（LF） 是文本文件用于标记换行的控制字符或字节码。</p>\n<ul>\n<li>CR &#x3D; Carriage Return，回车符号（<code>\\r</code>，十六进制 ascii 码为 <code>0x0D</code> ，十进制 ascii 码为 <code>13</code>）,用于将鼠标移动至行首，并不前前进至下一行。</li>\n<li>LF &#x3D; Line Feed, 换行符号（<code>\\n</code>,十六进制 ascii 码为 <code>0X0A</code>,十六进制码为 <code>10</code>)。</li>\n</ul>\n<p>紧邻的 CR 和 LF （组成 CRLF ，<code>\\r\\n</code>，或十六进制 <code>0X0D0A</code>）将鼠标移动到下一行行首。（Windows 操作系统默认的文本换行符为 CRLF ；Linux 以及 macOS 系统默认使用 LF）</p>\n<h4 id=\"Content-Length\"><a href=\"#Content-Length\" class=\"headerlink\" title=\"Content-Length\"></a>Content-Length</h4><p>content-length 首部指示出报文中实体主体打字节大小。这个大小是包含了所有内容编码的，比如，对文文件进行了 gzip 压缩的话，content-Lenght 首部就是压缩后打大小，而不是原始大小。</p>\n<p>除了使用了分块编码，否者 Content-Length 就是带有实体主体的报文必须使用的。使用 Content-Length 首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。</p>\n<h4 id=\"实体摘要\"><a href=\"#实体摘要\" class=\"headerlink\" title=\"实体摘要\"></a>实体摘要</h4><p>尽管 HTTP 通常都是在 TCP&#x2F;IP 这样可靠传输协议之上实现的，但仍有很多因素导致报文的一部分在传输过程中被修改，比如不兼容的转码、代理有误等待呢个。为了检测主体的数据的完整性，发送方可以在生成初始的主体对主体运行 MD5 算法生成一个数据的校验和，通过 Content-MD5 首部发送给接收方。</p>\n<p>除了检测完整性之外，MD5 还可以当做散列表的关键字，用来快速定位文档并消除不必要的重复内容存储。</p>\n<h4 id=\"媒体类型和字符集\"><a href=\"#媒体类型和字符集\" class=\"headerlink\" title=\"媒体类型和字符集\"></a>媒体类型和字符集</h4><p>Content-Type 首部字段说明了实体主体的 MIME 类型。 MIME 类型是标准化的名字，用以说明作为货物运载实体的基本媒体类型。客户端应用程序使用 MIME 类型来解释和处理其中内容。如果实体主体部分经过内容编码的话，Content-Type 首部说明的仍然是编码之前的实体主体部分</p>\n<p>MIME 类型由一个住媒体类型（比如 text、image 或 audio 等）后面跟一条斜线以及一个子类型组成，子类型用于进一步描素媒体类型。下表中罗列一些常用的媒体类型</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">媒体类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">text&#x2F;html</td>\n<td align=\"center\">HTML 文档</td>\n</tr>\n<tr>\n<td align=\"center\">text&#x2F;plain</td>\n<td align=\"center\">纯文本文档</td>\n</tr>\n<tr>\n<td align=\"center\">image&#x2F;gif</td>\n<td align=\"center\">GIF 图像</td>\n</tr>\n<tr>\n<td align=\"center\">image&#x2F;jpeg</td>\n<td align=\"center\">JPEG 图像</td>\n</tr>\n<tr>\n<td align=\"center\">audio&#x2F;x-wav</td>\n<td align=\"center\">WAV 格式声音数据</td>\n</tr>\n<tr>\n<td align=\"center\">model&#x2F;vrml</td>\n<td align=\"center\">三维 VRML 模型</td>\n</tr>\n<tr>\n<td align=\"center\">application&#x2F;vnd.ms-powerpoint</td>\n<td align=\"center\">PPT 文档</td>\n</tr>\n<tr>\n<td align=\"center\">multipart&#x2F;byteranges</td>\n<td align=\"center\">实体主体有若干部分，每部分都包含了完整文档的不同的字节范围</td>\n</tr>\n<tr>\n<td align=\"center\">message&#x2F;http</td>\n<td align=\"center\">实体主体包含了完整的 HTTP 报文</td>\n</tr>\n</tbody></table>\n<p><strong>多部分媒体类型</strong></p>\n<p>MIME 中的 multipart 电子邮件报文中包含多个报文，它们合在一起作为单一的复杂报文发送。每一部分都是独立的，有各自的描述其内容的集；不同部分之间用分界字符连接在一起。</p>\n<p>HTTP 也支持多部分主体。不过，通常只用在下列两种情形之一：提交填写的表单，或是作为承载若干文档片段的范围响应。</p>\n<p>下边我们就举例介绍它们的传输格式</p>\n<p><strong>多部分表格提交</strong></p>\n<p>当提交填写的 HTTP 表格时，边长的文本字段和上传的对象都作为多部分主体里面独立的部分发送，这样表格中就可以填写各种不同类型和长度的值。</p>\n<p>HTTP 使用 Content-Type ：multipart&#x2F;from-data 或 Content-Type：multipart&#x2F;mixed 这样的首部以及多部分主体来发送这种请求，举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type：multipart/from-data ;boundary=AaB03x</span><br></pre></td></tr></table></figure>\n\n<p>其中 boundary 参数说明了分割主体中不同部分所用的字符串</p>\n<p>下面例子向我们展示了多表格提交的编码，假如我们有如下表格。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">aciont</span>=<span class=\"string\">&quot;http://server.com/cgi/handle&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>What is your name?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> ,<span class=\"attr\">name</span>=<span class=\"string\">&quot;submit-name&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>What files are you sending?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;files&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;send&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;reset&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们在文本中输入 “Joke” 并选择了一个文本文件“essayfile.txt” ，那么它的主体构造可能是这个样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type : mutltipart/form-data;boundary=AaB03x</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;submit-name&quot;</span><br><span class=\"line\">Joke</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;files&quot;；filename=&quot;essayfile.txt&quot;</span><br><span class=\"line\">COntent-Type:text/plain</span><br><span class=\"line\">...contents of essayfile.txt....</span><br><span class=\"line\">--AaB03x--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果我们还选了了另一个图像文件 “imagefile.gif”，那么构造的主体可能就这个样子了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:multipart/form-data;bundary=AaB03x</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;submit-name&quot;</span><br><span class=\"line\">Joke</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;files&quot;</span><br><span class=\"line\">Content-Type:multipart/mixed;boundary=BbC04y</span><br><span class=\"line\">--BbC04y</span><br><span class=\"line\">Content-Disposition:file;filename=&quot;essayfile.txt&quot;</span><br><span class=\"line\">Content-Type:text/plain</span><br><span class=\"line\">...contents of esssayfile.txt...</span><br><span class=\"line\">--BbC04y</span><br><span class=\"line\">Content-Disposition:file;filename=&quot;iamgefile.gif&quot;</span><br><span class=\"line\">Content-Type:iamge/gif</span><br><span class=\"line\">Content-Transfer-Encoding:binary</span><br><span class=\"line\">...contents of imagefile.gif...</span><br><span class=\"line\">--BbC04y--</span><br><span class=\"line\">--AaB03x--</span><br></pre></td></tr></table></figure>\n\n<p><strong>多部分范围提交</strong></p>\n<p>HTTP 对范围请求的响应也可以使多部分的。这样的响应中有 Content-Type:mutipart&#x2F;byteranges 首部和带有不同范围的多部分主体。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h3><p><strong>URI 是一种更通用的资源标识符，URL 实际是它的子集。URI 是一个通用的概念，由两个主要的子集 URL 和 URN 构成 ，URL 是通过描述资源的位置来标识自愿的，而 URN 则是通过名称来识别资源，与它们所处的位置无关</strong></p>\n<p>URN 的好处是显而易见的，但是将 URL 转换成 URN 需要进行大量的工作，在可预见的未来，英特网资源仍然会以 URL 来命名。</p>\n<p><strong>URL 格式</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;&lt;port&gt;&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n\n<p>除了通用的 URL 格式外，我们生活中还用了很多常用的 Web 链接方案，它们与标准的 URL 或多或少有一些异同，下面就来介绍一下</p>\n<ul>\n<li><p><strong>http</strong> 超文本传输协议，除了没有用户名和密码之外，与通用的 URL 格式相同，如果没有指定端口，那么它的<strong>默认端口为 80</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</span><br><span class=\"line\">范例：https://www.jianshu.com/recommendations/notes?category_id=56#9835</span><br><span class=\"line\"></span><br><span class=\"line\">scheme:https</span><br><span class=\"line\">host: www.jianshu.com</span><br><span class=\"line\">port: 80</span><br><span class=\"line\">path: recommendations/notes</span><br><span class=\"line\">query:category_id=56</span><br><span class=\"line\">flag: 9835</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>https</strong> 方案与 http 的唯一区别在于 https 方案使用了网景的 SSL，为 http 提供了端到端的加密机制。<strong>默认端口 443</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ftp</strong> 文件传输协议 URL 可以用来从 FTP 服务器上下载或其上载文件，并获取 FTP 服务器上的目录结构内容的列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: ftp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;</span><br><span class=\"line\">范例: ftp://anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/</span><br><span class=\"line\"></span><br><span class=\"line\">scheme: ftp</span><br><span class=\"line\">username: anonymous</span><br><span class=\"line\">password：joe@joes-hardware.com</span><br><span class=\"line\">host: prep.ai.mit.edu</span><br><span class=\"line\">prot: 21</span><br><span class=\"line\">path: pub/gnu/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>rtsp,rtspu</strong> 是可以通过实时流传输协议解析的音视频媒体资源的标识符。方案中的 <code>u</code> 表示它是用来使用 UDP 协议获取资源的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: rtsp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;prot&gt;/&lt;path&gt;</span><br><span class=\"line\">      rtspu://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;prot&gt;/&lt;path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">范例: rtsp://www.joes-hardware.com:554/interview/cto_video</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>file</strong> 方案 file 表示一台指定主机上可以直接访问的文件。各字段都遵循通用格式。如果省略了主机名，就默认为正在使用的基本格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式: file://&lt;host&gt;/&lt;path&gt;</span><br><span class=\"line\">范例: file://OFFICE-FS/policies/casual-firdays.doc</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"HTTP-报文\"><a href=\"#HTTP-报文\" class=\"headerlink\" title=\"HTTP 报文\"></a>HTTP 报文</h3><p>报文的请求格式 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;method&gt; &lt;request-RUL&gt; &lt;version&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>报文的响应格式 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;version&gt;&lt;status&gt;&lt;reason_phrase&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<ul>\n<li><p><strong>方法（method）</strong><br>客户端对服务器资源执行的动作。由一个单独的单词表示。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">主体部分</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">GET</td>\n<td align=\"center\">从服务器获取一份文档</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">HEAD</td>\n<td align=\"center\">只从服务器获得文档的首部</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">POST</td>\n<td align=\"center\">向服务器发送需要处理的数据</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">PUT</td>\n<td align=\"center\">将请求的主题部分存储在服务器上</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">TRACE</td>\n<td align=\"center\">对可能经过代理服务器的报文进行追踪</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">OPTIONS</td>\n<td align=\"center\">决定可以在服务器上执行哪些方法</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">DELETE</td>\n<td align=\"center\">从服务器删除一份文档</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><strong>请求 URL（request-URL）</strong><br>所请求资源，或者 URL 路径组件的完整 URL</p>\n</li>\n<li><p><strong>版本（version）</strong><br>报文所使用的 HTTP 版本 ，格式规定是这样的:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/&lt;major&gt;.&lt;minor&gt;</span><br></pre></td></tr></table></figure>\n\n<p>major 表示主要版本号而 minor 表示次要版本号，它们都是整数</p>\n</li>\n<li><p><strong>状态码（status-code）</strong><br>这三位数码描述了请求过程中发生的情况。每个状态码的第一位数都用语描述状态的一般类别（成功、出错等）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">整体范围</th>\n<th align=\"center\">已定义范围</th>\n<th align=\"center\">分类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">100 ~ 199</td>\n<td align=\"center\">100 ~101</td>\n<td align=\"center\">信息提示</td>\n</tr>\n<tr>\n<td align=\"center\">200 ~ 299</td>\n<td align=\"center\">200 ~ 206</td>\n<td align=\"center\">成功</td>\n</tr>\n<tr>\n<td align=\"center\">300 ~ 399</td>\n<td align=\"center\">300 ~ 305</td>\n<td align=\"center\">重定向</td>\n</tr>\n<tr>\n<td align=\"center\">400 ~ 499</td>\n<td align=\"center\">400 ~ 415</td>\n<td align=\"center\">客户端错误</td>\n</tr>\n<tr>\n<td align=\"center\">500 ~ 599</td>\n<td align=\"center\">500 ~ 505</td>\n<td align=\"center\">服务器错误</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p><strong>原因短语（reason-phrase）</strong><br>数字状态码的可读版本，只对人类解读有意义</p>\n</li>\n<li><p><strong>首部（header）</strong><br>可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号<code>:</code>然后是一个可选的空格，接着是一个值，最后是一个 CRLF。</p>\n</li>\n<li><p><strong>实体的主体部分（entity-body）</strong><br>包含一个任意数组组成的数据块。但并不是所有的报文都包含实体的主体部分。</p>\n</li>\n</ul>\n<h3 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h3><h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><p><strong>HTTP 和 TCP 的关联</strong></p>\n<p>HTTP 连接实际上就是 TCP 连接及其使用规则。 TCP 为 HTTP 提供了一条可靠的比特传输管道。从 TCP 连接一端填入的字节会从另一端以原有的顺序正确的传送出来。</p>\n<p>TCP 的数据通过名为 IP 分组（或 IP 数据报）的小数据块来发送的，按 <strong>HTTP over TCP over IP</strong> 这样的协议栈来传递。其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插入了一个（称为 TSL 或 SSL）密码加密层</p>\n<p><strong>HTTP 请求流程</strong></p>\n<ol>\n<li>客户端首先根据 URL 确定 服务器 IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问，则需要通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址。</li>\n<li>客户端向服务器发送一条 TCP 连接请求，并等待服务器回送一个请求接受应答，从而建立起一个 TCP 连接。<br>像我们常用的 okHttp 这种网络框架除了常用 的 DNS 缓存外还建立了 socket 连接池用作 TCP 连接的复用。</li>\n<li>建立连接后客户端会通过新建立的 TCP 管道来发送 HTTP 请求，服务器收到请求并对请求经行处理。</li>\n<li>服务器回送 HTTP 响应</li>\n</ol>\n<p>TCP 网络的时延取决于应减速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。以及 TCP 协议的技术复杂性也会对时延产生有巨大的影响。</p>\n<p><strong>TCP 具体是如何传递的</strong></p>\n<p>当 HTTP 要发送一条报文时，会以流的形式将报文数据的内容通过一条打开的 TCP 连接按序传输。TCP 收到数据流之后，会将数据流砍成被称作段的小数据块。并将段封装在 IP 分组中，通过因特网进行传输。所有的这些工作都是由 TCP&#x2F;IP 软件来处理的，HTTP 程序员什么都看不到。</p>\n<p>每个 TCP 段都是有 IP 分组承载，从一个 IP 地址发送到另一个 IP 地址的每个分组中都包含：</p>\n<ul>\n<li>一个 IP 分组首部（通常为 20 字节）<br>包含了源和目的地的 IP 地址、长度和其他一些标记</li>\n<li>一个 TCP 段首部（通常为 20 字节）<br>包含了 TCP 端口号、TCP 控制标记，以及用于数据排序和完整性检查的一些数字值</li>\n<li>一个 TCP 数据块（0 或多个字节）<br>被分割封装的数据块</li>\n</ul>\n<h4 id=\"TCP-性能优化\"><a href=\"#TCP-性能优化\" class=\"headerlink\" title=\"TCP 性能优化\"></a>TCP 性能优化</h4><p><strong>TCP 性能聚焦区域</strong></p>\n<ul>\n<li><p>TCP 连接建立握手<br>提起 TCP 握手就很容易想到 TCP 的 三次握手和四次挥手这种耳熟能详的话语，这句话也同时证明了 TCP 的建立是多么的复杂。现在就是详细说说 TCP 是怎么三次握手和四次挥手的</p>\n<ol>\n<li><strong>请求新的连接时，客户端要向服务器发送一个小的 TCP 分组。分组设置了一个特殊的标记 SYN，说明这是一个连接请求</strong></li>\n<li><strong>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个 TCP 分组。分组中 SYN 和 ACK(确认有效标记)都被置位，说明连接已经被接受</strong></li>\n<li><strong>客户端收到服务器的消息后，再回送一条标记 ACK 的分组消息，发送完毕后客户端和服务器端进入连接状态，三次握手完毕</strong></li>\n<li><strong>客户端进程发出释放报文，并停止发送数据。报文首部标记 FIN ，说明这个请求是断开连接请求</strong></li>\n<li><strong>服务器收到释放报文，发出 ACK 确认报文。此时服务已经进入了半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端仍要接收。</strong></li>\n<li><strong>服务器将所有数据发送完毕后，就向客户端发送 FIN 和 ACK 标记的报文确认释放</strong></li>\n<li><strong>客户端收到释放报文后立刻发出 ACK 确认报文，此时四次挥手结束。但是客户端只是进入了 TIME_WAIT 状态，还需要经过 2MSL 的最长报文时间后才真正的结束释放 TCP 链接</strong></li>\n</ol>\n<p>小的 HTTP 事务可能会在 TCP 建立连接上花费 50% 甚至更多的时间。</p>\n</li>\n<li><p>TCP 慢启动拥塞控制</p>\n</li>\n<li><p>数据聚集的 Nagle 算法</p>\n</li>\n<li><p>用于捎带确认的 TCP 延迟确认算法</p>\n</li>\n<li><p>TIME_WAIT 时延和端口耗尽</p>\n</li>\n</ul>\n<p>Tips:</p>\n<p>什么是 2MSL？</p>\n<p>MSL 是 Maximum Segment Lifetime 英文的缩写，中文可以译为 “报文最大生存时间”，他是任何报文在网络上存在的长时间，超过这个时间报文将被丢弃。RFC793 中规定 MSL 为 2 分钟，实际应用常用的是 30 秒、1 分钟和 2 分钟。2MSL 即 2 倍的 MSL 时间</p>\n<p><strong>持久连接</strong></p>\n<p>客户端经常会打开到同一个站点的连接。一个页面上的大部分资源、请求相当一部分通常都指向同一个站点。因此从，初始化了对某服务器 HTTP 请求的应用程序可能在不久的将来还会对那台服务器发起更多请求。这种性质被称作为“站点局部性”</p>\n<p>因此 HTTP&#x2F;1.1（以及 HTTP&#x2F;1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 任然保持在打开在状态，以便未来的 HTTP 请求重用现存的链接。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便快速进行数据的传输。</p>\n<p>持久连接分为两种类型</p>\n<p><strong>1. HTTP&#x2F;1.0 + keep-alive 连接</strong><br><strong>1996 年开始 ，很多 HTTP&#x2F;1.0 浏览器和服务器都经行了扩展，以支持一种被称为 keep-alive 连接的早期实验性持久连接。这些早期的持久连接受到了一些互操作性设计方面的困扰，与之后的 HTTP&#x2F;1.1 版本得到的了修正，但是至今任然还有很多实用早期的 keep-alive 连接</strong><br><strong>实现 keep-alive 连接的客户端可以通过包含 connection：keep-alive 的首部请求来请求一条将要保持状态的连接，服务器如果愿意为下一条请求将连接保持在打开状态，就在响应中包含相同的首部。如果响应中没有，客户端则认为服务器不不支持 keep-alive</strong></p>\n<p><strong>需要注意的是 Keep-alive 只是请求将连接保持在活跃状态。发出 keep-alive 请求后客户端和服务端不一定会同意，它们可以随时关闭该连接。</strong></p>\n<p><strong>2. HTTP&#x2F;1.1 持久连接</strong></p>\n<p>HTTP&#x2F;1.1 逐渐停止了对 keep-alive 的支持，用一种名为持久连接（persistent connection）的改进型设计取代了它。</p>\n<p>与 keep-alive 不同，持久连接在默认情况下是激活的。除非特别指明，否则 HTTP&#x2F;1.1 假定所有连接都是持久的。要在事务处理结束之后通过在报文中显式的在报文中添加一个 connection：close 首部将连接关闭。虽然设计上是这样，但是客户端和服务端仍然可以随时关闭。同时不发送 Connection：close 也不意味着服务器承诺永远将连接保持在打开状态</p>\n<h4 id=\"管道化连接\"><a href=\"#管道化连接\" class=\"headerlink\" title=\"管道化连接\"></a>管道化连接</h4><p>HTTP&#x2F;1.1 还允许在持久化连接上可选地使用请求管道。这是相对于 keep-alive 连接的又一性能优化。在响应达到之前，可以将多条请求放入队列。当地一条请求通过网络流向服务器时，第二条第三条也可以开始发送。在高延时网络条件下，这样可以降低网络的环回时间，提高性能。</p>\n<h3 id=\"客户端识别与-cookie-机制\"><a href=\"#客户端识别与-cookie-机制\" class=\"headerlink\" title=\"客户端识别与 cookie 机制\"></a>客户端识别与 cookie 机制</h3><p>HTTP 最初是一个匿名、无状态的请求&#x2F;响应协议。服务器处理来自客户端的请求，然后向</p>\n<p>现代的 Web 站点希望能够提供个性化的接触。但是 HTTP 本身并不具有识别用户的能力，于是早期的 Web 站点设计者们自己创造了一些用户数识别技术。每种技术都有其优劣，大致可以分为以下几种：</p>\n<ul>\n<li>承载用户身份信息的 HTTP 首部</li>\n<li>客户端 IP 地址跟踪，通过用的 IP 地址对其进行识别</li>\n<li>用户登录，用认证方式来识别用户</li>\n<li>胖 URL，一种在 URL 中嵌入识别信息的技术</li>\n<li>cookie 一种功能强大且高效持久身份识别技术</li>\n</ul>\n<h4 id=\"常用的-HTTP-首部\"><a href=\"#常用的-HTTP-首部\" class=\"headerlink\" title=\"常用的 HTTP 首部\"></a>常用的 HTTP 首部</h4><table>\n<thead>\n<tr>\n<th align=\"center\">首部请求</th>\n<th align=\"center\">首部类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">From</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">E-mail 地址</td>\n</tr>\n<tr>\n<td align=\"center\">User-Agent</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户的浏览器软件</td>\n</tr>\n<tr>\n<td align=\"center\">Referer</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户是从这个页面上转发过来的</td>\n</tr>\n<tr>\n<td align=\"center\">Authorization</td>\n<td align=\"center\">请求</td>\n<td align=\"center\">用户名和密码</td>\n</tr>\n<tr>\n<td align=\"center\">Client-IP</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">客户端的 IP 地址</td>\n</tr>\n<tr>\n<td align=\"center\">X-Forwarded-For</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">客户端端的 IP 地址</td>\n</tr>\n<tr>\n<td align=\"center\">Cookie</td>\n<td align=\"center\">扩展（请求）</td>\n<td align=\"center\">服务器产生的 ID 标签</td>\n</tr>\n</tbody></table>\n<p><strong>From</strong> 首部包含了用户的 E-mail 地址。每个用户都有不同的 E-mail 地址就，所以在理想情况下，可以将这个地址作为可行的源端来识别用户。但是担心 E-mail 被恶意收集和利用，所有很少有使用和发送 From 首部</p>\n<p><strong>User-Agent</strong> 首部可以将用户所有的浏览器的相关信息告知服务器，包括程序的名称和版本，通常还包含操作系统的相关信息。</p>\n<p><strong>Referer</strong> 首部提供了用户来源的 URL 。Referer 首部虽然不能完全标示用户，但它却是说明了用户之前访问过哪个页面，通过它可以更好的理解用户的浏览器行为。</p>\n<p>From、User-Agent、Referer 三者虽然都不足以对用户进行可靠的识别，但对也对用户的行为定位起到了一定的作用，User-Agent 可以判断用户的设备，让 Web 页面做出不同的行为。Referer 可以识别用户来源来做数据分析等等。</p>\n<h4 id=\"客户端-IP-地址\"><a href=\"#客户端-IP-地址\" class=\"headerlink\" title=\"客户端 IP 地址\"></a>客户端 IP 地址</h4><p>早期的 Web 先锋还尝试将客户端 IP 地址作为一种标识形式使用。如果每个用户都有不同的 IP 地址，IP 地址也很少发生变化，那么这种方法确实是可行的。但实际上通过客户端 IP 识别用户存在很多缺点，限制了将其作为用户识别技术的效能。</p>\n<ul>\n<li>IP 地址描述的是客户所使用的机器，而不是用户。如果多个用户使用同一台机器，就无法对其分别了</li>\n<li>很多因特网服务区会对登录网络的用户动态分配 IP 地址。用户每次登录都会获得一个不同的 IP 地址</li>\n<li>为了提高安全性，并对稀缺的地址资源进行管理，很多用户都是通过网络地址转换防火墙来浏览网络的。这些 NAT 设备隐藏了防火墙后面时实际客户端的 IP 地址，而将其转换成了客户一个防火墙共享的 IP 地址和不同的端口号来标识</li>\n</ul>\n<h4 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h4><p>Web 服务器无需被动的根据用户的 IP 地址来猜测他的身份，它可以要求用户通过用户名和密码进行认证来显示的询问用户是谁。</p>\n<p>而且为了使 Web 站点的登录更加简便，HTTP 中包含了一种内建机制，可以用 WWW-Authenticate 首部和 Authentication 首部向 Web 站点传递用户的相关信息。一旦登录浏览器就可以不断在每条发往这个站点的请你去中发送这个登录信息了。</p>\n<h4 id=\"胖-URL\"><a href=\"#胖-URL\" class=\"headerlink\" title=\"胖 URL\"></a>胖 URL</h4><p>有些站点还会为每个用户生成特定的 URL 俩追踪用户的身份。通常会对真正的 URl 进行扩展，在 URL 路径的尾部添加一些状态信息来表明用户相关信息，这种修改过的 URl 就被称之为 胖 URL( fat URL)</p>\n<p>这种方式存在几个很严重的问题</p>\n<ul>\n<li>用户相关信息直接暴露在外边</li>\n<li>破坏缓存，为每个用户生成 URL 就意味着不再有可供访问的公共缓存了。</li>\n<li>无法共享 , URl 的信息附带了当前用户的个人信息，发送给其他人就意味着信息被暴露了</li>\n<li>逃逸口，用户必须严格按照流程才能正常使用，如果用户逃离此链接可能会丢失进展（信息都在 URL 中）</li>\n</ul>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>cookie 是当前识别用户，实现持久会话的最好方式。前面各种技术存在的很多问题对它都没什么影响，但是通常也会将它们与那些技术公用，以实现额外的价值。</p>\n<p>cookie 定义了一些新的 HTTP 首部，同时 cookie 还影响了缓存，大多数缓存和浏览器都不会对任何 cookie 的内容进行缓存。</p>\n<p>可以将 cookie 笼统的分为两类：<strong>会话 cookie 和持久 cookie</strong> 。会话 cookie 是一种临时 cookie ，它记录了用户访问站点时设置的偏好和爱好。用户退出浏览器时，会话 cookie 就被删除了。持久 cookie 生存的时间会更长一些；它们存储在硬盘上，即使浏览器退出、计算机重启它们也仍然存在。通常会用持久 cookie 维护某个用户的周期性访问的站点和配置文件或登录名。它们唯一区别就是它们的过期时间。<strong>如果 cookie 设置了 Discard 参数或者没有设置 Expires 和 Max-Age 参数来说明扩展的过期时间，这个 coookie 就是一个会话 cookie</strong></p>\n<h5 id=\"cookie-是如何工作的\"><a href=\"#cookie-是如何工作的\" class=\"headerlink\" title=\"cookie 是如何工作的\"></a>cookie 是如何工作的</h5><p>Cookie 是一种非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。cookie 由服务器生成，发送给浏览器，浏览器把 cookie 以键值对（key-value）的形式保存在目录下的文本内，下一次请求同一网站时会把该 cookie 发送给服务器，服务器就能获得发送请求的用户的状态信息。</p>\n<h5 id=\"cookie-的传递\"><a href=\"#cookie-的传递\" class=\"headerlink\" title=\"cookie 的传递\"></a>cookie 的传递</h5><p>浏览器内部的 cookie 罐中可以有成百上千个 cookie，但浏览器不会将每个 cookie 都发送给所有的站点。产生 cookie 的服务器可以想 Set-Cookie 响应首部添加一个 Domain 属性来控制哪些站点可以看到那个 cookie。比如。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cooke:user=&quot;mary&quot;;domian=&quot;airtravelbargains.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>之后如果用户访问的是 .airtravelbargains.com 结尾的站点，那么 <code>user=&quot;mary&quot;</code> 的这个 cookie 信息都会被发布出去</p>\n<p>同时 cookie 规范甚至允许用户将 cookie 与部分 web 站点关联起来。可以通过 <code>path</code> 属性来实现这一功能，在这个属性下列出的 URL 路径前缀下的 cookie 都是有效的</p>\n<p>例如，某个 web 服务器可能是由两个组织共享的，每个组织都有独立的 cookie。站点 <a href=\"http://www.airtravelbargains.com/\">www.airtravelbargains.com</a> 可能会将部分的 web 站点用于汽车租凭——比如 <a href=\"http://www.airtravelbargains.om/autos/\">http://www.airtravelbargains.om/autos/</a> 用一个独立的 cookie 来记录用户喜欢的汽车样式。可能会生成一个特俗汽车租凭 cookie：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-cookie:pref=compact;domian=&quot;airtravelbargains.com&quot;;path=&quot;/autos/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果用户访问 <a href=\"http://www.airtravelbargains.om/specials.html\">http://www.airtravelbargains.om/specials.html</a> 它就只会获得这个 cookie :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie:user=“mary”</span><br></pre></td></tr></table></figure>\n\n<p>但如果访问 <a href=\"http://www.airtravelbargains.om/autos/index.html\">http://www.airtravelbargains.om/autos/index.html</a> 则就会获得两个 cookie：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie:user=&quot;mary&quot;</span><br><span class=\"line\">Cookie:pref=&quot;compact&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因此，cookie 就是服务器贴到客户端上由客户端维护的状态片段，只会回送给合适的站点。</p>\n<h1 id=\"认证机制\"><a href=\"#认证机制\" class=\"headerlink\" title=\"认证机制\"></a>认证机制</h1><p>现在有数以亿计的人在用 web 进行私人事务处理，访问私有的数据。我们保证能方便访问的同时，且只有特定的人能够看到我们的敏感信息并且能够执行我们的特权事务。并不是所有信息都是能够公开的。</p>\n<p>因此服务器需要通过某种方式来了解用户身份。一旦服务器知道了用户身份证，就以判断用户可以访问的事务和资源了。</p>\n<p>常见的 HTTP 认证分为基本认证（base authentication）和摘要认真（digest authentication）接下来就介绍两种认证机制</p>\n<h2 id=\"基本认证机制\"><a href=\"#基本认证机制\" class=\"headerlink\" title=\"基本认证机制\"></a>基本认证机制</h2><p>HTTP 提供了一个原生的质询&#x2F;响应（challenge&#x2F;response）框架，简化了用户的认证过程。</p>\n<p>Web 应用程序收到一条 HTTP 请求报文时，服务器没有按照请求执行动画，而是以一个“认真质询“进行响应，要去用户提供一些保密信息来说明他是谁，从而对其进行质询。</p>\n<p>当用户再次发起请求时要附上保密证书（用户名和密码）。如果政府不匹配则产生一条错误信息。如果匹配，则可以正常请求了</p>\n<h3 id=\"认证协议与首部\"><a href=\"#认证协议与首部\" class=\"headerlink\" title=\"认证协议与首部\"></a>认证协议与首部</h3><p>HTTP 通过一组可定制的控制首部，为不同的认证协议提供了一个可扩展框架。通过人们可以随意设计一些使用 HTTP 质询&#x2F;响应的新协议。</p>\n<p>HTTP 官方定义了两个协议：基本认证和摘要认证。</p>\n<h4 id=\"基本认证\"><a href=\"#基本认证\" class=\"headerlink\" title=\"基本认证\"></a>基本认证</h4><p>基本认证是最流行的 HTTP 认证协议。几乎每个主要的客户端和服务器都实现了基本认证机制。基本认证最初是在 HTTP&#x2F;1.0 规范提出的，但此后被移到了 RFC 2617 中</p>\n<p>在基本认证中， Web 服务器可以拒绝一个事务，质询客户端，请用户提供有效的用户和密码。服务器此时会返回 401 状态码来提示客户端需要认证，客户端收到质询后，请求用户输入用户名和密码，然后将用户米和密码稍加扰码再用 Authentication 首部将信息传递给服务器验证。具体的流程如下表格：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">步骤</th>\n<th align=\"center\">首部</th>\n<th align=\"center\">描述</th>\n<th>方法&#x2F;状态</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">请求</td>\n<td align=\"center\"></td>\n<td align=\"center\">第一条请求没有认证信息</td>\n<td>GET</td>\n</tr>\n<tr>\n<td align=\"center\">质询</td>\n<td align=\"center\">WWW-Authentication</td>\n<td align=\"center\">服务器用 401 状态拒绝了请求，说明需要用户提供用户名和密码</td>\n<td>401 Unauthorized</td>\n</tr>\n<tr>\n<td align=\"center\">授权</td>\n<td align=\"center\">Authentication</td>\n<td align=\"center\">客户端重新发送请求，这次会携带 Authentication 首部，内容部分用来说明算法、用户和密码</td>\n<td>GET</td>\n</tr>\n<tr>\n<td align=\"center\">成功</td>\n<td align=\"center\">Authentication-Info</td>\n<td align=\"center\">如果授权正确，服务器将会把文档返回</td>\n<td>200 OK</td>\n</tr>\n</tbody></table>\n<p>基本认证存简单便捷，但与此同时也存在很多的安全缺陷，只能用它防止非恶意用户无意间进行的访问，或将其配合 SSL 技术来使用。</p>\n<p>基本认证存在下列缺点：</p>\n<ul>\n<li><strong>用户信息容易被盗取</strong> 基本认证会通过网络发送用户名和密码，这些用户和密码只是用 Base-64 编码一下，攻击者可以很容易的获取到用户的明文用户名和密码</li>\n<li><strong>无法抵御重放攻击</strong> 即使用户名和密码进行了更难解码的方式加密，第三方用户任然可以捕获修改过的用户和密码，并将修改过的用户名和密码一次次的重放给服务器</li>\n<li><strong>没有提供针对代理和中间节点的防护措施</strong> 代理和中间节点可以不修改首部的认证信息而去修改报文的其余部分，这样就严重的改变了事务的本质</li>\n<li><strong>无法识别恶意服务器</strong> 基本认证只能服务器对客户端发起质询，客户端无法辨别服务器的真伪</li>\n</ul>\n<h4 id=\"摘要认证\"><a href=\"#摘要认证\" class=\"headerlink\" title=\"摘要认证\"></a>摘要认证</h4><p>摘要认证是另一种 HTTP 认证协议，它试图修复基本认证的严重缺陷。具体来说，它进行了如下改进：</p>\n<ul>\n<li>永远不会以明文的方式在网络上发送密码</li>\n<li>可以防止恶意用户捕获并重放认证的握手过程</li>\n<li>可以有选择地防止对报文内容的篡改</li>\n<li>防范其他几种常见的攻击方式</li>\n</ul>\n<p>摘要认证是一种升级版的认证方式，所用首部和基本认证类似。它的简要握手机制如下：</p>\n<ol>\n<li>服务器计算出一个随机数，并将随机数放在 WWW-Authentication 质询报文中，与之一同发送客户端的还有服务器所支持的算法列表</li>\n<li>客户端选择一个算法，计算出密码和其他数据的摘要，其后将摘要信息放置到 Authentication 报文中发回给服务器。如果客户端还要对服务器进行认证，可以发送客户端随机数。</li>\n<li>服务端收到摘要、选中的算法以及支持数据，计算出客户端相同的摘要。然后服务器将本地生成摘要与传送过来的数据进行比较，认证其是否匹配。如果客户端反过来通过客户端随机数对服务器机型质询，就会创建客户端摘要。</li>\n</ol>\n<p>摘要认证的核心就是对公共信息、保密信息和有时限的随即值这个组合进行信息摘要计算。来防止可能发生的密码窃听、认证重放以及报文内容篡改等。通常我们使用 MD5 等信息摘要算法</p>\n<p>摘要认证拥有较为完善的安全机制，但它也并不是万无一失的。它并没有对内容的安全提供任何保证——真正安全的事务只有通过 SSL 才能提供。</p>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><p>随着互联网的高速发展，越来越多的人在网络上处理一些很重要的事情。但如果没有强有力的安全保证，人们就会无法安心地进处理业务。基本认证和摘要认证已经无法满足人们，人们迫切的需要一种易于管理，不但能够适应不断变化的情况还应该能满足社会和政府的各项要求。我们需要一种能够提供下列功能的 HTTP 安全技术：</p>\n<ul>\n<li>服务器认证</li>\n<li>客户端认证</li>\n<li>完整性（客户端和服务端的数据不会被篡改）</li>\n<li>加密（客户端和服务端的对话是私密的，不会被窃听）</li>\n<li>效率（一个运行足够快的算法，以便低端的客户端和服务端能够使用）</li>\n<li>普适性（大多数客户端和服务端都是直接使用）</li>\n<li>管理的可扩展性（任何地方任何人可以立刻进行安全通信）</li>\n<li>适应性（能够支持当前最知名的安全方法）</li>\n<li>在社会上的可行性（满足社会的政治需要）</li>\n</ul>\n<p>HTTPS 就应运而生了。它是由网景公司首创的，所有主要的浏览器和服务器都支持此协议。</p>\n<p>使用 HTTPS 时，所有的 HTTP 请求和响应数据在发送到网络之前，都要进行加密。HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL 也可以使用其后继者——传输安全层（TLS），大部分困难的编码及解码工作都是又 SSL 库中完成的，所以 Web 客户端和服务器在使用 安全 HTTP 时无需过多地修改其协议处理逻辑。</p>\n<h4 id=\"数字加密\"><a href=\"#数字加密\" class=\"headerlink\" title=\"数字加密\"></a>数字加密</h4><p>详细了解 HTTPS 之前，我们先介绍一些 SSL 和 HTTPS 用到的加密编程技术的背景知识。</p>\n<p>最初，人们需要自己进行编码和解码，所以起初密码是相当简单的算法。后来机械技术的发展，使得人们开始制造一些机器，这些机器可以用复杂得多的密码来传递快递、精确地对报文进行编解码，但也仍然被机械设备的速度和功能限制着，之后计算机的发展打破了这些限制，使得超大密钥成为可能。超大密钥可以从一个加密算法中产生数万亿的虚拟加密算法，由不同的密钥值来区分不同的算法。密钥越长，编码组合就越多，通过随即猜测密钥来破解代码就越困难。</p>\n<h5 id=\"对称加密技术\"><a href=\"#对称加密技术\" class=\"headerlink\" title=\"对称加密技术\"></a>对称加密技术</h5><p>很多数字加密算法都被称为对称密钥（symmetric-key）加密技术，这是应为它们在编码和解码时使用的密钥一样。</p>\n<p>在对称密钥加密技术中，发送端和接收端要共享相同的密钥 K 才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文。</p>\n<p>常用的对称密钥算法包括：DES、Triple-DES、RC2 和 RC4</p>\n<p>对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，一定要有一个共享保密密钥。如果网络上的所有节点都要使用这种技术，那将是一个管理噩梦。</p>\n<h5 id=\"公开密钥加密技术\"><a href=\"#公开密钥加密技术\" class=\"headerlink\" title=\"公开密钥加密技术\"></a>公开密钥加密技术</h5><p>公开密钥加密技术没有为每对主机使用单独的加密&#x2F;解密密钥，而是使用了非对称密钥：一个用来对主机报文编码，另一个用来对主机报文解码。编码密钥众所周知的，但只有主机才知道私有的解密密钥。这样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更简单。但解码密钥是保密，只有接收端才能对发送给它的报文进行解码。</p>\n<p><strong>RSA</strong></p>\n<p>RSA 算法就是一个满足了所有这些条件的流行的公开密钥加密系统，它是在 MIT 发明的，后来由 RSA 数据安全公司将其商业化。即使有了公共密钥、任意一段明文、用公共密钥对明文编码之后得到的相关密文、RSA 算法自身、甚至源代码，破解代码找到相应的私有密钥的难度仍相当于对一个极大的树进行质因数分解的困难程度。</p>\n<h5 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h5><p>到目前为止，我们已经讨论了各种使用对称和非对称密钥加&#x2F;解密保密报文的密钥加密技术。除了加&#x2F;解密报文之外，还可以用加密系统对报文进行签名（sign），以说明是谁编写的报文，同时证明报文未被篡改过。这种技术叫做数字签名（digital signing）对下一节要讨论的英特网安全证书系统来说非常重要。</p>\n<p>数字签名是附加在报文上的特殊加密校验码。它有以下好处：</p>\n<ul>\n<li>签名可以证明作者编写了这条报文。只有作者才会有最机密私有密钥。因此只有作者才能计算出这些校验和。校验和就像来自作者的个人”签名”一样。</li>\n<li>签名可以防止报文被篡改。如果有恶意在报文传输过程中对其进行了修改，校验和就不再匹配了。由于校验和只有作者保密的私有密钥才能产生，所以攻击者无法为篡改了的报文伪造出正确的校验码</li>\n</ul>\n<p><strong>数字签名的认证过程</strong></p>\n<p>节点 A 向节点 B 发送与一条报文，它们的交互过程如下</p>\n<ol>\n<li>节点 A 将变长报文提取为定长摘要</li>\n<li>节点 A 对摘要应用了一个“签名”函数，这个函数会将用户的私有密钥作为参数。因为只有用户才知道私有密钥，所以正确的签名函数会说明签名者就是其所有者。</li>\n<li>一旦计算出签名，节点 A 将其附加在报文的末尾，并将报文和签名都发送给 B</li>\n<li>在接收端，如果节点 B 需要确定报文确实是节点 A 写的，而且没有篡改过，节点 B 就可以对签名进行检查。节点 B 接收经私有密钥扰码的签名，并应用了使用公开密钥的反函数。如果拆包后的摘要与节点 B 自己的摘要版本不匹配，要么就是报文在传输过程中被篡改了，要么就是发送端没有节点 A 的私有密钥（也就是说它不是节点 A）</li>\n</ol>\n<h5 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h5><p>数字证书与现实生活的 ID 卡一样，证书内的内容都是由某些受信任组织以数字方式签发的。证书一般包含证书的对象、发布者、数字签名以及公开密钥等等。任何人都能创建一个数字证书，但并不是所有人都能够获得受人尊敬的签发权，从而为证书信息担保，并用其私有密钥签发证书。</p>\n<p>通过 HTTPS 建立一个 Web 事务后，现代的浏览器都会自动获取所连接服务器的数字证书。如果没有证书，安全连接就会失败。服务器中包含很多字段，其中包括：</p>\n<ul>\n<li>Web 站点的名称和主机名</li>\n<li>Web 站点的公开密钥</li>\n<li>签名颁发机构的签名</li>\n<li>来自签名颁发机构的签名</li>\n</ul>\n<p>浏览器收到证书时会对颁发机构进行验证检查。如果这个机构是很有权威的公共签名机构，浏览器可能已经知道其公开密钥了（浏览器会预先安装很多签名颁发机构的证书），然后浏览器和服务器就开始通过数字签名来进行认证。</p>\n<p>如果它对颁发机构一无所知，浏览器就无法确定是否应该信任这个签名颁发机构，它通常提示用户，看看它是否信任这个签名发布者（例如 Chrome 中浏览不受信任的 HTTPS 链接时候，会有 X 和 <del>HTTPS:&#x2F;&#x2F;</del> 的提示来显示这是一个不安全的访问）</p>\n<h4 id=\"HTTPS-概述\"><a href=\"#HTTPS-概述\" class=\"headerlink\" title=\"HTTPS 概述\"></a>HTTPS 概述</h4><p>HTTPS 就是在安全的传输层上发送的 HTTP 。HTTPS 没有将未加密的 HTTP 报文发送给 TCP ，并通过世界范围内的因特网进行传输。而在在将 HTTP 报文发送给 TCP 之前，先将其发送给了一个安全层，对其进行加密。目前，HTTP 安全层是通过 SSL 及其现代代替协议 TLS 来实现的。</p>\n<p><strong>HTTPS 方案</strong></p>\n<p>通常情况下，非安全的 HTTP 的 URL 方案前缀为 http :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.baidu.com/</span><br></pre></td></tr></table></figure>\n\n<p>在安全 HTTPS 协议中，URL 的方案前缀为 HTTPS 如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n\n<p>当一个客户端对某 Web 资源执行事务时，它会去检查 URL 的方案。</p>\n<ul>\n<li>如果方案为 HTTP ，客户端就会打开一条到服务器端口 80 (默认情况下) 的连接，并向其发送老的 HTTP 命令</li>\n<li>如果方案为 HTTPS，客户端就会打开一条服务器到端口 443（默认情况下）的连接，然后与服务器“握手”。这个握手过程中它们要完成以下工作<ul>\n<li>交换协议版本号</li>\n<li>选择一个两端都了解的密码</li>\n<li>对两端的身份进行认证</li>\n<li>生成临时的会话密钥，以便加密信道</li>\n</ul>\n</li>\n</ul>\n<p><strong>服务器证书</strong></p>\n<p>SSL 支持双向认证，将服务器证书承载回客户端，再将客户端的证书回送给服务器。</p>\n<p>一方面浏览器并不经常使用客户端证书。大部分用户甚至没有客户端证书。服务器可以要求使用客户端证书，但实际上很少这样做。</p>\n<p>另一方面，安全 HTTPS 事务总是要求使用服务器证书的。服务器是一个显示了组织的名称、地址、服务器 DNS 域名以及其他信息的派生证书。你和你所用的客户端软件可以检查证书，以确保所有的信息都是可信的。</p>\n<p>虽然 SSL 自身并不要求用户检查 Web 服务器证书，但是大部分现代浏览器都会对证书进行简单的完整性检查，并为用户提供进行进一步彻查的手段。网景公司提出的一种 Web 服务器证书有效性算法是大部分浏览器有效性验证的基础。验证步骤如下：</p>\n<ul>\n<li><p>日期检测<br>首先，检查证书的起始日期和结束日期，以确保证书仍然有效</p>\n</li>\n<li><p>签名颁发者可信度<br>每个证书都是由某些证书颁发机构（CA）签发的，它们负责为服务器担保。证书有不同的等级，每种证书都要求不同级别的背景验证。任何人都可以生成证书，但有些 CA 是非常著名的组织，它们通过非常清晰的流程来验证证书申请人的身份及商业行为的合法性。因此，浏览器会附带一个签名颁发机构的授信列表。如果浏览器收到了未知颁发机构签发的证书，那它通常会显示一条警告信息。</p>\n</li>\n<li><p>签名检测<br>一单判定签名授权是可信的，浏览器就要对签名使用签名颁发机构的公开密钥，并将其与校验码进行比较，已查看证书的完整性。</p>\n</li>\n<li><p>站点身份检测<br>为防止服务复制其他人的证书，或拦截其他人的流量，大部分浏览器都会试着去验证书中的域名与它们所对话的服务器的域名是否匹配。</p>\n</li>\n</ul>\n<p><strong>OpenSSL</strong></p>\n<p>OpenSSL 是 SSL 和 TLS 最常见的开元实现，由一些志愿者合作开发，目前是开发一个强壮的，具有完备功能的商业级工具集，以实现 SSL 和 TLS 协议及一个全功能的通用加密库。可以从 <a href=\"https://www.openssl.org/\">https://www.openssl.org</a> 上获取完整的相关信息。</p>\n<h3 id=\"实体和编码\"><a href=\"#实体和编码\" class=\"headerlink\" title=\"实体和编码\"></a>实体和编码</h3><p>每天都有数以亿计的各种媒体对象经由 HTTP 传送，如图像、文本、影片以及软件程序等。只要你能叫出名字，HTTP 就可以传送，不经如此，它还需要保障它的报文被正确传送、识别、提取以及适当处理。做到这一步它要确保它所承载的“货物”满足以下条件</p>\n<ul>\n<li>可以被正确识别（通过 Content-Type 首部说明媒体格式，Content-Language 说明媒体语言），以便被客户端正确识别处理</li>\n<li>可以被正确解包（Content-Length 首部来说报文长度和 Content-Encoding 说明报文转码压缩方式）</li>\n<li>是最新的（Expires、Last-modified 来说明实效时间和最后修改时间，Cache-Control 来说明缓存）</li>\n<li>符合用户的需要（基于 Accept 系列的内容协商用户所需内容）</li>\n<li>在网络上可以快速有效的传输（通过范围请求、差异编码以及其他数据压缩方法）</li>\n<li>完整到达、未被篡改（通过 Content-Range 和 Content -MD5 来验证）</li>\n</ul>\n<p>可以看到 HTTP 为传输报文定制了一系列相关的报文首部，这些首部平常在日常也相当常见，我们这次就来详细了解它们的功能以及如何运作的。</p>\n<h4 id=\"实体结构\"><a href=\"#实体结构\" class=\"headerlink\" title=\"实体结构\"></a>实体结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Server:Netscape_enterprise/3.6</span><br><span class=\"line\">Data:Sun,17 sep 2000 00:01:05 GMT</span><br><span class=\"line\">一一一一一一一一一一一一一一一一一一一一一一一一</span><br><span class=\"line\">|Content-Type:text/plain \t\t\t\t |</span><br><span class=\"line\">|COntent-Lenght:18              实体首部  |</span><br><span class=\"line\">|                                        |     实体部分</span><br><span class=\"line\">|Hi! I`m a Message !            实体主体  |</span><br><span class=\"line\">|一一一一一一一一一一一一一一一一一一一一一一一一</span><br></pre></td></tr></table></figure>\n\n<p>上文可以看出，描述 HTTP 协议之后的内容就是实体部分，实体部分又分为两部分：实体首部和实体主体，他们之间由一个空白的 CRLF 行结束。</p>\n<p>回车符（CR）和换行符（LF） 是文本文件用于标记换行的控制字符或字节码。</p>\n<ul>\n<li>CR &#x3D; Carriage Return，回车符号（<code>\\r</code>，十六进制 ascii 码为 <code>0x0D</code> ，十进制 ascii 码为 <code>13</code>）,用于将鼠标移动至行首，并不前前进至下一行。</li>\n<li>LF &#x3D; Line Feed, 换行符号（<code>\\n</code>,十六进制 ascii 码为 <code>0X0A</code>,十六进制码为 <code>10</code>)。</li>\n</ul>\n<p>紧邻的 CR 和 LF （组成 CRLF ，<code>\\r\\n</code>，或十六进制 <code>0X0D0A</code>）将鼠标移动到下一行行首。（Windows 操作系统默认的文本换行符为 CRLF ；Linux 以及 macOS 系统默认使用 LF）</p>\n<h4 id=\"Content-Length\"><a href=\"#Content-Length\" class=\"headerlink\" title=\"Content-Length\"></a>Content-Length</h4><p>content-length 首部指示出报文中实体主体打字节大小。这个大小是包含了所有内容编码的，比如，对文文件进行了 gzip 压缩的话，content-Lenght 首部就是压缩后打大小，而不是原始大小。</p>\n<p>除了使用了分块编码，否者 Content-Length 就是带有实体主体的报文必须使用的。使用 Content-Length 首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。</p>\n<h4 id=\"实体摘要\"><a href=\"#实体摘要\" class=\"headerlink\" title=\"实体摘要\"></a>实体摘要</h4><p>尽管 HTTP 通常都是在 TCP&#x2F;IP 这样可靠传输协议之上实现的，但仍有很多因素导致报文的一部分在传输过程中被修改，比如不兼容的转码、代理有误等待呢个。为了检测主体的数据的完整性，发送方可以在生成初始的主体对主体运行 MD5 算法生成一个数据的校验和，通过 Content-MD5 首部发送给接收方。</p>\n<p>除了检测完整性之外，MD5 还可以当做散列表的关键字，用来快速定位文档并消除不必要的重复内容存储。</p>\n<h4 id=\"媒体类型和字符集\"><a href=\"#媒体类型和字符集\" class=\"headerlink\" title=\"媒体类型和字符集\"></a>媒体类型和字符集</h4><p>Content-Type 首部字段说明了实体主体的 MIME 类型。 MIME 类型是标准化的名字，用以说明作为货物运载实体的基本媒体类型。客户端应用程序使用 MIME 类型来解释和处理其中内容。如果实体主体部分经过内容编码的话，Content-Type 首部说明的仍然是编码之前的实体主体部分</p>\n<p>MIME 类型由一个住媒体类型（比如 text、image 或 audio 等）后面跟一条斜线以及一个子类型组成，子类型用于进一步描素媒体类型。下表中罗列一些常用的媒体类型</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">媒体类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">text&#x2F;html</td>\n<td align=\"center\">HTML 文档</td>\n</tr>\n<tr>\n<td align=\"center\">text&#x2F;plain</td>\n<td align=\"center\">纯文本文档</td>\n</tr>\n<tr>\n<td align=\"center\">image&#x2F;gif</td>\n<td align=\"center\">GIF 图像</td>\n</tr>\n<tr>\n<td align=\"center\">image&#x2F;jpeg</td>\n<td align=\"center\">JPEG 图像</td>\n</tr>\n<tr>\n<td align=\"center\">audio&#x2F;x-wav</td>\n<td align=\"center\">WAV 格式声音数据</td>\n</tr>\n<tr>\n<td align=\"center\">model&#x2F;vrml</td>\n<td align=\"center\">三维 VRML 模型</td>\n</tr>\n<tr>\n<td align=\"center\">application&#x2F;vnd.ms-powerpoint</td>\n<td align=\"center\">PPT 文档</td>\n</tr>\n<tr>\n<td align=\"center\">multipart&#x2F;byteranges</td>\n<td align=\"center\">实体主体有若干部分，每部分都包含了完整文档的不同的字节范围</td>\n</tr>\n<tr>\n<td align=\"center\">message&#x2F;http</td>\n<td align=\"center\">实体主体包含了完整的 HTTP 报文</td>\n</tr>\n</tbody></table>\n<p><strong>多部分媒体类型</strong></p>\n<p>MIME 中的 multipart 电子邮件报文中包含多个报文，它们合在一起作为单一的复杂报文发送。每一部分都是独立的，有各自的描述其内容的集；不同部分之间用分界字符连接在一起。</p>\n<p>HTTP 也支持多部分主体。不过，通常只用在下列两种情形之一：提交填写的表单，或是作为承载若干文档片段的范围响应。</p>\n<p>下边我们就举例介绍它们的传输格式</p>\n<p><strong>多部分表格提交</strong></p>\n<p>当提交填写的 HTTP 表格时，边长的文本字段和上传的对象都作为多部分主体里面独立的部分发送，这样表格中就可以填写各种不同类型和长度的值。</p>\n<p>HTTP 使用 Content-Type ：multipart&#x2F;from-data 或 Content-Type：multipart&#x2F;mixed 这样的首部以及多部分主体来发送这种请求，举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type：multipart/from-data ;boundary=AaB03x</span><br></pre></td></tr></table></figure>\n\n<p>其中 boundary 参数说明了分割主体中不同部分所用的字符串</p>\n<p>下面例子向我们展示了多表格提交的编码，假如我们有如下表格。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">aciont</span>=<span class=\"string\">&quot;http://server.com/cgi/handle&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>What is your name?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> ,<span class=\"attr\">name</span>=<span class=\"string\">&quot;submit-name&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>What files are you sending?<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;files&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;send&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;reset&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们在文本中输入 “Joke” 并选择了一个文本文件“essayfile.txt” ，那么它的主体构造可能是这个样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type : mutltipart/form-data;boundary=AaB03x</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;submit-name&quot;</span><br><span class=\"line\">Joke</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;files&quot;；filename=&quot;essayfile.txt&quot;</span><br><span class=\"line\">COntent-Type:text/plain</span><br><span class=\"line\">...contents of essayfile.txt....</span><br><span class=\"line\">--AaB03x--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果我们还选了了另一个图像文件 “imagefile.gif”，那么构造的主体可能就这个样子了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:multipart/form-data;bundary=AaB03x</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;submit-name&quot;</span><br><span class=\"line\">Joke</span><br><span class=\"line\">--AaB03x</span><br><span class=\"line\">Content-Disposition:form-data;name=&quot;files&quot;</span><br><span class=\"line\">Content-Type:multipart/mixed;boundary=BbC04y</span><br><span class=\"line\">--BbC04y</span><br><span class=\"line\">Content-Disposition:file;filename=&quot;essayfile.txt&quot;</span><br><span class=\"line\">Content-Type:text/plain</span><br><span class=\"line\">...contents of esssayfile.txt...</span><br><span class=\"line\">--BbC04y</span><br><span class=\"line\">Content-Disposition:file;filename=&quot;iamgefile.gif&quot;</span><br><span class=\"line\">Content-Type:iamge/gif</span><br><span class=\"line\">Content-Transfer-Encoding:binary</span><br><span class=\"line\">...contents of imagefile.gif...</span><br><span class=\"line\">--BbC04y--</span><br><span class=\"line\">--AaB03x--</span><br></pre></td></tr></table></figure>\n\n<p><strong>多部分范围提交</strong></p>\n<p>HTTP 对范围请求的响应也可以使多部分的。这样的响应中有 Content-Type:mutipart&#x2F;byteranges 首部和带有不同范围的多部分主体。</p>\n"},{"layout":"post","title":"《程序员修炼之道》","subtitle":"读书笔记","date":"2024-09-13T07:25:00.000Z","author":"rank","header_image":"img/post-bg-book.jpg","_content":"\n# 前言\n\n这本书的上一版《从小工到专家》其实我就早有耳闻了，但是当时觉得这个翻译的名字很糟糕，且周围并没有人去推荐它，我就打消了看它的念头。然后今年闲暇下来发现这本书的再版，书籍的名称也变为了《程序员修炼之道》，抱着看闲书和京东打折的契机，把它买了下来。看完两章发现自己两年前错失了一部能快速获得经验，提高生产力的的书籍。书有可前浅尝者、有可吞食者，少数需咀嚼消化，这本书我认为就属于需要咀嚼消化的那种书，帮助你提取一些之前成功项目的的原因，也可以让你思考生活与工作遇到同一类问题的处理方式。\n\n# 务实的方法\n\n## 人生是你的\n\n> 我活着不是为了满足你的期望，正如你不是因为我的期望而活着\n—— 李小龙\n> \n\n软件开发在任何职业列表中，都绝对是你自己最能掌控的职业之一。我们的技能供不应求，我们的知识不限于地域，我们可以远程工作。我们收入颇丰。我们真的可以做到我们任何想做的事。但是总有一些原因导致开发者们拒绝改变，他们蜷缩在那里，期盼事情会自己变好，眼睁睁的看着自己的技能过时，再去抱怨世界日新月异，工作环境糟糕。\n\n虽然看起来作者有种何不食肉糜的感觉，但其实在现如今的行业划分里，软件开发确实是最能自己掌握的职业之一。互联网上基本上有你所需要的所有资料，而且即使你只会一种编程语言，今年你可以做金融，明年就可以无缝做购物，后年可以跑去做车载，你的职业经验仍然大部分适用。**职业环境并不会对你的事业有很大的限制，能限制的只有你自己。**\n\n## 我的源码被猫吃了\n\n> 如果你面临供应商帮不上忙这样的风险，就应该制定一个应急方案。如果磁盘挂起——你所有的源码都在里面，这就是你的错。跟你的老板说“我的源码都被猫吃了” 解决不了问题\n> \n\n### 团队信任\n\n你的团队需要你能信赖和依赖你——你也应该同样地放心依赖他们每个人\n\n- 不必直接掌控事情的各个方面\n- 表达你的思想，说出你的想法。缔造一个以信任为基础的健康环境\n\n### 承担责任\n\n在承接需求或任务前，你必须分析超出你控制范围的风险情况，如果责任的伦理内含过于含糊，或是面对无法实现的情况，亦或是风险过大，你都有权不承担责任。在这个阶段就及时把问题抛出，重新评估任务的可行性或是明确风险情况的责任人\n\n在决定对一个结果承担责任时，要明白你将承接相关的义务。当你犯了错误，或是做出了错误的判断，诚实地承认它，并尝试给出选择\n\n**给出选择，而非借口** 给出选择并非要求你一定像上文例子里一样，做事都有 plan B, 即使在世界末日都能从兜里掏一台时空穿梭器。而是你跑过去告诉他们坏消息前，最好能解释下做些什么才能挽回局面。队友和领导都很乐于与这种人公事，他们在这种场景下能以更低的成本去参与到新问题和新需求的处理中\n\n## 软件的熵\n\n虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵增加重击。**熵**是一个物理学术语，它定义了一个系统的“无序”总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。而软件开发因为各种 Bug 的修复，需求的新增和补充，软件的复杂度和无序化也在逐步增加，本小节主要是探讨如何避免软件的熵的增加\n\n- “破窗效应”——制定了规则就要需要严格遵守，例如 Code Review 、Code Lint 软件架构 等 ，这些规则都是为了保持软件的可读性以及降低程序的复杂性，既然制定了就要好好遵守，而非流于表面。窗户一旦开始破裂，运转良好的系统会迅速恶化。\n- “领头羊效应”—— 在必要的时候，主动承担责任，做推动变革的催化剂。\n- “温水煮青蛙”—— 留意大局，持续不断的审视你身边发生的事情，不要只专注你个人在做的事情。即使你只负责部分的事务，也需要对宏观上能影响你的事件保持敏锐。\n\n## 做够好即可的软件\n\n> 为了追求更好，我们毁损了原已够好的\n—— 莎士比亚《李尔王》\n\n现实世界不会让我们生产出真正完美的产品，尤其是没有 Bug 的软件。时间、技术、急躁合力对抗着我们。对软件开发者来说要明白以下几点\n\n- 将质量视为需求问题——对于你创建的系统，其应用领域和要达到的质量，必须作为系统需求的一部分加以讨论\n- 让用户参与权衡—— 无视用户的需求，一味的堆砌功能，一次次打磨代码，这是不专业的表现。你可能会承诺一个无法兑现的时间尺度，然后为了赶上截止日期，再回过头去删减工程。\n- 知道何时止步——不要让过度地修饰和精炼侵蚀掉一个完好的程序。继续前行，让代码在它该有的位置驻留一段时间。它或许不完美，不要紧的 —— 它就算不完美也没关系 (这部分代码既不影响性能，也不影响功能，你可能永远都不需要再改动它了)\n\n## 知识组合\n\n> 投资知识，收益最佳\n—— 本杰名·富兰克林\n> \n\n知识和经验的确是你最重要的专业资产，可惜的是，它们是一种时效性资产。随着新技术的出现，以及语言和环境的发展，你的知识会变得过时 。不断变化的市场力量可能会使得经验变得陈旧而无关紧要。鉴于技术社会变化的速度越来越快，这种事情可能会发生得特别迅速。当你的知识价值下降时，你对于公司和客户的价值也在下降。想要阻止这一切的发生，学习新事物的能力是你重要的战略资产。\n\n管理知识组合和管理金融投资组合非常的类似：\n\n1. 正规投资有**定期投资**的习惯\n及时更新自己的专业视野，了解新的工具和技能，阅读相关的新闻和技术贴。\n2. **多样化**是长线成功的关键\n扩展自己的技能领域，熟悉的技能越多，越能适应变化\n3. 聪明的投资者会**平衡**保守型和高风险形回报投资的**组合**\n及时了解新的行业动向，并尝试接触与学习，不要去当听众，主动参与。\n4. 投资者用**低买高卖**来获得最大的回报\n例如前些年的大数据、前端开发，又如现在的低代码以及车联网。它们在这时会有相较于平常较高的溢价，如果你有足够的能力和储备，那么你可以在工作回报上又较高的提升，但需要明确的是，在蓝海回归红海后，也可能有较大的风险。需要你有应对风险的能力\n5. 定期审查和**重新平衡投资**组合\n根据当前的行业趋势，去重新审视自己的技术树，调整自己学习的优先级\n\n> 是否在某个项目中使用这些技术或者是否把它放入你的简历中，这并不重要。学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式扩展。思想的“异化授粉”（cross-pollination) 十分重要。设法把你所学的东西应用到你当前的项目中，即使你的项目没有使用该技术，你也可以借鉴一些想法\n> \n\n### 学习的机会\n\n- 提前把一些资料准备在触手可及的地方，在有兴趣的时候能够及时拿到\n- 把找到答案当做一个个人挑战，去尝试用各种方法更新自己的知识组合\n- 不要把问题搁置，自己找不到答案，就去找出能找到答案的人。与他人交谈既可以帮你建立人际网络，在这个过程中也可以受益良多\n\n### 批判性思维\n\n> Critically Analyze What You Read and Hear\n> \n\n批判性思考读到的和听到的东西。你需要确保组合中的知识是精准的，未受到创作者的影响。\n\n批判性思维是一门完整的学科，这里起个头：\n\n- 问 “五个为什么” —— 在得到答案后继续为什么，来更接近本源。在日常沟通中要注意技巧，防止认为是挑衅而被揍\n- 谁从中受益——虽然听起来比较世俗，不过这样更容易理清脉络\n- 有什么背景——每件事都发生在它自己的背景下，这也是为何“能解决所有问题”的方案通常不存在，而那些兜售“最佳实践”的书或文章经不起推敲（好吐槽）\n\n## 交流\n\n> 我认为被人从头打量到脚总比被人视而不见的好\n—— 《九十岁的美女》\n> \n\n只是拥有是不够的，还要看你如何包装它。即使拥有最好的想法、漂亮的代码、最务实的思想，如果不能和它人交流，最终都无法孕育出果实。\n\n把你的母语当做一门编程语言，像写代码一样用自然语言写文章，尊重DRY原则，ETC、自动化 等等（后续会提到）。\n\n- 了解听众 —— 根据听众不同，选择用不同的方式和风格描述你要介绍的系统\n- 明白自己想说什么 —— 写好大纲，提炼核心\n- 选择时机 —— 确定轻重缓急\n- 让听众参与——让听众参与,把会议变成一场谈话，你可以更有效地表达你自己的观点，还可以听取他们的反馈，汲取他们的智慧。\n- 发送文字前检查拼写和接收人\n\n# 务实的方法\n\n> 有一些技巧和方法适用于软件开发的所有层级，其中蕴含的思想几乎成了公理，实施过程中也非常通用。然而，这些方法很少被规范成文档。现在，这些想法和过程集中这里。形成了 DRY ETC 等原则，以及原型和便签等方法论\n> \n\n## ETC (Easier To Change)\n\n能适应使用者的就是好的设计。对代码而言，就是要顺应变化（让代码更容易阅读、解耦、单一职责、可替换）ETC（更容易变更） 是一种价值观念，而不是一条规则；当你在**软件领域思考时，ETC 是个向导，它能帮助你在不同路线中选出一条**。\n\n在你有能力辨别时，常识通常都不会错，有事如果你找不到线索，你可以做以下的事情\n\n1. 假设不确定什么形式的改变会发生，那么就回到问题的可能产生的源头——让你的写的东西可替换。这样无论将来发生了什么，这块代码都不会称为障碍。\n2. 把它当做培养直觉的一种方式。在工程日记中留下你面临的处境：你有哪些选择，以及改变的一些猜测。以便以后必须修改这块代码时，方便回顾。在在遇到类似的分叉口时，这会有所帮助。\n\n## DRY (Dot Replay You)\n\n知识并不稳定，知识会改变——通常频率还很高。可能只要和客户开个会，对需求的理解马上就变了。政府改了条规定，一些逻辑就过时了。当我们进行维护时，必须找到变更事物的表达——那些嵌入程序的知识胶囊。问题是，在规范、流程、开发的程序中复制知识太容易了，一旦我们动手这么做，就会招致维护的噩梦。想要可靠地开发软件，或让开发项目变得跟容易理解和维护，唯一的方法是遵循 **DRY 原则—— 在一个系统中，每一处知识都必须单一、明确、权威的表达**\n\nDRY 指的不要重复自己，所以它并不是但指的“不要复制粘贴底代码”，这的确是 DRY 的组成部分，但这是很小的部分，一点都不重要。\n\nDRY 针对的是你对知识和意图的复制，它强调的是，如果两个地方表达的东西其实相同的，只是表达方式不同，那么它也违反了 DRY 原则。同理，如果两个地方的表达方式完全相同，但他们在不同模块中承担不同的职责，那么他们并不违反 DRY 原则。\n\n### Code Lab\n\n- 统一访问原则——《面向对象软件构造》中描述：一个模块提供的服务都应该通过统一的约定来提供，该约定不应该表露出其实现是基于储存还是基于运算。\n- 你努力的方向，应该是孕育出一个更容易找到和复用已有事物的环境，而不是自己重新编写。若果复用不容易，人们就不会这么做。如果你未能复用，就有重复知识的风险\n\n## 正交性\n\n“正交性”是从几何学中借用来的术语。若两条直线相交后构成直角，它们就是正交。\n\n![线段 AB 与 CD 彼此正交](img/post-icon-xiulian-01.png)\n\n线段 AB 与 CD 彼此正交\n\n 在计算科学中，这个术语象征着独立性和解耦性。良好的架构系统中，两个模块之间应该相互独立，其中一个模块的修改不应该影响另一个模块。正交的系统可以提高生产力和降低风险，更好的应对不断变化的业务和需求。\n\n如何保持系统的正交性：\n\n- 保持代码解耦、避免全局数据、避免相似的函数\n- 养成不断质疑代码的习惯。有机会就重新组织、改善其结构性和正交性\n- 基于正交性设计和实现的系统更容易测试。因此编写单元测试本身就是一个有趣的正交性测试。做什么才能让单元测试构建并运行起来？如果需要导入系统其余的大部分代码，那么恭喜你就发现一个与系统其余部分没有很好解耦的模块\n- **记录并评估和问题的修复方案和范围**，对已经修复的问题归档和记录，在阅读报告中去分析每个 Bug 修复的所影响的模块和文件数量趋势。以此来发觉系统中不稳定的模块，或是设计的不正交的模块。\n\n## 可逆性\n\n- 保持灵活的架构\n- 放弃追逐时尚\n\n## 曳光弹\n\n曳光弹能够快速抵达目标，枪手可以得到及时反馈——如果曳光弹集中了目标，那么之后的常规子弹也会被击中。\n\n同样地原则也适用于做项目。特别是在要构建一些从做过的东西时，我们可以进行曳光弹式的开发\n\n### 优势\n\n- 能够构造一个在其中工作的框架（Core）\n- 能对进度有更好的感觉，通过对这些案例的更重，度量性能和向用户展示进度要容易的多\n- 更小的试错成本，你可以将核心部分快速同用户沟通展示，确认是否是它们想要的。以更快的速度，更小的成本收集到程序的反馈，并生成一个更准确的版本。\n\n### 方法论\n\n- 在需求评审和开发阶段，寻找需要的核心部分，那些定义了系统的部分，有重大风险的地方。然后对这部分排列优先级，优先从这里处理。\n- 注意曳光弹的场景是快速构建一个完整系统的雏形，并非是制作原型\n\n### 与原型的区别\n\n原型制作生成的是一次性代码，曳光弹虽然简单，但它是完整的，是最终框架的组成部分。**原型是用来验证方案的可行性，而曳光弹是用来验证系统的可行性**。\n\n## 原型制作\n\n> 原型制作是为了学习经验。它的价值不在于产生的代码，而在于吸取的教训。这正式原型的意义所在\n> \n\n原型制作比完整的产品制作要便宜得多。因此我们可以通过制作原型来分析和暴露风险，以一种大幅减低成本的方式获得修正的机会。原型被设计出来，只是为了回答问题的答案，因此可以忽略很多不重要的细节。但如果你发现自己处在于一个不能放弃细节的环境中。那么可能曳光弹式开发更适合你。\n\n当你制作原型时，哪些细节可以忽略：\n\n- 正确性——你可以在适当的时候替代掉数据\n- 完整性——原型只需要满足优先的功能\n- 健壮性——错误和边界条件并不是必须的，你只需要验证特定的航线\n- 格    式—— 并不需要太多的注释和文档\n\n制作原型时，尽量推迟思考细节，你要确定的是，系统的各个部分是怎么结合形成一个整体的。\n\n## 领域语言\n\n> 语言之界限，即是一个人世界之界限\n——路德维希·维特根斯坦\n> \n\n计算机语言会影响你怎样思考问题，影响你怎样看待信息的传播。每一门语言都有一个特性列表——静态类型、动态类型、mixin、函数式还是面向对象——所有这些对问题的解决方案，既可能是提供建议也可能扰乱视听。在一些案例中，**高阶的程序员能跨越到下一个层级，不是用词汇表来编写代码，而直接用该领域的语言编程，直接使用该领域的词汇、语法和语义**（DSL）\n\n对于传统的语言，例如 Java 这种，我们可能使用外部语言例如 XML 或者 JSON 需要编写额外的解析器，但是向现代语言例如 Kotlin 这种，它们对于 DSL 的支持是极为优秀的。我们可以通过现有的词汇表来轻松扩展出 DSL 语言来。\n\n从另一个角度思考，ChatGPT 以及 Copilot 的兴起和趋势。将编写业务代码的大部分工作交由 AI 来完成会提高我们的工作效率，理想情况下我们只需要提供边界完善和剪枝的操作。但是如何将业务需求转换为语言模型能够明确理解的文字，这也同样考验证的我们通过母语的编程能力，可以较为清晰的通过母语将需求与环境描述清楚，语言模型才能根据我们需要生成所需要的代码。我们在以后的需求场景可能要锻炼我们通过母语来编写伪代码的能力，以此来应对日新月异的 AI 发展，和提高自己的工作效率\n\n## 估算\n\n在接收到一个问题或是需求时，我们通过对估算，可以快速判断该事件的可行性。而估算的前提是——**对问题建模**。当我们理解问题或是需求时，就开始为之建立一个粗略的思维框架模型。在建模的过程中，你可以发现一些表面上看不出来的潜在模式和过程。在得到模型后，就可以将其分解成组件，你需要发掘出这些组件如何交互的数学规则。\n\n### 如何估算项目进度\n\n- RERT（ Program Evaluation Review Techningue ）每个 PERT任务都有一个乐观的、一个可能的和一个悲观的估算，像这种带着范围值的估算，他能避免最常见的估算错误因素。\n- 增量开发：将任务分为不同阶段，在每次迭代后，提炼其中的经验，完善对进度的控制。\n\n问题建模也是之后让 AI 编程的核心方法论，只有通过建模的形式，我们才可以将需求或问题清晰表达，以及将各个节点拆分成组件，再讲这些组件的模型在未实现实际代码时就明确的划分其职责和功能\n\n# 基础工具\n\n## 纯文本\n\n作为程序员，我们基础材料不是木头或铁块，而是知识。我们把需求以知识的形式收集起来，然后在设计、实现出、测试和文档中表达这些知识。纯文本，则是我们认为是将知识持久地存储下来的最佳格式。\n\n所谓的纯文本并不是但只是指 txt 格式的文件，而是可以任何可以被人类直接阅读，编辑器可以直接解析的文本数据。纯文本的优势是\n\n- 防备老化的保险 —— 如今的很多知识软件的使用和更新都依赖于网络和维护，，当存储数据的应用程序生命周期结束后，如果它不支持导出纯文本数据，那么你在应用程序中存储的知识想要重新使用起来就极为困难了。\n- 易于检索——使用纯文本记录，我们可以无缝的使用版本管理来管理修改记录，通过 Shell 功能来任意搜索和匹配你的知识，也可以扔到一些文本编辑器中快速查找。而不需要依赖于特定的软件，和它们垃圾的检索功能（例如微信）\n- **熟练使用编辑器以及 Shell** —— 图形工具的好处自安于 WYSIWYG （所见即可得）；弱势之处是 WYSIAYG（所见即全部），如果图形工具的设计者没有为你的额外的需求设计钩子，那你就是做不到。而借助编辑器和 Shell 强大的生态和泛用性，你可以组合它们获得十分强大的能力，且这份知识还是通用的，它并不局限于某个 IDE 中。\n- **充当配置项** —— 配置项可以让你迫使你解除你的设计的耦合，从而带来更灵活可适应性更好的程序\n\n## 工程日记\n\n日记的好处\n\n- 它比记忆更加可靠\n- 它为提供了一个地方，用来保存于当前任务无关的想法。这样你就可以继续专注正在做的事情，并指导这个伟大的想法不会被遗忘\n- 它就像一个橡皮鸭。当你停下来，把东西写上去的时候，大脑可能会换挡，几乎就像在和某个人说话一样——这是一个反思的好机会。你可以在开始做笔记的时候，突然意识到刚刚做的事情，也就是笔记的主题是完全错误的。\n\n还有一个额外的好处，你能时不时的想起很多年前你在做什么，会想起那些人、那些事，以及那些糟糕的衣服和发型。\n\n# 务实的偏执\n\n> 自责中往往有种奢侈。我们自责时，总觉得别人无权再则被我们\n—— 奥斯卡·王尔德《道林·格雷的画像》\n> \n\n### BDC 契约式编程\n\n### TDD 测试驱动开发\n\n作者讲述了 BDC 和 TDD 的开发模式，主要是针对防御式编程和断言式编程的理念的推崇 —— 及在代码设计阶段把边界条件思考充分，并进行 Check . 在出现问题时，及早将异常抛出，避免进一步危害整个系统。这是一个合格程序员的基本功，也没有什么特别的方法论。其中值得称道就是断言编程的开关性，我们可以像一个 Google 源码一样，只在 debug 模式中开启断言，这样可以日常开发和测试流程时就把一些问题明显的暴露出来。而在生产模式中，秉承着用户优先和性能损耗的理念。我们可以关掉断言，补充日志。\n\n### 很多时候，明天看起来会和今天差不多，但不要指望一定会这样\n\n- 在做设计与维护的时候，对超过可见范围的模块的维护和设计，并不一定需要浪费精力为不确定的未来做设计（徒增复杂性，像另一本书降到，Android 0.x 版本时，硬件是不支持 GPU 的，而负责开发的 Google 工程师在制作图形渲染这一块时，并没有设计整个系统，而是设计了一块虚拟的 GPU，当 Android 后续的版本支持 GPU 后，只需要将虚拟 GPU 的模块替换掉，系统的设计仍然保留），还不如将代码设计成可替换的。使代码可替换，还有助于提高内内聚性、解耦和 DRY，从而实现更好的设计。\n- 软件开发中，总是采取经过深思熟虑的小步骤，同时检查反馈，并在推进前不断调整。把反馈的速率当做速度限制，永远不要进行 “太大” 的任务步骤\n\n# 并发\n\n并发性是指两个或更多个代码在执行过程中表现得像是在同时运行一样。并行性则值得是它们的确是在同一时刻运行。\n\n像获得并发性，需要在一个特殊的环境下运行下运行。当代码运行时，这个环境可以在其不同部分之间切换执行过程。这样的环境通常基于线程、进程、携程来实现\n\n像获得并行性，则需要又可以同时做两件事情的硬件，通常是同一 CPU 上的多核心，同一机器上的多个 CPU 或连接在一起的多台计算机。\n\n# 编码\n\n- 时刻注意你在做什么，事情往往是慢慢失去控制的\n- 你能向一个更初级的程序员详细解释一下代码么？如果做不到，也许可能正在依赖某个巧合\n- 要按计划推行，无论这个计划是以什么形式存在\n- **不要只测试代码，还要测试猜测。去实际试一下一些假设以及边界条件，确定你的代码在你所能预知的场景都能正常工作**\n- 为你的精力投放安排一个优先级。要把时间花在重要的方面。\n\n## 重构\n\n软件开发最常见的隐喻是建筑的构建。商务人士对建筑的隐喻感到很舒服：它是科学的，可重复的，管理上有严格的汇报层次结构，等等。但实际上园艺的隐喻更接近于现实的软件开发：它更像一个有机体而非钻石堆砌，你需要不断观测花园的健康状态，根据需要对（土壤、职务、布局）做出调整。\n\n### 如何重构\n\n- 不要试图让重构和添加功能同时进行\n- 在开始重构之前，确保有良好的拥有良好的测试环境。尽可能多地运行测试。这样，如果变更破坏了任何东西，都将尽快得知。\n- 采取简短慎重的步骤：将字段从一个类移动到另一个类，拆分方法，重命名变量。重构通常涉及对许多全局变量的修改，这些局部变量会导致更大范围的修改，若果保持小步骤，并在每个步骤之后进行测试，就能避免冗长的调试。\n\n### 测试\n\n测试的好处主要发生在你考虑测试以及编写测试的时候，而不是在运行测试的时候。\n\n你编写的所有软件都将进行测试 —— 如果不是你和你的团队测试，那就要由最终用户测试 —— 所以你最好计划对其进行彻底的测试。 一点预先的准备可以大大降低维护费用，减少客诉。\n\n# 项目\n\n> 完美，不是在没有什么需要增加，而是在没有什么需要去掉时达到的\n> \n\n## 需求\n\n### 挖掘需求\n\n找出用户为何要做特定事情的原因，而不只是他们目前做这件事的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不是满足他们陈述的需求。用户文档记载需求背后的原因将在每天进行实现决策时给你的团队带来无价的信息。\n\n### 明确需求\n\n用户陈述的的要求并不一定是真正的需求。例如 “只有员工的上级和人事部门此案可以查看员工的档案” 这个陈述今天看来也许是个需求，但是由于它在陈述中嵌入了商业政策，而政策会经常改变，改变可能只是一些相对微妙的区别，但是对开发者来说就却有深远的影响。如果需求被陈述为 “只有人事部门才能查看员工档案” —— 开发者最后就可能编写在每次客户端访问时，进行明确的检查。但是如果陈述是 “只有授权的用户才可以访问员工档案”，开发者就可能设计一套完整的访问控制系统，当政策改变时，只有该系统的元数据需要修改。\n\n所以我们可能不并不想把他硬性的写入我们的需求中。最好的是把政策和需求文档分开，需求作为研发目标输出给开发者，而政策则是他们需要在实现中支持的事物类型的例子。最后，政策可以成为应用中的元数据。\n\n### 需求文档\n\n制作需求文档时的一大危险是太过具体。好的需求文档会保持抽象。在涉及需求的地方，最简单的准确地反映商业需求要的陈述是最好的。这并非意味着你可以含糊不清 —— 你必须把底层的语义不变项当作需求进行捕捉，并把具体的或当前的工作实践当作政策进入文档。\n\n—— 需求不是架构。需求不是设计，也不是用户界面。需求是需要。\n\n## 问题\n\n- 对谜题的所有解决方案进行陈列，分解。并解释为何不能采用这个方案，确定么，是否能证明？\n- 自我提问，确定问题的核心以及当前的疑惑的是否是真正的问题还是外围的技术问题转移了注意力？\n\n# 傲慢与偏见\n\n注重实效的程序员不会逃避责任。相反，我们乐于接受挑战，乐于使我们的专业知识广为认知。如果我们在负责一项设计，或是一段代码，我们是在做可以引以为豪的工作。\n\n","source":"_posts/2024-09-13-program_developer_experience.md","raw":"---\nlayout: post\ntitle: \"《程序员修炼之道》\"\nsubtitle: \"读书笔记\"\ndate: 2024-09-13 15:25:00\nauthor: \"rank\"\nheader_image: \"img/post-bg-book.jpg\"\ntags:\n  - 读书笔记\n  - 方法论\n  - Book\n---\n\n# 前言\n\n这本书的上一版《从小工到专家》其实我就早有耳闻了，但是当时觉得这个翻译的名字很糟糕，且周围并没有人去推荐它，我就打消了看它的念头。然后今年闲暇下来发现这本书的再版，书籍的名称也变为了《程序员修炼之道》，抱着看闲书和京东打折的契机，把它买了下来。看完两章发现自己两年前错失了一部能快速获得经验，提高生产力的的书籍。书有可前浅尝者、有可吞食者，少数需咀嚼消化，这本书我认为就属于需要咀嚼消化的那种书，帮助你提取一些之前成功项目的的原因，也可以让你思考生活与工作遇到同一类问题的处理方式。\n\n# 务实的方法\n\n## 人生是你的\n\n> 我活着不是为了满足你的期望，正如你不是因为我的期望而活着\n—— 李小龙\n> \n\n软件开发在任何职业列表中，都绝对是你自己最能掌控的职业之一。我们的技能供不应求，我们的知识不限于地域，我们可以远程工作。我们收入颇丰。我们真的可以做到我们任何想做的事。但是总有一些原因导致开发者们拒绝改变，他们蜷缩在那里，期盼事情会自己变好，眼睁睁的看着自己的技能过时，再去抱怨世界日新月异，工作环境糟糕。\n\n虽然看起来作者有种何不食肉糜的感觉，但其实在现如今的行业划分里，软件开发确实是最能自己掌握的职业之一。互联网上基本上有你所需要的所有资料，而且即使你只会一种编程语言，今年你可以做金融，明年就可以无缝做购物，后年可以跑去做车载，你的职业经验仍然大部分适用。**职业环境并不会对你的事业有很大的限制，能限制的只有你自己。**\n\n## 我的源码被猫吃了\n\n> 如果你面临供应商帮不上忙这样的风险，就应该制定一个应急方案。如果磁盘挂起——你所有的源码都在里面，这就是你的错。跟你的老板说“我的源码都被猫吃了” 解决不了问题\n> \n\n### 团队信任\n\n你的团队需要你能信赖和依赖你——你也应该同样地放心依赖他们每个人\n\n- 不必直接掌控事情的各个方面\n- 表达你的思想，说出你的想法。缔造一个以信任为基础的健康环境\n\n### 承担责任\n\n在承接需求或任务前，你必须分析超出你控制范围的风险情况，如果责任的伦理内含过于含糊，或是面对无法实现的情况，亦或是风险过大，你都有权不承担责任。在这个阶段就及时把问题抛出，重新评估任务的可行性或是明确风险情况的责任人\n\n在决定对一个结果承担责任时，要明白你将承接相关的义务。当你犯了错误，或是做出了错误的判断，诚实地承认它，并尝试给出选择\n\n**给出选择，而非借口** 给出选择并非要求你一定像上文例子里一样，做事都有 plan B, 即使在世界末日都能从兜里掏一台时空穿梭器。而是你跑过去告诉他们坏消息前，最好能解释下做些什么才能挽回局面。队友和领导都很乐于与这种人公事，他们在这种场景下能以更低的成本去参与到新问题和新需求的处理中\n\n## 软件的熵\n\n虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵增加重击。**熵**是一个物理学术语，它定义了一个系统的“无序”总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。而软件开发因为各种 Bug 的修复，需求的新增和补充，软件的复杂度和无序化也在逐步增加，本小节主要是探讨如何避免软件的熵的增加\n\n- “破窗效应”——制定了规则就要需要严格遵守，例如 Code Review 、Code Lint 软件架构 等 ，这些规则都是为了保持软件的可读性以及降低程序的复杂性，既然制定了就要好好遵守，而非流于表面。窗户一旦开始破裂，运转良好的系统会迅速恶化。\n- “领头羊效应”—— 在必要的时候，主动承担责任，做推动变革的催化剂。\n- “温水煮青蛙”—— 留意大局，持续不断的审视你身边发生的事情，不要只专注你个人在做的事情。即使你只负责部分的事务，也需要对宏观上能影响你的事件保持敏锐。\n\n## 做够好即可的软件\n\n> 为了追求更好，我们毁损了原已够好的\n—— 莎士比亚《李尔王》\n\n现实世界不会让我们生产出真正完美的产品，尤其是没有 Bug 的软件。时间、技术、急躁合力对抗着我们。对软件开发者来说要明白以下几点\n\n- 将质量视为需求问题——对于你创建的系统，其应用领域和要达到的质量，必须作为系统需求的一部分加以讨论\n- 让用户参与权衡—— 无视用户的需求，一味的堆砌功能，一次次打磨代码，这是不专业的表现。你可能会承诺一个无法兑现的时间尺度，然后为了赶上截止日期，再回过头去删减工程。\n- 知道何时止步——不要让过度地修饰和精炼侵蚀掉一个完好的程序。继续前行，让代码在它该有的位置驻留一段时间。它或许不完美，不要紧的 —— 它就算不完美也没关系 (这部分代码既不影响性能，也不影响功能，你可能永远都不需要再改动它了)\n\n## 知识组合\n\n> 投资知识，收益最佳\n—— 本杰名·富兰克林\n> \n\n知识和经验的确是你最重要的专业资产，可惜的是，它们是一种时效性资产。随着新技术的出现，以及语言和环境的发展，你的知识会变得过时 。不断变化的市场力量可能会使得经验变得陈旧而无关紧要。鉴于技术社会变化的速度越来越快，这种事情可能会发生得特别迅速。当你的知识价值下降时，你对于公司和客户的价值也在下降。想要阻止这一切的发生，学习新事物的能力是你重要的战略资产。\n\n管理知识组合和管理金融投资组合非常的类似：\n\n1. 正规投资有**定期投资**的习惯\n及时更新自己的专业视野，了解新的工具和技能，阅读相关的新闻和技术贴。\n2. **多样化**是长线成功的关键\n扩展自己的技能领域，熟悉的技能越多，越能适应变化\n3. 聪明的投资者会**平衡**保守型和高风险形回报投资的**组合**\n及时了解新的行业动向，并尝试接触与学习，不要去当听众，主动参与。\n4. 投资者用**低买高卖**来获得最大的回报\n例如前些年的大数据、前端开发，又如现在的低代码以及车联网。它们在这时会有相较于平常较高的溢价，如果你有足够的能力和储备，那么你可以在工作回报上又较高的提升，但需要明确的是，在蓝海回归红海后，也可能有较大的风险。需要你有应对风险的能力\n5. 定期审查和**重新平衡投资**组合\n根据当前的行业趋势，去重新审视自己的技术树，调整自己学习的优先级\n\n> 是否在某个项目中使用这些技术或者是否把它放入你的简历中，这并不重要。学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式扩展。思想的“异化授粉”（cross-pollination) 十分重要。设法把你所学的东西应用到你当前的项目中，即使你的项目没有使用该技术，你也可以借鉴一些想法\n> \n\n### 学习的机会\n\n- 提前把一些资料准备在触手可及的地方，在有兴趣的时候能够及时拿到\n- 把找到答案当做一个个人挑战，去尝试用各种方法更新自己的知识组合\n- 不要把问题搁置，自己找不到答案，就去找出能找到答案的人。与他人交谈既可以帮你建立人际网络，在这个过程中也可以受益良多\n\n### 批判性思维\n\n> Critically Analyze What You Read and Hear\n> \n\n批判性思考读到的和听到的东西。你需要确保组合中的知识是精准的，未受到创作者的影响。\n\n批判性思维是一门完整的学科，这里起个头：\n\n- 问 “五个为什么” —— 在得到答案后继续为什么，来更接近本源。在日常沟通中要注意技巧，防止认为是挑衅而被揍\n- 谁从中受益——虽然听起来比较世俗，不过这样更容易理清脉络\n- 有什么背景——每件事都发生在它自己的背景下，这也是为何“能解决所有问题”的方案通常不存在，而那些兜售“最佳实践”的书或文章经不起推敲（好吐槽）\n\n## 交流\n\n> 我认为被人从头打量到脚总比被人视而不见的好\n—— 《九十岁的美女》\n> \n\n只是拥有是不够的，还要看你如何包装它。即使拥有最好的想法、漂亮的代码、最务实的思想，如果不能和它人交流，最终都无法孕育出果实。\n\n把你的母语当做一门编程语言，像写代码一样用自然语言写文章，尊重DRY原则，ETC、自动化 等等（后续会提到）。\n\n- 了解听众 —— 根据听众不同，选择用不同的方式和风格描述你要介绍的系统\n- 明白自己想说什么 —— 写好大纲，提炼核心\n- 选择时机 —— 确定轻重缓急\n- 让听众参与——让听众参与,把会议变成一场谈话，你可以更有效地表达你自己的观点，还可以听取他们的反馈，汲取他们的智慧。\n- 发送文字前检查拼写和接收人\n\n# 务实的方法\n\n> 有一些技巧和方法适用于软件开发的所有层级，其中蕴含的思想几乎成了公理，实施过程中也非常通用。然而，这些方法很少被规范成文档。现在，这些想法和过程集中这里。形成了 DRY ETC 等原则，以及原型和便签等方法论\n> \n\n## ETC (Easier To Change)\n\n能适应使用者的就是好的设计。对代码而言，就是要顺应变化（让代码更容易阅读、解耦、单一职责、可替换）ETC（更容易变更） 是一种价值观念，而不是一条规则；当你在**软件领域思考时，ETC 是个向导，它能帮助你在不同路线中选出一条**。\n\n在你有能力辨别时，常识通常都不会错，有事如果你找不到线索，你可以做以下的事情\n\n1. 假设不确定什么形式的改变会发生，那么就回到问题的可能产生的源头——让你的写的东西可替换。这样无论将来发生了什么，这块代码都不会称为障碍。\n2. 把它当做培养直觉的一种方式。在工程日记中留下你面临的处境：你有哪些选择，以及改变的一些猜测。以便以后必须修改这块代码时，方便回顾。在在遇到类似的分叉口时，这会有所帮助。\n\n## DRY (Dot Replay You)\n\n知识并不稳定，知识会改变——通常频率还很高。可能只要和客户开个会，对需求的理解马上就变了。政府改了条规定，一些逻辑就过时了。当我们进行维护时，必须找到变更事物的表达——那些嵌入程序的知识胶囊。问题是，在规范、流程、开发的程序中复制知识太容易了，一旦我们动手这么做，就会招致维护的噩梦。想要可靠地开发软件，或让开发项目变得跟容易理解和维护，唯一的方法是遵循 **DRY 原则—— 在一个系统中，每一处知识都必须单一、明确、权威的表达**\n\nDRY 指的不要重复自己，所以它并不是但指的“不要复制粘贴底代码”，这的确是 DRY 的组成部分，但这是很小的部分，一点都不重要。\n\nDRY 针对的是你对知识和意图的复制，它强调的是，如果两个地方表达的东西其实相同的，只是表达方式不同，那么它也违反了 DRY 原则。同理，如果两个地方的表达方式完全相同，但他们在不同模块中承担不同的职责，那么他们并不违反 DRY 原则。\n\n### Code Lab\n\n- 统一访问原则——《面向对象软件构造》中描述：一个模块提供的服务都应该通过统一的约定来提供，该约定不应该表露出其实现是基于储存还是基于运算。\n- 你努力的方向，应该是孕育出一个更容易找到和复用已有事物的环境，而不是自己重新编写。若果复用不容易，人们就不会这么做。如果你未能复用，就有重复知识的风险\n\n## 正交性\n\n“正交性”是从几何学中借用来的术语。若两条直线相交后构成直角，它们就是正交。\n\n![线段 AB 与 CD 彼此正交](img/post-icon-xiulian-01.png)\n\n线段 AB 与 CD 彼此正交\n\n 在计算科学中，这个术语象征着独立性和解耦性。良好的架构系统中，两个模块之间应该相互独立，其中一个模块的修改不应该影响另一个模块。正交的系统可以提高生产力和降低风险，更好的应对不断变化的业务和需求。\n\n如何保持系统的正交性：\n\n- 保持代码解耦、避免全局数据、避免相似的函数\n- 养成不断质疑代码的习惯。有机会就重新组织、改善其结构性和正交性\n- 基于正交性设计和实现的系统更容易测试。因此编写单元测试本身就是一个有趣的正交性测试。做什么才能让单元测试构建并运行起来？如果需要导入系统其余的大部分代码，那么恭喜你就发现一个与系统其余部分没有很好解耦的模块\n- **记录并评估和问题的修复方案和范围**，对已经修复的问题归档和记录，在阅读报告中去分析每个 Bug 修复的所影响的模块和文件数量趋势。以此来发觉系统中不稳定的模块，或是设计的不正交的模块。\n\n## 可逆性\n\n- 保持灵活的架构\n- 放弃追逐时尚\n\n## 曳光弹\n\n曳光弹能够快速抵达目标，枪手可以得到及时反馈——如果曳光弹集中了目标，那么之后的常规子弹也会被击中。\n\n同样地原则也适用于做项目。特别是在要构建一些从做过的东西时，我们可以进行曳光弹式的开发\n\n### 优势\n\n- 能够构造一个在其中工作的框架（Core）\n- 能对进度有更好的感觉，通过对这些案例的更重，度量性能和向用户展示进度要容易的多\n- 更小的试错成本，你可以将核心部分快速同用户沟通展示，确认是否是它们想要的。以更快的速度，更小的成本收集到程序的反馈，并生成一个更准确的版本。\n\n### 方法论\n\n- 在需求评审和开发阶段，寻找需要的核心部分，那些定义了系统的部分，有重大风险的地方。然后对这部分排列优先级，优先从这里处理。\n- 注意曳光弹的场景是快速构建一个完整系统的雏形，并非是制作原型\n\n### 与原型的区别\n\n原型制作生成的是一次性代码，曳光弹虽然简单，但它是完整的，是最终框架的组成部分。**原型是用来验证方案的可行性，而曳光弹是用来验证系统的可行性**。\n\n## 原型制作\n\n> 原型制作是为了学习经验。它的价值不在于产生的代码，而在于吸取的教训。这正式原型的意义所在\n> \n\n原型制作比完整的产品制作要便宜得多。因此我们可以通过制作原型来分析和暴露风险，以一种大幅减低成本的方式获得修正的机会。原型被设计出来，只是为了回答问题的答案，因此可以忽略很多不重要的细节。但如果你发现自己处在于一个不能放弃细节的环境中。那么可能曳光弹式开发更适合你。\n\n当你制作原型时，哪些细节可以忽略：\n\n- 正确性——你可以在适当的时候替代掉数据\n- 完整性——原型只需要满足优先的功能\n- 健壮性——错误和边界条件并不是必须的，你只需要验证特定的航线\n- 格    式—— 并不需要太多的注释和文档\n\n制作原型时，尽量推迟思考细节，你要确定的是，系统的各个部分是怎么结合形成一个整体的。\n\n## 领域语言\n\n> 语言之界限，即是一个人世界之界限\n——路德维希·维特根斯坦\n> \n\n计算机语言会影响你怎样思考问题，影响你怎样看待信息的传播。每一门语言都有一个特性列表——静态类型、动态类型、mixin、函数式还是面向对象——所有这些对问题的解决方案，既可能是提供建议也可能扰乱视听。在一些案例中，**高阶的程序员能跨越到下一个层级，不是用词汇表来编写代码，而直接用该领域的语言编程，直接使用该领域的词汇、语法和语义**（DSL）\n\n对于传统的语言，例如 Java 这种，我们可能使用外部语言例如 XML 或者 JSON 需要编写额外的解析器，但是向现代语言例如 Kotlin 这种，它们对于 DSL 的支持是极为优秀的。我们可以通过现有的词汇表来轻松扩展出 DSL 语言来。\n\n从另一个角度思考，ChatGPT 以及 Copilot 的兴起和趋势。将编写业务代码的大部分工作交由 AI 来完成会提高我们的工作效率，理想情况下我们只需要提供边界完善和剪枝的操作。但是如何将业务需求转换为语言模型能够明确理解的文字，这也同样考验证的我们通过母语的编程能力，可以较为清晰的通过母语将需求与环境描述清楚，语言模型才能根据我们需要生成所需要的代码。我们在以后的需求场景可能要锻炼我们通过母语来编写伪代码的能力，以此来应对日新月异的 AI 发展，和提高自己的工作效率\n\n## 估算\n\n在接收到一个问题或是需求时，我们通过对估算，可以快速判断该事件的可行性。而估算的前提是——**对问题建模**。当我们理解问题或是需求时，就开始为之建立一个粗略的思维框架模型。在建模的过程中，你可以发现一些表面上看不出来的潜在模式和过程。在得到模型后，就可以将其分解成组件，你需要发掘出这些组件如何交互的数学规则。\n\n### 如何估算项目进度\n\n- RERT（ Program Evaluation Review Techningue ）每个 PERT任务都有一个乐观的、一个可能的和一个悲观的估算，像这种带着范围值的估算，他能避免最常见的估算错误因素。\n- 增量开发：将任务分为不同阶段，在每次迭代后，提炼其中的经验，完善对进度的控制。\n\n问题建模也是之后让 AI 编程的核心方法论，只有通过建模的形式，我们才可以将需求或问题清晰表达，以及将各个节点拆分成组件，再讲这些组件的模型在未实现实际代码时就明确的划分其职责和功能\n\n# 基础工具\n\n## 纯文本\n\n作为程序员，我们基础材料不是木头或铁块，而是知识。我们把需求以知识的形式收集起来，然后在设计、实现出、测试和文档中表达这些知识。纯文本，则是我们认为是将知识持久地存储下来的最佳格式。\n\n所谓的纯文本并不是但只是指 txt 格式的文件，而是可以任何可以被人类直接阅读，编辑器可以直接解析的文本数据。纯文本的优势是\n\n- 防备老化的保险 —— 如今的很多知识软件的使用和更新都依赖于网络和维护，，当存储数据的应用程序生命周期结束后，如果它不支持导出纯文本数据，那么你在应用程序中存储的知识想要重新使用起来就极为困难了。\n- 易于检索——使用纯文本记录，我们可以无缝的使用版本管理来管理修改记录，通过 Shell 功能来任意搜索和匹配你的知识，也可以扔到一些文本编辑器中快速查找。而不需要依赖于特定的软件，和它们垃圾的检索功能（例如微信）\n- **熟练使用编辑器以及 Shell** —— 图形工具的好处自安于 WYSIWYG （所见即可得）；弱势之处是 WYSIAYG（所见即全部），如果图形工具的设计者没有为你的额外的需求设计钩子，那你就是做不到。而借助编辑器和 Shell 强大的生态和泛用性，你可以组合它们获得十分强大的能力，且这份知识还是通用的，它并不局限于某个 IDE 中。\n- **充当配置项** —— 配置项可以让你迫使你解除你的设计的耦合，从而带来更灵活可适应性更好的程序\n\n## 工程日记\n\n日记的好处\n\n- 它比记忆更加可靠\n- 它为提供了一个地方，用来保存于当前任务无关的想法。这样你就可以继续专注正在做的事情，并指导这个伟大的想法不会被遗忘\n- 它就像一个橡皮鸭。当你停下来，把东西写上去的时候，大脑可能会换挡，几乎就像在和某个人说话一样——这是一个反思的好机会。你可以在开始做笔记的时候，突然意识到刚刚做的事情，也就是笔记的主题是完全错误的。\n\n还有一个额外的好处，你能时不时的想起很多年前你在做什么，会想起那些人、那些事，以及那些糟糕的衣服和发型。\n\n# 务实的偏执\n\n> 自责中往往有种奢侈。我们自责时，总觉得别人无权再则被我们\n—— 奥斯卡·王尔德《道林·格雷的画像》\n> \n\n### BDC 契约式编程\n\n### TDD 测试驱动开发\n\n作者讲述了 BDC 和 TDD 的开发模式，主要是针对防御式编程和断言式编程的理念的推崇 —— 及在代码设计阶段把边界条件思考充分，并进行 Check . 在出现问题时，及早将异常抛出，避免进一步危害整个系统。这是一个合格程序员的基本功，也没有什么特别的方法论。其中值得称道就是断言编程的开关性，我们可以像一个 Google 源码一样，只在 debug 模式中开启断言，这样可以日常开发和测试流程时就把一些问题明显的暴露出来。而在生产模式中，秉承着用户优先和性能损耗的理念。我们可以关掉断言，补充日志。\n\n### 很多时候，明天看起来会和今天差不多，但不要指望一定会这样\n\n- 在做设计与维护的时候，对超过可见范围的模块的维护和设计，并不一定需要浪费精力为不确定的未来做设计（徒增复杂性，像另一本书降到，Android 0.x 版本时，硬件是不支持 GPU 的，而负责开发的 Google 工程师在制作图形渲染这一块时，并没有设计整个系统，而是设计了一块虚拟的 GPU，当 Android 后续的版本支持 GPU 后，只需要将虚拟 GPU 的模块替换掉，系统的设计仍然保留），还不如将代码设计成可替换的。使代码可替换，还有助于提高内内聚性、解耦和 DRY，从而实现更好的设计。\n- 软件开发中，总是采取经过深思熟虑的小步骤，同时检查反馈，并在推进前不断调整。把反馈的速率当做速度限制，永远不要进行 “太大” 的任务步骤\n\n# 并发\n\n并发性是指两个或更多个代码在执行过程中表现得像是在同时运行一样。并行性则值得是它们的确是在同一时刻运行。\n\n像获得并发性，需要在一个特殊的环境下运行下运行。当代码运行时，这个环境可以在其不同部分之间切换执行过程。这样的环境通常基于线程、进程、携程来实现\n\n像获得并行性，则需要又可以同时做两件事情的硬件，通常是同一 CPU 上的多核心，同一机器上的多个 CPU 或连接在一起的多台计算机。\n\n# 编码\n\n- 时刻注意你在做什么，事情往往是慢慢失去控制的\n- 你能向一个更初级的程序员详细解释一下代码么？如果做不到，也许可能正在依赖某个巧合\n- 要按计划推行，无论这个计划是以什么形式存在\n- **不要只测试代码，还要测试猜测。去实际试一下一些假设以及边界条件，确定你的代码在你所能预知的场景都能正常工作**\n- 为你的精力投放安排一个优先级。要把时间花在重要的方面。\n\n## 重构\n\n软件开发最常见的隐喻是建筑的构建。商务人士对建筑的隐喻感到很舒服：它是科学的，可重复的，管理上有严格的汇报层次结构，等等。但实际上园艺的隐喻更接近于现实的软件开发：它更像一个有机体而非钻石堆砌，你需要不断观测花园的健康状态，根据需要对（土壤、职务、布局）做出调整。\n\n### 如何重构\n\n- 不要试图让重构和添加功能同时进行\n- 在开始重构之前，确保有良好的拥有良好的测试环境。尽可能多地运行测试。这样，如果变更破坏了任何东西，都将尽快得知。\n- 采取简短慎重的步骤：将字段从一个类移动到另一个类，拆分方法，重命名变量。重构通常涉及对许多全局变量的修改，这些局部变量会导致更大范围的修改，若果保持小步骤，并在每个步骤之后进行测试，就能避免冗长的调试。\n\n### 测试\n\n测试的好处主要发生在你考虑测试以及编写测试的时候，而不是在运行测试的时候。\n\n你编写的所有软件都将进行测试 —— 如果不是你和你的团队测试，那就要由最终用户测试 —— 所以你最好计划对其进行彻底的测试。 一点预先的准备可以大大降低维护费用，减少客诉。\n\n# 项目\n\n> 完美，不是在没有什么需要增加，而是在没有什么需要去掉时达到的\n> \n\n## 需求\n\n### 挖掘需求\n\n找出用户为何要做特定事情的原因，而不只是他们目前做这件事的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不是满足他们陈述的需求。用户文档记载需求背后的原因将在每天进行实现决策时给你的团队带来无价的信息。\n\n### 明确需求\n\n用户陈述的的要求并不一定是真正的需求。例如 “只有员工的上级和人事部门此案可以查看员工的档案” 这个陈述今天看来也许是个需求，但是由于它在陈述中嵌入了商业政策，而政策会经常改变，改变可能只是一些相对微妙的区别，但是对开发者来说就却有深远的影响。如果需求被陈述为 “只有人事部门才能查看员工档案” —— 开发者最后就可能编写在每次客户端访问时，进行明确的检查。但是如果陈述是 “只有授权的用户才可以访问员工档案”，开发者就可能设计一套完整的访问控制系统，当政策改变时，只有该系统的元数据需要修改。\n\n所以我们可能不并不想把他硬性的写入我们的需求中。最好的是把政策和需求文档分开，需求作为研发目标输出给开发者，而政策则是他们需要在实现中支持的事物类型的例子。最后，政策可以成为应用中的元数据。\n\n### 需求文档\n\n制作需求文档时的一大危险是太过具体。好的需求文档会保持抽象。在涉及需求的地方，最简单的准确地反映商业需求要的陈述是最好的。这并非意味着你可以含糊不清 —— 你必须把底层的语义不变项当作需求进行捕捉，并把具体的或当前的工作实践当作政策进入文档。\n\n—— 需求不是架构。需求不是设计，也不是用户界面。需求是需要。\n\n## 问题\n\n- 对谜题的所有解决方案进行陈列，分解。并解释为何不能采用这个方案，确定么，是否能证明？\n- 自我提问，确定问题的核心以及当前的疑惑的是否是真正的问题还是外围的技术问题转移了注意力？\n\n# 傲慢与偏见\n\n注重实效的程序员不会逃避责任。相反，我们乐于接受挑战，乐于使我们的专业知识广为认知。如果我们在负责一项设计，或是一段代码，我们是在做可以引以为豪的工作。\n\n","slug":"2024-09-13-program_developer_experience","published":1,"updated":"2024-09-13T07:50:58.882Z","_id":"cm10e7ttn00034oy41lil1cvs","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这本书的上一版《从小工到专家》其实我就早有耳闻了，但是当时觉得这个翻译的名字很糟糕，且周围并没有人去推荐它，我就打消了看它的念头。然后今年闲暇下来发现这本书的再版，书籍的名称也变为了《程序员修炼之道》，抱着看闲书和京东打折的契机，把它买了下来。看完两章发现自己两年前错失了一部能快速获得经验，提高生产力的的书籍。书有可前浅尝者、有可吞食者，少数需咀嚼消化，这本书我认为就属于需要咀嚼消化的那种书，帮助你提取一些之前成功项目的的原因，也可以让你思考生活与工作遇到同一类问题的处理方式。</p>\n<h1 id=\"务实的方法\"><a href=\"#务实的方法\" class=\"headerlink\" title=\"务实的方法\"></a>务实的方法</h1><h2 id=\"人生是你的\"><a href=\"#人生是你的\" class=\"headerlink\" title=\"人生是你的\"></a>人生是你的</h2><blockquote>\n<p>我活着不是为了满足你的期望，正如你不是因为我的期望而活着<br>—— 李小龙</p>\n</blockquote>\n<p>软件开发在任何职业列表中，都绝对是你自己最能掌控的职业之一。我们的技能供不应求，我们的知识不限于地域，我们可以远程工作。我们收入颇丰。我们真的可以做到我们任何想做的事。但是总有一些原因导致开发者们拒绝改变，他们蜷缩在那里，期盼事情会自己变好，眼睁睁的看着自己的技能过时，再去抱怨世界日新月异，工作环境糟糕。</p>\n<p>虽然看起来作者有种何不食肉糜的感觉，但其实在现如今的行业划分里，软件开发确实是最能自己掌握的职业之一。互联网上基本上有你所需要的所有资料，而且即使你只会一种编程语言，今年你可以做金融，明年就可以无缝做购物，后年可以跑去做车载，你的职业经验仍然大部分适用。<strong>职业环境并不会对你的事业有很大的限制，能限制的只有你自己。</strong></p>\n<h2 id=\"我的源码被猫吃了\"><a href=\"#我的源码被猫吃了\" class=\"headerlink\" title=\"我的源码被猫吃了\"></a>我的源码被猫吃了</h2><blockquote>\n<p>如果你面临供应商帮不上忙这样的风险，就应该制定一个应急方案。如果磁盘挂起——你所有的源码都在里面，这就是你的错。跟你的老板说“我的源码都被猫吃了” 解决不了问题</p>\n</blockquote>\n<h3 id=\"团队信任\"><a href=\"#团队信任\" class=\"headerlink\" title=\"团队信任\"></a>团队信任</h3><p>你的团队需要你能信赖和依赖你——你也应该同样地放心依赖他们每个人</p>\n<ul>\n<li>不必直接掌控事情的各个方面</li>\n<li>表达你的思想，说出你的想法。缔造一个以信任为基础的健康环境</li>\n</ul>\n<h3 id=\"承担责任\"><a href=\"#承担责任\" class=\"headerlink\" title=\"承担责任\"></a>承担责任</h3><p>在承接需求或任务前，你必须分析超出你控制范围的风险情况，如果责任的伦理内含过于含糊，或是面对无法实现的情况，亦或是风险过大，你都有权不承担责任。在这个阶段就及时把问题抛出，重新评估任务的可行性或是明确风险情况的责任人</p>\n<p>在决定对一个结果承担责任时，要明白你将承接相关的义务。当你犯了错误，或是做出了错误的判断，诚实地承认它，并尝试给出选择</p>\n<p><strong>给出选择，而非借口</strong> 给出选择并非要求你一定像上文例子里一样，做事都有 plan B, 即使在世界末日都能从兜里掏一台时空穿梭器。而是你跑过去告诉他们坏消息前，最好能解释下做些什么才能挽回局面。队友和领导都很乐于与这种人公事，他们在这种场景下能以更低的成本去参与到新问题和新需求的处理中</p>\n<h2 id=\"软件的熵\"><a href=\"#软件的熵\" class=\"headerlink\" title=\"软件的熵\"></a>软件的熵</h2><p>虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵增加重击。<strong>熵</strong>是一个物理学术语，它定义了一个系统的“无序”总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。而软件开发因为各种 Bug 的修复，需求的新增和补充，软件的复杂度和无序化也在逐步增加，本小节主要是探讨如何避免软件的熵的增加</p>\n<ul>\n<li>“破窗效应”——制定了规则就要需要严格遵守，例如 Code Review 、Code Lint 软件架构 等 ，这些规则都是为了保持软件的可读性以及降低程序的复杂性，既然制定了就要好好遵守，而非流于表面。窗户一旦开始破裂，运转良好的系统会迅速恶化。</li>\n<li>“领头羊效应”—— 在必要的时候，主动承担责任，做推动变革的催化剂。</li>\n<li>“温水煮青蛙”—— 留意大局，持续不断的审视你身边发生的事情，不要只专注你个人在做的事情。即使你只负责部分的事务，也需要对宏观上能影响你的事件保持敏锐。</li>\n</ul>\n<h2 id=\"做够好即可的软件\"><a href=\"#做够好即可的软件\" class=\"headerlink\" title=\"做够好即可的软件\"></a>做够好即可的软件</h2><blockquote>\n<p>为了追求更好，我们毁损了原已够好的<br>—— 莎士比亚《李尔王》</p>\n</blockquote>\n<p>现实世界不会让我们生产出真正完美的产品，尤其是没有 Bug 的软件。时间、技术、急躁合力对抗着我们。对软件开发者来说要明白以下几点</p>\n<ul>\n<li>将质量视为需求问题——对于你创建的系统，其应用领域和要达到的质量，必须作为系统需求的一部分加以讨论</li>\n<li>让用户参与权衡—— 无视用户的需求，一味的堆砌功能，一次次打磨代码，这是不专业的表现。你可能会承诺一个无法兑现的时间尺度，然后为了赶上截止日期，再回过头去删减工程。</li>\n<li>知道何时止步——不要让过度地修饰和精炼侵蚀掉一个完好的程序。继续前行，让代码在它该有的位置驻留一段时间。它或许不完美，不要紧的 —— 它就算不完美也没关系 (这部分代码既不影响性能，也不影响功能，你可能永远都不需要再改动它了)</li>\n</ul>\n<h2 id=\"知识组合\"><a href=\"#知识组合\" class=\"headerlink\" title=\"知识组合\"></a>知识组合</h2><blockquote>\n<p>投资知识，收益最佳<br>—— 本杰名·富兰克林</p>\n</blockquote>\n<p>知识和经验的确是你最重要的专业资产，可惜的是，它们是一种时效性资产。随着新技术的出现，以及语言和环境的发展，你的知识会变得过时 。不断变化的市场力量可能会使得经验变得陈旧而无关紧要。鉴于技术社会变化的速度越来越快，这种事情可能会发生得特别迅速。当你的知识价值下降时，你对于公司和客户的价值也在下降。想要阻止这一切的发生，学习新事物的能力是你重要的战略资产。</p>\n<p>管理知识组合和管理金融投资组合非常的类似：</p>\n<ol>\n<li>正规投资有<strong>定期投资</strong>的习惯<br>及时更新自己的专业视野，了解新的工具和技能，阅读相关的新闻和技术贴。</li>\n<li><strong>多样化</strong>是长线成功的关键<br>扩展自己的技能领域，熟悉的技能越多，越能适应变化</li>\n<li>聪明的投资者会<strong>平衡</strong>保守型和高风险形回报投资的<strong>组合</strong><br>及时了解新的行业动向，并尝试接触与学习，不要去当听众，主动参与。</li>\n<li>投资者用<strong>低买高卖</strong>来获得最大的回报<br>例如前些年的大数据、前端开发，又如现在的低代码以及车联网。它们在这时会有相较于平常较高的溢价，如果你有足够的能力和储备，那么你可以在工作回报上又较高的提升，但需要明确的是，在蓝海回归红海后，也可能有较大的风险。需要你有应对风险的能力</li>\n<li>定期审查和<strong>重新平衡投资</strong>组合<br>根据当前的行业趋势，去重新审视自己的技术树，调整自己学习的优先级</li>\n</ol>\n<blockquote>\n<p>是否在某个项目中使用这些技术或者是否把它放入你的简历中，这并不重要。学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式扩展。思想的“异化授粉”（cross-pollination) 十分重要。设法把你所学的东西应用到你当前的项目中，即使你的项目没有使用该技术，你也可以借鉴一些想法</p>\n</blockquote>\n<h3 id=\"学习的机会\"><a href=\"#学习的机会\" class=\"headerlink\" title=\"学习的机会\"></a>学习的机会</h3><ul>\n<li>提前把一些资料准备在触手可及的地方，在有兴趣的时候能够及时拿到</li>\n<li>把找到答案当做一个个人挑战，去尝试用各种方法更新自己的知识组合</li>\n<li>不要把问题搁置，自己找不到答案，就去找出能找到答案的人。与他人交谈既可以帮你建立人际网络，在这个过程中也可以受益良多</li>\n</ul>\n<h3 id=\"批判性思维\"><a href=\"#批判性思维\" class=\"headerlink\" title=\"批判性思维\"></a>批判性思维</h3><blockquote>\n<p>Critically Analyze What You Read and Hear</p>\n</blockquote>\n<p>批判性思考读到的和听到的东西。你需要确保组合中的知识是精准的，未受到创作者的影响。</p>\n<p>批判性思维是一门完整的学科，这里起个头：</p>\n<ul>\n<li>问 “五个为什么” —— 在得到答案后继续为什么，来更接近本源。在日常沟通中要注意技巧，防止认为是挑衅而被揍</li>\n<li>谁从中受益——虽然听起来比较世俗，不过这样更容易理清脉络</li>\n<li>有什么背景——每件事都发生在它自己的背景下，这也是为何“能解决所有问题”的方案通常不存在，而那些兜售“最佳实践”的书或文章经不起推敲（好吐槽）</li>\n</ul>\n<h2 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h2><blockquote>\n<p>我认为被人从头打量到脚总比被人视而不见的好<br>—— 《九十岁的美女》</p>\n</blockquote>\n<p>只是拥有是不够的，还要看你如何包装它。即使拥有最好的想法、漂亮的代码、最务实的思想，如果不能和它人交流，最终都无法孕育出果实。</p>\n<p>把你的母语当做一门编程语言，像写代码一样用自然语言写文章，尊重DRY原则，ETC、自动化 等等（后续会提到）。</p>\n<ul>\n<li>了解听众 —— 根据听众不同，选择用不同的方式和风格描述你要介绍的系统</li>\n<li>明白自己想说什么 —— 写好大纲，提炼核心</li>\n<li>选择时机 —— 确定轻重缓急</li>\n<li>让听众参与——让听众参与,把会议变成一场谈话，你可以更有效地表达你自己的观点，还可以听取他们的反馈，汲取他们的智慧。</li>\n<li>发送文字前检查拼写和接收人</li>\n</ul>\n<h1 id=\"务实的方法-1\"><a href=\"#务实的方法-1\" class=\"headerlink\" title=\"务实的方法\"></a>务实的方法</h1><blockquote>\n<p>有一些技巧和方法适用于软件开发的所有层级，其中蕴含的思想几乎成了公理，实施过程中也非常通用。然而，这些方法很少被规范成文档。现在，这些想法和过程集中这里。形成了 DRY ETC 等原则，以及原型和便签等方法论</p>\n</blockquote>\n<h2 id=\"ETC-Easier-To-Change\"><a href=\"#ETC-Easier-To-Change\" class=\"headerlink\" title=\"ETC (Easier To Change)\"></a>ETC (Easier To Change)</h2><p>能适应使用者的就是好的设计。对代码而言，就是要顺应变化（让代码更容易阅读、解耦、单一职责、可替换）ETC（更容易变更） 是一种价值观念，而不是一条规则；当你在<strong>软件领域思考时，ETC 是个向导，它能帮助你在不同路线中选出一条</strong>。</p>\n<p>在你有能力辨别时，常识通常都不会错，有事如果你找不到线索，你可以做以下的事情</p>\n<ol>\n<li>假设不确定什么形式的改变会发生，那么就回到问题的可能产生的源头——让你的写的东西可替换。这样无论将来发生了什么，这块代码都不会称为障碍。</li>\n<li>把它当做培养直觉的一种方式。在工程日记中留下你面临的处境：你有哪些选择，以及改变的一些猜测。以便以后必须修改这块代码时，方便回顾。在在遇到类似的分叉口时，这会有所帮助。</li>\n</ol>\n<h2 id=\"DRY-Dot-Replay-You\"><a href=\"#DRY-Dot-Replay-You\" class=\"headerlink\" title=\"DRY (Dot Replay You)\"></a>DRY (Dot Replay You)</h2><p>知识并不稳定，知识会改变——通常频率还很高。可能只要和客户开个会，对需求的理解马上就变了。政府改了条规定，一些逻辑就过时了。当我们进行维护时，必须找到变更事物的表达——那些嵌入程序的知识胶囊。问题是，在规范、流程、开发的程序中复制知识太容易了，一旦我们动手这么做，就会招致维护的噩梦。想要可靠地开发软件，或让开发项目变得跟容易理解和维护，唯一的方法是遵循 <strong>DRY 原则—— 在一个系统中，每一处知识都必须单一、明确、权威的表达</strong></p>\n<p>DRY 指的不要重复自己，所以它并不是但指的“不要复制粘贴底代码”，这的确是 DRY 的组成部分，但这是很小的部分，一点都不重要。</p>\n<p>DRY 针对的是你对知识和意图的复制，它强调的是，如果两个地方表达的东西其实相同的，只是表达方式不同，那么它也违反了 DRY 原则。同理，如果两个地方的表达方式完全相同，但他们在不同模块中承担不同的职责，那么他们并不违反 DRY 原则。</p>\n<h3 id=\"Code-Lab\"><a href=\"#Code-Lab\" class=\"headerlink\" title=\"Code Lab\"></a>Code Lab</h3><ul>\n<li>统一访问原则——《面向对象软件构造》中描述：一个模块提供的服务都应该通过统一的约定来提供，该约定不应该表露出其实现是基于储存还是基于运算。</li>\n<li>你努力的方向，应该是孕育出一个更容易找到和复用已有事物的环境，而不是自己重新编写。若果复用不容易，人们就不会这么做。如果你未能复用，就有重复知识的风险</li>\n</ul>\n<h2 id=\"正交性\"><a href=\"#正交性\" class=\"headerlink\" title=\"正交性\"></a>正交性</h2><p>“正交性”是从几何学中借用来的术语。若两条直线相交后构成直角，它们就是正交。</p>\n<p><img src=\"/img/post-icon-xiulian-01.png\" alt=\"线段 AB 与 CD 彼此正交\"></p>\n<p>线段 AB 与 CD 彼此正交</p>\n<p> 在计算科学中，这个术语象征着独立性和解耦性。良好的架构系统中，两个模块之间应该相互独立，其中一个模块的修改不应该影响另一个模块。正交的系统可以提高生产力和降低风险，更好的应对不断变化的业务和需求。</p>\n<p>如何保持系统的正交性：</p>\n<ul>\n<li>保持代码解耦、避免全局数据、避免相似的函数</li>\n<li>养成不断质疑代码的习惯。有机会就重新组织、改善其结构性和正交性</li>\n<li>基于正交性设计和实现的系统更容易测试。因此编写单元测试本身就是一个有趣的正交性测试。做什么才能让单元测试构建并运行起来？如果需要导入系统其余的大部分代码，那么恭喜你就发现一个与系统其余部分没有很好解耦的模块</li>\n<li><strong>记录并评估和问题的修复方案和范围</strong>，对已经修复的问题归档和记录，在阅读报告中去分析每个 Bug 修复的所影响的模块和文件数量趋势。以此来发觉系统中不稳定的模块，或是设计的不正交的模块。</li>\n</ul>\n<h2 id=\"可逆性\"><a href=\"#可逆性\" class=\"headerlink\" title=\"可逆性\"></a>可逆性</h2><ul>\n<li>保持灵活的架构</li>\n<li>放弃追逐时尚</li>\n</ul>\n<h2 id=\"曳光弹\"><a href=\"#曳光弹\" class=\"headerlink\" title=\"曳光弹\"></a>曳光弹</h2><p>曳光弹能够快速抵达目标，枪手可以得到及时反馈——如果曳光弹集中了目标，那么之后的常规子弹也会被击中。</p>\n<p>同样地原则也适用于做项目。特别是在要构建一些从做过的东西时，我们可以进行曳光弹式的开发</p>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>能够构造一个在其中工作的框架（Core）</li>\n<li>能对进度有更好的感觉，通过对这些案例的更重，度量性能和向用户展示进度要容易的多</li>\n<li>更小的试错成本，你可以将核心部分快速同用户沟通展示，确认是否是它们想要的。以更快的速度，更小的成本收集到程序的反馈，并生成一个更准确的版本。</li>\n</ul>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><ul>\n<li>在需求评审和开发阶段，寻找需要的核心部分，那些定义了系统的部分，有重大风险的地方。然后对这部分排列优先级，优先从这里处理。</li>\n<li>注意曳光弹的场景是快速构建一个完整系统的雏形，并非是制作原型</li>\n</ul>\n<h3 id=\"与原型的区别\"><a href=\"#与原型的区别\" class=\"headerlink\" title=\"与原型的区别\"></a>与原型的区别</h3><p>原型制作生成的是一次性代码，曳光弹虽然简单，但它是完整的，是最终框架的组成部分。<strong>原型是用来验证方案的可行性，而曳光弹是用来验证系统的可行性</strong>。</p>\n<h2 id=\"原型制作\"><a href=\"#原型制作\" class=\"headerlink\" title=\"原型制作\"></a>原型制作</h2><blockquote>\n<p>原型制作是为了学习经验。它的价值不在于产生的代码，而在于吸取的教训。这正式原型的意义所在</p>\n</blockquote>\n<p>原型制作比完整的产品制作要便宜得多。因此我们可以通过制作原型来分析和暴露风险，以一种大幅减低成本的方式获得修正的机会。原型被设计出来，只是为了回答问题的答案，因此可以忽略很多不重要的细节。但如果你发现自己处在于一个不能放弃细节的环境中。那么可能曳光弹式开发更适合你。</p>\n<p>当你制作原型时，哪些细节可以忽略：</p>\n<ul>\n<li>正确性——你可以在适当的时候替代掉数据</li>\n<li>完整性——原型只需要满足优先的功能</li>\n<li>健壮性——错误和边界条件并不是必须的，你只需要验证特定的航线</li>\n<li>格    式—— 并不需要太多的注释和文档</li>\n</ul>\n<p>制作原型时，尽量推迟思考细节，你要确定的是，系统的各个部分是怎么结合形成一个整体的。</p>\n<h2 id=\"领域语言\"><a href=\"#领域语言\" class=\"headerlink\" title=\"领域语言\"></a>领域语言</h2><blockquote>\n<p>语言之界限，即是一个人世界之界限<br>——路德维希·维特根斯坦</p>\n</blockquote>\n<p>计算机语言会影响你怎样思考问题，影响你怎样看待信息的传播。每一门语言都有一个特性列表——静态类型、动态类型、mixin、函数式还是面向对象——所有这些对问题的解决方案，既可能是提供建议也可能扰乱视听。在一些案例中，<strong>高阶的程序员能跨越到下一个层级，不是用词汇表来编写代码，而直接用该领域的语言编程，直接使用该领域的词汇、语法和语义</strong>（DSL）</p>\n<p>对于传统的语言，例如 Java 这种，我们可能使用外部语言例如 XML 或者 JSON 需要编写额外的解析器，但是向现代语言例如 Kotlin 这种，它们对于 DSL 的支持是极为优秀的。我们可以通过现有的词汇表来轻松扩展出 DSL 语言来。</p>\n<p>从另一个角度思考，ChatGPT 以及 Copilot 的兴起和趋势。将编写业务代码的大部分工作交由 AI 来完成会提高我们的工作效率，理想情况下我们只需要提供边界完善和剪枝的操作。但是如何将业务需求转换为语言模型能够明确理解的文字，这也同样考验证的我们通过母语的编程能力，可以较为清晰的通过母语将需求与环境描述清楚，语言模型才能根据我们需要生成所需要的代码。我们在以后的需求场景可能要锻炼我们通过母语来编写伪代码的能力，以此来应对日新月异的 AI 发展，和提高自己的工作效率</p>\n<h2 id=\"估算\"><a href=\"#估算\" class=\"headerlink\" title=\"估算\"></a>估算</h2><p>在接收到一个问题或是需求时，我们通过对估算，可以快速判断该事件的可行性。而估算的前提是——<strong>对问题建模</strong>。当我们理解问题或是需求时，就开始为之建立一个粗略的思维框架模型。在建模的过程中，你可以发现一些表面上看不出来的潜在模式和过程。在得到模型后，就可以将其分解成组件，你需要发掘出这些组件如何交互的数学规则。</p>\n<h3 id=\"如何估算项目进度\"><a href=\"#如何估算项目进度\" class=\"headerlink\" title=\"如何估算项目进度\"></a>如何估算项目进度</h3><ul>\n<li>RERT（ Program Evaluation Review Techningue ）每个 PERT任务都有一个乐观的、一个可能的和一个悲观的估算，像这种带着范围值的估算，他能避免最常见的估算错误因素。</li>\n<li>增量开发：将任务分为不同阶段，在每次迭代后，提炼其中的经验，完善对进度的控制。</li>\n</ul>\n<p>问题建模也是之后让 AI 编程的核心方法论，只有通过建模的形式，我们才可以将需求或问题清晰表达，以及将各个节点拆分成组件，再讲这些组件的模型在未实现实际代码时就明确的划分其职责和功能</p>\n<h1 id=\"基础工具\"><a href=\"#基础工具\" class=\"headerlink\" title=\"基础工具\"></a>基础工具</h1><h2 id=\"纯文本\"><a href=\"#纯文本\" class=\"headerlink\" title=\"纯文本\"></a>纯文本</h2><p>作为程序员，我们基础材料不是木头或铁块，而是知识。我们把需求以知识的形式收集起来，然后在设计、实现出、测试和文档中表达这些知识。纯文本，则是我们认为是将知识持久地存储下来的最佳格式。</p>\n<p>所谓的纯文本并不是但只是指 txt 格式的文件，而是可以任何可以被人类直接阅读，编辑器可以直接解析的文本数据。纯文本的优势是</p>\n<ul>\n<li>防备老化的保险 —— 如今的很多知识软件的使用和更新都依赖于网络和维护，，当存储数据的应用程序生命周期结束后，如果它不支持导出纯文本数据，那么你在应用程序中存储的知识想要重新使用起来就极为困难了。</li>\n<li>易于检索——使用纯文本记录，我们可以无缝的使用版本管理来管理修改记录，通过 Shell 功能来任意搜索和匹配你的知识，也可以扔到一些文本编辑器中快速查找。而不需要依赖于特定的软件，和它们垃圾的检索功能（例如微信）</li>\n<li><strong>熟练使用编辑器以及 Shell</strong> —— 图形工具的好处自安于 WYSIWYG （所见即可得）；弱势之处是 WYSIAYG（所见即全部），如果图形工具的设计者没有为你的额外的需求设计钩子，那你就是做不到。而借助编辑器和 Shell 强大的生态和泛用性，你可以组合它们获得十分强大的能力，且这份知识还是通用的，它并不局限于某个 IDE 中。</li>\n<li><strong>充当配置项</strong> —— 配置项可以让你迫使你解除你的设计的耦合，从而带来更灵活可适应性更好的程序</li>\n</ul>\n<h2 id=\"工程日记\"><a href=\"#工程日记\" class=\"headerlink\" title=\"工程日记\"></a>工程日记</h2><p>日记的好处</p>\n<ul>\n<li>它比记忆更加可靠</li>\n<li>它为提供了一个地方，用来保存于当前任务无关的想法。这样你就可以继续专注正在做的事情，并指导这个伟大的想法不会被遗忘</li>\n<li>它就像一个橡皮鸭。当你停下来，把东西写上去的时候，大脑可能会换挡，几乎就像在和某个人说话一样——这是一个反思的好机会。你可以在开始做笔记的时候，突然意识到刚刚做的事情，也就是笔记的主题是完全错误的。</li>\n</ul>\n<p>还有一个额外的好处，你能时不时的想起很多年前你在做什么，会想起那些人、那些事，以及那些糟糕的衣服和发型。</p>\n<h1 id=\"务实的偏执\"><a href=\"#务实的偏执\" class=\"headerlink\" title=\"务实的偏执\"></a>务实的偏执</h1><blockquote>\n<p>自责中往往有种奢侈。我们自责时，总觉得别人无权再则被我们<br>—— 奥斯卡·王尔德《道林·格雷的画像》</p>\n</blockquote>\n<h3 id=\"BDC-契约式编程\"><a href=\"#BDC-契约式编程\" class=\"headerlink\" title=\"BDC 契约式编程\"></a>BDC 契约式编程</h3><h3 id=\"TDD-测试驱动开发\"><a href=\"#TDD-测试驱动开发\" class=\"headerlink\" title=\"TDD 测试驱动开发\"></a>TDD 测试驱动开发</h3><p>作者讲述了 BDC 和 TDD 的开发模式，主要是针对防御式编程和断言式编程的理念的推崇 —— 及在代码设计阶段把边界条件思考充分，并进行 Check . 在出现问题时，及早将异常抛出，避免进一步危害整个系统。这是一个合格程序员的基本功，也没有什么特别的方法论。其中值得称道就是断言编程的开关性，我们可以像一个 Google 源码一样，只在 debug 模式中开启断言，这样可以日常开发和测试流程时就把一些问题明显的暴露出来。而在生产模式中，秉承着用户优先和性能损耗的理念。我们可以关掉断言，补充日志。</p>\n<h3 id=\"很多时候，明天看起来会和今天差不多，但不要指望一定会这样\"><a href=\"#很多时候，明天看起来会和今天差不多，但不要指望一定会这样\" class=\"headerlink\" title=\"很多时候，明天看起来会和今天差不多，但不要指望一定会这样\"></a>很多时候，明天看起来会和今天差不多，但不要指望一定会这样</h3><ul>\n<li>在做设计与维护的时候，对超过可见范围的模块的维护和设计，并不一定需要浪费精力为不确定的未来做设计（徒增复杂性，像另一本书降到，Android 0.x 版本时，硬件是不支持 GPU 的，而负责开发的 Google 工程师在制作图形渲染这一块时，并没有设计整个系统，而是设计了一块虚拟的 GPU，当 Android 后续的版本支持 GPU 后，只需要将虚拟 GPU 的模块替换掉，系统的设计仍然保留），还不如将代码设计成可替换的。使代码可替换，还有助于提高内内聚性、解耦和 DRY，从而实现更好的设计。</li>\n<li>软件开发中，总是采取经过深思熟虑的小步骤，同时检查反馈，并在推进前不断调整。把反馈的速率当做速度限制，永远不要进行 “太大” 的任务步骤</li>\n</ul>\n<h1 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h1><p>并发性是指两个或更多个代码在执行过程中表现得像是在同时运行一样。并行性则值得是它们的确是在同一时刻运行。</p>\n<p>像获得并发性，需要在一个特殊的环境下运行下运行。当代码运行时，这个环境可以在其不同部分之间切换执行过程。这样的环境通常基于线程、进程、携程来实现</p>\n<p>像获得并行性，则需要又可以同时做两件事情的硬件，通常是同一 CPU 上的多核心，同一机器上的多个 CPU 或连接在一起的多台计算机。</p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><ul>\n<li>时刻注意你在做什么，事情往往是慢慢失去控制的</li>\n<li>你能向一个更初级的程序员详细解释一下代码么？如果做不到，也许可能正在依赖某个巧合</li>\n<li>要按计划推行，无论这个计划是以什么形式存在</li>\n<li><strong>不要只测试代码，还要测试猜测。去实际试一下一些假设以及边界条件，确定你的代码在你所能预知的场景都能正常工作</strong></li>\n<li>为你的精力投放安排一个优先级。要把时间花在重要的方面。</li>\n</ul>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>软件开发最常见的隐喻是建筑的构建。商务人士对建筑的隐喻感到很舒服：它是科学的，可重复的，管理上有严格的汇报层次结构，等等。但实际上园艺的隐喻更接近于现实的软件开发：它更像一个有机体而非钻石堆砌，你需要不断观测花园的健康状态，根据需要对（土壤、职务、布局）做出调整。</p>\n<h3 id=\"如何重构\"><a href=\"#如何重构\" class=\"headerlink\" title=\"如何重构\"></a>如何重构</h3><ul>\n<li>不要试图让重构和添加功能同时进行</li>\n<li>在开始重构之前，确保有良好的拥有良好的测试环境。尽可能多地运行测试。这样，如果变更破坏了任何东西，都将尽快得知。</li>\n<li>采取简短慎重的步骤：将字段从一个类移动到另一个类，拆分方法，重命名变量。重构通常涉及对许多全局变量的修改，这些局部变量会导致更大范围的修改，若果保持小步骤，并在每个步骤之后进行测试，就能避免冗长的调试。</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>测试的好处主要发生在你考虑测试以及编写测试的时候，而不是在运行测试的时候。</p>\n<p>你编写的所有软件都将进行测试 —— 如果不是你和你的团队测试，那就要由最终用户测试 —— 所以你最好计划对其进行彻底的测试。 一点预先的准备可以大大降低维护费用，减少客诉。</p>\n<h1 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h1><blockquote>\n<p>完美，不是在没有什么需要增加，而是在没有什么需要去掉时达到的</p>\n</blockquote>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><h3 id=\"挖掘需求\"><a href=\"#挖掘需求\" class=\"headerlink\" title=\"挖掘需求\"></a>挖掘需求</h3><p>找出用户为何要做特定事情的原因，而不只是他们目前做这件事的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不是满足他们陈述的需求。用户文档记载需求背后的原因将在每天进行实现决策时给你的团队带来无价的信息。</p>\n<h3 id=\"明确需求\"><a href=\"#明确需求\" class=\"headerlink\" title=\"明确需求\"></a>明确需求</h3><p>用户陈述的的要求并不一定是真正的需求。例如 “只有员工的上级和人事部门此案可以查看员工的档案” 这个陈述今天看来也许是个需求，但是由于它在陈述中嵌入了商业政策，而政策会经常改变，改变可能只是一些相对微妙的区别，但是对开发者来说就却有深远的影响。如果需求被陈述为 “只有人事部门才能查看员工档案” —— 开发者最后就可能编写在每次客户端访问时，进行明确的检查。但是如果陈述是 “只有授权的用户才可以访问员工档案”，开发者就可能设计一套完整的访问控制系统，当政策改变时，只有该系统的元数据需要修改。</p>\n<p>所以我们可能不并不想把他硬性的写入我们的需求中。最好的是把政策和需求文档分开，需求作为研发目标输出给开发者，而政策则是他们需要在实现中支持的事物类型的例子。最后，政策可以成为应用中的元数据。</p>\n<h3 id=\"需求文档\"><a href=\"#需求文档\" class=\"headerlink\" title=\"需求文档\"></a>需求文档</h3><p>制作需求文档时的一大危险是太过具体。好的需求文档会保持抽象。在涉及需求的地方，最简单的准确地反映商业需求要的陈述是最好的。这并非意味着你可以含糊不清 —— 你必须把底层的语义不变项当作需求进行捕捉，并把具体的或当前的工作实践当作政策进入文档。</p>\n<p>—— 需求不是架构。需求不是设计，也不是用户界面。需求是需要。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>对谜题的所有解决方案进行陈列，分解。并解释为何不能采用这个方案，确定么，是否能证明？</li>\n<li>自我提问，确定问题的核心以及当前的疑惑的是否是真正的问题还是外围的技术问题转移了注意力？</li>\n</ul>\n<h1 id=\"傲慢与偏见\"><a href=\"#傲慢与偏见\" class=\"headerlink\" title=\"傲慢与偏见\"></a>傲慢与偏见</h1><p>注重实效的程序员不会逃避责任。相反，我们乐于接受挑战，乐于使我们的专业知识广为认知。如果我们在负责一项设计，或是一段代码，我们是在做可以引以为豪的工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这本书的上一版《从小工到专家》其实我就早有耳闻了，但是当时觉得这个翻译的名字很糟糕，且周围并没有人去推荐它，我就打消了看它的念头。然后今年闲暇下来发现这本书的再版，书籍的名称也变为了《程序员修炼之道》，抱着看闲书和京东打折的契机，把它买了下来。看完两章发现自己两年前错失了一部能快速获得经验，提高生产力的的书籍。书有可前浅尝者、有可吞食者，少数需咀嚼消化，这本书我认为就属于需要咀嚼消化的那种书，帮助你提取一些之前成功项目的的原因，也可以让你思考生活与工作遇到同一类问题的处理方式。</p>\n<h1 id=\"务实的方法\"><a href=\"#务实的方法\" class=\"headerlink\" title=\"务实的方法\"></a>务实的方法</h1><h2 id=\"人生是你的\"><a href=\"#人生是你的\" class=\"headerlink\" title=\"人生是你的\"></a>人生是你的</h2><blockquote>\n<p>我活着不是为了满足你的期望，正如你不是因为我的期望而活着<br>—— 李小龙</p>\n</blockquote>\n<p>软件开发在任何职业列表中，都绝对是你自己最能掌控的职业之一。我们的技能供不应求，我们的知识不限于地域，我们可以远程工作。我们收入颇丰。我们真的可以做到我们任何想做的事。但是总有一些原因导致开发者们拒绝改变，他们蜷缩在那里，期盼事情会自己变好，眼睁睁的看着自己的技能过时，再去抱怨世界日新月异，工作环境糟糕。</p>\n<p>虽然看起来作者有种何不食肉糜的感觉，但其实在现如今的行业划分里，软件开发确实是最能自己掌握的职业之一。互联网上基本上有你所需要的所有资料，而且即使你只会一种编程语言，今年你可以做金融，明年就可以无缝做购物，后年可以跑去做车载，你的职业经验仍然大部分适用。<strong>职业环境并不会对你的事业有很大的限制，能限制的只有你自己。</strong></p>\n<h2 id=\"我的源码被猫吃了\"><a href=\"#我的源码被猫吃了\" class=\"headerlink\" title=\"我的源码被猫吃了\"></a>我的源码被猫吃了</h2><blockquote>\n<p>如果你面临供应商帮不上忙这样的风险，就应该制定一个应急方案。如果磁盘挂起——你所有的源码都在里面，这就是你的错。跟你的老板说“我的源码都被猫吃了” 解决不了问题</p>\n</blockquote>\n<h3 id=\"团队信任\"><a href=\"#团队信任\" class=\"headerlink\" title=\"团队信任\"></a>团队信任</h3><p>你的团队需要你能信赖和依赖你——你也应该同样地放心依赖他们每个人</p>\n<ul>\n<li>不必直接掌控事情的各个方面</li>\n<li>表达你的思想，说出你的想法。缔造一个以信任为基础的健康环境</li>\n</ul>\n<h3 id=\"承担责任\"><a href=\"#承担责任\" class=\"headerlink\" title=\"承担责任\"></a>承担责任</h3><p>在承接需求或任务前，你必须分析超出你控制范围的风险情况，如果责任的伦理内含过于含糊，或是面对无法实现的情况，亦或是风险过大，你都有权不承担责任。在这个阶段就及时把问题抛出，重新评估任务的可行性或是明确风险情况的责任人</p>\n<p>在决定对一个结果承担责任时，要明白你将承接相关的义务。当你犯了错误，或是做出了错误的判断，诚实地承认它，并尝试给出选择</p>\n<p><strong>给出选择，而非借口</strong> 给出选择并非要求你一定像上文例子里一样，做事都有 plan B, 即使在世界末日都能从兜里掏一台时空穿梭器。而是你跑过去告诉他们坏消息前，最好能解释下做些什么才能挽回局面。队友和领导都很乐于与这种人公事，他们在这种场景下能以更低的成本去参与到新问题和新需求的处理中</p>\n<h2 id=\"软件的熵\"><a href=\"#软件的熵\" class=\"headerlink\" title=\"软件的熵\"></a>软件的熵</h2><p>虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵增加重击。<strong>熵</strong>是一个物理学术语，它定义了一个系统的“无序”总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。而软件开发因为各种 Bug 的修复，需求的新增和补充，软件的复杂度和无序化也在逐步增加，本小节主要是探讨如何避免软件的熵的增加</p>\n<ul>\n<li>“破窗效应”——制定了规则就要需要严格遵守，例如 Code Review 、Code Lint 软件架构 等 ，这些规则都是为了保持软件的可读性以及降低程序的复杂性，既然制定了就要好好遵守，而非流于表面。窗户一旦开始破裂，运转良好的系统会迅速恶化。</li>\n<li>“领头羊效应”—— 在必要的时候，主动承担责任，做推动变革的催化剂。</li>\n<li>“温水煮青蛙”—— 留意大局，持续不断的审视你身边发生的事情，不要只专注你个人在做的事情。即使你只负责部分的事务，也需要对宏观上能影响你的事件保持敏锐。</li>\n</ul>\n<h2 id=\"做够好即可的软件\"><a href=\"#做够好即可的软件\" class=\"headerlink\" title=\"做够好即可的软件\"></a>做够好即可的软件</h2><blockquote>\n<p>为了追求更好，我们毁损了原已够好的<br>—— 莎士比亚《李尔王》</p>\n</blockquote>\n<p>现实世界不会让我们生产出真正完美的产品，尤其是没有 Bug 的软件。时间、技术、急躁合力对抗着我们。对软件开发者来说要明白以下几点</p>\n<ul>\n<li>将质量视为需求问题——对于你创建的系统，其应用领域和要达到的质量，必须作为系统需求的一部分加以讨论</li>\n<li>让用户参与权衡—— 无视用户的需求，一味的堆砌功能，一次次打磨代码，这是不专业的表现。你可能会承诺一个无法兑现的时间尺度，然后为了赶上截止日期，再回过头去删减工程。</li>\n<li>知道何时止步——不要让过度地修饰和精炼侵蚀掉一个完好的程序。继续前行，让代码在它该有的位置驻留一段时间。它或许不完美，不要紧的 —— 它就算不完美也没关系 (这部分代码既不影响性能，也不影响功能，你可能永远都不需要再改动它了)</li>\n</ul>\n<h2 id=\"知识组合\"><a href=\"#知识组合\" class=\"headerlink\" title=\"知识组合\"></a>知识组合</h2><blockquote>\n<p>投资知识，收益最佳<br>—— 本杰名·富兰克林</p>\n</blockquote>\n<p>知识和经验的确是你最重要的专业资产，可惜的是，它们是一种时效性资产。随着新技术的出现，以及语言和环境的发展，你的知识会变得过时 。不断变化的市场力量可能会使得经验变得陈旧而无关紧要。鉴于技术社会变化的速度越来越快，这种事情可能会发生得特别迅速。当你的知识价值下降时，你对于公司和客户的价值也在下降。想要阻止这一切的发生，学习新事物的能力是你重要的战略资产。</p>\n<p>管理知识组合和管理金融投资组合非常的类似：</p>\n<ol>\n<li>正规投资有<strong>定期投资</strong>的习惯<br>及时更新自己的专业视野，了解新的工具和技能，阅读相关的新闻和技术贴。</li>\n<li><strong>多样化</strong>是长线成功的关键<br>扩展自己的技能领域，熟悉的技能越多，越能适应变化</li>\n<li>聪明的投资者会<strong>平衡</strong>保守型和高风险形回报投资的<strong>组合</strong><br>及时了解新的行业动向，并尝试接触与学习，不要去当听众，主动参与。</li>\n<li>投资者用<strong>低买高卖</strong>来获得最大的回报<br>例如前些年的大数据、前端开发，又如现在的低代码以及车联网。它们在这时会有相较于平常较高的溢价，如果你有足够的能力和储备，那么你可以在工作回报上又较高的提升，但需要明确的是，在蓝海回归红海后，也可能有较大的风险。需要你有应对风险的能力</li>\n<li>定期审查和<strong>重新平衡投资</strong>组合<br>根据当前的行业趋势，去重新审视自己的技术树，调整自己学习的优先级</li>\n</ol>\n<blockquote>\n<p>是否在某个项目中使用这些技术或者是否把它放入你的简历中，这并不重要。学习的过程将扩展你的思维，使你向着新的可能性和新的做事方式扩展。思想的“异化授粉”（cross-pollination) 十分重要。设法把你所学的东西应用到你当前的项目中，即使你的项目没有使用该技术，你也可以借鉴一些想法</p>\n</blockquote>\n<h3 id=\"学习的机会\"><a href=\"#学习的机会\" class=\"headerlink\" title=\"学习的机会\"></a>学习的机会</h3><ul>\n<li>提前把一些资料准备在触手可及的地方，在有兴趣的时候能够及时拿到</li>\n<li>把找到答案当做一个个人挑战，去尝试用各种方法更新自己的知识组合</li>\n<li>不要把问题搁置，自己找不到答案，就去找出能找到答案的人。与他人交谈既可以帮你建立人际网络，在这个过程中也可以受益良多</li>\n</ul>\n<h3 id=\"批判性思维\"><a href=\"#批判性思维\" class=\"headerlink\" title=\"批判性思维\"></a>批判性思维</h3><blockquote>\n<p>Critically Analyze What You Read and Hear</p>\n</blockquote>\n<p>批判性思考读到的和听到的东西。你需要确保组合中的知识是精准的，未受到创作者的影响。</p>\n<p>批判性思维是一门完整的学科，这里起个头：</p>\n<ul>\n<li>问 “五个为什么” —— 在得到答案后继续为什么，来更接近本源。在日常沟通中要注意技巧，防止认为是挑衅而被揍</li>\n<li>谁从中受益——虽然听起来比较世俗，不过这样更容易理清脉络</li>\n<li>有什么背景——每件事都发生在它自己的背景下，这也是为何“能解决所有问题”的方案通常不存在，而那些兜售“最佳实践”的书或文章经不起推敲（好吐槽）</li>\n</ul>\n<h2 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h2><blockquote>\n<p>我认为被人从头打量到脚总比被人视而不见的好<br>—— 《九十岁的美女》</p>\n</blockquote>\n<p>只是拥有是不够的，还要看你如何包装它。即使拥有最好的想法、漂亮的代码、最务实的思想，如果不能和它人交流，最终都无法孕育出果实。</p>\n<p>把你的母语当做一门编程语言，像写代码一样用自然语言写文章，尊重DRY原则，ETC、自动化 等等（后续会提到）。</p>\n<ul>\n<li>了解听众 —— 根据听众不同，选择用不同的方式和风格描述你要介绍的系统</li>\n<li>明白自己想说什么 —— 写好大纲，提炼核心</li>\n<li>选择时机 —— 确定轻重缓急</li>\n<li>让听众参与——让听众参与,把会议变成一场谈话，你可以更有效地表达你自己的观点，还可以听取他们的反馈，汲取他们的智慧。</li>\n<li>发送文字前检查拼写和接收人</li>\n</ul>\n<h1 id=\"务实的方法-1\"><a href=\"#务实的方法-1\" class=\"headerlink\" title=\"务实的方法\"></a>务实的方法</h1><blockquote>\n<p>有一些技巧和方法适用于软件开发的所有层级，其中蕴含的思想几乎成了公理，实施过程中也非常通用。然而，这些方法很少被规范成文档。现在，这些想法和过程集中这里。形成了 DRY ETC 等原则，以及原型和便签等方法论</p>\n</blockquote>\n<h2 id=\"ETC-Easier-To-Change\"><a href=\"#ETC-Easier-To-Change\" class=\"headerlink\" title=\"ETC (Easier To Change)\"></a>ETC (Easier To Change)</h2><p>能适应使用者的就是好的设计。对代码而言，就是要顺应变化（让代码更容易阅读、解耦、单一职责、可替换）ETC（更容易变更） 是一种价值观念，而不是一条规则；当你在<strong>软件领域思考时，ETC 是个向导，它能帮助你在不同路线中选出一条</strong>。</p>\n<p>在你有能力辨别时，常识通常都不会错，有事如果你找不到线索，你可以做以下的事情</p>\n<ol>\n<li>假设不确定什么形式的改变会发生，那么就回到问题的可能产生的源头——让你的写的东西可替换。这样无论将来发生了什么，这块代码都不会称为障碍。</li>\n<li>把它当做培养直觉的一种方式。在工程日记中留下你面临的处境：你有哪些选择，以及改变的一些猜测。以便以后必须修改这块代码时，方便回顾。在在遇到类似的分叉口时，这会有所帮助。</li>\n</ol>\n<h2 id=\"DRY-Dot-Replay-You\"><a href=\"#DRY-Dot-Replay-You\" class=\"headerlink\" title=\"DRY (Dot Replay You)\"></a>DRY (Dot Replay You)</h2><p>知识并不稳定，知识会改变——通常频率还很高。可能只要和客户开个会，对需求的理解马上就变了。政府改了条规定，一些逻辑就过时了。当我们进行维护时，必须找到变更事物的表达——那些嵌入程序的知识胶囊。问题是，在规范、流程、开发的程序中复制知识太容易了，一旦我们动手这么做，就会招致维护的噩梦。想要可靠地开发软件，或让开发项目变得跟容易理解和维护，唯一的方法是遵循 <strong>DRY 原则—— 在一个系统中，每一处知识都必须单一、明确、权威的表达</strong></p>\n<p>DRY 指的不要重复自己，所以它并不是但指的“不要复制粘贴底代码”，这的确是 DRY 的组成部分，但这是很小的部分，一点都不重要。</p>\n<p>DRY 针对的是你对知识和意图的复制，它强调的是，如果两个地方表达的东西其实相同的，只是表达方式不同，那么它也违反了 DRY 原则。同理，如果两个地方的表达方式完全相同，但他们在不同模块中承担不同的职责，那么他们并不违反 DRY 原则。</p>\n<h3 id=\"Code-Lab\"><a href=\"#Code-Lab\" class=\"headerlink\" title=\"Code Lab\"></a>Code Lab</h3><ul>\n<li>统一访问原则——《面向对象软件构造》中描述：一个模块提供的服务都应该通过统一的约定来提供，该约定不应该表露出其实现是基于储存还是基于运算。</li>\n<li>你努力的方向，应该是孕育出一个更容易找到和复用已有事物的环境，而不是自己重新编写。若果复用不容易，人们就不会这么做。如果你未能复用，就有重复知识的风险</li>\n</ul>\n<h2 id=\"正交性\"><a href=\"#正交性\" class=\"headerlink\" title=\"正交性\"></a>正交性</h2><p>“正交性”是从几何学中借用来的术语。若两条直线相交后构成直角，它们就是正交。</p>\n<p><img src=\"/img/post-icon-xiulian-01.png\" alt=\"线段 AB 与 CD 彼此正交\"></p>\n<p>线段 AB 与 CD 彼此正交</p>\n<p> 在计算科学中，这个术语象征着独立性和解耦性。良好的架构系统中，两个模块之间应该相互独立，其中一个模块的修改不应该影响另一个模块。正交的系统可以提高生产力和降低风险，更好的应对不断变化的业务和需求。</p>\n<p>如何保持系统的正交性：</p>\n<ul>\n<li>保持代码解耦、避免全局数据、避免相似的函数</li>\n<li>养成不断质疑代码的习惯。有机会就重新组织、改善其结构性和正交性</li>\n<li>基于正交性设计和实现的系统更容易测试。因此编写单元测试本身就是一个有趣的正交性测试。做什么才能让单元测试构建并运行起来？如果需要导入系统其余的大部分代码，那么恭喜你就发现一个与系统其余部分没有很好解耦的模块</li>\n<li><strong>记录并评估和问题的修复方案和范围</strong>，对已经修复的问题归档和记录，在阅读报告中去分析每个 Bug 修复的所影响的模块和文件数量趋势。以此来发觉系统中不稳定的模块，或是设计的不正交的模块。</li>\n</ul>\n<h2 id=\"可逆性\"><a href=\"#可逆性\" class=\"headerlink\" title=\"可逆性\"></a>可逆性</h2><ul>\n<li>保持灵活的架构</li>\n<li>放弃追逐时尚</li>\n</ul>\n<h2 id=\"曳光弹\"><a href=\"#曳光弹\" class=\"headerlink\" title=\"曳光弹\"></a>曳光弹</h2><p>曳光弹能够快速抵达目标，枪手可以得到及时反馈——如果曳光弹集中了目标，那么之后的常规子弹也会被击中。</p>\n<p>同样地原则也适用于做项目。特别是在要构建一些从做过的东西时，我们可以进行曳光弹式的开发</p>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>能够构造一个在其中工作的框架（Core）</li>\n<li>能对进度有更好的感觉，通过对这些案例的更重，度量性能和向用户展示进度要容易的多</li>\n<li>更小的试错成本，你可以将核心部分快速同用户沟通展示，确认是否是它们想要的。以更快的速度，更小的成本收集到程序的反馈，并生成一个更准确的版本。</li>\n</ul>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><ul>\n<li>在需求评审和开发阶段，寻找需要的核心部分，那些定义了系统的部分，有重大风险的地方。然后对这部分排列优先级，优先从这里处理。</li>\n<li>注意曳光弹的场景是快速构建一个完整系统的雏形，并非是制作原型</li>\n</ul>\n<h3 id=\"与原型的区别\"><a href=\"#与原型的区别\" class=\"headerlink\" title=\"与原型的区别\"></a>与原型的区别</h3><p>原型制作生成的是一次性代码，曳光弹虽然简单，但它是完整的，是最终框架的组成部分。<strong>原型是用来验证方案的可行性，而曳光弹是用来验证系统的可行性</strong>。</p>\n<h2 id=\"原型制作\"><a href=\"#原型制作\" class=\"headerlink\" title=\"原型制作\"></a>原型制作</h2><blockquote>\n<p>原型制作是为了学习经验。它的价值不在于产生的代码，而在于吸取的教训。这正式原型的意义所在</p>\n</blockquote>\n<p>原型制作比完整的产品制作要便宜得多。因此我们可以通过制作原型来分析和暴露风险，以一种大幅减低成本的方式获得修正的机会。原型被设计出来，只是为了回答问题的答案，因此可以忽略很多不重要的细节。但如果你发现自己处在于一个不能放弃细节的环境中。那么可能曳光弹式开发更适合你。</p>\n<p>当你制作原型时，哪些细节可以忽略：</p>\n<ul>\n<li>正确性——你可以在适当的时候替代掉数据</li>\n<li>完整性——原型只需要满足优先的功能</li>\n<li>健壮性——错误和边界条件并不是必须的，你只需要验证特定的航线</li>\n<li>格    式—— 并不需要太多的注释和文档</li>\n</ul>\n<p>制作原型时，尽量推迟思考细节，你要确定的是，系统的各个部分是怎么结合形成一个整体的。</p>\n<h2 id=\"领域语言\"><a href=\"#领域语言\" class=\"headerlink\" title=\"领域语言\"></a>领域语言</h2><blockquote>\n<p>语言之界限，即是一个人世界之界限<br>——路德维希·维特根斯坦</p>\n</blockquote>\n<p>计算机语言会影响你怎样思考问题，影响你怎样看待信息的传播。每一门语言都有一个特性列表——静态类型、动态类型、mixin、函数式还是面向对象——所有这些对问题的解决方案，既可能是提供建议也可能扰乱视听。在一些案例中，<strong>高阶的程序员能跨越到下一个层级，不是用词汇表来编写代码，而直接用该领域的语言编程，直接使用该领域的词汇、语法和语义</strong>（DSL）</p>\n<p>对于传统的语言，例如 Java 这种，我们可能使用外部语言例如 XML 或者 JSON 需要编写额外的解析器，但是向现代语言例如 Kotlin 这种，它们对于 DSL 的支持是极为优秀的。我们可以通过现有的词汇表来轻松扩展出 DSL 语言来。</p>\n<p>从另一个角度思考，ChatGPT 以及 Copilot 的兴起和趋势。将编写业务代码的大部分工作交由 AI 来完成会提高我们的工作效率，理想情况下我们只需要提供边界完善和剪枝的操作。但是如何将业务需求转换为语言模型能够明确理解的文字，这也同样考验证的我们通过母语的编程能力，可以较为清晰的通过母语将需求与环境描述清楚，语言模型才能根据我们需要生成所需要的代码。我们在以后的需求场景可能要锻炼我们通过母语来编写伪代码的能力，以此来应对日新月异的 AI 发展，和提高自己的工作效率</p>\n<h2 id=\"估算\"><a href=\"#估算\" class=\"headerlink\" title=\"估算\"></a>估算</h2><p>在接收到一个问题或是需求时，我们通过对估算，可以快速判断该事件的可行性。而估算的前提是——<strong>对问题建模</strong>。当我们理解问题或是需求时，就开始为之建立一个粗略的思维框架模型。在建模的过程中，你可以发现一些表面上看不出来的潜在模式和过程。在得到模型后，就可以将其分解成组件，你需要发掘出这些组件如何交互的数学规则。</p>\n<h3 id=\"如何估算项目进度\"><a href=\"#如何估算项目进度\" class=\"headerlink\" title=\"如何估算项目进度\"></a>如何估算项目进度</h3><ul>\n<li>RERT（ Program Evaluation Review Techningue ）每个 PERT任务都有一个乐观的、一个可能的和一个悲观的估算，像这种带着范围值的估算，他能避免最常见的估算错误因素。</li>\n<li>增量开发：将任务分为不同阶段，在每次迭代后，提炼其中的经验，完善对进度的控制。</li>\n</ul>\n<p>问题建模也是之后让 AI 编程的核心方法论，只有通过建模的形式，我们才可以将需求或问题清晰表达，以及将各个节点拆分成组件，再讲这些组件的模型在未实现实际代码时就明确的划分其职责和功能</p>\n<h1 id=\"基础工具\"><a href=\"#基础工具\" class=\"headerlink\" title=\"基础工具\"></a>基础工具</h1><h2 id=\"纯文本\"><a href=\"#纯文本\" class=\"headerlink\" title=\"纯文本\"></a>纯文本</h2><p>作为程序员，我们基础材料不是木头或铁块，而是知识。我们把需求以知识的形式收集起来，然后在设计、实现出、测试和文档中表达这些知识。纯文本，则是我们认为是将知识持久地存储下来的最佳格式。</p>\n<p>所谓的纯文本并不是但只是指 txt 格式的文件，而是可以任何可以被人类直接阅读，编辑器可以直接解析的文本数据。纯文本的优势是</p>\n<ul>\n<li>防备老化的保险 —— 如今的很多知识软件的使用和更新都依赖于网络和维护，，当存储数据的应用程序生命周期结束后，如果它不支持导出纯文本数据，那么你在应用程序中存储的知识想要重新使用起来就极为困难了。</li>\n<li>易于检索——使用纯文本记录，我们可以无缝的使用版本管理来管理修改记录，通过 Shell 功能来任意搜索和匹配你的知识，也可以扔到一些文本编辑器中快速查找。而不需要依赖于特定的软件，和它们垃圾的检索功能（例如微信）</li>\n<li><strong>熟练使用编辑器以及 Shell</strong> —— 图形工具的好处自安于 WYSIWYG （所见即可得）；弱势之处是 WYSIAYG（所见即全部），如果图形工具的设计者没有为你的额外的需求设计钩子，那你就是做不到。而借助编辑器和 Shell 强大的生态和泛用性，你可以组合它们获得十分强大的能力，且这份知识还是通用的，它并不局限于某个 IDE 中。</li>\n<li><strong>充当配置项</strong> —— 配置项可以让你迫使你解除你的设计的耦合，从而带来更灵活可适应性更好的程序</li>\n</ul>\n<h2 id=\"工程日记\"><a href=\"#工程日记\" class=\"headerlink\" title=\"工程日记\"></a>工程日记</h2><p>日记的好处</p>\n<ul>\n<li>它比记忆更加可靠</li>\n<li>它为提供了一个地方，用来保存于当前任务无关的想法。这样你就可以继续专注正在做的事情，并指导这个伟大的想法不会被遗忘</li>\n<li>它就像一个橡皮鸭。当你停下来，把东西写上去的时候，大脑可能会换挡，几乎就像在和某个人说话一样——这是一个反思的好机会。你可以在开始做笔记的时候，突然意识到刚刚做的事情，也就是笔记的主题是完全错误的。</li>\n</ul>\n<p>还有一个额外的好处，你能时不时的想起很多年前你在做什么，会想起那些人、那些事，以及那些糟糕的衣服和发型。</p>\n<h1 id=\"务实的偏执\"><a href=\"#务实的偏执\" class=\"headerlink\" title=\"务实的偏执\"></a>务实的偏执</h1><blockquote>\n<p>自责中往往有种奢侈。我们自责时，总觉得别人无权再则被我们<br>—— 奥斯卡·王尔德《道林·格雷的画像》</p>\n</blockquote>\n<h3 id=\"BDC-契约式编程\"><a href=\"#BDC-契约式编程\" class=\"headerlink\" title=\"BDC 契约式编程\"></a>BDC 契约式编程</h3><h3 id=\"TDD-测试驱动开发\"><a href=\"#TDD-测试驱动开发\" class=\"headerlink\" title=\"TDD 测试驱动开发\"></a>TDD 测试驱动开发</h3><p>作者讲述了 BDC 和 TDD 的开发模式，主要是针对防御式编程和断言式编程的理念的推崇 —— 及在代码设计阶段把边界条件思考充分，并进行 Check . 在出现问题时，及早将异常抛出，避免进一步危害整个系统。这是一个合格程序员的基本功，也没有什么特别的方法论。其中值得称道就是断言编程的开关性，我们可以像一个 Google 源码一样，只在 debug 模式中开启断言，这样可以日常开发和测试流程时就把一些问题明显的暴露出来。而在生产模式中，秉承着用户优先和性能损耗的理念。我们可以关掉断言，补充日志。</p>\n<h3 id=\"很多时候，明天看起来会和今天差不多，但不要指望一定会这样\"><a href=\"#很多时候，明天看起来会和今天差不多，但不要指望一定会这样\" class=\"headerlink\" title=\"很多时候，明天看起来会和今天差不多，但不要指望一定会这样\"></a>很多时候，明天看起来会和今天差不多，但不要指望一定会这样</h3><ul>\n<li>在做设计与维护的时候，对超过可见范围的模块的维护和设计，并不一定需要浪费精力为不确定的未来做设计（徒增复杂性，像另一本书降到，Android 0.x 版本时，硬件是不支持 GPU 的，而负责开发的 Google 工程师在制作图形渲染这一块时，并没有设计整个系统，而是设计了一块虚拟的 GPU，当 Android 后续的版本支持 GPU 后，只需要将虚拟 GPU 的模块替换掉，系统的设计仍然保留），还不如将代码设计成可替换的。使代码可替换，还有助于提高内内聚性、解耦和 DRY，从而实现更好的设计。</li>\n<li>软件开发中，总是采取经过深思熟虑的小步骤，同时检查反馈，并在推进前不断调整。把反馈的速率当做速度限制，永远不要进行 “太大” 的任务步骤</li>\n</ul>\n<h1 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h1><p>并发性是指两个或更多个代码在执行过程中表现得像是在同时运行一样。并行性则值得是它们的确是在同一时刻运行。</p>\n<p>像获得并发性，需要在一个特殊的环境下运行下运行。当代码运行时，这个环境可以在其不同部分之间切换执行过程。这样的环境通常基于线程、进程、携程来实现</p>\n<p>像获得并行性，则需要又可以同时做两件事情的硬件，通常是同一 CPU 上的多核心，同一机器上的多个 CPU 或连接在一起的多台计算机。</p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><ul>\n<li>时刻注意你在做什么，事情往往是慢慢失去控制的</li>\n<li>你能向一个更初级的程序员详细解释一下代码么？如果做不到，也许可能正在依赖某个巧合</li>\n<li>要按计划推行，无论这个计划是以什么形式存在</li>\n<li><strong>不要只测试代码，还要测试猜测。去实际试一下一些假设以及边界条件，确定你的代码在你所能预知的场景都能正常工作</strong></li>\n<li>为你的精力投放安排一个优先级。要把时间花在重要的方面。</li>\n</ul>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>软件开发最常见的隐喻是建筑的构建。商务人士对建筑的隐喻感到很舒服：它是科学的，可重复的，管理上有严格的汇报层次结构，等等。但实际上园艺的隐喻更接近于现实的软件开发：它更像一个有机体而非钻石堆砌，你需要不断观测花园的健康状态，根据需要对（土壤、职务、布局）做出调整。</p>\n<h3 id=\"如何重构\"><a href=\"#如何重构\" class=\"headerlink\" title=\"如何重构\"></a>如何重构</h3><ul>\n<li>不要试图让重构和添加功能同时进行</li>\n<li>在开始重构之前，确保有良好的拥有良好的测试环境。尽可能多地运行测试。这样，如果变更破坏了任何东西，都将尽快得知。</li>\n<li>采取简短慎重的步骤：将字段从一个类移动到另一个类，拆分方法，重命名变量。重构通常涉及对许多全局变量的修改，这些局部变量会导致更大范围的修改，若果保持小步骤，并在每个步骤之后进行测试，就能避免冗长的调试。</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>测试的好处主要发生在你考虑测试以及编写测试的时候，而不是在运行测试的时候。</p>\n<p>你编写的所有软件都将进行测试 —— 如果不是你和你的团队测试，那就要由最终用户测试 —— 所以你最好计划对其进行彻底的测试。 一点预先的准备可以大大降低维护费用，减少客诉。</p>\n<h1 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h1><blockquote>\n<p>完美，不是在没有什么需要增加，而是在没有什么需要去掉时达到的</p>\n</blockquote>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><h3 id=\"挖掘需求\"><a href=\"#挖掘需求\" class=\"headerlink\" title=\"挖掘需求\"></a>挖掘需求</h3><p>找出用户为何要做特定事情的原因，而不只是他们目前做这件事的方式，这很重要。到最后，你的开发必须解决他们的商业问题，而不是满足他们陈述的需求。用户文档记载需求背后的原因将在每天进行实现决策时给你的团队带来无价的信息。</p>\n<h3 id=\"明确需求\"><a href=\"#明确需求\" class=\"headerlink\" title=\"明确需求\"></a>明确需求</h3><p>用户陈述的的要求并不一定是真正的需求。例如 “只有员工的上级和人事部门此案可以查看员工的档案” 这个陈述今天看来也许是个需求，但是由于它在陈述中嵌入了商业政策，而政策会经常改变，改变可能只是一些相对微妙的区别，但是对开发者来说就却有深远的影响。如果需求被陈述为 “只有人事部门才能查看员工档案” —— 开发者最后就可能编写在每次客户端访问时，进行明确的检查。但是如果陈述是 “只有授权的用户才可以访问员工档案”，开发者就可能设计一套完整的访问控制系统，当政策改变时，只有该系统的元数据需要修改。</p>\n<p>所以我们可能不并不想把他硬性的写入我们的需求中。最好的是把政策和需求文档分开，需求作为研发目标输出给开发者，而政策则是他们需要在实现中支持的事物类型的例子。最后，政策可以成为应用中的元数据。</p>\n<h3 id=\"需求文档\"><a href=\"#需求文档\" class=\"headerlink\" title=\"需求文档\"></a>需求文档</h3><p>制作需求文档时的一大危险是太过具体。好的需求文档会保持抽象。在涉及需求的地方，最简单的准确地反映商业需求要的陈述是最好的。这并非意味着你可以含糊不清 —— 你必须把底层的语义不变项当作需求进行捕捉，并把具体的或当前的工作实践当作政策进入文档。</p>\n<p>—— 需求不是架构。需求不是设计，也不是用户界面。需求是需要。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>对谜题的所有解决方案进行陈列，分解。并解释为何不能采用这个方案，确定么，是否能证明？</li>\n<li>自我提问，确定问题的核心以及当前的疑惑的是否是真正的问题还是外围的技术问题转移了注意力？</li>\n</ul>\n<h1 id=\"傲慢与偏见\"><a href=\"#傲慢与偏见\" class=\"headerlink\" title=\"傲慢与偏见\"></a>傲慢与偏见</h1><p>注重实效的程序员不会逃避责任。相反，我们乐于接受挑战，乐于使我们的专业知识广为认知。如果我们在负责一项设计，或是一段代码，我们是在做可以引以为豪的工作。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm10dl6oq0001s2y4emw0gq83","tag_id":"cm10dl6ow0004s2y4089qehol","_id":"cm10dl6p0000as2y427bsea1x"},{"post_id":"cm10dl6ov0003s2y4hlrqdq3d","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6p3000fs2y4cm7ie58j"},{"post_id":"cm10dl6oy0006s2y47sqld7oo","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6p6000js2y4f11t8xqz"},{"post_id":"cm10dl6oz0007s2y46jxu8u66","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6p7000ns2y40u5u93ej"},{"post_id":"cm10dl6p7000ms2y4hx0s9x85","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6p8000qs2y473idgtgw"},{"post_id":"cm10dl6oz0008s2y48onxatbz","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6p9000ss2y42a531av2"},{"post_id":"cm10dl6p1000bs2y4hxvld4ct","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6pb000ws2y455vvcpwe"},{"post_id":"cm10dl6p9000ts2y46n19hcpr","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pb000ys2y4dqms7cp3"},{"post_id":"cm10dl6p1000cs2y461hzfxut","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6pc0011s2y4gm2955j2"},{"post_id":"cm10dl6p2000es2y469nnhb1c","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pg0015s2y43jxl0eta"},{"post_id":"cm10dl6p2000es2y469nnhb1c","tag_id":"cm10dl6pb000zs2y46ze4a70m","_id":"cm10dl6pg0016s2y40z14hd2f"},{"post_id":"cm10dl6p3000gs2y49ztm9amk","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pg0018s2y4aoy02uvr"},{"post_id":"cm10dl6p3000gs2y49ztm9amk","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6pg0019s2y4h2yn8xw2"},{"post_id":"cm10dl6p5000is2y4ao4p7fel","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6ph001bs2y419upckkh"},{"post_id":"cm10dl6p5000is2y4ao4p7fel","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6ph001cs2y4cvm75jw7"},{"post_id":"cm10dl6p6000ks2y4c0b9hpi6","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6ph001es2y4bp9388bc"},{"post_id":"cm10dl6p6000ks2y4c0b9hpi6","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6pi001fs2y43wuv1vkm"},{"post_id":"cm10dl6p7000os2y42tsgfdox","tag_id":"cm10dl6ph001ds2y40vvqa9hw","_id":"cm10dl6pi001hs2y42zzkfabl"},{"post_id":"cm10dl6p8000rs2y4f4rbfy11","tag_id":"cm10dl6ph001ds2y40vvqa9hw","_id":"cm10dl6pi001js2y4figidz77"},{"post_id":"cm10dl6pa000vs2y4cxow9rh6","tag_id":"cm10dl6pi001is2y44ow1dpu9","_id":"cm10dl6pj001ls2y4he3n8lot"},{"post_id":"cm10dl6pb000xs2y410qd9dkf","tag_id":"cm10dl6pi001is2y44ow1dpu9","_id":"cm10dl6pj001os2y4hhop8dpj"},{"post_id":"cm10dl6pb000xs2y410qd9dkf","tag_id":"cm10dl6pj001ms2y4bzxffuuu","_id":"cm10dl6pj001ps2y4bwi54o6k"},{"post_id":"cm10dl6pb000xs2y410qd9dkf","tag_id":"cm10dl6p2000ds2y4evscds8d","_id":"cm10dl6pk001rs2y433nd7m2h"},{"post_id":"cm10dl6pc0010s2y4c03t66n6","tag_id":"cm10dl6pj001ns2y4eu466esz","_id":"cm10dl6pk001ss2y40e8se45h"},{"post_id":"cm10dl6pc0012s2y4fcq110hk","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6pk001us2y47ai77g7s"},{"post_id":"cm10dl6pf0014s2y43mnm630y","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6pk001vs2y4dho8d59h"},{"post_id":"cm10dl6po001xs2y4ecv12sor","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pp0020s2y4c88ef3r8"},{"post_id":"cm10dl6pp001zs2y42qm40ira","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pq0022s2y49edp8b89"},{"post_id":"cm10dl6pp001zs2y42qm40ira","tag_id":"cm10dl6pf0013s2y44a8o8bzz","_id":"cm10dl6pq0024s2y43ocw08iu"},{"post_id":"cm10dl6pp0021s2y4gsy921lj","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pr0025s2y41wkqdtk4"},{"post_id":"cm10dl6pq0023s2y43juhgy80","tag_id":"cm10dl6pi001is2y44ow1dpu9","_id":"cm10dl6pr0026s2y43vctaf9n"},{"post_id":"cm10dl6pr0027s2y49w67251q","tag_id":"cm10dl6p00009s2y432av986j","_id":"cm10dl6pt002cs2y40m1kc4ak"},{"post_id":"cm10dl6pr0027s2y49w67251q","tag_id":"cm10dl6ps0029s2y4578p0sz9","_id":"cm10dl6pt002ds2y4a4z2c5fe"},{"post_id":"cm10dl6ps002as2y4h33u3l5t","tag_id":"cm10dl6pt002es2y49l0d0r8v","_id":"cm10dl6pu002gs2y474c6g5no"},{"post_id":"cm10e7ttn00034oy41lil1cvs","tag_id":"cm10dnzhb0006dry4efv82rrz","_id":"cm10e9m200000vvy4e1wd4wrl"},{"post_id":"cm10e7ttn00034oy41lil1cvs","tag_id":"cm10dnu8x0003dry4911a5uhr","_id":"cm10e9td50001vvy44cnodry4"},{"post_id":"cm10e7ttn00034oy41lil1cvs","tag_id":"cm10dl6pj001ns2y4eu466esz","_id":"cm10eaenf0002vvy4eevednpx"}],"Tag":[{"name":"生活","_id":"cm10dl6ow0004s2y4089qehol"},{"name":"Android","_id":"cm10dl6p00009s2y432av986j"},{"name":"基础","_id":"cm10dl6p2000ds2y4evscds8d"},{"name":"Booklet","_id":"cm10dl6pb000zs2y46ze4a70m"},{"name":"Note","_id":"cm10dl6pf0013s2y44a8o8bzz"},{"name":"Gradle","_id":"cm10dl6ph001ds2y40vvqa9hw"},{"name":"Flutter","_id":"cm10dl6pi001is2y44ow1dpu9"},{"name":"Dart","_id":"cm10dl6pj001ms2y4bzxffuuu"},{"name":"Book","_id":"cm10dl6pj001ns2y4eu466esz"},{"name":"RecyclerView","_id":"cm10dl6ps0029s2y4578p0sz9"},{"name":"\\- Life","_id":"cm10dl6pt002bs2y40k6iggqv"},{"name":"HTTP","_id":"cm10dl6pt002es2y49l0d0r8v"},{"name":"Life","_id":"cm10dndee0001dry40gnv2xlb"},{"name":"方法论","_id":"cm10dnu8x0003dry4911a5uhr"},{"name":"读书笔记","_id":"cm10dnzhb0006dry4efv82rrz"}]}}